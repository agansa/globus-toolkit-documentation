<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<article id="quickstart" xreflabel="GT Quickstart">
<title>GT <replaceable role="entity">shortversion</replaceable> Quickstart</title>
  <titleabbrev>Quickstart</titleabbrev>

<articleinfo id="q-intro"><abstract><title>Introduction</title>
<para>
This is a quickstart that shows a full installation of the Toolkit
on two Debian 5.0 machines.  It shows the installation of prereqs, 
installation of the toolkit, creation of certificates, and configuration
of services.  It is designed to supplement the main admin guide.
</para></abstract>
</articleinfo>

<section id="q-first"><title>Setting up the first machine</title>

<section id="q-prereq"><title>Pre-requisites</title>

<para>I will be installing all of the toolkit from source, so
I'm going to double-check my system for pre-requisites.  The full list
of prereqs is available at 
  <olink targetdoc="gtadmin" targetptr="gtadmin-prereq">Software Prerequisites</olink> in the GT <replaceable role="entity">shortversion</replaceable> Admin Guide.
</para>


<para>First I'll check for security libraries:
<screen>
<prompt>elephant %</prompt> <userinput>openssl version</userinput>
OpenSSL 0.9.8g 19 Oct 2007

<prompt>elephant %</prompt> <userinput>dpkg --list | grep libssl</userinput>
ii  libssl-dev              0.9.8g-15+lenny5           SSL development libraries, header files and documentation
ii  libssl0.9.8             0.9.8g-15+lenny5           SSL shared libraries
  
  
<prompt>elephant %</prompt> <userinput>dpkg --list | grep zlib</userinput>
ii  zlib1g                  1:1.2.3.3.dfsg-12          compression library - runtime
ii  zlib1g-dev              1:1.2.3.3.dfsg-12          compression library - development

</screen>
openssl 0.9.7 (or newer, 0.9.8 is okay) and the zlib and libssl development libraries are required.
</para>
<note>
<para>The package names for zlib may vary for non-Debian systems.  The RPM name
we would look for is <filename>zlib-devel</filename>.</para>
</note>

<para>My system already has C/C++ compilers:
<screen>
<prompt>elephant % </prompt><userinput>which gcc</userinput>
/usr/bin/gcc
<prompt>elephant % </prompt><userinput>which g++</userinput>
/usr/bin/g++
</screen>
</para>

<para>GNU versions of tar/make/sed:
<screen>
<prompt>elephant % </prompt><userinput>tar --version</userinput>
tar (GNU tar) 1.20
Copyright (C) 2008 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
    
Written by John Gilmore and Jay Fenlason.
<prompt>elephant % </prompt><userinput>sed --version</userinput>
GNU sed version 4.1.5
Copyright (C) 2003 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE,
to the extent permitted by law.
<prompt>elephant % </prompt><userinput>make --version</userinput>
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

</screen>
</para>

<para>Finally, I have XML::Parser for GRAM:
<screen>
<prompt>elephant % </prompt><userinput>locate XML/Parser.pm</userinput>
/usr/lib/perl5/XML/Parser.pm
</screen>
</para>
</section>

<section id="q-toolkit"><title>Building the Toolkit</title>
<para>
That completes the list of build prereqs, so now I will download the installer and build it.  The long version of these instructions is at <olink targetdoc="gtadmin" targetptr="gtadmin-install"/>.  First I created a globus user, and I will start the installation from that.
<screen>
<prompt>globus@elephant:~$</prompt> <userinput>tar xzf gt<replaceable role="entity">version</replaceable>-all-source-installer.tar.gz</userinput>
<prompt>globus@elephant:~$</prompt> <userinput>cd gt<replaceable role="entity">version</replaceable>-all-source-installer</userinput>
<prompt>globus@elephant:~/gt<replaceable role="entity">version</replaceable>-all-source-installer$</prompt> <userinput>./configure --prefix=/sandbox/globus/globus-<replaceable role="entity">version</replaceable>/</userinput>
checking build system type... i686-pc-linux-gnu
configure: creating ./config.status
config.status: creating Makefile
</screen>
</para>

<note><para>
I could have used the binary installer for this example, because Debian x86 Lenny binaries are available.  
To make the quickstart more general, I decided to use source instead.
</para></note>

<para>Now it's time to build the toolkit:
<screen>
<prompt>globus@elephant:~/gt<replaceable role="entity">version</replaceable>-all-source-installer$</prompt> <userinput>make | tee installer.log</userinput>
cd gpt-3.2autotools2004 &amp;&amp; OBJECT_MODE=32 ./build_gpt
build_gpt ====&gt; installing GPT into /sandbox/globus/globus-<replaceable role="entity">version</replaceable>/
...
Time for a coffee break here, the build will take over an hour, possibly
longer depending on how fast your machine is
...
Your build completed successfully.  Please run make install.

<prompt>globus@elephant:~/gt<replaceable role="entity">version</replaceable>-all-source-installer$</prompt> <userinput>make install</userinput>
/sandbox/globus/globus-<replaceable role="entity">version</replaceable>//sbin/gpt-postinstall
...
..Done

<prompt>globus@elephant:~/gt<replaceable role="entity">version</replaceable>-all-source-installer$</prompt> 
</screen>
</para>
</section>

<section id="q-security"><title>Setting up security on your first machine</title>
<para>
All of the work we're going to do now requires that we be authenticated and authorized.  We
use certificates for this purpose.  The Distinguished Name (DN) of a certificate will serve
as our authenticated identity.  That identity will then be authorized.  In this simple tutorial,
the authorization will happen in a file lookup.
</para>
<para>
We will need identites for both the services and users. For the services, we will use an identity
that is equal to their hostname.  For the users, we'll use their full name.  To create the certificates, 
we're going to use the SimpleCA that is distributed with the toolkit.  
Here's how we set it up, based on the instructions at
<olink targetdoc="gtadmin" targetptr="gtadmin-simpleca">SimpleCA Admin</olink>:
  <note><para>In many deployment scenarios, certificates for both services and users are obtained
    through one or more third party CAs.  In such scenarios, it is unnecessary to use SimpleCA or myproxy to
    issue certificates.  Since this quickstart is intended to describe a simple, stand alone
    deployment scenario, we describe how to use these tools to issue your own certificates. </para></note>
<screen>
<prompt>root@elephant:~#</prompt> <userinput>export GLOBUS_LOCATION=/sandbox/globus/globus-<replaceable role="entity">version</replaceable></userinput>
<prompt>root@elephant:~#</prompt> <userinput>source $GLOBUS_LOCATION/etc/globus-user-env.sh</userinput>
<prompt>root@elephant:~#</prompt> <userinput>cd ~globus/gt<replaceable
  role="entity">version</replaceable>-all-source-installer/quickstart</userinput>
<prompt>root@elephant:gt<replaceable
  role="entity">version</replaceable>-all-source-installer/quickstart#</prompt> <userinput>perl gt-server-ca.pl -y</userinput>
Setting up /sandbox/globus/globus-<replaceable role="entity">version</replaceable>/
Please enter a password of at least four characters for the CA: 
Confirm password:
Creating a new simpleCA, logging to gt-server-ca.log...
Running setup-gsi...
Your CA hash is: b906298a
It is located at /sandbox/globus/globus-<replaceable role="entity">version</replaceable>//share/certificates/b906298a.0
Your host DN is /O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/CN=host/elephant.globus.org
The hostcert is located at /sandbox/globus/globus-<replaceable role="entity">version</replaceable>//etc/hostcert.pem
</screen>
<note><para>This will fail if /tmp is mounted noexec.  If you get a failure, you might try setting
GLOBUS_SH_TMP=`pwd` and trying again.
</para>
</note>
</para>

<para>
Here's what has happened:
<screen>
<prompt>root@elephant:~#</prompt> <userinput>ls ~/.globus/</userinput>
simpleCA
<prompt>root@elephant:~#</prompt> <userinput>ls ~/.globus/simpleCA/</userinput>
cacert.pem  globus_simple_ca_b906298a_setup-0.20.tar.gz  newcerts
certs       grid-ca-ssl.conf                             private
crl         index.txt                                    serial
</screen>
That's the directory where my simpleCA has been created.  
  These files are all explained in the 
  <olink targetdoc="gsicAdmin">Security Admin Guide</olink>.
</para>

<para>
Our last step is to copy that signed certificate and our trusted certificates into <filename class="directory">/etc</filename>:
<screen>
<prompt>root@elephant:~#</prompt> <userinput>mkdir /etc/grid-security</userinput>
<prompt>root@elephant:~#</prompt> <userinput>mv $GLOBUS_LOCATION/etc/host*.pem /etc/grid-security/</userinput>
<prompt>root@elephant:~#</prompt> <userinput>cp -r $GLOBUS_LOCATION/share/certificates/ /etc/grid-security/</userinput>
</screen>
</para>

</section>

<section><title>Creating a MyProxy server</title>
<para>
We are going to create a MyProxy server on elephant, following the instructions at 
<olink targetdoc="myproxyAdmin" targetptr="myproxy-configuring">configuring MyProxy</olink>.  This will be used to
store our user's certificates.  Recall that so far we have made a host certificate, but we don't have any certificates for
end users yet.
<screen>
<prompt>root@elephant:~#</prompt> <userinput>export GLOBUS_LOCATION=/sandbox/globus/globus-<replaceable role="entity">version</replaceable>/</userinput>
<prompt>root@elephant:~#</prompt> <userinput>cp $GLOBUS_LOCATION/share/myproxy/myproxy-server.config /etc</userinput>
<prompt>root@elephant:~#</prompt> <userinput>vim /etc/myproxy-server.config </userinput>
<prompt>root@elephant:~#</prompt> <userinput>diff /etc/myproxy-server.config $GLOBUS_LOCATION/share/myproxy/myproxy-server.config</userinput>
15,21c15,21
&lt; accepted_credentials  "*"
&lt; authorized_retrievers "*"
&lt; default_retrievers    "*"
&lt; authorized_renewers   "*"
&lt; default_renewers      "none"
&lt; authorized_key_retrievers "*"
&lt; default_key_retrievers "none"
---
&gt; #accepted_credentials  "*"
&gt; #authorized_retrievers "*"
&gt; #default_retrievers    "*"
&gt; #authorized_renewers   "*"
&gt; #default_renewers      "none"
&gt; #authorized_key_retrievers "*"
&gt; #default_key_retrievers "none"
<prompt>root@elephant:~#</prompt> <userinput>cat $GLOBUS_LOCATION/share/myproxy/etc.services.modifications >> /etc/services </userinput>
<prompt>root@elephant:~#</prompt> <userinput>tail /etc/services </userinput>
binkp           24554/tcp                       # binkp fidonet protocol
asp             27374/tcp                       # Address Search Protocol
asp             27374/udp
dircproxy       57000/tcp                       # Detachable IRC Proxy
tfido           60177/tcp                       # fidonet EMSI over telnet
fido            60179/tcp                       # fidonet EMSI over TCP
# Local services
myproxy-server  7512/tcp                        # Myproxy server
<prompt>root@elephant:~#</prompt> <userinput>cp $GLOBUS_LOCATION/share/myproxy/etc.xinetd.myproxy /etc/xinetd.d/myproxy</userinput>
<prompt>root@elephant:~#</prompt> <userinput>vim /etc/xinetd.d/myproxy </userinput>
<prompt>root@elephant:~#</prompt> <userinput>cat /etc/xinetd.d/myproxy </userinput>
service myproxy-server
{
  socket_type  = stream
  protocol     = tcp
  wait         = no
  user         = root
  server       = /sandbox/globus/globus-<replaceable role="entity">version</replaceable>/sbin/myproxy-server
  env          = GLOBUS_LOCATION=/sandbox/globus/globus-<replaceable role="entity">version</replaceable> LD_LIBRARY_PATH=/sandbox/globus/globus-<replaceable role="entity">version</replaceable>/lib <co id="myproxy_ld-co" linkends="myproxy_ld"/>
  disable      = no
}
<prompt>root@elephant:~#</prompt> <userinput>/etc/init.d/xinetd reload</userinput>
Reloading internet superserver configuration: xinetd.
<prompt>root@elephant:~#</prompt> <userinput>netstat -an | grep 7512</userinput>
tcp        0      0 0.0.0.0:7512            0.0.0.0:*               LISTEN     
</screen>
<calloutlist>
   <callout arearefs="myproxy_ld-co" id="myproxy_ld" >
    <simpara>Your system may require a different environment variable than LD_LIBRARY_PATH if you're using MacOS X or IRIX</simpara>
   </callout>
</calloutlist>
</para>

<para>
Now that myproxy is setup, we'll get a usercert for our sample user.  The root user will add a new credential into myproxy.
I have to specify a full name and a login name.  I'll be using "QuickStart User" as the first and last name and "quser" as the
UNIX account name for my user.  
</para><para>
I have to supply two different passwords.  The first password is going to be the quser user's password, and must be at least 6 characters long.  The second password has to be my SimpleCA password from when
I ran gt-server-ca.pl.
<screen>
<prompt>root@elephant:~ #</prompt> <userinput>myproxy-admin-adduser -c "QuickStart User" -l quser</userinput>
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
  
To sign the request
please enter the password for the CA key:
  
The new signed certificate is at: /root/.globus/simpleCA//newcerts/02.pem
  
using storage directory /var/myproxy
Credential stored successfully
Certificate subject is:
/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=globus.org/CN=QuickStart User
 
</screen>

Our last act will be to create a grid-mapfile as root for authorization.  You can copy and paste the /O=Grid/OU=... 
subject name from the output above:
<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>vim /etc/grid-security/grid-mapfile</userinput>
"/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=globus.org/CN=QuickStart User" quser
</screen>
</para>
<note><para>
The globus user doesn't need a user certificate!  It's a dummy account that
we're using to own the GLOBUS_LOCATION.  Only real people need user certs.
</para></note>

</section>

<section id="q-gridftp"><title>Set up GridFTP</title>
<para>
Now that we have our host and user credentials in place, we can start a service.  This setup comes from the 
  <olink targetdoc="gridftpAdmin">GridFTP Admin Guide</olink>.
<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>vim /etc/xinetd.d/gridftp</userinput> <co id="q-xinetd-co" linkends="q-xinetd"/>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>cat /etc/xinetd.d/gridftp</userinput>
service gsiftp
{
instances               = 100
socket_type             = stream
wait                    = no
user                    = root
env                     += GLOBUS_LOCATION=/sandbox/globus/globus-<replaceable role="entity">version</replaceable>
env                     += LD_LIBRARY_PATH=/sandbox/globus/globus-<replaceable role="entity">version</replaceable>/lib <co  id="q-ld_lib-co"  linkends="q-ld_lib" />
server                  = /sandbox/globus/globus-<replaceable role="entity">version</replaceable>/sbin/globus-gridftp-server
server_args             = -i
log_on_success          += DURATION
disable                 = no
}
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>vim /etc/services </userinput>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>tail /etc/services </userinput>
vboxd           20012/udp
binkp           24554/tcp                       # binkp fidonet protocol
asp             27374/tcp                       # Address Search Protocol
asp             27374/udp
dircproxy       57000/tcp                       # Detachable IRC Proxy
tfido           60177/tcp                       # fidonet EMSI over telnet
fido            60179/tcp                       # fidonet EMSI over TCP

# Local services
myproxy-server  7512/tcp                        # Myproxy server
gsiftp          2811/tcp
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>/etc/init.d/xinetd reload</userinput>
Reloading internet superserver configuration: xinetd.
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>netstat -an | grep 2811</userinput>
tcp        0      0 0.0.0.0:2811            0.0.0.0:*               LISTEN     
</screen>
<calloutlist>
  <callout arearefs="q-xinetd-co"  id="q-xinetd" >
    <para>I already had xinetd installed:
    <screen>
quser@elephant:~$ dpkg --list xinetd
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Cfg-files/Unpacked/Failed-cfg/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Hold/Reinst-required/X=both-problems (Status,Err: uppercase=bad)
||/ Name           Version        Description
+++-==============-==============-============================================
ii  xinetd         1:2.3.14-7     replacement for inetd with many enhancements
    </screen>
      You can use inetd instead, see "Configuring the GridFTP server to run under xinetd/inetd" in <olink targetdoc="gridftpAdmin"/> for details.  
      For now, though, you might want to apt-get install xinetd.</para>
  </callout>
  <callout arearefs="q-ld_lib-co"  id="q-ld_lib" >
    <simpara>On MacOS X, this would be DYLD_LIBRARY_PATH.  Check your system documentation if LD_LIBARARY_PATH doesn't work on your system.</simpara>
  </callout>
</calloutlist>
   
</para>

<para>
Now the gridftp server is waiting for a request, so we'll run a client
and transfer a file:
<screen>
<prompt>quser@elephant $</prompt> <userinput>myproxy-logon -s elephant</userinput>
Enter MyProxy pass phrase: <userinput>******</userinput>
A credential has been received for user quser in /tmp/x509up_u1817.
<prompt>quser@elephant $</prompt> <userinput>globus-url-copy gsiftp://elephant.globus.org/etc/group file:///tmp/quser.test.copy</userinput>
<prompt>quser@elephant $</prompt> <userinput>diff /tmp/quser.test.copy /etc/group</userinput>
<prompt>quser@elephant $</prompt> <userinput></userinput>
</screen>
</para>

<para>Okay, so the GridFTP server works.  If you had trouble, check the
  security troubleshooting section in the <olink targetdoc="gsicAdmin">Security Admin Guide</olink>.
  Now we can move on to setting up GRAM5 resource management.
</para>
</section>


  <section id="q-gram"><title>Setting up GRAM5</title>
<para> Now that we have security and GridFTP set up, we can set up GRAM for resource management.
  There are several different Local Resource Managers that one could configure GRAM to use, but this
  guide will explain the simple case of setting up a "fork" jobmanager, without auditing.  For details on all other
  configuration options, and for reference, you can see the <olink targetdoc="gram5Admin">GRAM5 Admin Guide</olink>.
</para>
    
<para>
<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>vim /etc/services </userinput>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>tail /etc/services </userinput>
vboxd           20012/udp
binkp           24554/tcp                       # binkp fidonet protocol
asp             27374/tcp                       # Address Search Protocol
asp             27374/udp
dircproxy       57000/tcp                       # Detachable IRC Proxy
tfido           60177/tcp                       # fidonet EMSI over telnet
fido            60179/tcp                       # fidonet EMSI over TCP

# Local services
myproxy-server  7512/tcp                        # Myproxy server
gsiftp          2811/tcp
gsigatekeeper   2119/tcp
</screen>

<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>vim /etc/xinetd.d/gsigatekeeper</userinput> <co id="q-xinetd-co2" linkends="q-xinetd"/>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>cat /etc/xinetd.d/gsigatekeeper</userinput>
service gsigatekeeper
{
    socket_type = stream
    protocol = tcp
    wait = no
    user = root
    env = LD_LIBRARY_PATH=/sandbox/globus/globus-<replaceable
      role="entity">version</replaceable>/lib <co id="q-ld_lib-co2" linkends="q-ld_lib2"/>
    server = /sandbox/globus/globus-<replaceable role="entity">version</replaceable>/sbin/globus-gatekeeper
    server_args = -conf /sandbox/globus/globus-<replaceable role="entity">version</replaceable>/etc/globus-gatekeeper.conf
    disable = no
}
</screen>
<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>/etc/init.d/xinetd reload</userinput>
Reloading internet superserver configuration: xinetd.
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>netstat -an | grep 2119</userinput>
tcp        0      0 0.0.0.0:2119            0.0.0.0:*               LISTEN     
</screen>
     <calloutlist>
  <callout arearefs="q-xinetd-co2"  id="q-xinetd2" >
    <para>For this Quickstart, we're using xinetd.  You can use inetd instead, see "Deploying GRAM5
      via inetd or xinetd" in the <olink targetdoc="gram5Admin">GRAM5 Admin Guide</olink> for details.  
      For now, though, you might want to apt-get install xinetd.</para>
  </callout>
  <callout arearefs="q-ld_lib-co2"  id="q-ld_lib2" >
    <simpara>On MacOS X, this would be DYLD_LIBRARY_PATH.  Check your system documentation if LD_LIBARARY_PATH doesn't work on your system.</simpara>
  </callout>
</calloutlist>
</para>
<para>
  
The gatekeeper is now set up to run from xinetd, and is ready to authorize job submissions and pass
them on to the fork job manager.  We can now run a couple of test jobs:
<screen>
<prompt>quser@elephant $</prompt> <userinput>myproxy-logon -s elephant</userinput>
Enter MyProxy pass phrase: <userinput>******</userinput>
A credential has been received for user quser in /tmp/x509up_u1817.
<prompt>quser@elephant $</prompt> <userinput>globusrun -o -r elephant.globus.org:2119/jobmanager-fork '&amp;(executable="/bin/hostname" )'</userinput>
elephant
<prompt>quser@elephant $</prompt> <userinput>globusrun -s -r elephant.globus.org:2119/jobmanager-fork '&amp;(executable=/usr/bin/whoami)'</userinput>
quser
</screen>
Success!  If you had trouble, check the security troubleshooting section in the <olink targetdoc="gsicAdmin">Security Admin Guide</olink>.
   To learn more about using GRAM 5, take a look at the <olink targetdoc="gram5User"
     id="gram5-user-submitting-jobs">GRAM User's Guide</olink>
</para>

</section>

</section>

<section id="q-second"><title>Setting up your second machine</title>
<section id="q-prereq2"><title>Setting up your second machine: Prereqs</title>
<para>
Alas, it's not much of a grid with just one machine.  So let's start up
on another machine and add it to this little test grid.  For a change of
pace, I'm going to use the binary installer on this machine.  
<screen>
<prompt>globus@donkey:~$</prompt> <userinput>tar xzf gt<replaceable
  role="entity">version</replaceable>-x86_debian_5.0-binary-installer.tar.gz</userinput>
</screen>
</para>

</section>

<section id="q-toolkit2"><title>Setting up your second machine: Installation</title>
<para>
Now we can install from binaries:
<screen>

<prompt>globus@donkey:~/gt<replaceable role="entity">version</replaceable>-x86_debian_5.0-installer$</prompt> <userinput>./configure \
   --prefix=/usr/local/globus-<replaceable role="entity">version</replaceable></userinput>
configure: creating ./config.status
config.status: creating Makefile
<prompt>globus@donkey:~/gt<replaceable role="entity">version</replaceable>-x86_debian_5.0-installer$</prompt> <userinput>make</userinput>
cd gpt-3.2autotools2004 &amp;&amp; OBJECT_MODE=32 ./build_gpt
...
Binaries are much faster!  This is done in less than 10 minutes.
...
Your build completed successfully.  Please run make install.
<prompt>globus@donkey:~/gt<replaceable role="entity">version</replaceable>-x86_debian_5.0-installer$</prompt> <userinput>make install</userinput>
ln -s /usr/local/globus-<replaceable role="entity">version</replaceable>/etc/gpt/packages /usr/local/globus-<replaceable role="entity">version</replaceable>/etc/globus_packages
...
config.status: creating fork.pm
..Done
</screen>
</para>
</section>

<section id="q-security2"><title>Setting up your second machine: Security</title>
<para>Now let's get security setup on the second machine.  We're going to just add trust for the original simpleCA to this new machine, there's no need to create a new one.  All we need to do is copy the $GLOBUS_LOCATION/share/certificates from our
first machine to our second:
<screen>
<prompt>globus@donkey:~$</prompt> <userinput>export GLOBUS_LOCATION=/usr/local/globus-<replaceable role="entity">version</replaceable></userinput>
<prompt>globus@donkey:~$</prompt> <userinput>scp -r elephant:/sandbox/globus/globus-<replaceable role="entity">version</replaceable>/share/certificates $GLOBUS_LOCATION/share</userinput>
</screen>

We're going to create the host certificate for donkey, but we create it on elephant:
<screen>
<prompt>root@elephant:~#</prompt> <userinput>myproxy-admin-addservice -c "donkey.globus.org" -l donkey</userinput>
</screen>

Then as root on donkey:
<screen>
<prompt>root@donkey:~#</prompt> <userinput>export GLOBUS_LOCATION=/usr/local/globus-<replaceable role="entity">version</replaceable></userinput>
<prompt>root@donkey:~#</prompt> <userinput>source $GLOBUS_LOCATION/globus-user-env.sh</userinput>
<prompt>root@donkey:~#</prompt> <userinput>myproxy-retrieve -s elephant -k donkey.globus.org -l donkey</userinput>
Enter MyProxy pass phrase:<userinput>******</userinput>
Credentials for quser have been stored in
/etc/grid-security/hostcert.pem and
/etc/grid-security/hostkey.pem.
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>ls -l *.pem</userinput>
-rw-------  1 root root 912 2008-06-19 13:45 hostcert.pem
-rw-------  1 root root 887 2008-06-19 13:45 hostkey.pem
<prompt>root@donkey:/etc/grid-security# </prompt><userinput>myproxy-destroy -s  elephant -k donkey.globus.org -l donkey</userinput>
MyProxy credential 'donkey.globus.org' for user donkey was successfully removed.
</screen>
There.  Now donkey is setup with host certs, and it trusts the CA of my grid.  The last step for root is to create a grid-mapfile for myself again:
<screen>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>vim grid-mapfile</userinput>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>cat grid-mapfile </userinput>
"/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=globus.org/CN=QuickStart User" quser
</screen>
</para>
</section>

<section id="q-gridftp2"><title>Setting up your second machine: GridFTP</title>
<para>
GridFTP setup on the second machine is identical to the first.  I'll just
list the commands here, see <olink targetptr="q-gridftp"/> for the file contents, or just copy them from the first machine.
<screen>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>vim /etc/xinetd.d/gridftp</userinput>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>vim /etc/services </userinput>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>/etc/init.d/xinetd reload</userinput>
Reloading internet superserver configuration: xinetd.
</screen>
Now we can test it:
<screen>
<prompt>donkey %</prompt> <userinput>setenv GLOBUS_LOCATION /usr/local/globus-<replaceable role="entity">version</replaceable></userinput>
<prompt>donkey %</prompt> <userinput>source $GLOBUS_LOCATION/etc/globus-user-env.csh</userinput>
<prompt>donkey %</prompt> <userinput>myproxy-logon -s elephant</userinput>
Enter MyProxy pass phrase: <userinput>******</userinput>
A credential has been received for user quser in /tmp/x509up_u1817.
<prompt>donkey %</prompt> <userinput>globus-url-copy gsiftp://donkey.globus.org/etc/group \
   gsiftp://elephant.globus.org/tmp/from-donkey</userinput>
</screen>
That was a slightly fancier test than I ran on elephant.  In this case, I did a third-party transfer between two GridFTP servers.  It worked, so I have the local and remote security setup correctly.
</para>
<para>
If it did not work, perhaps you have a firewall between the two machines?  GridFTP needs to communicate on
data ports, not just port 2811.  The error looks like:
<screen>
error: globus_ftp_client: the server responded with an error
500 500-Command failed. : callback failed.
500-globus_xio: Unable to connect to 140.221.8.19:42777
500-globus_xio: System error in connect: No route to host
500-globus_xio: A system call failed: No route to host
500 End.
</screen>
You can setup a range of ports to be open on the firewall and configure
GridFTP to use them, see <ulink url="http://dev.globus.org/wiki/FirewallHowTo#Configuring_GridFTP_to_use_GLOBUS_TCP_PORT_RANGE">GridFTP Firewall HOWTO</ulink> for details.  That document also contains firewall information for the rest of the services too.
</para>

</section>

  <section id="q-gram2"><title>Setting up your second machine: GRAM5</title>
<para>

Now we can submit a staging job.  This job will copy the /bin/echo command from donkey to a file
called /tmp/my_echo.  Then
it runs it with some arguments, and captures the stderr/stdout.  Finally, it will clean up the my_echo file when execution is
done.
<screen>
<prompt>donkey %</prompt> <userinput>vim a.rsl</userinput>
<prompt>donkey %</prompt> <userinput>cat a.rsl</userinput>
donkey % cat a.rsl
&amp;(rsl_substitution = (GRIDFTP_SERVER "gsiftp://donkey.globus.org:2811"))
 (executable=/bin/ls) (arguments=-alt /tmp/my_echo) 
 (file_stage_in = ($(GRIDFTP_SERVER)/bin/echo /tmp/my_echo)) 
 (file_clean_up=/tmp/my_echo)

<prompt>donkey %</prompt> <userinput> globusrun -f a.rsl -s -r elephant.globus.org:2119/jobmanager-fork</userinput>
<prompt>donkey %</prompt> <userinput>cat ~/stdout</userinput>
-rw-r--r-- 1 quser quser 24228 Nov 21 07:16 /tmp/my_echo

<prompt>donkey %</prompt> <userinput>ls /tmp/my_echo</userinput>
ls: /tmp/my_echo: No such file or directory
</screen>
This example staged in a file, had an executable act on that file, and cleaned up the file
afterward.
</para>
  <para>You can get other examples of GRAM RSL files from <olink targetdoc="gram5User" targetptr="gram5-user-usagescenarios">GRAM usage scenarios</olink>.
</para>
</section>
</section>


  <glossary role="auto" id="glossary-quickstart">
    <glossdiv><title>A</title>
      <glossentry>
        <glossterm>Irrelevant</glossterm>
        <glossdef>
          <para>If you can see this, the document was processed incorrectly. Use the
            <parameter>glossary.collection</parameter> parameter.</para>
        </glossdef>
      </glossentry>
    </glossdiv>
  </glossary>
</article>

