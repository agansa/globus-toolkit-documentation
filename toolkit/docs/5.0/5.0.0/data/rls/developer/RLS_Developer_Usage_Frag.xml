<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="rls-developer-scenarios">
    <title>Usage scenarios</title>
    <section id="rls-developer-scenarios-java"><title>Java Examples</title>
        <para>This section provides examples of a few basic operations using the new Java client API. Here is an outline of the typical steps used to resolve a replica location.</para>
        <itemizedlist>
            <listitem><simpara>Establish a connection to the Replica Location Index service</simpara></listitem>
            <listitem><simpara>Construct a list of the logical names to be used in the query</simpara></listitem>
            <listitem><simpara>Query the index service</simpara></listitem>
            <listitem><simpara>Inspect the return list and construct lists of logical names to be used in queries to the Local Replica Catalog services</simpara></listitem>
            <listitem><simpara>Query the catalog services</simpara></listitem>
            <listitem><simpara>Inspect the results returned by the catalog services</simpara></listitem>
        </itemizedlist>
        <section><title>Create a connection source</title>
            <simpara>A connection source is needed in order to establish connections to the RLS. The connection source may be shared and is a thread safe object. The <computeroutput>SimpleRLSConnectionSource</computeroutput> may be directly instantiated by the client or it may be used as a JNDI object and shared by multiple clients (e.g., in a container that supports JNDI). In this example, the client instantiates the connection source.</simpara>
            <screen>
                RLSConnectionSource source = null;
                try {
                    source = new SimpleRLSConnectionSource();
                } catch (RLSException e) {
                    // handle exception
                }
            </screen>
        </section>
        <section><title>Create a connection</title>
            <simpara>Use the connection source to establish a connection. If the source has defaults you may use its parameterless <computeroutput>connect()</computeroutput> method, otherwise you must supply the connection URL and credentials.</simpara>
            <screen>
                RLSConnection connection = null;
                try {
                    connection = source.connect(url, credential);
                } catch (RLSException e) {
                    // handle exception
                }
            </screen>
        </section>
        <section><title>Create a simple index query</title>
            <simpara>Query objects are used to represent different types of RLS queries. There are simple queries, batch queries, and attribute searches. This examples uses a simple query object. We begin by querying the RLS index service which tells us which catalog services to query for a given logcial name.</simpara>
            <screen>
                IndexQuery indexQuery = new SimpleIndexQuery(
                    SimpleIndexQuery.queryMappingsByLogicalName,
                    "my-logical-name-123",
                    null);
            </screen>
        </section>
        <section><title>Query the index service</title>
            <simpara>RLS index services keep an index of logical names for each catalog service that sends its index to the given index service. By querying an index service, the client can find out which catalog services may have replica locations for a desired logical name.</simpara>
            <screen>
                try {
                    ReplicaLocationIndex index = connection.index();
                    Results results = index.query(indexQuery);
                    if (results.getRC() == RLSStatusCode.RLS_SUCCESS) {
                        List batch = results.getBatch();
                        Iterator i = batch.iterator();
                        while (i.hasNext()) {
                            IndexMappingResult result = (IndexMappingResult) i.next();
                            if (result.getRC() != RLSStatusCode.RLS_SUCCESS)
                                continue;
                            String logicalName = result.getLogical();
                            String catalogURL = result.getCatalog();
                            // At this point, the client will need to create
                            // a CatalogQuery object for each distinct catalog
                            // URL returned in the results. These URLs indicate
                            // the catalog services which have replica locations
                            // for the given logical name.
                        }
                    }
                } catch (RLSException e) {
                    // handle exception
                }
            </screen>
        </section>
        <section><title>Create a simple catalog query</title>
            <simpara>Based on the results of the index query, a client will create catalog queries.</simpara>
            <screen>
                CatalogQuery catalogQuery = new SimpleCatalogQuery(
                    SimpleCatalogQuery.queryMappingsByLogicalName,
                    "my-logical-name-123",
                    null);
            </screen>
        </section>
        <section><title>Query the catalog service</title>
            <simpara>RLS catalog services keep a catalog of logical names mapped to target names. The target names are typically used to indicate the URL for a data object (e.g., a gsiftp, http, etc. URL).</simpara>
            <screen>
                try {
                    LocalReplicaCatalog catalog = connection.catalog();
                    Results results = catalog.query(catalogQuery);
                    if (results.getRC() == RLSStatusCode.RLS_SUCCESS) {
                        List batch = results.getBatch();
                        Iterator i = batch.iterator();
                        while (i.hasNext()) {
                            MappingResult result = (MappingResult) i.next();
                            if (result.getRC() != RLSStatusCode.RLS_SUCCESS)
                                continue;
                            String logicalName = result.getLogical();
                            String targetName = result.getTarget();
                            // At this point, the client has resolved the 
                            // target name for the given logical name. Keep in
                            // mind that in the RLS, a logical name may be
                            // mapped to multiple target names.
                        }
                    }
                } catch (RLSException e) {
                    // handle exception
                }
            </screen>
        </section>
    </section>

    <section id="rls-developer-scenarios-examplecode"><title>Example Code</title>
        <para>This section provides examples illustrating the basic usage of the client interfaces
            supported by the RLS. Using the client API, developers may create client applications that
            interact with the RLS server to perform replica location operations.</para>
        <para>
            <emphasis>Developing in C</emphasis>
        </para>
        <para>Client applications developed in C must do <emphasis>both</emphasis> of the following:</para>
        <orderedlist>
            <listitem>
                <simpara>Include the client header file at
                    <computeroutput>$GLOBUS_LOCATION/include/globus_rls_client.h</computeroutput>.</simpara>
            </listitem>
            <listitem>
                <simpara>Link to the client shared library at
                    <computeroutput>$GLOBUS_LOCATION/lib/libglobus_rls_client_gcc32dbgpthr</computeroutput>.</simpara>
            </listitem>
        </orderedlist>
        <para>For <ulink url="test.c">C language example code</ulink>, click <ulink url="test.c"
                >here</ulink>. </para>
        <para>
            <emphasis>Developing in Java</emphasis>
        </para>
        <para>Client applications developed in Java must do <emphasis>all</emphasis> of the following:</para>
        <orderedlist>
            <listitem>
                <simpara>Include the RLS Jar, <computeroutput>$GLOBUS_LOCATION/lib/globus_rls_client.jar</computeroutput>,
                    in the CLASSPATH.</simpara>
            </listitem>
            <listitem>
                <simpara>Import the RLS Package
                    <computeroutput>org.globus.replica.rls.*</computeroutput>.</simpara>
            </listitem>
        </orderedlist>
        <para>For <ulink url="testrls.java">Java language example code</ulink>, click <ulink
                url="testrls.java">here</ulink>. Note that the examples in this section use the older, <emphasis>deprecated</emphasis> API.</para>
    </section>
</chapter>
