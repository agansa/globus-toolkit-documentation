<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<article id="quickstart" xreflabel="GT Quickstart">

<title>GT <replaceable role="entity">shortversion</replaceable> Quickstart</title>
  

<articleinfo id="q-intro"><abstract><title>Introduction</title>
<para>
This is a quickstart that shows a full installation of the Toolkit
on two Fedora machines.  It shows the installation of prereqs, 
installation of the toolkit, creation of certificates, and configuration
of services.  It is designed to supplement the main admin guide, <olink targetdoc="gtadmin"/>.
</para>
<para>Scenarios are shown for running GridFTP and GRAM services, and using GridFTP and GRAM clients.</para></abstract>
</articleinfo>


<section id="q-prereq"><title>Pre-requisites</title>

  <para>The Globus Toolkit <replaceable role="entity">shortversion</replaceable> consists of a set of RPMs or .debs for several Linux distributions and a source installer which can be used on platforms that do not use RPM or Debian packaging.
    In this quickstart, we will be installing from native RPM packages.  Thus, it is a pre-requisite for following this quickstart
  that you are running a distribution for which we provide native binary packages.
  </para>
  <para>We will show how to set up and use the Globus RPM repository.  If your distribution has Globus <replaceable role="entity">version</replaceable>
  packages within its repository, you can skip to the next section.
</para>
<para>
  The repo-config rpms for the various binary (RPM and deb) repositories can be found <ulink url="http://www.globus.org/ftppub/gt5/5.2/5.2.0/installers/repo/.">here.</ulink>

</para>
<para>
  To install from binary RPMs, get the appropriate repo-config rpm from the link above, install it with 
  <screen><prompt>#</prompt><userinput>rpm -i Globus-repo-config.&lt;distro&gt;.noarch.rpm</userinput>
</screen>
</para>
</section>
  
  <section id="q-first"><title>Setting up the first machine (GridFTP, GRAM, and MyProxy services)</title>
    
  
<section id="q-toolkit"><title>Installing the Toolkit</title>
  <para>Install packages 
    <screen>
      <prompt>#</prompt><userinput>yum groupinstall globus-gridftp globus-gram5</userinput>
       
      <prompt>#</prompt><userinput>yum install globus-gridftp-server-progs globus-gass-copy-progs myproxy myproxy-server myproxy-admin  globus-simple-ca</userinput>
      
    </screen>
  </para>
</section>
<section id="q-security"><title>Setting up security on your first machine</title>
<para>
All of the work we're going to do now requires that we be authenticated and authorized.  We
use certificates for this purpose.  The Distinguished Name (DN) of a certificate will serve
as our authenticated identity.  That identity will then be authorized.  
</para>
<para>
We will need identities for both the services and users. For the services, we will use an identity
that is equal to their hostname.  For the users, we'll use their full name.  To create the certificates, 
we're going to use the SimpleCA that is distributed with the toolkit.  
Here's how we set it up, based on the instructions at
<olink targetdoc="gtadmin" targetptr="gtadmin-simpleca">SimpleCA Admin</olink>:
  <note><para>In many deployment scenarios, certificates for both services and users are obtained
    through one or more third party CAs.  In such scenarios, it is unnecessary to use SimpleCA or MyProxy to
    issue certificates.  Since this quickstart is intended to describe a simple, standalone
    deployment scenario, we describe how to use these tools to issue your own certificates. </para></note>
<screen>
<prompt>root@elephant:~#</prompt> <userinput>wget <ulink url="http://globus.org/toolkit/docs/5.2/5.2.0/admin/quickstart/gt-server-ca"></ulink></userinput>

<prompt>root@elephant:~#</prompt> <userinput>perl gt-server-ca -y</userinput>
Setting up /sandbox/globus/globus-<replaceable role="entity">version</replaceable>/
Please enter a password of at least four characters for the CA: 
Confirm password:
Creating a new simpleCA, logging to gt-server-ca.log...
Running setup-gsi...
Your CA hash is: b906298a
It is located at /sandbox/globus/globus-<replaceable role="entity">version</replaceable>//share/certificates/b906298a.0
Your host DN is /O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/CN=host/elephant.globus.org
The hostcert is located at /sandbox/globus/globus-<replaceable role="entity">version</replaceable>//etc/hostcert.pem
</screen>
<note><para>This will fail if /tmp is mounted noexec.  If you get a failure, you might try setting
GLOBUS_SH_TMP=`pwd` and trying again.
</para>
</note>
</para>

<para>
  Here's what has <ulink url="http://globus.org/toolkit/docs/5.2/5.2.0/admin/quickstart/simpleca.txt">happened.</ulink>
  The files created by SimpleCA are all explained in the 
  <olink targetdoc="gsicAdmin">Security Admin Guide</olink>.
</para>

</section>

<section><title>Creating a MyProxy server</title>
<para>
We are going to create a MyProxy server on elephant, following the instructions at 
<olink targetdoc="myproxyAdmin" targetptr="myproxy-configuring">configuring MyProxy</olink>.  This will be used to
store our user's certificates.  Recall that so far we have made a host certificate, but we don't have any certificates for
end users yet.
<screen>
<prompt>root@elephant:~#</prompt> <userinput>export GLOBUS_LOCATION=/sandbox/globus/globus-<replaceable role="entity">version</replaceable>/</userinput>
<prompt>root@elephant:~#</prompt> <userinput>vim /etc/myproxy-server.config </userinput>
</screen>
  </para>
  <para>Uncomment every line in the section "Complete Sample Policy #1" such that it looks like <ulink url="http://globus.org/toolkit/docs/5.2/5.2.0/admin/quickstart/myproxyconfig.txt">this.</ulink></para>
  <screen>
<prompt>root@elephant:~#</prompt> <userinput>cp /etc/grid-security/host*.pem /etc/grid-security/myproxy/</userinput>
<prompt>root@elephant:~#</prompt> <userinput>chown myproxy /etc/grid-security/myproxy/*.pem</userinput>
<prompt>root@elephant:~#</prompt> <userinput>chown root /var/lib/myproxy</userinput>

<prompt>root@elephant:~#</prompt> <userinput>netstat -an | grep 7512</userinput>
tcp        0      0 0.0.0.0:7512            0.0.0.0:*               LISTEN     
</screen>


<para>
Now that MyProxy is set up, we'll get a user certificate for our sample user.  The <computeroutput>root</computeroutput> user will add a new credential into MyProxy.
I have to specify a full name and a login name.  I'll be using <computeroutput>QuickStart User</computeroutput> as the first and last name and <computeroutput>quser</computeroutput> as the
UNIX account name for my user.  
</para><para>
I must supply two different passwords.  The first password is going to be the <computeroutput>quser</computeroutput> user's password, and must be at least 6 characters long.  The second password must be my SimpleCA password from when
I ran <filename>gt-server-ca</filename>.
<screen>
<prompt>root@elephant:~ #</prompt> <userinput>myproxy-admin-adduser -c "QuickStart User" -l quser</userinput>
</screen>
  The output looks like <ulink url="http://globus.org/toolkit/docs/5.2/5.2.0/admin/quickstart/myproxyadduser.txt">this.</ulink>

Our last act will be to create a grid-mapfile as <computeroutput>root</computeroutput> for authorization.  You can copy and paste the /O=Grid/OU=... 
subject name from the output above:
<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>vim /etc/grid-security/grid-mapfile</userinput>
"/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=globus.org/CN=QuickStart User" quser
</screen>
</para>
<note><para>
The <computeroutput>globus</computeroutput> user doesn't need a user certificate!  It's a dummy account that
we are using to manage the Globus Toolkit installation.  Only real people need user certs.
</para></note>

</section>

<section id="q-gridftp"><title>Set up GridFTP</title>
<para>
Now that we have our host and user credentials in place, we can start a service.  This setup comes from the 
  <olink targetdoc="gridftpAdmin">GridFTP Admin Guide</olink>.
<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>grep gsiftp /etc/services </userinput>
gsiftp          2811/tcp    #GSI FTP
gsiftp          2811/udp    #GSI FTP
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>netstat -an | grep 2811</userinput>
tcp        0      0 0.0.0.0:2811            0.0.0.0:*               LISTEN     
</screen>
   
</para>

<para>
Now the GridFTP server is waiting for a request, so we'll run a client
and transfer a file:
<screen>
<prompt>quser@elephant $</prompt> <userinput>myproxy-logon -s elephant</userinput>
Enter MyProxy pass phrase: <userinput>******</userinput>
A credential has been received for user quser in /tmp/x509up_u1817.
<prompt>quser@elephant $</prompt> <userinput>globus-url-copy gsiftp://elephant.globus.org/etc/group file:///tmp/quser.test.copy</userinput>
<prompt>quser@elephant $</prompt> <userinput>diff /tmp/quser.test.copy /etc/group</userinput>
<prompt>quser@elephant $</prompt> <userinput></userinput>
</screen>
</para>

<para>Okay, so the GridFTP server works.  If you had trouble, check the
  security troubleshooting section in the <olink targetdoc="gsicAdmin">Security Admin Guide</olink>.
  Now we can move on to setting up GRAM5 resource management.
</para>
</section>


  <section id="q-gram"><title>Setting up GRAM5</title>
<para> Now that we have security and GridFTP set up, we can set up GRAM for resource management.
  There are several different Local Resource Managers (LRMs) that one could configure GRAM to use, but this
  guide will explain the simple case of setting up a "fork" jobmanager, without auditing.  For details on all other
  configuration options, and for reference, you can see the <olink targetdoc="gram5Admin">GRAM5 Admin Guide</olink>.
</para>
    
<para>
<screen>

<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>grep gsigatekeeper /etc/services </userinput>
gsigatekeeper   2119/tcp    # GSIGATEKEEPER
gsigatekeeper   2119/udp    # GSIGATEKEEPER
</screen>

<screen>
<prompt>root@elephant:/etc/grid-security#</prompt> <userinput>netstat -an | grep 2119</userinput>
tcp        0      0 0.0.0.0:2119            0.0.0.0:*               LISTEN     
</screen>
</para>
<para>
  
The gatekeeper is set up to run, and is ready to authorize job submissions and pass
them on to the fork job manager.  We can now run a couple of test jobs:
<screen>
<prompt>quser@elephant $</prompt> <userinput>myproxy-logon -s elephant</userinput>
Enter MyProxy pass phrase: <userinput>******</userinput>
A credential has been received for user quser in /tmp/x509up_u1817.
<prompt>quser@elephant $</prompt> <userinput>globusrun -o -r elephant.globus.org:2119/jobmanager-fork '&amp;(executable="/bin/hostname" )'</userinput>
elephant
<prompt>quser@elephant $</prompt> <userinput>globusrun -s -r elephant.globus.org:2119/jobmanager-fork '&amp;(executable=/usr/bin/whoami)'</userinput>
quser
</screen>
Success!  If you had trouble, check the security troubleshooting section in the <olink targetdoc="gsicAdmin">Security Admin Guide</olink>.
   To learn more about using GRAM 5, take a look at the <olink targetdoc="gram5User"
     id="gram5-user-submitting-jobs">GRAM User's Guide</olink>
</para>

</section>

</section>

<section id="q-second"><title>Setting up your second machine</title>
  <para>
    Alas, it's not much of a grid with just one machine.  So let's start up
    on another machine and add it to this little test grid.  
  </para>
<section id="q-prereq2"><title>Setting up your second machine: Prereqs</title>
  <para>See <link linkend="q-prereq">Prereqs</link></para>
</section>

<section id="q-toolkit2"><title>Setting up your second machine: Installation</title>
<para>
Now we can install from binaries:
</para>
  <para>Install packages 
    <screen>
      <prompt>#</prompt><userinput>yum groupinstall globus-gridftp</userinput>
       
      <prompt>#</prompt><userinput>yum install globus-gridftp-server-progs globus-gass-copy-progs myproxy globus-simple-ca</userinput>
      
    </screen>
  </para>
</section>

<section id="q-security2"><title>Setting up your second machine: Security</title>
<para>Now let's get security setup on the second machine.  We're going to just add trust for the original simpleCA to this new machine, there's no need to create a new one.  All we need to do is copy the <filename>$GLOBUS_LOCATION/share/certificates</filename> from our
first machine to our second:
<screen>
<prompt>globus@donkey:~$</prompt> <userinput>scp -r elephant:/etc/grid-security/certificates /etc/grid-security/certificates</userinput>
</screen>

We're going to create the host certificate for donkey, but we create it on elephant:
<screen>
<prompt>root@elephant:~#</prompt> <userinput>myproxy-admin-addservice -c "donkey.globus.org" -l donkey</userinput>
</screen>

Then as <computeroutput>root</computeroutput> on donkey:
<screen>
<prompt>root@donkey:~#</prompt> <userinput>myproxy-retrieve -s elephant -k donkey.globus.org -l donkey</userinput>
Enter MyProxy pass phrase:<userinput>******</userinput>
Credentials for quser have been stored in
/etc/grid-security/hostcert.pem and
/etc/grid-security/hostkey.pem.
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>ls -l *.pem</userinput>
-rw-------  1 root root 912 2008-06-19 13:45 hostcert.pem
-rw-------  1 root root 887 2008-06-19 13:45 hostkey.pem
<prompt>root@donkey:/etc/grid-security# </prompt><userinput>myproxy-destroy -s  elephant -k donkey.globus.org -l donkey</userinput>
MyProxy credential 'donkey.globus.org' for user donkey was successfully removed.
</screen>
There.  Now donkey is setup with host certs, and it trusts the CA of my grid.  The last step for <computeroutput>root</computeroutput> is to create a grid-mapfile for myself again:
<screen>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>vim grid-mapfile</userinput>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>cat grid-mapfile </userinput>
"/O=Grid/OU=GlobusTest/OU=simpleCA-elephant.globus.org/OU=globus.org/CN=QuickStart User" quser
</screen>
</para>
</section>

<section id="q-gridftp2"><title>Setting up your second machine: GridFTP</title>
<para>
GridFTP setup on the second machine is identical to the first.  I'll just
list the commands here; see <olink targetptr="q-gridftp"/> for the file contents, or just copy them from the first machine.
<screen>
<prompt>root@donkey:/etc/grid-security#</prompt> <userinput>cat /etc/services </userinput>
</screen>
Now we can test it:
<screen>

<prompt>donkey %</prompt> <userinput>myproxy-logon -s elephant</userinput>
Enter MyProxy pass phrase: <userinput>******</userinput>
A credential has been received for user quser in /tmp/x509up_u1817.
<prompt>donkey %</prompt> <userinput>globus-url-copy gsiftp://donkey.globus.org/etc/group \
   gsiftp://elephant.globus.org/tmp/from-donkey</userinput>
</screen>
That was a slightly fancier test than I ran on elephant.  In this case, I did a third-party transfer between two GridFTP servers.  It worked, so I have the local and remote security set up correctly.
</para>
<para>
If it did not work, perhaps you have a firewall between the two machines?  GridFTP needs to communicate on
data ports, not just port 2811.  The error looks like:
<screen>
error: globus_ftp_client: the server responded with an error
500 500-Command failed. : callback failed.
500-globus_xio: Unable to connect to 140.221.8.19:42777
500-globus_xio: System error in connect: No route to host
500-globus_xio: A system call failed: No route to host
500 End.
</screen>
You can set up a range of ports to be open on the firewall and configure
GridFTP to use them. See <olink targetptr="gridftp-config-security-firewalls">the GridFTP admin firewall doc.</olink>

</section>

  <section id="q-gram2"><title>Setting up your second machine: GRAM5</title>
<para>

Now we can submit a staging job.  This job will copy the <command>/bin/echo</command> command from donkey to a file
called <filename>/tmp/my_echo</filename>.  Then
it runs it with some arguments, and captures the stderr/stdout.  Finally, it will clean up the my_echo file when execution is
done.
<screen>
<prompt>donkey %</prompt> <userinput>wget http://globus.org/toolkit/docs/5.2/5.2.0/admin/quickstart/a.rsl</userinput>

<prompt>donkey %</prompt> <userinput> globusrun -f a.rsl -s -r elephant.globus.org:2119/jobmanager-fork</userinput>
<prompt>donkey %</prompt> <userinput>cat ~/stdout</userinput>
-rw-r--r-- 1 quser quser 24228 Nov 21 07:16 /tmp/my_echo

<prompt>donkey %</prompt> <userinput>ls /tmp/my_echo</userinput>
ls: /tmp/my_echo: No such file or directory
</screen>
This example staged in a file, had an executable act on that file, and cleaned up the file
afterward.
</para>
  <para>You can get other examples of GRAM RSL files from <olink targetdoc="gram5User" targetptr="gram5-user-usagescenarios">GRAM usage scenarios</olink>.
</para>
</section>
</section>


  <glossary role="auto" id="glossary-quickstart">
    <glossdiv><title>A</title>
      <glossentry>
        <glossterm>Irrelevant</glossterm>
        <glossdef>
          <para>If you can see this, the document was processed incorrectly. Use the
            <parameter>glossary.collection</parameter> parameter.</para>
        </glossdef>
      </glossentry>
    </glossdiv>
  </glossary>
</article>

