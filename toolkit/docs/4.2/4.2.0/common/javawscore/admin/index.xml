<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % xinclude SYSTEM "../../../xinclude.mod">
%xinclude;
]>
<book id="javawscore-admin">
  <title>Java WS Core Admin Guide</title>

  <bookinfo>
    <abstract>
      <title>Introduction</title>

      <para>This guide contains advanced configuration information for system
      administrators working with Java WS Core. It provides references to
      information on procedures typically performed by system administrators,
      including installation, configuring, deploying, and testing the
      installation.</para>

      <para><important>
          <simpara>This information is in addition to the basic Globus Toolkit
          prerequisite, overview, installation, security configuration
          instructions in the <olink targetdoc="gtadmin"></olink>. Read
          through this guide before continuing!</simpara>
        </important></para>
    </abstract>
  </bookinfo>

  <chapter id="javawscore-admin-installing"
           xreflabel="Building and Installing Java WS Core">
    <title>Building and Installing</title>

    <indexterm type="javawscore-howto">
      <primary>building and installing</primary>

      <secondary>general instructions</secondary>
    </indexterm>

    <indexterm type="javawscore">
      <primary>installing</primary>

      <secondary>general instructions</secondary>
    </indexterm>

    <para>Java WS Core is built and installed as part of a default <olink
    targetdoc="gtadmin">GT <replaceable
    role="entity">shortversion</replaceable> installation</olink>. No extra
    installation steps are required for this component.</para>

    <para>The following are optional instructions for more advanced types of
    installations. These are for those advanced users who want to build the
    latest code from CVS or are just interested in the Java WS Core.</para>

    <section id="javawscore-admin-buildfromsource">
      <title>Building from source</title>

      <indexterm type="javawscore-howto">
        <primary>building and installing</primary>

        <secondary>from source</secondary>
      </indexterm>

      <indexterm type="javawscore">
        <primary>building and installing</primary>

        <secondary>from source</secondary>
      </indexterm>

      <indexterm type="javawscore-howto">
        <primary>installing</primary>

        <secondary>from source</secondary>
      </indexterm>

      <indexterm type="javawscore">
        <primary>installing</primary>

        <secondary>from source</secondary>
      </indexterm>

      <orderedlist>
        <listitem>
          <para>Obtain the source code for Java WS Core:</para>

          <formalpara>
            <title>From CVS</title>

            <para><orderedlist>
                <listitem>
                  <para>To get the latest source from cvs execute: <screen> cvs -d :pserver:anonymous@cvs.globus.org:/home/globdev/CVS/globus-packages \
 checkout wsrf authorization</screen></para>
                </listitem>

                <listitem>
                  <para>Change into the <computeroutput>wsrf</computeroutput>
                  directory. <screen>cd wsrf</screen></para>
                </listitem>
              </orderedlist></para>
          </formalpara>

          <formalpara>
            <title>From Core-only source distribution</title>

            <para><orderedlist>
                <listitem>
                  <para>Untar or unzip the distribution archive. <screen> tar xvfz ws-core-XXX-src.tar.gz</screen></para>
                </listitem>

                <listitem>
                  <para>Change into the unpacked distribution directory.
                  <screen> cd ws-core-XXX</screen></para>
                </listitem>
              </orderedlist></para>
          </formalpara>
        </listitem>

        <listitem>
          <para>Set the <computeroutput>GLOBUS_LOCATION</computeroutput>
          environment variable to the absolute path of the target directory of
          your installation. On Windows:</para>

          <screen> set GLOBUS_LOCATION=c:\gt4</screen>

          <para>On Unix/Linux:</para>

          <screen> setenv GLOBUS_LOCATION /soft/gt4/</screen>

          <para>or</para>

          <screen> export GLOBUS_LOCATION=/soft/gt4/</screen>

          <para>If <computeroutput>GLOBUS_LOCATION</computeroutput> is not
          set, an <computeroutput>install</computeroutput> directory will be
          created under the current directory.</para>
        </listitem>

        <listitem>
          <para>Run build target.</para>

          <formalpara>
            <title>From CVS</title>

            <para><screen> ant all</screen></para>
          </formalpara>

          <formalpara>
            <title>From Core-only source distribution</title>

            <para><screen> ant all -Dauthz.install=../authorization-XXX</screen>
            For example, for GT 4.2.0, the directory will be ws-core-4.2.0 and
            the command would be as follows: <screen> ant all -Dauthz.install=../authorization-4.2.0</screen></para>
          </formalpara>

          <para>Additional arguments can be specified on the
          <computeroutput>ant</computeroutput> command line to customize the
          build: <itemizedlist>
              <listitem>
                <simpara><computeroutput>-DwindowsOnly=false</computeroutput>
                - generate launch scripts for standard Globus tools such as
                <computeroutput>grid-proxy-init</computeroutput>, etc.
                (Unix/Linux only)</simpara>
              </listitem>

              <listitem>
                <simpara><computeroutput>-Dall.scripts=true</computeroutput> -
                generate Windows and Unix launch scripts</simpara>
              </listitem>

              <listitem>
                <simpara><computeroutput>-Denable.container.desc</computeroutput>
                - create and configure the container with a global security
                descriptor</simpara>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </orderedlist>
    </section>

    <section id="javawscore-admin-installcoreonlybinary">
      <title>Installing Core-only binary distribution</title>

      <indexterm type="javawscore-howto">
        <primary>building and installing</primary>

        <secondary>Core-only binary distribution</secondary>
      </indexterm>

      <indexterm type="javawscore">
        <primary>building and installing</primary>

        <secondary>Core-only binary distribution</secondary>
      </indexterm>

      <indexterm type="javawscore-howto">
        <primary>installing</primary>

        <secondary>Core-only binary distribution</secondary>
      </indexterm>

      <indexterm type="javawscore">
        <primary>installing</primary>

        <secondary>Core-only binary distribution</secondary>
      </indexterm>

      <orderedlist>
        <listitem>
          <para>Untar or unzip the distribution archive. <screen> tar xvfz ws-core-XXX-bin.tar.gz</screen></para>
        </listitem>

        <listitem>
          <para>Change into the unpacked distribution directory. <screen> cd ws-core-XXX</screen></para>
        </listitem>

        <listitem>
          <para>Set the <computeroutput>GLOBUS_LOCATION</computeroutput>
          environment variable to the unpacked distribution directory. On
          Windows:</para>

          <screen> set GLOBUS_LOCATION=c:\gt4</screen>

          <para>On Unix/Linux:</para>

          <screen> setenv GLOBUS_LOCATION /soft/gt4/</screen>

          <para>or</para>

          <screen> export GLOBUS_LOCATION=/soft/gt4/</screen>
        </listitem>
      </orderedlist>
    </section>
  </chapter>

  <xi:include href="../Java_WS_Core_Interface_Config_Frag.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>

  <chapter id="javawscore-admin-deploying" xreflabel="Deploying Java WS Core">
    <title>Deploying</title>

    <para>The Globus services can be run either in the standalone Java WS Core
    container that is installed with GT, or deployed into Tomcat.</para>

    <xi:include href="Java_WS_Core_Deploy_Container_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>

    <xi:include href="Java_WS_Core_Deploy_Tomcat_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="Java_WS_Core_Deploy_JBoss_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />
  </chapter>

  <chapter id="javawscore-admin-testing">
    <title>Testing</title>

    <indexterm type="javawscore-howto">
      <primary>testing</primary>

      <secondary>your installation</secondary>
    </indexterm>

    <indexterm type="javawscore">
      <primary>testing</primary>

      <secondary>your installation</secondary>
    </indexterm>

    <para>To execute Java WS Core tests first ensure Ant is configured with
    JUnit (To install JUnit with Ant copy the junit.jar found in the JUnit
    distribution to the $ANT_HOME/lib directory).</para>

    <para>To execute the test do the following:</para>

    <orderedlist>
      <listitem>
        <para>Start the standalone container with
        <computeroutput>-nosec</computeroutput> argument: <screen> $ cd $GLOBUS_LOCATION $ bin/globus-start-container -nosec</screen></para>
      </listitem>

      <listitem>
        <para>Run the interoperability tests: <screen> $ ant -f share/globus_wsrf_test/runtests.xml
            runServer \ -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_interop.jar</screen></para>
      </listitem>

      <listitem>
        <para>Run the unit tests: <screen> $ ant -f share/globus_wsrf_test/runtests.xml runServer \
            -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_unit.jar -DbasicTestsOnly=true</screen></para>
      </listitem>

      <listitem>
        <para>If some tests failed examine the test results in the
        <computeroutput>$GLOBUS_LOCATION/share/globus_wsrf_test/tests/test-reports/</computeroutput>
        directory.</para>
      </listitem>
    </orderedlist>

    <para>Please see <olink targetdoc="javawscoreDeveloper"
    targetptr="javawscore-developer-runningtests">the developer guide</olink>
    for more information on running the tests and the testing
    infrastructure.</para>
  </chapter>

  <chapter id="javawscore-admin-security_considerations">
    <title>Security Considerations</title>

    <xi:include href="../Java_WS_Core_Security_Considerations_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
  </chapter>

  <chapter id="javawscore-admin-debugging">
    <title>Debugging</title>

    <xi:include href="../Java_WS_Core_Logging_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
  </chapter>

  <chapter id="javawscore-admin-troubleshooting"
           xreflabel="Troubleshooting Java WS Core">
    <title>Troubleshooting</title>

    <indexterm type="javawscore-howto">
      <primary>troubleshooting</primary>

      <secondary>for sys admins</secondary>
    </indexterm>

    <indexterm type="javawscore">
      <primary>troubleshooting</primary>

      <secondary>for sys admins</secondary>
    </indexterm>

    <para>For a list of common errors in GT, see <olink targetdoc="gtuser"
    targetptr="errors"></olink>.</para>

    <section id="javawscore-admin-globusstop">
      <title><computeroutput>globus-stop-container</computeroutput> fails with
      an authorization error</title>

      <para>By default <computeroutput>globus-stop-container</computeroutput>
      must be executed with the same credentials as the container it is
      running with. If the <emphasis>ShutdownService</emphasis> or the
      container is configured with separate private key and certificate files
      (usually
      <computeroutput>/etc/grid-security/containercert.pem</computeroutput>
      and
      <computeroutput>/etc/grid-security/containerkey.pem</computeroutput>) do
      the following to stop the container:</para>

      <screen> $ grid-proxy-init -cert /etc/grid-security/containercert.pem \ -key
        /etc/grid-security/containerkey.pem \ -out containerproxy.pem $ setenv X509_USER_PROXY
        containerproxy.pem $ globus-stop-container $ unsetenv X509_USER_PROXY $ rm
        containerproxy.pem</screen>

      <para>Alternatively, the <emphasis>ShutdownService</emphasis> can be
      configured with a separate gridmap file to allow a set of users to stop
      the container. Please see <olink targetdoc="security">WS Authentication
      &amp; Authorization</olink> for details.</para>
    </section>

    <section id="javawscore-admin-globusstart">
      <title><computeroutput>globus-start-container</computeroutput> hangs
      during startup</title>

      <para>By default Sun 1.4.x+ JVMs are configured to use
      <computeroutput>/dev/random</computeroutput> device as an entropy
      source. Sometimes the machine can run out of entropy and applications
      (such as the container) using the
      <computeroutput>/dev/random</computeroutput> device will block until
      more entropy is available. One workaround for this issue is to configure
      the JVM to use <computeroutput>/dev/urandom</computeroutput>
      (non-blocking) device instead. For Sun JVMs a
      <computeroutput>java.security.egd</computeroutput> system property can
      be set to configure a different entropy source. To set the system
      property and pass it to
      <computeroutput>globus-start-container</computeroutput> script do the
      following:</para>

      <screen> export GLOBUS_OPTIONS=-Djava.security.egd=file:/dev/urandom</screen>

      <para>or</para>

      <screen> setenv GLOBUS_OPTIONS -Djava.security.egd=file:/dev/urandom</screen>

      <para>The same issue can also affect client programs. If you are running
      a client program with a GT generated script, you can set the
      <computeroutput>GLOBUS_OPTIONS</computeroutput> environment property as
      described above. However, if you are using a custom script or directly
      launching a program using the <computeroutput>java</computeroutput>
      command line, make sure to set the
      <computeroutput>java.security.egd</computeroutput> system property
      explicitly on the <computeroutput>java</computeroutput> command line.
      For example:</para>

      <screen> java -classpath $CLASSPATH -Djava.security.egd=file:/dev/urandom
        my.package.FooProgram</screen>

      <para><emphasis>Note:</emphasis> This does not apply to Windows
      machines.</para>
    </section>

    <xi:include href="../Java_WS_Core_Errors_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../Java_WS_Core_Troubleshooting_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude" />
  </chapter>

  <chapter id="javawscore-admin-usage">
    <title>Usage statistics collection by the Globus Alliance</title>

    <xi:include href="../Java_WS_Core_Usage_Statistics_Frag.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
  </chapter>

  <glossary id="javawscore-admin-glossary" role="auto">
    <glossdiv>
      <title>A</title>

      <glossentry>
        <glossterm>Irrelevant</glossterm>

        <glossdef>
          <para>If you can see this, the document was processed incorrectly.
          Use the <parameter>glossary.collection</parameter> parameter.</para>
        </glossdef>
      </glossentry>
    </glossdiv>
  </glossary>

  <index type="javawscore">
    <title>Index</title>
  </index>
</book>