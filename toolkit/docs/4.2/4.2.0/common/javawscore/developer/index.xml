<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % xinclude SYSTEM "../../../xinclude.mod">
%xinclude;

]>
<book id="javawscoreDeveloper">
  <?dbhtml filename="index.html" ?>
  <title>Java WS Core : Developer&apos;s Guide</title>
  <titleabbrev>Developer&apos;s Guide</titleabbrev>
  <bookinfo>
    <abstract>
      <title>Introduction</title>
      <para>This guide contains information of interest to developers working with Java WS Core. It
        provides reference information for application developers, including APIs, architecture,
        procedures for using the APIs and code samples.</para>
    </abstract>
  </bookinfo>
  <chapter id="javawscore-developer-beforeyoubegin">
    <title>Before you begin</title>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../Java_WS_Core_Feature_Summary_Frag.xml"/>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../Java_WS_Core_Platform_Summary_Frag.xml"/>
    
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../Java_WS_Core_Compatibility_Summary_Frag.xml"/>
    
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../Java_WS_Core_Dependencies_Summary_Frag.xml"/>
    
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../Java_WS_Core_Security_Considerations_Frag.xml"/>

  </chapter>
  <chapter id="javawscore-developer-scenarios">
    <title>Usage scenarios</title>
    <section id="javawscore-developer-basics">
      <title>Basics</title>
      <section id="javawscore-developer-wsdlsoaprules">
        <title>WSDL/SOAP rules</title>
        <indexterm type="javawscore">
          <primary>WSDL/SOAP rules</primary>
        </indexterm>
        <para>The <glossterm baseform="Web Services Resource Framework">WSRF</glossterm> and
            <glossterm baseform="Web Services Notification">WSN</glossterm> specifications schemas
          follow the <emphasis>document/literal</emphasis> mode as described in <glossterm
            baseform="Web Services Interoperability Basic Profile">WS-I Basic Profile</glossterm>.
          The Basic Profile defines certain rules to follow for
          <emphasis>document/literal</emphasis> and other modes to ensure interoperability. </para>
        <para>Java WS Core relies on these restrictions so please keep them in mind when designing
          your own schema. </para>
        <section id="javawscore-developer-DocumentLiteral">
          <title>Document/literal</title>
          <indexterm type="javawscore">
            <primary>document/literal</primary>
          </indexterm>
          <para>In the <emphasis>document/literal</emphasis> mode as defined in the <glossterm
              baseform="Web Services Interoperability Basic Profile">WS-I Basic Profile</glossterm>
            at most one &lt;wsdl:part&gt; is allowed in the &lt;wsdl:message&gt;
            element and it must use the &apos;element&apos; attribute. Also, the wire
            signatures must be unique (cannot use the same &apos;element&apos; attribute in
            &lt;wsdl:part&gt; in two different &lt;wsdl:message&gt; elements). </para>
          <note>
            <para>
              <glossterm baseform="Apache Axis">Axis</glossterm>&apos; WSDL2Java tool might
              sometimes incorrectly detect that schema follows the
              <emphasis>wrapped/literal</emphasis> mode and generate wrong stub and type classes. To
              ensure that <emphasis>document/literal</emphasis> mode is always used: <itemizedlist>
                <listitem>
                  <simpara>use Java WS Core&apos;s
                    <computeroutput>generateStub*</computeroutput> Ant tasks in
                      <computeroutput>&lt;install&gt;/share/globus_wsrf_tools/build-stubs.xml</computeroutput>
                    file</simpara>
                </listitem>
                <listitem>
                  <simpara>if you are using Axis&apos; WSDL2Java tool directly, you can
                    alternatively specify the <computeroutput>-W</computeroutput> command line
                    option.</simpara>
                </listitem>
              </itemizedlist>Also, with <emphasis>wrapped/literal</emphasis> mode, the element name
              had to match the operation name in wsdl. This is <emphasis>not</emphasis> necessary
              with <emphasis>document/literal</emphasis> mode.</para>
          </note>
          <para/>
        </section>
        <section id="javawscore-developer-soapencoding">
          <title>SOAP Encoding</title>
          <indexterm type="javawscore">
            <primary>SOAP Encoding</primary>
          </indexterm>
          <para> Do <emphasis>not</emphasis> use or mix the literal mode with the SOAP encoding mode
              (<ulink
              url="http://www.ws-i.org/Profiles/BasicProfile-1.0-2004-04-16.html#refinement16638080"
              >R2706</ulink>). For example, do not use the
            <computeroutput>soapenc:Array</computeroutput> type. Please see the <ulink
              url="http://www.ws-i.org/Profiles/BasicProfile-1.0-2004-04-16.html#refinement16556272"
              >5.2.3 section</ulink> in the <glossterm
              baseform="Web Services Interoperability Basic Profile">WS-I Basic Profile</glossterm>
            for details. </para>
        </section>
      </section>
      <section id="javawscore-developer-OperationProvider">
        <title>Operation providers and its configuration</title>
        <indexterm type="javawscore">
          <primary>operation providers</primary>
        </indexterm>
        <para>GT3 introduced the concept of <emphasis>operation providers</emphasis> where a service
          could be composed of different parts/classes. Java WS Core also supports this
          functionality. In GT3 operation providers had to implement a specific interface. In Java
          WS Core <emphasis>no</emphasis> such interface is required. In fact, an operation provider
          is not in any way different from a standard web service. That means that
          <emphasis>any</emphasis> web service implementation can automatically be used as an
          operation provider (as long as it uses common or standard interfaces to operate on
          resources). </para>
        <para>To enable operation provider support for your service, make the following changes to
          the service deployment descriptor: <orderedlist>
            <listitem>
              <simpara>Change the value of the <computeroutput>provider</computeroutput> attribute
                to <computeroutput>Handler</computeroutput>.</simpara>
            </listitem>
            <listitem>
              <simpara>Add a <computeroutput>handleClass</computeroutput> parameter with a value of
                  <classname>org.globus.axis.providers.RPCProvider</classname>.</simpara>
            </listitem>
            <listitem>
              <simpara>Specify providers in the <computeroutput>providers</computeroutput>
                parameter. </simpara>
              <para>The value of the parameter is a space-separated list of either provider names or
                class names. If provider names are used, they must first be defined as parameters in
                the <computeroutput>&lt;globalConfiguration&gt;</computeroutput> element of
                the <emphasis>main</emphasis> deployment descriptor
                  (<computeroutput>etc\globus_wsrf_core\server-config.wsdd</computeroutput>). </para>
              <para>For example: </para>
              <screen>&lt;globalConfiguration&gt; ... &lt;parameter
                name=&quot;GetRPProvider&quot;
                value=&quot;org.globus.wsrf.impl.properties.GetResourcePropertyProvider&quot;/&gt;
                ... &lt;/globalConfiguration&gt;</screen>
            </listitem>
            <listitem>
              <simpara>Add or change the value of the <computeroutput>scope</computeroutput>
                parameter to <computeroutput>Application</computeroutput> or
                <computeroutput>Request</computeroutput>.</simpara>
            </listitem>
          </orderedlist>
        </para>
        <para>The following is an example of a modified service deployment descriptor:
            <screen>&lt;service name=&quot;SubscriptionManagerService&quot; <emphasis>
              provider=&quot;Handler&quot;</emphasis> use=&quot;literal&quot;
            style=&quot;document&quot;&gt; &lt;parameter
            name=&quot;allowedMethods&quot; value=&quot;*&quot;/&gt;
              <emphasis>&lt;parameter name=&quot;scope&quot;
              value=&quot;Application&quot;/&gt;</emphasis>
            <emphasis>&lt;parameter name=&quot;providers&quot; value=&quot;
              GetRPProvider org.globus.wsrf.impl.lifetime.SetTerminationTimeProvider
              PauseSubscriptionProvider&quot;/&gt;</emphasis>
            <emphasis>&lt;parameter name=&quot;handlerClass&quot;
              value=&quot;org.globus.axis.providers.RPCProvider&quot;/&gt;</emphasis>
            &lt;parameter name=&quot;className&quot;
            value=&quot;org.globus.wsrf.impl.notification.ResumeSubscriptionProvider&quot;/&gt;
            &lt;wsdlFile&gt;share/schema/core/notification/subscription_manager_service.wsdl&lt;/wsdlFile&gt;
            &lt;/service&gt;</screen>
          <note>
            <simpara>The operations defined in the <computeroutput>className</computeroutput>
              service always overwrite the providers&apos; operations. That is, if one provider
              defines the same method as the service specified in the
              <computeroutput>className</computeroutput> parameter, the operation will be invoked on
              the service. Also, if two providers define the same method, the first one specified in
              the <computeroutput>providers</computeroutput> parameter will be invoked.</simpara>
          </note>
        </para>
      </section>
      <section id="javawscore-developer-JNDIDetails">
        <title>JNDI configuration and programming</title>
        <indexterm type="javawscore">
          <primary>JNDI</primary>
        </indexterm>
        <para>Java WS Core uses a simple in-memory JNDI implementation provided by the <ulink
            url="http://directory.apache.org/subprojects/naming/">Naming subproject</ulink> of the
          Apache Directory Project. </para>
        <para> The <computeroutput>jndi-config.xml</computeroutput> files are used to configure the
          JNDI registry in Java WS Core. The file format of
          <computeroutput>jndi-config.xml</computeroutput> is slightly different from the <ulink
            url="http://jakarta.apache.org/tomcat/tomcat-5.0-doc/jndi-resources-howto.html"
            >Tomcat&apos;s <computeroutput>server.xml</computeroutput>
          </ulink> file. One main difference is that the
            <computeroutput>&lt;resourceParams&gt;</computeroutput> are specified as
          children of <computeroutput>&lt;resource&gt;</computeroutput> objects. Also, Java
          WS Core&apos;s <computeroutput>jndi-config.xml</computeroutput> parser is case
          sensitive and all element names are lowercase. </para>
        <para>All elements defined in the <computeroutput>&lt;global&gt;</computeroutput>
          section of the JNDI configuration file are deployed into the
          <computeroutput>java:comp/env</computeroutput> context under the name specified in the
          &apos;name&apos; attribute. All
          <computeroutput>&lt;service&gt;</computeroutput> elements are deployed into the
            <computeroutput>java:comp/env/services/&lt;service name&gt;</computeroutput>
          context. New objects and contexts can be added or modified dynamically at runtime but they
          will not be persisted. The only way to always have an object around is to deploy it in the
            <computeroutput>jndi-config.xml</computeroutput> file. All services
          <emphasis>share</emphasis> the same <computeroutput>java:comp/env</computeroutput>
          context. This is different from EJBs where each EJB has a separate
            <computeroutput>java:comp/env</computeroutput> context. </para>
        <para>Please see <ulink url="http://java.sun.com/products/jndi/tutorial/">The JNDI
          Tutorial</ulink> for more information on JNDI programming. </para>
        <section id="javawscore-developer-JNDIDetails-beans">
          <title>Deploying Java Beans</title>
          <indexterm type="javawscore-howto">
            <primary>Java Beans, deploying</primary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>Java Beans, deploying</primary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>deploying Java Beans</primary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>deploying Java Beans</primary>
          </indexterm>
          <para>When deploying a Java Bean using the
            <computeroutput>&lt;resource&gt;</computeroutput> entry in
              <computeroutput>jndi-config.xml</computeroutput> please note the following:</para>
          <itemizedlist>
            <listitem>
              <para> The Java Bean must have a default constructor. </para>
            </listitem>
            <listitem>
              <para> If the Java Bean implements the
                  <computeroutput>org.globus.wsrf.jndi.Initializable</computeroutput> interface the
                  <computeroutput>initialize()</computeroutput> method will be automatically called
                after all parameters are set on the bean. </para>
            </listitem>
            <listitem>
              <para> If the Java Bean implements the
                  <computeroutput>org.globus.wsrf.jndi.Destroyable</computeroutput> interface the
                  <computeroutput>destroy()</computeroutput> method will be automatically called on
                container shutdown. </para>
            </listitem>
            <listitem>
              <para> Each Java Bean is configured with a factory class specified by a
                  <emphasis>factory</emphasis> resource parameter. The <emphasis>factory</emphasis>
                is an optional parameter and therefore can be omitted. If this parameter is not
                specified, the default
                <computeroutput>org.globus.wsrf.tools.jndi.BeanFactory</computeroutput> factory
                class will be used. Otherwise, the class specified by the parameter will be used. Do
                not use <computeroutput>org.apache.naming.factory.BeanFactory</computeroutput> as a
                factory class. </para>
            </listitem>
          </itemizedlist>
        </section>
        <section id="javawscore-developer-JNDIDetails-initctx">
          <title>Obtaining <computeroutput>InitialContext</computeroutput>
          </title>
          <indexterm type="javawscore-howto">
            <primary>obtaining InitialContext</primary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>obtaining InitialContext</primary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>InitialContext</primary>
            <secondary>obtaining</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>InitialContext</primary>
            <secondary>obtaining</secondary>
          </indexterm>
          <para> To obtain JNDI <computeroutput>InitialContext</computeroutput> do: </para>
          <screen>import org.globus.wsrf.jndi.JNDIUtils; ... InitialContext ctx =
            JNDIUtils.getInitialContext(); Foo foo = (Foo)ctx.lookup(...);</screen>
          <note>
            <para>It is important to use this API to obtain the
              <computeroutput>InitialContext</computeroutput> as the context must be initialized
              with the right properties. That ensures that the right JNDI implementation is used as
              there might be other JNDI implementations present as for example in application
              servers such as JBoss.</para>
          </note>
        </section>
      </section>
      <section id="javawscore-developer-Activation">
        <title>Lifecycle and activation</title>
        <section id="javawscore-developer-activating-service">
          <title>Activating a service</title>
          <para>To activate a service, an RPCProvider is available from both Axis and Globus.
          </para>
        </section>
        <section id="javawscore-developer-activating-service-axis">
          <title>Activating a service using the Axis RPCProvider</title>
          <indexterm type="javawscore-howto">
            <primary>activating</primary>
            <secondary>service</secondary>
            <tertiary>using the Axis RPCProvider</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>activating a service</primary>
            <secondary>service</secondary>
            <tertiary>using the Axis RPCProvider</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>service</primary>
            <secondary>activating</secondary>
            <tertiary>using the Axis RPCProvider</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>service</primary>
            <secondary>activating</secondary>
            <tertiary>using the Axis RPCProvider</tertiary>
          </indexterm>
          <para> The <computeroutput>scope</computeroutput> setting of the service dictates when and
            how service instances are created:</para>
          <table>
            <title>Scope settings</title>
            <tgroup cols="2">
              <tbody>
                <row>
                  <entry>
                    <emphasis>Application</emphasis>
                  </entry>
                  <entry>One instance of the service is used for all invocations.</entry>
                </row>
                <row>
                  <entry>
                    <emphasis>Request</emphasis>
                  </entry>
                  <entry>One instance is created per invocation. This is the default (if scope
                    parameter is not set in the deployment descriptor).</entry>
                </row>
                <row>
                  <entry>
                    <emphasis>Session</emphasis>
                  </entry>
                  <entry> One instance is created per session. </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>If the service implements the <ulink
              url="http://java.sun.com/j2ee/1.4/docs/api/javax/xml/rpc/server/ServiceLifecycle.html"
              >javax.xml.rpc.server.ServiceLifecycle</ulink> interface, the lifecycle methods will
            be called according to the <computeroutput>scope</computeroutput> setting as a service
            instance is created and destroyed. </para>
          <para>For example, in <emphasis>Application</emphasis> scope,
            <emphasis>destroy()</emphasis> will be called on container shutdown, and in
              <emphasis>Request</emphasis> scope it will be called after the service method is
            called. </para>
          <para> With Axis RPCProvider, JAAS credentials are never associated with the invocation
            thread. </para>
        </section>
        <section id="javawscore-developer-activating-service-globus">
          <title>Activating a service using the Globus RPCProvider</title>
          <indexterm type="javawscore-howto">
            <primary>activating</primary>
            <secondary>service</secondary>
            <tertiary>using the Globus RPCProvider</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>activating</primary>
            <secondary>service</secondary>
            <tertiary>using the Globus RPCProvider</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>service</primary>
            <secondary>activating</secondary>
            <tertiary>using the Globus RPCProvider</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>service</primary>
            <secondary>activating</secondary>
            <tertiary>using the Globus RPCProvider</tertiary>
          </indexterm>
          <para> The <computeroutput>scope</computeroutput> setting of the service dictates when and
            how service instances are created (only <emphasis>Application</emphasis> and
              <emphasis>Request</emphasis> scopes are supported with Globus RPCProvider):</para>
          <table>
            <title>Scope settings and activation</title>
            <tgroup cols="2">
              <tbody>
                <row>
                  <entry>
                    <emphasis>Application</emphasis>
                  </entry>
                  <entry>
                    <para>Service/provider instances are created either on first invocation or on
                      container startup. The behavior is determined by the value of the
                      &quot;loadOnStartup&quot; parameter. This will work in the same way in
                      both the stand-alone container and in Tomcat. </para>
                    <para> If the service or the container is configured with a security descriptor,
                      the appropriate credentials will be associated with the thread during
                      activation (using JAAS). Also, during activation a basic Axis MessageContext
                      will be associated with the thread with only
                        <computeroutput>Constants.MC_HOME_DIR</computeroutput>,
                        <computeroutput>Constants.MC_CONFIGPATH</computeroutput>, and the right
                      target service properties set (see <olink targetdoc="javawscoreDeveloper"
                        targetptr="javawscore-developer-ContextProperties"/> for details). If
                      service or providers implement the <ulink
                        url="http://java.sun.com/j2ee/1.4/docs/api/javax/xml/rpc/server/ServiceLifecycle.html"
                        >javax.xml.rpc.server.ServiceLifecycle</ulink> interface, the lifecycle
                      methods will be called accordingly. </para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <emphasis>Request</emphasis>
                  </entry>
                  <entry>
                    <para>One instance is created per invocation. This is the default (if scope
                      parameter is not set in the deployment descriptor).</para>
                    <para>Behaves more or less just like the Axis RPCProvider (service/providers
                      instances are created per invocation, ServiceLifecycle methods called right
                      before and after service method invocation, no JAAS credentials during
                      ServiceLifecycle methods). </para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="javawscore-developer-activating-resourceHome">
          <title>Activating a ResourceHome</title>
          <indexterm type="javawscore-howto">
            <primary>activating</primary>
            <secondary>ResourceHome</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>activating</primary>
            <secondary>ResourceHome</secondary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>ResourceHome</primary>
            <secondary>activating</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>ResourceHome</primary>
            <secondary>activating</secondary>
          </indexterm>
          <para>A <glossterm>ResourceHome</glossterm> will be activated either on the first service
            invocation or, if <emphasis>&quot;loadOnStartup&quot;</emphasis> parameter is
            set to <emphasis>&quot;true&quot;</emphasis>, during container startup. Both
            mechanisms trigger actual activation by looking up the ResourceHome in the JNDI
            directory. This initial lookup causes a proper MessageContext and/or JAAS subject to be
            associated with the current thread, instantiation of the object implementing the
            ResourceHome and, if the ResourceHome implements the
              <emphasis>org.globus.wsrf.jndi.Initializable</emphasis> interface, the invocation of
            the <emphasis>initialize()</emphasis> function. </para>
          <para>In fact, the same steps are performed upon initial lookup of any JNDI
              <emphasis>resource</emphasis> entry that uses the
              <emphasis>org.globus.wsrf.jndi.BeanFactory</emphasis> class for its factory and is
            defined directly under a <emphasis>service</emphasis> entry in a
              <emphasis>jndi-config.xml</emphasis> file. </para>
        </section>
        <section id="javawscore-developer-activating-serviceResourceHome">
          <title>Activating ServiceResourceHome</title>
          <indexterm type="javawscore-howto">
            <primary>activating</primary>
            <secondary>ServiceResourceHome</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>activating</primary>
            <secondary>ServiceResourceHome</secondary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>ServiceResourceHome</primary>
            <secondary>activating</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>ServiceResourceHome</primary>
            <secondary>activating</secondary>
          </indexterm>
          <para>If you are using a ServiceResourceHome please make sure to deploy the service with
            the <emphasis>&quot;loadOnStartup&quot;</emphasis> option enabled and in
              <emphasis>Application</emphasis> scope. That will ensure that the ResourceHome is
            initialized with the right service/resource. </para>
        </section>
      </section>
    </section>
    <section id="javawscore-developer-programming">
      <title>Programming</title>
      <section id="javawscore-developer-programming-general">
        <title>General</title>
        <section id="javawscore-developer-ApacheAddressing">
          <title>Using Apache Addressing API</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>using Apache Addressing API</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>using Apache Addressing API</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>Apache Addressing API</primary>
            <secondary>using</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>Apache Addressing API</primary>
            <secondary>using</secondary>
          </indexterm>
          <para>The WS-RF and WS-N specifications distributed with Java WS Core use
              <emphasis>WS-Addressing 1.0</emphasis> for
            addressing services and resources. Java WS Core uses a modified version of  <ulink
              url="http://ws.apache.org/ws-fx/addressing/">Apache Addressing</ulink> library for
            WS-Addressing support. The API is pretty straightforward and easy to use. Most of the
            work is done in <computeroutput>AddressingHandler</computeroutput> deployed in the
            client and server configuration files. See <ulink
              url="http://ws.apache.org/ws-fx/addressing/">Apache Addressing documentation</ulink>
            for details. </para>
            <para> Since the Apache Addressing project is being archived, the source code has been imported to Globus CVS and package name has been changed to avoid conflicts. Refer to FIXME: LINK TO TECH DEPENDENCY.
            </para>
          <section id="javawscore-developer-call">
            <title>Using the call object directly</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>general</secondary>
              <tertiary>using the call object directly</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>general</secondary>
              <tertiary>using the call object directly</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>call object</primary>
              <secondary>using directly</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>call object</primary>
              <secondary>using directly</secondary>
            </indexterm>
            <para>If you are using the <computeroutput>javax.xml.rpc.Call</computeroutput> object
              directly, you can pass the addressing information by setting a
                <computeroutput>Constants.ENV_ADDRESSING_REQUEST_HEADERS</computeroutput> property
              on the call object. </para>
            <para>For example: <screen>Service service = new Service(); Call call = (Call)
                service.createCall(); String url =
                &quot;http://localhost:8080/axis/services/Version&quot;; AddressingHeaders
                headers = new AddressingHeaders(); headers.setTo(new To(url)); // pass the
                addressing info to the addressing handler
                call.setProperty(Constants.ENV_ADDRESSING_REQUEST_HEADERS, headers);
                call.setTargetEndpointAddress(new URL(url)); call.setOperationName(new QName(url,
                &quot;getVersion&quot;)); // url here is just a namespace String ret =
                (String) call.invoke(new Object[]);</screen>
            </para>
          </section>
          <section id="javawscore-developer-addressinglocator">
            <title>Using the AddressingLocator class</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>general</secondary>
              <tertiary>using the AddressingLocator class</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>general</secondary>
              <tertiary>using the AddressingLocator class</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>AddressingLocator class</primary>
              <secondary>using</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>AddressingLocator class</primary>
              <secondary>using</secondary>
            </indexterm>
            <para>The Apache Addressing library also contains a version of Axis&apos; WSDL2Java
              tool. It extends the Axis&apos; WSDL2Java tool functionality by generating, in
              addition to all the regular classes, the
                <interfacename>&lt;service&gt;Addressing</interfacename> interface and
                <interfacename>&lt;service&gt;AddressingLocator</interfacename> class. </para>
            <para>The <computeroutput>AddressingLocator</computeroutput> class can be used to get a
              stub for a service by passing the Apache Addressing
                <computeroutput>EndpointReferenceType</computeroutput> parameter. </para>
            <para>For example: <screen>String url =
                &quot;http://localhost:8080/axis/services/Version&quot;;
                EndpointReferenceType epr = new EndpointReferenceType(); epr.setAddress(new
                Address(url)); VersionServiceAddressingLocator locator = new
                VersionServiceAddressingLocator(); VerionServicePortType port =
                locator.getVersionPort(epr); port.getVersion();</screen>
            </para>
          </section>
          <section id="javawscore-developer-referenceparameters">
            <title>ReferenceParameters</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>general</secondary>
              <tertiary>using ReferenceParameters</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>general</secondary>
              <tertiary>using ReferenceParameters</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>ReferenceParameters</primary>
              <secondary>using</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>ReferenceParameters</primary>
              <secondary>using</secondary>
            </indexterm>
            <para>In the WS-RF and WS-N specifications, the WS-Addressing
                <computeroutput>ReferenceParameters</computeroutput> are used to carry resource
              identity information. In previous versions of the WSRF/WSN specification, ReferenceProperties was used for the same purpose. The resource identity can be anything as long as it serializes
              as a XML element. The <computeroutput>ReferenceParameters</computeroutput> are
              serialized as separate SOAP headers in the SOAP envelope. </para>
            <para>The Apache Addressing library only allows a DOM
              <computeroutput>Element</computeroutput> or a
              <computeroutput>SOAPElement</computeroutput> to be a reference parameters. </para>
            <para>For example, create <computeroutput>ReferenceParametersType</computeroutput> and
              fill it with resource key info: </para>
            <screen>// create a reference property QName keyName = new
              QName(&quot;http://axis.org&quot;, &quot;VersionKey&quot;); String
              keyValue = &quot;123&quot;; SimpleResourceKey key = new
              SimpleResourceKey(keyName, keyValue); ReferenceParametersType props = new
              ReferenceParametersType(); // convert to SOAPElement and add to the list
              props.add(key.toSOAPElement()); ...</screen>
            <para>Then pass it to <computeroutput>AddressingHeaders</computeroutput>:</para>
            <screen>... Service service = new Service(); Call call = (Call) service.createCall();
              String url = &quot;http://localhost:8080/axis/services/Version&quot;;
              AddressingHeaders headers = new AddressingHeaders(); headers.setTo(new To(url));
                <emphasis>headers.setReferenceParameters(props);</emphasis> // pass the addressing
              info to the addressing handler
              call.setProperty(Constants.ENV_ADDRESSING_REQUEST_HEADERS, headers);
              call.setTargetEndpointAddress(new URL(url)); call.setOperationName(new QName(url,
              &quot;getVersion&quot;)); // url here is just a namespace String ret =
              (String) call.invoke(new Object[]);</screen>
            <para> Or set it on <computeroutput>EndpointReferenceType</computeroutput>: </para>
            <screen>... String url =
              &quot;http://localhost:8080/axis/services/Version&quot;; EndpointReferenceType
              epr = new EndpointReferenceType(); epr.setAddress(new Address(url));
                <emphasis>epr.setParameters(props);</emphasis> VersionServiceAddressingLocator
              locator = new VersionServiceAddressingLocator(); VerionServicePortType port =
              locator.getVersionPort(epr); port.getVersion();</screen>
            <para/>
          </section>
        </section>
        <section id="javawscore-developer-anyapi">
          <title>Working with <computeroutput>AnyContentType</computeroutput> content</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>working with AnyContentType content</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>working with AnyContentType content</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>AnyContentType</primary>
            <secondary>working with AnyContentType content</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>AnyContentType</primary>
            <secondary>working with AnyContentType content</secondary>
          </indexterm>
          <para> Java Beans generated by Apache Axis that represent a XML type with the
              <computeroutput>xsd:any</computeroutput> content implement the
              <computeroutput>org.apache.axis.encoding.AnyContentType</computeroutput> interface and
            have <computeroutput>get_any()</computeroutput> and
            <computeroutput>set_any()</computeroutput> methods. There are several API to help you
            deal with the <computeroutput>AnyContentType</computeroutput> content. </para>
          <para> To convert <computeroutput>AnyContentType</computeroutput> content to a Java object
            use the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/encoding/ObjectDeserializer.html"
              >ObjectDeserializer</ulink> API. For example:</para>
          <screen> AnyContentType bean = ...; Integer value =
            (Integer)ObjectDeserializer.getFirstAsObject( bean), Integer.class);</screen>
          <para> To convert a Java object into a type that can be used with
              <computeroutput>AnyContentType</computeroutput> content use the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/encoding/ObjectSerializer.html"
              >ObjectSerializer</ulink> API. For example:</para>
          <screen> // convert Java object into SOAPElement EndpointReferenceType object = ...; QName
            elementName = new QName("http://example.com", "EPR"); SOAPElement element =
            ObjectSerializer.toSOAPElement(object, elementName); // set the SOAPlement as Any
            content AnyContentType bean = ...; AnyHelper.setAny(bean, element);</screen>
          <para> To examine the raw <computeroutput>AnyContentType</computeroutput> content use the
              <ulink url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/utils/AnyHelper.html"
            >AnyHelper</ulink> API to serialize it as XML. For example:</para>
          <screen> AnyContentType bean = ...; String contents = AnyHelper.toSingleString(bean);
            System.out.println("Contents: " + contents);</screen>
        </section>
        <section id="javawscore-developer-object-ser-dser">
          <title>Serializing and deserializing Java objects to and from files</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>Serializing and deserializing Java objects to and from files</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>Serializing and deserializing Java objects to and from files</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>Java</primary>
            <secondary>serializing and deserializing Java objects to and from files</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>Java</primary>
            <secondary>serializing and deserializing Java objects to and from files</secondary>
          </indexterm>
          <para>You can use the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/encoding/ObjectSerializer.html"
              >ObjectSerializer</ulink> API to serialize the Java object into a file (in XML
            format):</para>
          <screen> // object to serialize EndpointReferenceType epr = ...; // root element name
            QName elementName = new QName("http://example.com", "EPR"); FileWriter out = null; try {
            out = new FileWriter("epr.xml"); ObjectSerializer.serialize(out, epr, elementName);
            out.write('\n'); } catch (IOException e) { System.err.println("Error: " +
            e.getMessage()); } finally { if (out != null) { try { out.close(); } catch (Exception
            ee) {} } } </screen>
          <para>Similarly, use can use the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/encoding/ObjectDeserializer.html"
              >ObjectDeserializer</ulink> API to deserialize a file containing XML data into a Java
            object:</para>
          <screen> // deserialized object EndpointReferenceType epr = ...; FileInputStream in =
            null; try { in = new FileInputStream("epr.xml"); epr =
            (EndpointReferenceType)ObjectDeserializer.deserialize( new InputSource(in),
            EndpointReferenceType.class); } catch (IOException e) { System.err.println("Error: " +
            e.getMessage()); } finally { if (in != null) { try { in.close(); } catch (Exception ee)
            {} } } </screen>
        </section>
        <section id="javawscore-developer-NotificationConsumer">
          <title>Setting up and receiving notifications (Notification Consumer)</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>setting up and receiving notifications</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>setting up and receiving notifications</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>notifications</primary>
            <secondary>setting up and receiving notifications</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>notifications</primary>
            <secondary>setting up and receiving notifications</secondary>
          </indexterm>
          <para>There are a few steps involved in setting up and receiving notifications:</para>
          <section id="javawscore-developer-callback">
            <title>Step 1: Implement the callback </title>
            <para>The notification consumer application must provide an implementation of the <ulink
                url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/NotifyCallback.html">NotifyCallback</ulink>
              interface. The <computeroutput>deliver</computeroutput> function of the interface will
              be invoked whenever a notification for that consumer arrives.</para>
            <para>
              <note>
                <simpara>The <computeroutput>deliver</computeroutput> function should be thread-safe
                  as multiple notifications might come at once. Notifications might also come
                  unordered and some might even be lost (due to network failures).</simpara>
              </note>
            </para>
            <section>
              <title>Resource property notifications</title>
              <para>For resource property notifications the <computeroutput>message</computeroutput>
                parameter will usually be of
                  <computeroutput>ResourcePropertyValueChangeNotificationElementType</computeroutput>
                type. From that type you can retrieve the real notification message which contains
                the new and optionally the old value of the resource property. Example:</para>
              <screen> 
import org.globus.wsrf.encoding.DeserializationException;
import org.globus.wsrf.utils.NotificationUtil;
import org.oasis.wsrf.properties.ResourcePropertyValueChangeNotificationType;
...
// Notification callback
public void deliver(List topicPath, EndpointReferenceType producer,
                    Object message) {

    
    ResourcePropertyValueChangeNotificationType changeMessage
                        = null;
    try {
         changeMessage = NotificationUtil.getRPValueChangeNotification(message);
   } catch (DeserializationException e) {
        // handle exception
   }

Integer newValue =
                (Integer)ObjectDeserializer.getFirstAsObject( changeMessage.getNewValue(),
                Integer.class); System.out.println("New value: " + newValue); if
                (changeMessage.getOldValue() != null) { Integer oldValue =
                (Integer)ObjectDeserializer.getFirstAsObject( changeMessage.getNewValue(),
                Integer.class); System.out.println("Old value: " + oldValue); } } </screen>
              <para>The resource property values are of
                <computeroutput>AnyContentType</computeroutput> type. Please see the <olink
                  targetdoc="javawscoreDeveloper" targetptr="javawscore-developer-anyapi">Working with
                  AnyContentType content</olink> section for more information on how to deal with
                such types.</para>
            </section>
            <section>
              <title>Other notifications</title>
              <para>For other non-resource property notifications the
                <computeroutput>message</computeroutput> parameter will either be of the type into
                which the message type maps into (if there is an appropriate type mapping defined)
                or of <computeroutput>org.w3c.dom.Element</computeroutput> type if there is no
                appropriate type mapping defined. Example: </para>
              <screen>public void deliver(List topicPath, EndpointReferenceType producer, Object
                message) { EndpointReferenceType epr = null; if (message instanceof Element) { //
                type mapping not defined, try to deserialize into right Java // type using
                ObjectDeserializer API. epr = (EndpointReferenceType)ObjectDeserializer.toObject(
                (Element)message, EndpointReferenceType.class); } else if (message instanceof
                EndpointReferenceType) { // type mapping defined epr =
                (EndpointReferenceType)message; } else { // some other type } }</screen>
              <para> The custom notification message type mappings can be defined in a
                  <filename>client-server-config.wsdd</filename> file. This file can be deployed
                with your service (it must be placed directly under the <filename>etc/</filename>
                directory in the GAR file). Please see the
                  <filename>$GLOBUS_LOCATION/etc/globus_wsrf_core/client-server-config.wsdd</filename>
                file for an example. If your callback implementation will be used on the
                server-side, you might also need to define the type mappings in your
                  <filename>server-config.wsdd</filename>. </para>
            </section>
          </section>
          <section id="javawscore-developer-notificationconsumermgr">
            <title>Step 2: Start NotificationConsumerManager</title>
            <para>In order to facilitate the receipt of notifications, start a
                <computeroutput>NotificationConsumerManager</computeroutput> by doing the following: </para>
            <screen> import org.globus.wsrf.NotificationConsumerManager; ...
              NotificationConsumerManager consumer = null; try { consumer =
              NotificationConsumerManager.getInstance(); consumer.startListening(); ... } catch
              (...) { ... } </screen>
            <important>
              <simpara> On the client when the
                <computeroutput>consumer.startListening()</computeroutput> is called an embedded
                container is actually started in the background. That embedded container is the same
                as the standalone container but configured with only one or two services needed to
                handle the notifications. Therefore, any client using notification consumer API will
                have the same dependencies on the libraries and configurations files as the basic
                standalone container code. Also, please check the <olink targetdoc="javawscoreUser"
                  targetptr="javawscore-user-notificationconsumer"/> if the
                  <computeroutput>consumer.startListening()</computeroutput> call failed on the
                client. </simpara>
              <simpara> On the server when the
                <computeroutput>consumer.startListening()</computeroutput> is called the container
                in which the service is running in is used to receive the notifications. Therefore,
                there are no extra dependencies. </simpara>
            </important>
          </section>
          <section id="javawscore-developer-registrationcallback">
            <title>Step 3: Register the callback</title>
            <para>Register the callback implementation with the
                <computeroutput>NotificationConsumerManager</computeroutput> (once it is started)
              using the <computeroutput>createNotificationConsumer</computeroutput> function. </para>
            <para>The <computeroutput>createNotificationConsumer</computeroutput> function returns
              an endpoint for this notification consumer. </para>
            <para>Example: <screen> import org.globus.wsrf.NotifyCallback; import
                org.apache.axis.message.addressing.EndpointReferenceType; ... MyCallback callback =
                new MyCallback(); EndpointReferenceType consumerEPR =
                consumer.createNotificationConsumer(callback); ... class MyCallback implements
                NotifyCallback { .... } </screen>
            </para>
          </section>
          <section id="javawscore-developer-subscription">
            <title>Step 4: Subscribe to the callback</title>
            <para>Pass the endpoint returned by the
              <computeroutput>createNotificationConsumer</computeroutput> function to the subscribe
              call. </para>
            <para>Example: <screen> import org.oasis.wsn.TopicExpressionType; import
                org.oasis.wsn.Subscribe; import org.oasis.wsn.SubscribeResponse; import
                org.globus.wsrf.WSNConstants; import org.globus.wsrf.WSRFConstants; ...
                Subscribe request = new Subscribe();
     request.setConsumerReference(consumerEPR);
     TopicExpressionType topicExpression = new TopicExpressionType();
     topicExpression.setDialect(WSNConstants.SIMPLE_TOPIC_DIALECT);
     topicExpression.setValue(Counter.VALUE);
     MessageElement element = 
            (MessageElement)ObjectSerializer
            .toSOAPElement(topicExpression, WSNConstants.TOPIC_EXPRESSION);
     FilterType filter = new FilterType();
     filter.set_any(new MessageElement[] { element });
     request.setFilter(filter);
                port.subscribe(request); ... </screen>
            </para>
          </section>
          <section id="javawscore-developer-cleanup">
            <title>Step 5: Clean up</title>
            <para>Once done with the notifications, do the following clean up tasks.</para>
            <formalpara>
              <title>Step 5a: Destroy subscriptions resource</title>
              <para>Make sure to explicitly destroy the subscription resource or set its termination
                time. Example: <screen> import
                  org.globus.wsrf.core.notification.SubscriptionManager; import
                  org.globus.wsrf.core.notification.service.SubscriptionManagerServiceAddressingLocator;
                  import org.oasis.wsrf.lifetime.Destroy; ...
                  SubscriptionManagerServiceAddressingLocator sLocator = new
                  SubscriptionManagerServiceAddressingLocator(); SubscriptionManager manager =
                  sLocator.getSubscriptionManagerPort( subResponse.getSubscriptionReference());
                  manager.destroy(new Destroy()); ... </screen>
              </para>
            </formalpara>
            <formalpara>
              <title>Step 5b: Un-register the callback</title>
              <para> Make sure to call (especially in error cases) the <emphasis>
                  <computeroutput>NotificationConsumerManager.removeNotificationConsumer()</computeroutput>
                </emphasis> function to unregister the callback from the
                  <computeroutput>NotificationConsumerManager</computeroutput>. </para>
            </formalpara>
            <formalpara>
              <title>Step 5c: Release resources</title>
              <para>In addition, make sure to always call the <emphasis>
                  <computeroutput>NotificationConsumerManager.stopListening()</computeroutput>
                </emphasis> function when finished using the
                  <computeroutput>NotificationConsumerManager</computeroutput>. Otherwise, some
                resources might not be released. Example: <screen> ... } catch(Exception e) { ... }
                  finally { if (consumer != null) { try { consumer.stopListening(); } catch
                  (Exception ee) {} } }</screen>
              </para>
            </formalpara>
          </section>
        </section>
        <section id="javawscore-developer-core-version">
          <title>Obtaining version information</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>obtaining version information</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>obtaining version information</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>version</primary>
            <secondary>obtaining version information</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>version</primary>
            <secondary>obtaining version information</secondary>
          </indexterm>
          <para> The <ulink url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/utils/Version.html"
            >Version</ulink> API can be used to obtain Java WS Core version information
            programmatically. For example to display major, minor and patch version information do:
              <screen> import org.globus.wsrf.utils.Version; ... System.out.println("Major: " +
              Version.getMajor()); System.out.println("Minor: " + Version.getMinor());
              System.out.println("Micro: " + Version.getMicro()); </screen>
          </para>
        </section>
        <section id="javawscore-developer-core-attachments">
          <title>Adding and retrieving SOAP Attachments</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>adding and retrieving SOAP Attachments</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>adding and retrieving SOAP Attachments</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>SOAP</primary>
            <secondary>adding and retrieving SOAP Attachments</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>SOAP</primary>
            <secondary>adding and retrieving SOAP Attachments</secondary>
          </indexterm>
          <para> Java WS Core supports SOAP with Attachments. DIME, MIME, and MTOM formats are
            supported. This section provides brief sample code. Detailed code can be found in the
            automated tests for this feature at <ulink
              url="http://viewcvs.globus.org/viewcvs.cgi/wsrf/java/core/test/unit/src/org/globus/wsrf/impl/security/"
            />, AttachmentTestService.java and AttachmentsTests.java. </para>
          <para>To add an attachment to a request do:</para>
          <screen> import javax.activation.DataHandler; import javax.activation.FileDataSource;
            import javax.xml.rpc.Stub; import org.apache.axis.client.Call; .... File file = new
            File(..); DataHandler dataHandler = new DataHandler(new FileDataSource(file));
            ((Stub)port)._setProperty( Call.ATTACHMENT_ENCAPSULATION_FORMAT,
            Call.ATTACHMENT_ENCAPSULATION_FORMAT_MTOM);
            ((org.apache.axis.client.Stub)port).addAttachment(dataHandler); </screen>
          <para>To retrieve attachments associated with a request do:</para>
          <screen> import javax.activation.DataHandler; import javax.xml.soap.AttachmentPart; import
            org.apache.axis.Message; import org.apache.axis.MessageContext; .... MessageContext
            msgContext = MessageContext.getCurrentContext(); Message reqMsg =
            msgContext.getRequestMessage(); if (reqMsg.getAttachmentsImpl() == null) { throw new
            Exception("Attachments are not supported"); } Iterator it = reqMsg.getAttachments();
            while (it.hasNext()) { AttachmentPart part = (AttachmentPart) it.next(); DataHandler
            dataHandler = part.getDataHandler(); } </screen>
          <para> The SwA support adds a small overhead to overall SOAP processing. To disable SwA
            support for improved performance delete
              <filename>$GLOBUS_LOCATION/lib/common/geronimo-activation_1.0.2_spec-1.1-SNAPSHOT.jar</filename>
            and
            <filename>$GLOBUS_LOCATION/lib/common/geronimo-javamail_1.3.1_spec-1.1-SNAPSHOT.jar</filename>
            files. </para>
          <para> Please note that SOAP attachments can be used with message security but they will
            not be signed or encrypted. </para>
        </section>
        <section id="javawscore-developer-xpath">
          <title>Querying resource properties using XPath</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>querying resource properties using XPath</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>general</secondary>
            <tertiary>querying resource properties using XPath</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>resource properties</primary>
            <secondary>querying resource properties using XPath</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>resource properties</primary>
            <secondary>querying resource properties using XPath</secondary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>XPath</primary>
            <secondary>querying resource properties using XPath</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>XPath</primary>
            <secondary>querying resource properties using XPath</secondary>
          </indexterm>
          <para> Java WS Core currently provides two ways of querying the resource properties using
            XPath: the standard method and a proprietary method. The standard method is defined by
            the <computeroutput>WS-ResourceProperties</computeroutput> specification and all
            implementations of this specification support it. The proprietary method is a custom
            solution and therefore only supported by Globus Toolkit. The proprietary method is a new
            query dialect called <computeroutput>TargetedXPath</computeroutput>. The
              <computeroutput>TargetedXPath</computeroutput> query dialect offers three key
            advantages over the standard XPath query method:</para>
          <itemizedlist>
            <listitem>
              <para>Namespace mappings - a set of explicit namespace mappings to be passed along
                with the query. With these mappings the query expression can be dramatically
                simplified as namespace prefixes can be used freely within the query.</para>
            </listitem>
            <listitem>
              <para>Single resource property querying - a specific resource property can be queried
                instead of the entire resource property document.</para>
            </listitem>
            <listitem>
              <para>WS-Enumeration support - the query results can be returned as an
              enumeration.</para>
            </listitem>
          </itemizedlist>
          <para>The <olink targetdoc="javawscoreDeveloper" targetptr="globus-xpath-query"/> command line
            tool can be used to query resource properties with the
            <computeroutput>TargetedXPath</computeroutput> query dialect. If the query results were
            returned as an enumeration they can be retrieved using the <olink
              targetdoc="javawscoreDeveloper" targetptr="ws-enumerate"/> command line tool.</para>
          <section>
            <title>API [FIXME: more specific title]</title>
            <para>Example querying resource properties using the
              <computeroutput>TargetedXPath</computeroutput> query dialect:</para>
            <screen> import org.globus.wsrf.core.query.targetedXPath.TargetedXPathQueryType; import
              org.globus.wsrf.core.query.targetedXPath.NamespaceMappingType; import
              org.globus.wsrf.query.targetedXPath.TargetedXPathConstants; ... TargetedXPathQueryType
              targetedQuery = new TargetedXPathQueryType(); NamespaceMappingType nsMap[] = new
              NamespaceMappingType[1]; nsMap[0] = new NamespaceMappingType();
              nsMap[0].setMappedName("fooPrefix"); nsMap[0].setNamespace(new
              URI("http://fooNamespace")); targetedQuery.setNamespaceMappings(nsMap);
              targetedQuery.setQueryString("boolean(//fooPrefix:fooElement)"); QueryExpressionType
              query = new QueryExpressionType();
              query.setDialect(TargetedXPathConstants.TARGETED_XPATH_DIALECT);
              query.setValue(targetedQuery); QueryResourceProperties_Element queryRequest = new
              QueryResourceProperties_Element(); queryRequest.setQueryExpression(query);
              QueryResourcePropertiesResponse queryResponse =
              port.queryResourceProperties(queryRequest); </screen>
            <para>To query a specific resource property do:</para>
            <screen> ... targetedQuery.setNamespaceMappings(nsMap);
              targetedQuery.setQueryString("boolean(//fooPrefix:fooElement)"); QName rp = new
              QName("http://foo", "bar"); targetedQuery.setResourcePropertyName(rp); ... </screen>
            <para>To return query results as an enumeration do:</para>
            <screen> import org.xmlsoap.schemas.ws._2004._09.enumeration.EnumerationContextType; ...
              targetedQuery.setNamespaceMappings(nsMap);
              targetedQuery.setQueryString("boolean(//fooPrefix:fooElement)");
              targetedQuery.setEnumerateResults(Boolean.TRUE); ... QueryResourcePropertiesResponse
              queryResponse = port.queryResourceProperties(queryRequest); EnumerationContextType
              context = (EnumerationContextType)ObjectDeserializer.getFirstAsObject( queryResponse,
              EnumerationContextType.class); </screen>
          </section>
        </section>
      </section>
      <section id="javawscore-developer-programming-server">
        <title>Service-side specific</title>
        <section id="javawscore-developer-EndpointInfo">
          <title>Obtaining container and service endpoint information</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>obtaining container and service endpoint information</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>obtaining container and service endpoint information</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>containers</primary>
            <secondary>obtaining endpoint information</secondary>
            <tertiary/>
          </indexterm>
          <indexterm type="javawscore">
            <primary>containers</primary>
            <secondary>obtaining endpoint information</secondary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>services</primary>
            <secondary>obtaining endpoint information</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>services</primary>
            <secondary>obtaining endpoint information</secondary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>endpoint</primary>
            <secondary>obtaining container and service endpoint information</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>endpoint</primary>
            <secondary>obtaining container and service endpoint information</secondary>
          </indexterm>
          <para>In most cases, a service will need to return the endpoint information of the
            container to a client. Unfortunately, getting that information might not be easy. The
            only reliable way of getting the container endpoint information is to extract it from
            the <computeroutput>MessageContext.TRANS_URL</computeroutput> property of the
              <computeroutput>MessageContext/ResourceContext</computeroutput> associated with the
            current thread. </para>
          <para>To obtain base container endpoint information use the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/container/ServiceHost.html"
            >ServiceHost</ulink> API. For example:</para>
          <screen> import org.globus.wsrf.container.ServiceHost; ... URL containerBaseUrl =
            ServiceHost.getBaseURL(); ... </screen>
          <para>The above will return the base container URL such as
              <computeroutput>http://localhost:8080/wsrf/services/</computeroutput>. </para>
          <para>To obtain service endpoint information use the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/ResourceContext.html">ResourceContext</ulink>
            API. For example:</para>
          <screen> import org.globus.wsrf.ResourceContext; ... URL serviceUrl =
            ResourceContext.getResourceContext().getServiceURL(); ... </screen>
          <para>The above will return the service URL such as
              <computeroutput>http://localhost:8080/wsrf/services/MyService</computeroutput>. </para>
          <para>To obtain WS-Addressing endpoint for the service use the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/wsrf/utils/AddressingUtils.html"
            >AddressingUtils</ulink> API. For example:</para>
          <screen> import org.apache.axis.message.addressing.EndpointReferenceType; import
            org.globus.wsrf.utils.AddressingUtils; ... EndpointReferenceType containerEndpoint =
            AddressingUtils.createEndpointReference(null); ... </screen>
          <para>The above will create a <computeroutput>EndpointReferenceType</computeroutput>
            object initialized with the <computeroutput>Address</computeroutput> field set to the
            service URL (as before) and empty reference properties. Also, you can pass a non-null
              <computeroutput>ResourceKey</computeroutput> instance to the
              <computeroutput>createEndpointReference()</computeroutput> function to create an
            endpoint for a specific resource. The reference properties field of the created
              <computeroutput>EndpointReferenceType</computeroutput> object will be set to the given
              <computeroutput>ResourceKey</computeroutput>. </para>
          <para>
            <note>
              <simpara>The <computeroutput>ServiceHost</computeroutput> API will return the correct
                information and <computeroutput>AddressingUtils</computeroutput> API will work
                correctly only if called from the same thread as the service method was invoked
                from.</simpara>
            </note>
          </para>
        </section>
        <section id="javawscore-developer-service-parameters">
          <title>Obtaining service parameters</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>obtaining service parameters</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>obtaining service parameters</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>service</primary>
            <secondary>obtaining service parameters</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>service</primary>
            <secondary>obtaining service parameters</secondary>
          </indexterm>
          <para>While we strongly recommend that you use the JNDI mechanism to provide your service
            with configuration information, it is sometimes necessary to obtain the value of
            parameters set in the <glossterm baseform="Web Services Deployment Descriptor"
            >WSDD</glossterm> file. Java WS Core provides some helper functions to ease this
            process:</para>
          <screen> import org.globus.wsrf.utils.ContextUtils; import org.apache.axis.MessageContext;
            ... MessageContext context = MessageContext.getCurrentContext(); String sampleProperty =
            (String) ContextUtils.getServiceProperty(context, &quot;myProperty&quot;); ... </screen>
          <para>Note that this function requires that a <classname>MessageContext</classname> is
            associated with the current thread, which in general means that the call needs to happen
            within the context of a web service invocation.</para>
          <note>
            <simpara>Specifying parameters using WSDD files depends on Axis and will likely not be
              supported in future versions of the toolkit.</simpara>
          </note>
        </section>
        <section id="javawscore-developer-ContextProperties">
          <title>Obtaining standard MessageContext properties</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>obtaining standard MessageContext properties</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>obtaining standard MessageContext properties</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>MessageContext</primary>
            <secondary>obtaining standard MessageContext properties</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>MessageContext</primary>
            <secondary>obtaining standard MessageContext properties</secondary>
          </indexterm>
          <para>The following properties can be obtained from the SOAPContext/MessageContext
            associated with the current thread: <itemizedlist>
              <listitem>
                <simpara>
                  <emphasis>
                    <computeroutput>org.apache.axis.Constants.MC_HOME_DIR</computeroutput>
                  </emphasis> - the base directory from which the wsdl files are loaded.</simpara>
              </listitem>
              <listitem>
                <simpara>
                  <emphasis>
                    <computeroutput>org.apache.axis.Constants.MC_CONFIGPATH</computeroutput>
                  </emphasis> - the base directory from which different configuration files are
                  loaded.</simpara>
              </listitem>
              <listitem>
                <simpara>
                  <emphasis>
                    <computeroutput>org.apache.axis.Constants.MC_REMOTE_ADDR</computeroutput>
                  </emphasis> - the IP address of the client.</simpara>
              </listitem>
              <listitem>
                <simpara>
                  <emphasis>
                    <computeroutput>org.apache.axis.MessageContext.TRANS_URL</computeroutput>
                  </emphasis> - the URL of the request.</simpara>
              </listitem>
            </itemizedlist>
          </para>
          <para>The <computeroutput>Constants.MC_CONFIGPATH</computeroutput> property should be used
            to load any type of configuration file. Only
            <computeroutput>Constants.MC_CONFIGPATH</computeroutput> and
              <computeroutput>Constants.MC_HOME_DIR</computeroutput> are associated with the thread
            during activation. In the standalone container the
            <computeroutput>Constants.MC_HOME_DIR</computeroutput> and
              <computeroutput>Constants.MC_CONFIGPATH</computeroutput> properties will usually point
            to the same directory. However, in Tomcat they will point to two different directories.
            Since GT 4.0.1, the <computeroutput>Constants.MC_HOME_DIR</computeroutput> value can be
            accessed using the
            <computeroutput>org.globus.wsrf.ContainerConfig.getSchemaDirectory()</computeroutput>
            static call, and <computeroutput>Constants.MC_CONFIGPATH</computeroutput> value via the
              <computeroutput>org.globus.wsrf.ContainerConfig.getBaseDirectory()</computeroutput>
            static call. </para>
        </section>
        <section id="javawscore-developer-LocalInvocations">
          <title>Making local calls</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>making local calls</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>making local calls</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>calls</primary>
            <secondary>making local calls</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>calls</primary>
            <secondary>making local calls</secondary>
          </indexterm>
          <para>Services in the container can be invoked locally. Local invocations work just like
            remote invocations (all handlers are called, messages get serialized/deserialized) but
            messages do not travel over the network - everything happens in memory. </para>
          <para>Local invocations can only be made on the server side. URLs with
              &quot;<emphasis>local</emphasis>&quot; protocol name are used for local
            invocations. </para>
          <para>To invoke a service locally, do the following: </para>
          <orderedlist>
            <listitem>
              <para>Create a service URL with &quot;<emphasis>local</emphasis>&quot;
                protocol: <screen>URL url = new
                    URL(<emphasis>&quot;local:///wsrf/services/MyService&quot;</emphasis>);</screen>
              </para>
            </listitem>
            <listitem>
              <para>And as normal make the call:</para>
              <screen> MyServiceAddressingLocator locator = new MyServiceAddressingLocator();
                MyService port = locator.getMyServicePort(url); port.hello(); </screen>
            </listitem>
          </orderedlist>
          <para>That's all. By default the local invocations are made using the default instance of
            the <computeroutput>AxisServer</computeroutput> engine. It is possible to make local
            invocations using a different <computeroutput>AxisServer</computeroutput> engine
            instance if there is a <computeroutput>MessageContext</computeroutput> associated with
            the current thread (the <computeroutput>MessageContext</computeroutput> should have a
            reference to the desired <computeroutput>AxisServer</computeroutput> engine instance).
            To make a local invocation using non-default <computeroutput>AxisServer</computeroutput>
            engine add the following (using above example):</para>
          <screen> import org.globus.axis.transport.local.LocalTransportUtils; ... MyService port =
            ... <emphasis>LocalTransportUtils.enableLocalTransport((Stub)port);</emphasis>
            port.hello(); </screen>
          <section id="javawscore-developer-LocalInvocations-protocol">
            <title>Registering URL protocol handler</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>service-side</secondary>
              <tertiary>registering URL protocol handler</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>service-side</secondary>
              <tertiary>registering URL protocol handler</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>URL protocol</primary>
              <secondary>registering URL protocol handler</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>URL protocol</primary>
              <secondary>registering URL protocol handler</secondary>
            </indexterm>
            <para> The &quot;<emphasis>local</emphasis>&quot; protocol URL handler is
              automatically registered by Java WS Core. However, sometimes it might be necessary to
              install the handler explicitly. To register the
              &quot;<emphasis>local</emphasis>&quot; URL protocol hander do the following:</para>
            <screen> import org.globus.axis.transport.local.LocalTransportUtils; ...
                <emphasis>LocalTransportUtils.init();</emphasis> ... </screen>
            <para>This step must be done before creating URLs with
              &quot;<emphasis>local</emphasis>&quot; protocol. Also, make sure that
                <computeroutput>axis-local.jar</computeroutput> is accessible from the system
              classloader.</para>
          </section>
        </section>
        <section id="javawscore-developer-programming-messagecontext-thread">
          <title>Associating <computeroutput>MessageContext</computeroutput> with current thread</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>associating MessageContext with current thread</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>service-side</secondary>
            <tertiary>associating MessageContext with current thread</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>MessageContext</primary>
            <secondary>associating MessageContext with current thread</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>MessageContext</primary>
            <secondary>associating MessageContext with current thread</secondary>
          </indexterm>
          <para> Axis associates a <computeroutput>MessageContext</computeroutput> object with the
            current thread of execution only during a remote service invocation (when a service
            method is actually called remotely). Sometimes, it might be necessary to execute a piece
            of code with some specific <computeroutput>MessageContext</computeroutput> object
            associated with the current thread. For example, a background server-side task might
            want to call some service method directly.</para>
          <para>The <ulink url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/axis/utils/MessageContextHelper.html"
              >MessageContextHelper</ulink> API can be used to temporarily associate a specific
              <computeroutput>MessageContext</computeroutput> object with the current thread in
            order to call some code that needs that context to be associated with the thread.
            Example: </para>
          <screen> import org.globus.axis.utils.MessageContextHelper; ... MessageContext newCtx =
            ...; MessageContextHelper helper = new MessageContextHelper(newCtx); helper.set(); try {
            // call code that needs MessageContext associated with the thread } finnally {
            helper.restore(); } ... </screen>
        </section>
      </section>
      <section id="javawscore-developer-programming-client">
        <title>Client-side specific</title>
        <section id="javawscore-developer-client-connection">
          <title>Controlling connection settings</title>
          <indexterm type="javawscore-howto">
            <primary>programming</primary>
            <secondary>client-side</secondary>
            <tertiary>controlling connection settings</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>client-side</secondary>
            <tertiary>controlling connection settings</tertiary>
          </indexterm>
          <indexterm type="javawscore-howto">
            <primary>connection</primary>
            <secondary>controlling connection settings</secondary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>connection</primary>
            <secondary>controlling connection settings</secondary>
          </indexterm>
          <para> By default Java WS Core clients will use HTTP 1.1 protocol with chunked encoding.
            Java WS Core clients will also attempt to reuse HTTP/S connections between the calls.
            The default timeout for clients is 10 minutes. All of these connection properties can be
            controlled programmatically using the <ulink
              url="http://www-unix.mcs.anl.gov/~gawor/jglobus-fx/HEAD/javadoc/org/globus/axis/transport/HTTPUtils.html"
              >HTTPUtils</ulink> API as shown below. </para>
          <note>
            <simpara>Please note that once a connection property is set on a given Stub, it is
              applied to ALL calls made using that Stub. </simpara>
          </note>
          <section id="javawscore-developer-client-connection-timeout">
            <title>Setting connection timeout</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>setting connection timeout</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>setting connection timeout</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>connection</primary>
              <secondary>setting connection timeout</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>connection</primary>
              <secondary>setting connection timeout</secondary>
            </indexterm>
            <para> To set connection timeout do (the timeout value is in milliseconds): </para>
            <screen> import org.globus.axis.transport.HTTPUtils; ... MyServiceAddressingLocator
              locator = new MyServiceAddressingLocator(); MyService port =
              locator.getMyServicePort(url); // set timeout to 2 minutes
                <emphasis>HTTPUtils.setTimeout((Stub)port, 1000 * 60 * 2);</emphasis> port.hello();
            </screen>
          </section>
          <section id="javawscore-developer-client-connection-close">
            <title>Controlling connection reuse</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>controlling connection reuse</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>controlling connection reuse</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>connection</primary>
              <secondary>controlling connection reuse</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>connection</primary>
              <secondary>controlling connection reuse</secondary>
            </indexterm>
            <para> To control connection reuse do: </para>
            <screen> import org.globus.axis.transport.HTTPUtils; ... MyServiceAddressingLocator
              locator = new MyServiceAddressingLocator(); MyService port =
              locator.getMyServicePort(url); // close connection after the call
                <emphasis>HTTPUtils.setCloseConnection((Stub)port, true);</emphasis> port.hello();
              // do not close connection - let it be reused
                <emphasis>HTTPUtils.setCloseConnection((Stub)port, false);</emphasis> port.hello();
            </screen>
          </section>
          <section id="javawscore-developer-client-connection-chunking">
            <title>Controlling HTTP chunked encoding</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>controlling HTTP chunked encoding</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>controlling HTTP chunked encoding</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>HTTP</primary>
              <secondary>controlling HTTP chunked encoding</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>HTTP</primary>
              <secondary>controlling HTTP chunked encoding</secondary>
            </indexterm>
            <para> To control whether HTTP chunked encoding should be used do: </para>
            <screen> import org.globus.axis.transport.HTTPUtils; ... MyServiceAddressingLocator
              locator = new MyServiceAddressingLocator(); MyService port =
              locator.getMyServicePort(url); // disable chunked encoding
                <emphasis>HTTPUtils.setChunkedEncoding((Stub)port, false);</emphasis> port.hello();
              // re-enable chunked encoding <emphasis>HTTPUtils.setChunkedEncoding((Stub)port,
                true);</emphasis> port.hello(); </screen>
          </section>
          <section id="javawscore-developer-client-connection-version">
            <title>Controlling HTTP protocol version</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>controlling HTTP protocol version</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>controlling HTTP protocol version</tertiary>
            </indexterm>
            <para> To control what HTTP protocol version should be used do: </para>
            <screen> import org.globus.axis.transport.HTTPUtils; ... MyServiceAddressingLocator
              locator = new MyServiceAddressingLocator(); MyService port =
              locator.getMyServicePort(url); // force HTTP 1.0
                <emphasis>HTTPUtils.setHTTP10Version((Stub)port, true);</emphasis> port.hello(); //
              force HTTP 1.1 <emphasis>HTTPUtils.setHTTP10Version((Stub)port, false);</emphasis>
              port.hello(); </screen>
          </section>
        </section>
        <section id="javawscore-developer-checking-container">
          <title>Checking if container is running</title>
          <section id="javawscore-developer-checking-container-remote">
            <title>Remote container</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>checking if container is running remotely</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>checking if container is running remotely</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>containers</primary>
              <secondary>checking if container is running remotely</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>containers</primary>
              <secondary>checking if container is running remotely</secondary>
            </indexterm>
            <para>To check if a container is running remotely (given the service URL) add
                <computeroutput>?wsdl</computeroutput> to the end of the service URL. If only the
              host and the port number information of the container are known, create an appropriate
              service URL using a standard service such as the
              <computeroutput>Version</computeroutput> service. For example:
                <computeroutput>http://[host]:[port]/wsrf/services/Version?wsdl</computeroutput>
              (assuming the services are deployed under
              <computeroutput>/wsrf/services/</computeroutput> context). </para>
          </section>
          <section id="javawscore-developer-checking-container-local">
            <title>Local container</title>
            <indexterm type="javawscore-howto">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>checking if container is running locally</tertiary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>programming</primary>
              <secondary>client-side</secondary>
              <tertiary>checking if container is running locally</tertiary>
            </indexterm>
            <indexterm type="javawscore-howto">
              <primary>containers</primary>
              <secondary>checking if container is running locally</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>containers</primary>
              <secondary>checking if container is running locally</secondary>
            </indexterm>
            <para>Use <ulink url="http://www-unix.mcs.anl.gov/~gawor/javawscore/HEAD/doc/javadocs/org/globus/tools/gar/DeploymentState.html"
                >DeploymentState</ulink> API to check if a container is running locally (given the
                <computeroutput>GLOBUS_LOCATION</computeroutput> of the container is known). For
              example:</para>
            <screen> import org.globus.tools.gar.DeploymentState; ... String globusLocation = ...;
              DeploymentState state = new DeploymentState(globusLocation); boolean running =
              state.isRunning(); </screen>
            <note>
              <para>This method will work only with a standalone container only.</para>
            </note>
          </section>
        </section>
        <section id="javawscore-developer-WritingClients">
          <title>Client notes</title>
          <indexterm type="javawscore">
            <primary>programming</primary>
            <secondary>client notes</secondary>
          </indexterm>
          <para>Any program that is based on Java WS Core should contain as a first entry in its
            classpath the directory of the Java WS Core installation. This is to ensure that the
            right <glossterm>client-config.wsdd</glossterm> is used by the client. That
            configuration file contains important client-side information such as handlers, type
            mappings, etc. </para>
          <para>Also, any program that is a notification consumer should be initialized with the
            appropriate <computeroutput>GLOBUS_LOCATION</computeroutput> system property (set to the
            installation directory of Java WS Core). If the system property is not set, the
            notification consumer might not initialize or work properly. </para>
        </section>
      </section>
    </section>
    <section id="javawscore-developer-deploying">
      <title>Deploying GARs</title>
      <section id="javawscore-developer-gardetails">
        <title>Grid Archive (GAR) </title>
        <indexterm type="javawscore">
          <primary>Grid Archive (GAR)</primary>
        </indexterm>
        <para>The GAR (Grid Archive) file is a single file which contains all the files and
          information that the container needs to deploy a service. The GAR files are deployed using
          globus-deploy-gar (<olink targetdoc="javawscoreDeveloper" targetptr="deployGar"/>) and
          undeployed using globus-undeploy-gar (<olink targetdoc="javawscoreDeveloper"
            targetptr="undeployGar"/>) tools. </para>
        <section id="javawscore-developer-gardetails-file-structure">
          <title>GAR file structure</title>
          <indexterm type="javawscore">
            <primary>Grid Archive (GAR)</primary>
            <secondary>file structure</secondary>
          </indexterm>
          <table>
            <title>GAR file structure</title>
            <tgroup cols="2">
              <tbody>
                <row>
                  <entry>
                    <computeroutput>docs/</computeroutput>
                  </entry>
                  <entry>This directory contains service documentation files. </entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>share/</computeroutput>
                  </entry>
                  <entry>This directory contains files that can be accessed or used by all services.
                  </entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>schema/</computeroutput>
                  </entry>
                  <entry>This directory contains service WSDL and schema files. </entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>etc/</computeroutput>
                  </entry>
                  <entry>This directory contains service configuration files and a
                      <computeroutput>post-deploy.xml</computeroutput> Ant script.</entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>bin/</computeroutput>
                  </entry>
                  <entry>This directory contains service executables such as command line tools,
                    GUI, etc. </entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>lib/</computeroutput>
                  </entry>
                  <entry>This directory contains service and third party library files and any
                    LICENSE files. </entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>server-deploy.wsdd</computeroutput>
                  </entry>
                  <entry>This file is the server side deployment descriptor. </entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>client-deploy.wsdd</computeroutput>
                  </entry>
                  <entry>This file is the client side deployment descriptor. </entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>jndi-config-deploy.xml</computeroutput>
                  </entry>
                  <entry>This file is the JNDI configuration file. </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="javawscore-developer-gardeploy">
          <title>Deployment process</title>
          <indexterm type="javawscore">
            <primary>Grid Archive (GAR)</primary>
            <secondary>deployment process</secondary>
          </indexterm>
          <para>The contents of the GAR file are processed in the following way (all steps are
            performed only if necessary):</para>
          <itemizedlist>
            <listitem>
              <simpara>Any files in the <computeroutput>docs/</computeroutput> directory in the GAR
                are copied into the
                <computeroutput>$GLOBUS_LOCATION/docs/&lt;gar.id&gt;/</computeroutput>
                directory.</simpara>
            </listitem>
            <listitem>
              <simpara>Any files in the <computeroutput>share/</computeroutput> directory in the GAR
                are copied into the
                <computeroutput>$GLOBUS_LOCATION/share/&lt;gar.id&gt;/</computeroutput>
                directory.</simpara>
            </listitem>
            <listitem>
              <simpara>Any files in the <computeroutput>schema/</computeroutput> directory in the
                GAR are copied into the
                <computeroutput>$GLOBUS_LOCATION/share/schema/</computeroutput> directory.</simpara>
            </listitem>
            <listitem>
              <simpara>Any files in the <computeroutput>etc/</computeroutput> directory in the GAR
                are copied into the
                <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/</computeroutput>
                directory.</simpara>
            </listitem>
            <listitem>
              <simpara>Any files in the <computeroutput>bin/</computeroutput> directory in the GAR
                are copied into the <computeroutput>$GLOBUS_LOCATION/bin/</computeroutput>
                directory.</simpara>
            </listitem>
            <listitem>
              <simpara>Any <computeroutput>.jar</computeroutput> files in the
                <computeroutput>lib/</computeroutput> directory of the GAR are copied into the
                  <computeroutput>$GLOBUS_LOCATION/lib/</computeroutput> directory.</simpara>
            </listitem>
            <listitem>
              <simpara>Any file that contains the word &quot;LICENSE&quot; in the name in
                the <computeroutput>lib/</computeroutput> directory of the GAR is copied into the
                  <computeroutput>$GLOBUS_LOCATION/share/licenses/</computeroutput>
              directory.</simpara>
            </listitem>
            <listitem>
              <simpara>The <computeroutput>server-deploy.wsdd</computeroutput> in the GAR is copied
                to
                <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/server-config.wsdd</computeroutput>.
                If a profile name was specified during deployment, the
                  <computeroutput>server-deploy.wsdd</computeroutput> will be copied to
                  <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/&lt;profile.name&gt;-server-config.wsdd</computeroutput>.
                The <computeroutput>server-config.wsdd</computeroutput> file will be set with
                user-only access permissions.</simpara>
            </listitem>
            <listitem>
              <simpara>The <computeroutput>jndi-config-deploy.xml</computeroutput> in the GAR is
                copied to
                  <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/jndi-config.xml</computeroutput>.
                If a profile name was specified during deployment the
                  <computeroutput>jndi-config-deploy.xml</computeroutput> will be copied to
                  <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/&lt;profile.name&gt;-jndi-config.xml</computeroutput>.
                The <computeroutput>jndi-config.xml</computeroutput> file will be set with user
                only-access permissions.</simpara>
            </listitem>
            <listitem>
              <simpara>The <computeroutput>client-deploy.wsdd</computeroutput> in the GAR is merged
                into a common <computeroutput>$GLOBUS_LOCATION/client-config.wsdd</computeroutput>
                file.</simpara>
            </listitem>
            <listitem>
              <simpara>An undeploy script
                  (<computeroutput>$GLOBUS_LOCATION/etc/globus_packages/&lt;gar.id&gt;/undeploy.xml</computeroutput>)
                is created.</simpara>
            </listitem>
            <listitem>
              <simpara>A <computeroutput>etc/post-deploy.xml</computeroutput> Ant script is called
                if the GAR contains one. The <emphasis>setup</emphasis> target is called
                automatically.</simpara>
            </listitem>
          </itemizedlist>
          <para>Notes:</para>
          <itemizedlist>
            <listitem>
              <simpara>If the <computeroutput>post-deploy.xml</computeroutput> script creates some
                files, they will <emphasis>not</emphasis> be removed by
                <computeroutput>undeploy</computeroutput>.</simpara>
            </listitem>
            <listitem>
              <simpara>During deployment, filtering is done for contents of the
                  <computeroutput>server-deploy.wsdd</computeroutput> and
                  <computeroutput>jndi-config-deploy.xml</computeroutput> files to replace the
                  <computeroutput>@config.dir@</computeroutput> token with the
                  &quot;<computeroutput>etc/&lt;gar.id&gt;</computeroutput>&quot;
                value, and the <computeroutput>@gar.id@</computeroutput> token with the
                  &quot;<computeroutput>&lt;gar.id&gt;</computeroutput>&quot;
              value.</simpara>
            </listitem>
          </itemizedlist>
          <para/>
        </section>
        <section id="javawscore-developer-gar-creating-ant">
          <title>Creating a GAR file through Ant</title>
          <section id="javawscore-developer-gar-creating">
            <title>Creating GAR file</title>
            <indexterm type="javawscore-howto">
              <primary>Grid Archive (GAR)</primary>
              <secondary>creating a GAR file through Ant</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>Grid Archive (GAR)</primary>
              <secondary>creating a GAR file through Ant</secondary>
            </indexterm>
            <para>To create a GAR file use the following example:</para>
            <screen> &lt;property name=&quot;build.packages&quot; location=
              &quot;${deploy.dir}/share/globus_wsrf_common/build-packages.xml&quot;/&gt;
              ... &lt;property name=&quot;garjars.id&quot;
              value=&quot;garjars&quot;/&gt; &lt;fileset dir=&quot;lib&quot;
              id=&quot;garjars&quot;/&gt; &lt;property
              name=&quot;garetc.id&quot; value=&quot;garetc&quot;/&gt;
              &lt;fileset dir=&quot;etc&quot; id=&quot;garetc&quot;/&gt; ...
              &lt;target name=&quot;dist&quot; depends=&quot;...&quot;&gt;
              &lt;ant antfile=&quot;${build.packages}&quot;
              target=&quot;makeGar&quot;&gt; &lt;property
              name=&quot;gar.name&quot; value=&quot;mygar.gar&quot;/&gt;
              &lt;reference refid=&quot;${garjars.id}&quot;/&gt; &lt;reference
              refid=&quot;${garetc.id}&quot;/&gt; &lt;/ant&gt;
              &lt;/target&gt; </screen>
            <para>The <computeroutput>gar.name</computeroutput> property must be passed. That
              property specifies the gar file to create. The
              <computeroutput>makeGar</computeroutput> task will look for
                <computeroutput>deploy-client.wsdd</computeroutput>,
                <computeroutput>deploy-server.wsdd</computeroutput>, and
                <computeroutput>deploy-jndi-config.xml</computeroutput> files in the base directory
              of the calling Ant process. All of these files are optional and do not have exist. The
              list of files to be included in the GAR file is passed via Ant references. The
                <computeroutput>makeGar</computeroutput> accepts the following references:
                <computeroutput>garjars.id</computeroutput>,
              <computeroutput>garschema.id</computeroutput>,
              <computeroutput>garetc.id</computeroutput>,
              <computeroutput>garshare.id</computeroutput>,
              <computeroutput>gardocs.id</computeroutput>, and
              <computeroutput>garbin.id</computeroutput>. All of these references are optional and
              do not have to be defined.</para>
            <para>In the above example, all files in the <computeroutput>etc</computeroutput> and
                <computeroutput>lib</computeroutput> directories, and the
                <computeroutput>deploy-client.wsdd</computeroutput>,
                <computeroutput>deploy-server.wsdd</computeroutput>, and
                <computeroutput>deploy-jndi-config.xml</computeroutput> files (if they exist) will
              be included into the GAR file. </para>
          </section>
          <section id="javawscore-developer-gar-deploying">
            <title>Deploying GAR file</title>
            <indexterm type="javawscore-howto">
              <primary>Grid Archive (GAR)</primary>
              <secondary>deploying a GAR file</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>Grid Archive (GAR)</primary>
              <secondary>deploying a GAR file</secondary>
            </indexterm>
            <para>To deploy a GAR file use the following example:</para>
            <screen> &lt;property name=&quot;build.packages&quot; location=
              &quot;${deploy.dir}/share/globus_wsrf_common/build-packages.xml&quot;/&gt;
              ... &lt;target name=&quot;deploy&quot;
              depends=&quot;...&quot;&gt; &lt;ant
              antfile=&quot;${build.packages}&quot;
              target=&quot;deployGar&quot;&gt; &lt;property
              name=&quot;gar.name&quot; value=&quot;mygar.gar&quot;/&gt;
              &lt;/ant&gt; &lt;/target&gt; </screen>
            <para>The <computeroutput>gar.name</computeroutput> property must be passed. That
              property specifies the gar file to deploy. Optionally, the
              <computeroutput>profile</computeroutput> property can be passed to indicate which
              configuration profile the gar should be deployed under. </para>
          </section>
          <section id="javawscore-developer-gar-undeploying">
            <title>Undeploying GAR file</title>
            <indexterm type="javawscore-howto">
              <primary>Grid Archive (GAR)</primary>
              <secondary>undeploying a GAR file</secondary>
            </indexterm>
            <indexterm type="javawscore">
              <primary>Grid Archive (GAR)</primary>
              <secondary>undeploying a GAR file</secondary>
            </indexterm>
            <para>To undeploy a GAR file use the following example: </para>
            <screen> &lt;property name=&quot;build.packages&quot; location=
              &quot;${deploy.dir}/share/globus_wsrf_common/build-packages.xml&quot;/&gt;
              ... &lt;target name=&quot;undeploy&quot;&gt; &lt;ant
              antfile=&quot;${build.packages}&quot;
              target=&quot;undeployGar&quot;&gt; &lt;property
              name=&quot;gar.id&quot; value=&quot;mygar&quot;/&gt;
              &lt;/ant&gt; &lt;/target&gt; </screen>
            <para>The <computeroutput>gar.id</computeroutput> property must be passed. This property
              specifies the base name of the gar to undeploy. </para>
          </section>
        </section>
      </section>
      <section id="javawscore-developer-CreatingLaunchers">
        <title>Generating launcher scripts</title>
        <indexterm type="javawscore-howto">
          <primary>deploying GARs</primary>
          <secondary>generating launcher scripts</secondary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>Grid Archive (GAR)</primary>
          <secondary>generating launcher scripts</secondary>
        </indexterm>
        <para>Bourne Shell and Windows batch scripts can be automatically generated to hide the
          details of launching a Java program from the command line. </para>
        <para>To generate such a command line script, write a Ant task that calls the
            <computeroutput>generateLauncher</computeroutput> target in
            <computeroutput>$GLOBUS_LOCATION/share/globus_wsrf_common/build-launcher.xml</computeroutput>.
          The following properties/parameters must be specified: </para>
        <itemizedlist>
          <listitem>
            <simpara>
              <emphasis>
                <computeroutput>${launcher-name}</computeroutput>
              </emphasis> - the base name of script to generate.</simpara>
          </listitem>
          <listitem>
            <simpara>
              <emphasis>
                <computeroutput>${class.name}</computeroutput>
              </emphasis> - the name of Java class the script must call.</simpara>
          </listitem>
        </itemizedlist>
        <para> For example: </para>
        <screen> ... &lt;property name=&quot;env.GLOBUS_LOCATION&quot;
          value=&quot;.&quot;/&gt; &lt;property name=&quot;deploy.dir&quot;
          location=&quot;${env.GLOBUS_LOCATION}&quot;/&gt; &lt;property
          name=&quot;abs.deploy.dir&quot;
          location=&quot;${deploy.dir}&quot;/&gt; &lt;property
          name=&quot;build.launcher&quot;
          location=&quot;${abs.deploy.dir}/share/globus_wsrf_common/build-launcher.xml&quot;&gt;
          ... &lt;ant antfile=&quot;${build.launcher}&quot;
          target=&quot;generateLauncher&quot;&gt; &lt;property
          name=&quot;launcher-name&quot; value=&quot;myClient&quot;/&gt;
          &lt;property name=&quot;class.name&quot;
          value=&quot;org.mypackage.MyClient&quot;/&gt; &lt;/ant&gt; </screen>
        <para>It is also possible to specify default JVM options and command line options via the
            <computeroutput>default.jvm.options</computeroutput> and
            <computeroutput>default.cmd.line</computeroutput> parameters. When passing multiple
          parameters using <computeroutput>default.jvm.options</computeroutput> for Unix/Linux
          scripts the parameters must be separated by <computeroutput>${DELIM}</computeroutput>
          delimiter. For example:</para>
        <screen> &lt;target name=&quot;generateUnixScripts&quot;
          if=&quot;generate.unix&quot; depends=&quot;testUnix&quot;&gt;
          &lt;ant antfile=&quot;${build.launcher}&quot;
          target=&quot;generateLauncher&quot;&gt; ... &lt;property
          name=&quot;default.jvm.options&quot;
          value=&quot;-DFOO=&amp;quot;$FOO&amp;quot;${DELIM}-DBAR=&amp;quot;$BAR&amp;quot;/&gt;
          &lt;/ant&gt; &lt;/target&gt; </screen>
        <para>In general the generation of the command line scripts is done in the
            <computeroutput>post-deploy.xml</computeroutput> script during GAR deployment (<olink
            targetdoc="javawscoreDeveloper" targetptr="deployGar"/>). </para>
      </section>
    </section>
    <section id="javawscore-developer-testing">
      <title>Writing and running tests</title>
      <indexterm type="javawscore-howto">
        <primary>testing</primary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>testing</primary>
      </indexterm>
      <para>Tests in the Java WS Core are based on the <ulink url="http://www.junit.org/"
        >JUnit</ulink> API. JUnit must first be installed with Ant. To install JUnit with Ant copy
        the <computeroutput>junit.jar</computeroutput> found in JUnit distribution to the
          <computeroutput>$ANT_HOME/lib</computeroutput> directory. Alternatively, you can add the
          <computeroutput>junit.jar</computeroutput> to your CLASSPATH, or source
          <filename>$GLOBUS_LOCATION/etc/globus-devel-env.sh</filename>. </para>
      <section id="javawscore-developer-writingtests">
        <title>Writing Tests</title>
        <indexterm type="javawscore-howto">
          <primary>testing</primary>
          <secondary>writing</secondary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>testing</primary>
          <secondary>writing</secondary>
        </indexterm>
        <para>Always make sure to group your tests under the
          <computeroutput>PackageTests.java</computeroutput> and/or
            <computeroutput>SecurityTests.java</computeroutput> test suites. Put all tests that
          require any type of credentials in the <computeroutput>SecurityTests.java</computeroutput>
          test suite. </para>
        <para>If you are writing basic unit tests that do not require a container to run, just use
          the regular JUnit classes to write such tests. </para>
        <para>If you are writing tests that require a container to execute, use the
            <computeroutput>org.globus.wsrf.test.GridTestCase</computeroutput> class instead of
            <computeroutput>junit.framework.TestCase</computeroutput> as your base class for your
          tests. Also ensure your <computeroutput>PackageTests.java</computeroutput> or
            <computeroutput>SecurityTests.java</computeroutput> extends the
            <computeroutput>org.globus.wsrf.test.GridTestSuite</computeroutput> instead of
            <computeroutput>junit.framework.TestSuite</computeroutput>. </para>
        <para>The <computeroutput>org.globus.wsrf.test.GridTestSuite</computeroutput> and
            <computeroutput>org.globus.wsrf.test.GridTestCase</computeroutput>
          <emphasis>must</emphasis> be used together. The
            <computeroutput>org.globus.wsrf.test.GridTestCase</computeroutput> class exposes a
            <computeroutput>TEST_CONTAINER</computeroutput> variable that can be used to obtain the
          URL of the container (<computeroutput>TEST_CONTAINER.getBaseURL()</computeroutput>). By
          default an embedded container will be started for all tests in the test suite. To specify
          an external container, pass the
          <computeroutput>-Dweb.server.url=&lt;base.url&gt;</computeroutput> system property
          on the <computeroutput>java</computeroutput> command line. </para>
      </section>
      <section id="javawscore-developer-runningtests">
        <title>Running Tests</title>
        <indexterm type="javawscore-howto">
          <primary>testing</primary>
          <secondary>running</secondary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>testing</primary>
          <secondary>running</secondary>
        </indexterm>
        <section id="javawscore-developer-runningtests-group">
          <title>Group testing</title>
          <indexterm type="javawscore-howto">
            <primary>testing</primary>
            <secondary>running</secondary>
            <tertiary>groups</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>testing</primary>
            <secondary>running</secondary>
            <tertiary>groups</tertiary>
          </indexterm>
          <para>To execute all tests contained in a given jar file with an internal container run
            the following:</para>
          <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_test/runtests.xml run
            -Dtests.jar=&lt;test.jar&gt;</screen>
          <para>Where <computeroutput>&lt;test.jar&gt;</computeroutput> is an
              <emphasis>absolute</emphasis> path to the jar file that contains the tests. </para>
          <para>To execute all tests contained in a given jar file with an external container run
            the following:</para>
          <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_test/runtests.xml runServer
            -Dtests.jar=&lt;test.jar&gt;</screen>
          <para>By default, the external container is assumed to be running at
              <computeroutput>http://localhost:8080/wsrf/services/</computeroutput>. To specify a
            different container, use the
            <computeroutput>-Dtest.server.url=&lt;url&gt;</computeroutput> property.</para>
          <para>By default, all <computeroutput>PackageTests</computeroutput> and
              <computeroutput>SecurityTests</computeroutput> tests will be executed. To execute
              <computeroutput>PackageTests</computeroutput> only, specify
              <computeroutput>-DbasicTestsOnly=true</computeroutput> option. To execute
              <computeroutput>SecurityTests</computeroutput> only, specify
              <computeroutput>-DsecurityTestsOnly=true</computeroutput> option.</para>
          <para>By default, the test results will be generated in the XML format.</para>
        </section>
        <section id="javawscore-developer-runningtests-single">
          <title>Single testing</title>
          <indexterm type="javawscore-howto">
            <primary>testing</primary>
            <secondary>running</secondary>
            <tertiary>single</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>testing</primary>
            <secondary>running</secondary>
            <tertiary>single</tertiary>
          </indexterm>
          <para>To execute a single test suite with an internal container run the following:</para>
          <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_test/runtests.xml runOne
            -Dtest.class=&lt;test.class&gt;</screen>
          <para>Where <computeroutput>&lt;test.class&gt;</computeroutput> is a Java class
            that contains a test suite.</para>
          <para>To execute a single test suite with an external container run the following:</para>
          <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_test/runtests.xml runOneServer
            -Dtest.class=&lt;test.class&gt;</screen>
          <para>By default, the external container is assumed to be running at
              <computeroutput>http://localhost:8080/wsrf/services/</computeroutput>. To specify a
            different container, use the
            <computeroutput>-Dtest.server.url=&lt;url&gt;</computeroutput> property.</para>
          <para>By default, the test results will be generated in the plain text format.</para>
          <para>It is also possible to execute a single test case (or a set of test cases) within a
            test suite by specifying a
            <computeroutput>-Dtests=&lt;testCase1[,testCaseN]&gt;</computeroutput> property.
            However, this will only work with test suites that inherit from
              <computeroutput>org.globus.wsrf.test.FilteredTestSuite</computeroutput> or
              <computeroutput>org.globus.wsrf.test.GridTestSuite</computeroutput> classes. Example:</para>
          <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_test/runtests.xml runOne \
            -Dtest.class=org.globus.interop.widget.test.PackageTests \
            -Dtests=&quot;testScenario1,testScenario2&quot;</screen>
        </section>
        <section id="javawscore-developer-runningtests-options">
          <title>Test results and other options</title>
          <indexterm type="javawscore-howto">
            <primary>testing</primary>
            <secondary>running</secondary>
            <tertiary>test results</tertiary>
          </indexterm>
          <indexterm type="javawscore">
            <primary>testing</primary>
            <secondary>running</secondary>
            <tertiary>test results</tertiary>
          </indexterm>
          <para>The test reports will be put in the
              <computeroutput>$GLOBUS_LOCATION/share/globus_wsrf_test/tests/test-reports</computeroutput>
            directory by default. A different test reports directory can be specified by passing
              <computeroutput>-Djunit.reports.dir=&lt;directory&gt;</computeroutput>.</para>
          <para>Use <computeroutput>-Djunit.test.format</computeroutput> property to generate the
            test results in a specified format (<computeroutput>xml</computeroutput> or
              <computeroutput>plain</computeroutput>). Example:</para>
          <screen>$ ant -f share/... -Djunit.test.format=plain</screen>
          <para>Use <computeroutput>-Djunit.jvmarg</computeroutput> to pass arbitrary properties to
            the testing JVM. Example:</para>
          <screen>$ ant -f share/...
            -Djunit.jvmarg="-Dorg.globus.wsrf.container.server.id=myServerID"</screen>
        </section>
      </section>
    </section>
    <section id="javawscore-developer-other">
      <title>Other</title>
      <section id="javawscore-developer-CustomExpressionEval">
        <title>Adding a new query/topic expression evaluator</title>
        <indexterm type="javawscore-howto">
          <primary>adding a new query/topic expression evaluator</primary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>adding a new query/topic expression evaluator</primary>
        </indexterm>
        <indexterm type="javawscore-howto">
          <primary>expression evaluator</primary>
          <secondary>adding a new query/topic</secondary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>expression evaluator</primary>
          <secondary>adding a new query/topic</secondary>
        </indexterm>
        <para>Java WS Core allows for custom query/topic expression evaluators to be plugged in. The
          process of adding a new query/topic expression evaluator is composed of three steps:</para>
        <section id="javawscore-developer-implementation">
          <title>Step 1: Implement the evaluator </title>
          <table>
            <title>Evaluator interfaces</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>If the evaluator is a... </entry>
                  <entry>then it must implement: </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>query expression evaluator </entry>
                  <entry>
                    <computeroutput>org.globus.wsrf.query.ExpressionEvaluator</computeroutput>
                  </entry>
                </row>
                <row>
                  <entry>topic expression evaluator </entry>
                  <entry>
                    <computeroutput>org.globus.wsrf.topicexpression.TopicExpressionEvaluator</computeroutput>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="javawscore-developer-registration">
          <title>Step 2: Register the evaluator </title>
          <para>The evaluators must be registered in order for Java WS Core to recognize them. The
            registration is done through the JNDI configuration file. The expression evaluators must
            be deployed as global resources under a specific subcontext. </para>
          <section>
            <title>Registering query expression evaluators </title>
            <para>The query expression evaluators must be deployed as global resources under the <emphasis>
                <computeroutput>query/eval/</computeroutput>
              </emphasis> subcontext in the JNDI configuration file. </para>
            <para> Example: </para>
            <screen>&lt;global&gt; &lt;resource <emphasis role="bold"
                >name</emphasis>=&quot;query/eval/<emphasis>MyQueryExpressionEval</emphasis>&quot;
                <emphasis role="bold"
                >type</emphasis>=&quot;<emphasis>foo.bar.MyQueryExpressionEvaluator</emphasis>&quot;&gt;
              &lt;resourceParams&gt; &lt;parameter&gt;
              &lt;name&gt;factory&lt;/name&gt;
              &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
              &lt;/parameter&gt; &lt;/resourceParams&gt; &lt;/resource&gt;
              &lt;/global&gt;</screen>
            <para> Where the <computeroutput>&lt;resource&gt;</computeroutput> attribute: </para>
            <informaltable>
              <tgroup cols="2">
                <tbody>
                  <row>
                    <entry>
                      <computeroutput>name</computeroutput>
                    </entry>
                    <entry>Specifies the name of the evaluator in JNDI space. The name can be
                      arbitrary as long as it is unique and is in the right subcontext as explained
                      above.</entry>
                  </row>
                  <row>
                    <entry>
                      <computeroutput>type</computeroutput>
                    </entry>
                    <entry>Specifies the class that implements the expression evaluator.</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </section>
          <section>
            <title>Registering topic expression evaluators </title>
            <para>Topic expression evaluators must be deployed as global resources under the <emphasis>
                <computeroutput>topic/eval/</computeroutput>
              </emphasis> subcontext in the JNDI configuration file. </para>
            <para>Example:</para>
            <screen>&lt;global&gt; &lt;resource <emphasis role="bold"
                >name</emphasis>=&quot;topic/eval/<emphasis>MyTopicExpressionEval</emphasis>&quot;
                <emphasis role="bold"
                >type</emphasis>=&quot;<emphasis>foo.bar.MyTopicExpressionEvaluator</emphasis>&quot;&gt;
              &lt;resourceParams&gt; &lt;parameter&gt;
              &lt;name&gt;factory&lt;/name&gt;
              &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
              &lt;/parameter&gt; &lt;/resourceParams&gt; &lt;/resource&gt;
              &lt;/global&gt;</screen>
            <para> Where the <computeroutput>&lt;resource&gt;</computeroutput> attribute: </para>
            <informaltable>
              <tgroup cols="2">
                <tbody>
                  <row>
                    <entry>
                      <computeroutput>name</computeroutput>
                    </entry>
                    <entry>Specifies the name of the evaluator in JNDI space. The name can be
                      arbitrary as long as it is unique and is in the right subcontext as explained
                      above.</entry>
                  </row>
                  <row>
                    <entry>
                      <computeroutput>type</computeroutput>
                    </entry>
                    <entry>Specifies the class that implements the expression evaluator.</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </section>
        </section>
        <section id="javawscore-developer-registrationserializerdeserializer">
          <title>Step 3: Register the serializer/deserializer for the evaluator</title>
          <para>A serializer/deserializer must be registered for the dialect of the evaluator in
            order for the expression to be properly serialized and deserialized. The
            serializers/deserializers for the dialect are deployed as almost any other type mapping.
            In general, each type mapping specifies a type QName. For dialect
            serializers/deserializers, that type QName takes a slightly different name.</para>
          <section>
            <title>Specifying the QName for query expression evaluators </title>
            <para>For query expression evaluators, that QName must have the local name part set to <emphasis>
                <computeroutput>QueryExpressionDialect</computeroutput>
              </emphasis> and namespace part set to the dialect of the query expression evaluator. </para>
            <para>Example: </para>
            <screen>&lt;typeMapping encodingStyle=&quot;&quot;
              deserializer=&quot;org.apache.axis.encoding.ser.SimpleDeserializerFactory&quot;
              serializer=&quot;org.apache.axis.encoding.ser.SimpleSerializerFactory&quot;
              type=&quot;java:java.lang.String&quot;
              qname=&quot;ns12:QueryExpressionDialect&quot;
              xmlns:ns12=&quot;http://foo.bar/MyQueryDialect&quot;/&gt;</screen>
            <para>
              <note>
                <simpara>These type mappings must be deployed both on the client and the
                server.</simpara>
              </note>
            </para>
          </section>
          <section>
            <title>Specifying the QName for topic expression evaluators </title>
            <para>For topic expression evaluators, that QName must have the local name part set to <emphasis>
                <computeroutput>TopicExpressionDialect</computeroutput>
              </emphasis> and namespace part set to the dialect of the topic expression evaluator. </para>
            <para>Example: <screen>&lt;typeMapping encodingStyle=&quot;&quot;
                deserializer=&quot;org.apache.axis.encoding.ser.SimpleDeserializerFactory&quot;
                serializer=&quot;org.apache.axis.encoding.ser.SimpleSerializerFactory&quot;
                type=&quot;java:java.lang.String&quot;
                qname=&quot;ns12:TopicExpressionDialect&quot;
                xmlns:ns12=&quot;http://foo.bar/MyTopicDialect&quot;/&gt;</screen>
              <note>
                <simpara>These type mappings must be deployed both on the client and the
                server.</simpara>
              </note>
            </para>
          </section>
        </section>
        <section id="javawscore-developer-GetCurrentMessageProvider">
          <title>Step 4: Configuring a helper serializer for GetCurrentMessageProvider</title>
          <para> The standard <computeroutput>GetCurrentMessageProvider</computeroutput> might not
            know how to properly serialize the notification message currently associated with the
            specified topic. The <computeroutput>GetCurrentMessageProvider</computeroutput> can be
            configured to use a helper serializer for a given notification message type. </para>
          <para>To configure such a helper serializer, define the following global resource in your
              <computeroutput>deploy-jndi.xml</computeroutput> configuration file:</para>
          <screen>&lt;global&gt; &lt;resource <emphasis role="bold"
              >name</emphasis>=&quot;providers/GetCurrentMessageProvider/<emphasis>foo.bar.MyNotificationMessage</emphasis>&quot;
              <emphasis role="bold"
            >type</emphasis>=&quot;<emphasis>foo.bar.MyMessageSerializer</emphasis>&quot;&gt;
            &lt;resourceParams&gt; &lt;parameter&gt;
            &lt;name&gt;factory&lt;/name&gt;
            &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
            &lt;/parameter&gt; &lt;/resourceParams&gt; &lt;/resource&gt;
            &lt;/global&gt;</screen>
          <para> Where the <computeroutput>&lt;resource&gt;</computeroutput> attribute: </para>
          <informaltable>
            <tgroup cols="2">
              <tbody>
                <row>
                  <entry>
                    <computeroutput>name</computeroutput>
                  </entry>
                  <entry>Must start with <emphasis>
                      <computeroutput>providers/GetCurrentMessageProvider/</computeroutput>
                    </emphasis> and must end with the full class name of the notification
                  message.</entry>
                </row>
                <row>
                  <entry>
                    <computeroutput>type</computeroutput>
                  </entry>
                  <entry>Specifies the class that implements the
                      <computeroutput>org.globus.wsrf.encoding.ObjectConverter</computeroutput>
                    interface and is responsible for serializing the notification message. The
                      <computeroutput>GetCurrentMessageProvider</computeroutput> will use the type
                    of the notification message to find the helper serializer.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
        </section>
      </section>
    </section>
  </chapter>
  <chapter id="javawscore-developer-tutorials">
    <title>Tutorials and Presentations</title>
    <section>
      <title>Tutorials</title>
      <indexterm type="javawscore">
        <primary>tutorials</primary>
      </indexterm>
      <itemizedlist>
        <listitem>
          <simpara>
            <ulink url="http://gdp.globus.org/gt4-tutorial/">The Globus Toolkit 4
              Programmer&apos;s Tutorial by Borja Sotomayor</ulink>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <ulink url="http://ds.informatik.uni-marburg.de/MAGE/gdt/tutorial.html">Basic Grid
              Development Tools Tutorial</ulink>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <ulink url="http://www.qub.ac.uk/escience/howtos/GT3%20to%20GT4%20Version%200.3.htm"
              >GT3.2 to GT4 Migration: A First HOWTO by Terry Harmer and Julie McCabe</ulink>
          </simpara>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Presentations</title>
      <indexterm type="javawscore">
        <primary>presentations</primary>
      </indexterm>
      <itemizedlist>
        <listitem>
          <simpara>
            <ulink url="http://www.globus.org/toolkit/presentations/JavaWSCore-GW.ppt">Java WS Core
              for Developers (Session at GlobusWorld 2006)</ulink>
          </simpara>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../Java_WS_Core_Samples.xml"/>

  <chapter id="javawscore-developer-archdes">
    <title>Architecture and design overview</title>
    <indexterm type="javawscore">
      <primary>architecture</primary>
    </indexterm>
    <itemizedlist>
      <listitem>
        <simpara>Java WS Core Design Document [<ulink
            url="JavaWSCoreDesign.doc">doc</ulink> | <ulink
            url="JavaWSCoreDesign.pdf">pdf</ulink>]</simpara>
        <itemizedlist>
          <listitem>
            <simpara>Java WS Core UML [<ulink
                url="JavaWSCoreUML.vsd">vsd</ulink> |
                <ulink url="Resource.gif">Resource
              (.gif)</ulink>, <ulink
                url="ResourceProperty.gif">Resource
                Property (gif)</ulink>, <ulink url="Notification.gif">Notification
              (gif)</ulink>]</simpara>
          </listitem>
          <listitem>
            <simpara>Java WS Core Notification UML Sequence Diagrams [<ulink
                url="NotificationSequences.vsd">vsd</ulink>
              | <ulink url="NotificationSequence1.jpg"
                >Subscription (jpg)</ulink>, <ulink
                url="NotificationSequence2.jpg"
                >Notification (jpg)</ulink>]</simpara>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <simpara>Java WS Core Container Dynamic Deploy Design Document [<ulink
            url="HotDeployDesign.doc">doc</ulink> | <ulink
            url="HotDeployDesign.pdf"
        >pdf</ulink>]</simpara>
      </listitem>
      <listitem>
        <simpara>Java WS Core WS-Enumeration Design Document [<ulink
            url="WSEnumDesign.doc">doc</ulink> | <ulink
            url="WSEnumDesign.pdf">pdf</ulink>]</simpara>
      </listitem>
    </itemizedlist>
  </chapter>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../Java_WS_Core_Interface_API_Frag.xml"/>


    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../Java_WS_Core_Interface_WSDL_Frag.xml"/>

  <!-- n/a - verify
  <chapter id="javawscore-developer-protocols"><title>Semantics and syntax of non-WSDL protocols</title>
    &Java_WS_Core_Interface_Protocol_Frag;
  </chapter>
  -->

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../Java_WS_Core_Interface_Commandline_Frag.xml"/>

<!-- n/a 
  <chapter id="javawscore-developer-guis"><title>Overview of Graphical User Interface</title>
    &Java_WS_Core_Interface_GUI_Frag;
  </chapter>
  -->
  <!-- n/a - verify
  <chapter id="javawscore-developer-domain"><title>Semantics and syntax of domain-specific interface</title>
    &Java_WS_Core_Interface_Domain_Frag;
  </chapter>
  -->

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../Java_WS_Core_Interface_Config_Frag.xml"/>

  <chapter id="javawscore-developer-env">
    <title>Environment variable interface</title>
    <indexterm type="javawscore">
      <primary>environment variables</primary>
    </indexterm>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../Java_WS_Core_Interface_Env_Frag.xml"/>
  </chapter>
  <chapter id="javawscore-developer-debugging">
    <title>Debugging</title>
    <indexterm type="javawscore-howto">
      <primary>debugging</primary>
    </indexterm>
    <indexterm type="javawscore">
      <primary>debugging</primary>
    </indexterm>
    <section id="javawscore-developer-logging-general">
      <title>Development Logging in Java WS Core</title>
      <!-- this section is xincluded into other java ws components -->
      <indexterm type="javawscore-howto">
        <primary>debugging</primary>
        <secondary>logging</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>debugging</primary>
        <secondary>logging</secondary>
      </indexterm>
      <indexterm type="javawscore-howto">
        <primary>logging</primary>
        <secondary>debugging</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>logging</primary>
        <secondary>debugging</secondary>
      </indexterm>
      <para>The following information applies to Java WS Core and those services built on it.</para>
      <para>Logging in the Java WS Core is based on the <ulink
          url="http://jakarta.apache.org/commons/logging/">Jakarta Commons Logging</ulink> API.
        Commons Logging provides a consistent interface for instrumenting source code while at the
        same time allowing the user to plug-in a different logging implementation. Currently we use
          <ulink url="http://logging.apache.org/log4j/">Log4j</ulink> as a logging implementation.
        Log4j uses a separate configuration file to configure itself. Please see Log4j documentation
        for details on the <ulink
          url="http://logging.apache.org/log4j/docs/api/org/apache/log4j/PropertyConfigurator.html#doConfigure(java.lang.String, org.apache.log4j.spi.LoggerRepository)"
          >configuration file format</ulink>.</para>
      <para>Java WS Core is deployed with two Log4j configuration files:</para>
      <itemizedlist>
        <listitem>
          <simpara>
            <computeroutput>$GLOBUS_LOCATION/container-log4j.properties</computeroutput> (configures
            logging for the standalone container)</simpara>
        </listitem>
        <listitem>
          <simpara>
            <computeroutput>$GLOBUS_LOCATION/log4j.properties</computeroutput> (configures logging
            for everything else besides the standalone container)</simpara>
        </listitem>
      </itemizedlist>
    </section>
    <section id="javawscore-developer-tracingsoapmessages">
      <title>Tracing SOAP messages</title>
      <indexterm type="javawscore-howto">
        <primary>debugging</primary>
        <secondary>tracing SOAP messages</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>debugging</primary>
        <secondary>tracing SOAP messages</secondary>
      </indexterm>
      <indexterm type="javawscore-howto">
        <primary>SOAP</primary>
        <secondary>tracing SOAP messages</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>SOAP</primary>
        <secondary>tracing SOAP messages</secondary>
      </indexterm>
      <section id="javawscore-developer-usingmessagelogginghandler">
        <title>Using MessageLoggingHandler</title>
        <indexterm type="javawscore-howto">
          <primary>debugging</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>using MessageLoggingHandler</tertiary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>debugging</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>using MessageLoggingHandler</tertiary>
        </indexterm>
        <indexterm type="javawscore-howto">
          <primary>SOAP</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>using MessageLoggingHandler</tertiary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>SOAP</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>using MessageLoggingHandler</tertiary>
        </indexterm>
        <para>The simplest method for logging SOAP messages is to add the
            <computeroutput>org.globus.wsrf.handlers.MessageLoggingHandler</computeroutput> to the
          request or response chain in the <computeroutput>server-config.wsdd</computeroutput> or
            <computeroutput>client-config.wsdd</computeroutput> files. </para>
        <para>For example:</para>
        <screen> &lt;requestFlow&gt; ... &lt;handler
          type=&quot;java:org.globus.wsrf.handlers.MessageLoggingHandler&quot;/&gt; ...
          &lt;/requestFlow&gt;</screen>
        <para>Then you must enable logging for this handler class in the appropriate
            <computeroutput>log4j.properties</computeroutput> files and change the logging level to
          DEBUG: </para>
        <screen>log4j.category.org.globus.wsrf.handlers.MessageLoggingHandler=DEBUG</screen>
        <para/>
      </section>
      <section id="javawscore-developer-enablinglogging">
        <title>Enabling logging for Axis classes</title>
        <indexterm type="javawscore-howto">
          <primary>debugging</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Enabling logging for Axis classes</tertiary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>debugging</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Enabling logging for Axis classes</tertiary>
        </indexterm>
        <indexterm type="javawscore-howto">
          <primary>SOAP</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Enabling logging for Axis classes</tertiary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>SOAP</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Enabling logging for Axis classes</tertiary>
        </indexterm>
        <para>Another method for tracing SOAP messages is to enable logging for selected Axis
          classes. Add the following lines to the appropriate
          <computeroutput>log4j.properties</computeroutput> files: </para>
        <screen> log4j.category.org.apache.client.Call=DEBUG
          log4j.category.org.apache.axis.transport.http.HTTPSender=DEBUG # enable the following
          logger for HTTPS/HTTPG transport handlers
          log4j.category.org.globus.axis.axis.transport=DEBUG</screen>
        <para>This will log Axis client side calls and Axis HTTP messages.</para>
      </section>
      <section id="javawscore-developer-usingtcpmon">
        <title>Using TcpMonitor</title>
        <indexterm type="javawscore-howto">
          <primary>debugging</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Using TcpMonitor</tertiary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>debugging</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Using TcpMonitor</tertiary>
        </indexterm>
        <indexterm type="javawscore-howto">
          <primary>SOAP</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Using TcpMonitor</tertiary>
        </indexterm>
        <indexterm type="javawscore">
          <primary>SOAP</primary>
          <secondary>tracing SOAP messages</secondary>
          <tertiary>Using TcpMonitor</tertiary>
        </indexterm>
        <para>To trace SOAP messages on the wire you can use TcpMon from <glossterm>Apache
          Axis</glossterm>. After setting the environment using
            <computeroutput>$GLOBUS_LOCATION/etc/globus-dev-env.[sh|csh|bat]</computeroutput> run:</para>
        <screen>$ java org.apache.axis.utils.tcpmon [listenPort targetHost targetPort]</screen>
        <para>If no arguments are used, you have to fill out these values in the GUI. Make sure to
          also start the standalone container with the proxy server port option set to the
            <computeroutput>listenPort</computeroutput> value.</para>
      </section>
    </section>
    <section id="javawscore-developer-debugging-general">
      <title>Debugging Java process</title>
      <indexterm type="javawscore-howto">
        <primary>debugging</primary>
        <secondary>Java process</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>debugging</primary>
        <secondary>Java process</secondary>
      </indexterm>
      <indexterm type="javawscore-howto">
        <primary>Java</primary>
        <secondary>debugging Java process</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>Java</primary>
        <secondary>debugging Java process</secondary>
      </indexterm>
      <para>JVM vendors provide useful tools and troubleshooting guides for debugging Java
        processes. Please use those guides for debugging your programs, for example:</para>
      <itemizedlist>
        <listitem>
          <simpara>
            <ulink url="http://java.sun.com/j2se/1.5/pdf/jdk50_ts_guide.pdf">Sun JDK 1.5:
              Trouble-Shooting and Diagnostic Guide</ulink>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <ulink url="http://publib.boulder.ibm.com/infocenter/javasdk/v5r0">IBM JDK 5.0: Java
              Diagnostics Guide</ulink>
          </simpara>
        </listitem>
      </itemizedlist>
    </section>
    <section id="javawscore-developer-debugging-hanged-process">
      <title>Debugging hanged Java process</title>
      <indexterm type="javawscore-howto">
        <primary>debugging</primary>
        <secondary>hanged Java process</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>debugging</primary>
        <secondary>hanged Java process</secondary>
      </indexterm>
      <indexterm type="javawscore-howto">
        <primary>Java</primary>
        <secondary>debugging hanged Java process</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>Java</primary>
        <secondary>debugging hanged Java process</secondary>
      </indexterm>
      <para>If a Java process appears to hang, for example in case of the standalone container, the
        list of deployed services is not shown after a while or all requests to the container time
        out, requesting the JVM thread dump might help diagnose the problem.</para>
      <para>To request JVM thread dump run:</para>
      <screen>kill -QUIT &lt;JVM process id&gt;</screen>
      <para>If this command is successful, the thread dump information should be printed to the
        standard output or error of the Java process. Therefore, the thread dump information might
        appear on the console of that process or in a file to which the standard output/error of
        process is redirected to. Please also note that on certain JVMs the thread dump information
        might be put in a separate file. </para>
      <para>When filing bugs of such nature please always include the JVM thread dump
      information.</para>
    </section>
    <section id="javawscore-developer-debugginglog4j">
      <title>Debugging Log4j</title>
      <indexterm type="javawscore-howto">
        <primary>debugging</primary>
        <secondary>Log4j</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>debugging</primary>
        <secondary>Log4j</secondary>
      </indexterm>
      <indexterm type="javawscore-howto">
        <primary>Log4j</primary>
        <secondary>debugging</secondary>
      </indexterm>
      <indexterm type="javawscore">
        <primary>Log4j</primary>
        <secondary>debugging</secondary>
      </indexterm>
      <para>If you are having problems with configuring Log4j, you can enable internal Log4j
        debugging by adding <computeroutput>-Dlog4j.debug=true</computeroutput> option on the
          <computeroutput>java</computeroutput> command line or passing it via the
          <computeroutput>GLOBUS_OPTIONS</computeroutput> environment property.</para>
    </section>
  </chapter>
  <chapter id="javawscore-developer-troubleshooting">
    <title>Troubleshooting</title>
    <indexterm type="javawscore-howto">
      <primary>troubleshooting</primary>
      <secondary>for developers</secondary>
    </indexterm>
    <indexterm type="javawscore">
      <primary>troubleshooting</primary>
      <secondary>for developers</secondary>
    </indexterm>
    <section id="javawscore-developer-nosocket">
      <title>No socket factory for &apos;https&apos; protocol</title>
      <para>When a client fails with the following exception:</para>
      <screen> java.io.IOException: No socket factory for &apos;https&apos; protocol at
        org.apache.axis.transport.http.HTTPSender.getSocket(HTTPSender.java:179) at
        org.apache.axis.transport.http.HTTPSender.writeToSocket(HTTPSender.java:397) at
        org.apache.axis.transport.http.HTTPSender.invoke(HTTPSender.java:135)</screen>
      <para> add the following to the client:</para>
      <screen> import org.globus.axis.util.Util; ... static { Util.registerTransport(); }
      ...</screen>
    </section>
    <section id="javawscore-developer-notransport">
      <title>No client transport named &apos;https&apos; found</title>
      <para>When a client fails with the following exception:</para>
      <screen>No client transport named &apos;https&apos; found at
        org.apache.axis.client.AxisClient.invoke(AxisClient.java:170) at
        org.apache.axis.client.Call.invokeEngine(Call.java:2726)</screen>
      <para> The client is most likely loading an incorrect
        <computeroutput>client-config.wsdd</computeroutput> configuration file. Ensure that the GT4
        installation directory is listed as a first entry in the
        <computeroutput>CLASSPATH</computeroutput> of the client. For example:</para>
      <screen>CLASSPATH=/usr/local/globus-<replaceable role="entity">shortversion</replaceable>.0:/foo/bar/others.jar:...</screen>
      <para>If you are seeing this problem in Tomcat, copy the
        <computeroutput>client-config.wsdd</computeroutput> from the GT4 installation directory to
        the Web application's <computeroutput>WEB-INF/classes</computeroutput> directory.</para>
      <para/>
    </section>
    
    <xi:include href="../Java_WS_Core_Logging_Frag.xml"
    xmlns:xi="http://www.w3.org/2001/XInclude" />
    
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../Java_WS_Core_Troubleshooting_Frag.xml"/>
    
  </chapter>
  <chapter id="javawscore-developer-relateddocs">
    <title>Related Documentation</title>
    <indexterm type="javawscore">
      <primary>related documentation</primary>
      <secondary>overview of WSRF/WSN/WSDL</secondary>
    </indexterm>
    <para> Overview material about WSRF and WSN and more information on the implemented WSDL and
      schema can be found<ulink url="http://www.globus.org/wsrf/">here</ulink>. </para>
    <indexterm type="javawscore">
      <primary>related documentation</primary>
      <secondary>ongoing standards work</secondary>
    </indexterm>
    <para> Information about ongoing standards work can be found here:<itemizedlist>
        <listitem>
          <simpara>
            <ulink url="http://www.w3.org/2002/ws/addr/">WS-Addressing</ulink>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <ulink url="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsrf"
              >WS-ResourceFramework</ulink>
          </simpara>
        </listitem>
        <listitem>
          <simpara>
            <ulink url="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsn"
              >WS-Notification</ulink>
          </simpara>
        </listitem>
      </itemizedlist>
    </para>
  </chapter>
  <appendix id="javawscore-developer-ProxySupport">
    <title>Proxy support</title>
    <indexterm type="javawscore">
      <primary>proxy support</primary>
    </indexterm>
    <para>A basic proxy support is provided. The <emphasis>
        <computeroutput>org.globus.wsrf.proxy.port</computeroutput>
      </emphasis> system property can be set to the port of the proxy server (the proxy server must
      run on the same machine as the container). This will make any code that uses the
        <computeroutput>ServiceHost</computeroutput> or
      <computeroutput>AddressingUtils</computeroutput> API return the address of the proxy server
      instead of the container. This could be useful, for example, for debugging purposes. The <emphasis>
        <computeroutput>org.globus.wsrf.proxy.port</computeroutput>
      </emphasis> system property can be passed to
      <computeroutput>globus-start-container</computeroutput> script via the
        <computeroutput>GLOBUS_OPTIONS</computeroutput> environment property. For example:</para>
    <screen> $ setenv GLOBUS_OPTIONS=&quot;-Dorg.globus.wsrf.proxy.port=5555&quot; $
      globus-start-container</screen>
    <para>Please note that not all of the code will obey the proxy port setting.</para>
  </appendix>
  <appendix id="javawscore-developer-creatingdist">
    <title>Creating source and binary distributions</title>
    <indexterm type="javawscore-howto">
      <primary>creating source and binary distributions</primary>
    </indexterm>
    <indexterm type="javawscore">
      <primary>creating source and binary distributions</primary>
    </indexterm>
    <para>The <filename>wsrf/build.xml</filename> Ant script can be used generate Java WS Core
      source and/or binary distributions. Use the following syntax to create the distributions:</para>
    <screen>ant &lt;distTask&gt; -Dsrc.tag=&lt;tag&gt;
      -Dversion=&lt;version&gt;</screen>
    <para>The &lt;distTask&gt; must be one of:</para>
    <itemizedlist>
      <listitem>
        <para>
          <computeroutput>distSource</computeroutput> - create source code only distribution</para>
      </listitem>
      <listitem>
        <para>
          <computeroutput>distBinary</computeroutput> - create binary only distribution</para>
      </listitem>
      <listitem>
        <para>
          <computeroutput>dist</computeroutput> - create source and binary distributions</para>
      </listitem>
    </itemizedlist>
    <para>The <computeroutput>-Dsrc.tag</computeroutput> specifies the CVS tag and
        <computeroutput>-Dversion</computeroutput> specifies the version of the code. Make sure to
      execute this Ant script from within the <filename>wsrf/</filename> directory. Each of these
      tasks checks out the source code from the CVS and uses it to create the distributions.</para>
    <para>Source-only example:</para>
    <screen>ant distSource -Dsrc.tag=globus_4_0_3 -Dversion=4.0.3</screen>
    <para>The above command will create <filename>ws-core-&lt;version&gt;-src.zip</filename>
      and <filename>ws-core-&lt;version&gt;-src.tar.gz</filename> files under the
        <filename>wsrf/</filename> directory.</para>
    <para>Binary-only example:</para>
    <screen>ant distBinary -Dsrc.tag=globus_4_0_3 -Dversion=4.0.3</screen>
    <para>The above command will create <filename>ws-core-&lt;version&gt;-bin.zip</filename>
      and <filename>ws-core-&lt;version&gt;-bin.tar.gz</filename> files under the
        <filename>tmp/ws-core-&lt;version&gt;/</filename> directory.</para>
    <para>Source and binary example:</para>
    <screen>ant dist -Dsrc.tag=globus_4_0_3 -Dversion=4.0.3</screen>
    <para>The above command will generate both distributions at the same time.</para>
    <section>
      <title>In-place binary distributions</title>
      <para>A binary distribution can also be created from the existing source code by running (in
        the <filename>wsrf/</filename> directory):</para>
      <screen>ant distbin</screen>
      <para>The above command will create
        <filename>ws-core-&lt;version&gt;-bin.zip</filename> and
          <filename>ws-core-&lt;version&gt;-bin.tar.gz</filename> files in the current
        directory.</para>
    </section>
  </appendix>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../dependencies.xml"/>

  <glossary role="auto" id="javawscore-developer-glossary">
    <glossdiv><title>A</title>
      <glossentry>
        <glossterm>Irrelevant</glossterm>
        <glossdef>
          <para>If you can see this, the document was processed incorrectly. Use the
              <parameter>glossary.collection</parameter> parameter.</para>
        </glossdef>
      </glossentry>
    </glossdiv>
  </glossary>
</book>
