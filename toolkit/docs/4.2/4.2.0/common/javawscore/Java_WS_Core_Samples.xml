<?xml version='1.0' encoding='UTF-8'?>

<title> GT &shortversion; Samples for Java WS Core</title>

<section id="javawscore-samples-counter"><title>Counter Sample</title>

<para>
Using <computeroutput>counter-client</computeroutput>.
</para>

<informaltable frame="none">  
<tgroup cols="2"><tbody>

  <row valign="top">
   <entry>1.</entry>
   <entry><para>Change to <computeroutput>$GLOBUS_LOCATION</computeroutput> directory:</para>
    <screen> $ cd $GLOBUS_LOCATION</screen>
  </entry>
 </row>

  <row valign="top">
    <entry>2.</entry>
    <entry><para>Start the container by running:</para>
      <screen> $ bin/globus-start-container -nosec</screen>
   </entry>
  </row>

  <row valign="top">
    <entry>3.</entry>
    <entry><para>In another window, run:</para>
      <screen> $ bin/counter-client -s http://localhost:8080/wsrf/services/CounterService</screen>
    <para>As a result you should see something like the following:</para>
    <screen>
 $ bin/counter-client -s http://localhost:8080/wsrf/services/CounterService
   Counter service: http://localhost:8080/wsrf/services/CounterService
   Got notification with value: 3
   Counter has value: 3
   Got notification with value: 13</screen>
   <para>
     Please note if secure container is used (started without the <computeroutput>-nosec</computeroutput> argument) please make sure to pass the correct service url (https protocol, right port number) to <computeroutput>counter-client</computeroutput> and add the <computeroutput><link linkend="javawscore-common-options">-z</link></computeroutput> argument at the end of the command line. For example:
  </para>
  <screen> $ bin/counter-client -s https://localhost:8443/wsrf/services/CounterService -z none</screen>
  <para>
   The <computeroutput>-z none</computeroutput> option disables client-side authorization. By default the client performs <emphasis>host</emphasis> authorization and if the server is not running with host credentials the client authorization will fail. Also, the server must be properly configured to authorize the client. Please see the security documentation for details.
   </para>
   </entry>
  </row>

</tbody></tgroup>
</informaltable>

<para>
Using <computeroutput>counter-create</computeroutput>, <computeroutput>counter-add</computeroutput> clients.
</para>


<informaltable frame="none">
<tgroup cols="2"><tbody>

 <row valign="top">
   <entry>1.</entry>
   <entry><para>Change to the <computeroutput>$GLOBUS_LOCATION</computeroutput> directory:</para>
    <screen> $ cd $GLOBUS_LOCATION</screen>
  </entry>
 </row>

  <row valign="top">
    <entry>2.</entry>
    <entry><para>Start the container by running:</para>
      <screen> $ bin/globus-start-container -nosec</screen>
   </entry>
  </row>

  <row valign="top">
    <entry>3.</entry>
    <entry><para>In another window, run:</para>
      <screen> $ bin/counter-create -s http://140.221.36.11:8080/wsrf/services/CounterService > epr</screen>
    <para>If successful, a new counter resource will be created and the endpoint information of that resource will be saved in a file called <computeroutput>epr</computeroutput>.
      The <computeroutput>epr</computeroutput> file can be passed to a number of the basic <computeroutput>wsrf-*</computeroutput> and <computeroutput>wsn-*</computeroutput> clients using the <computeroutput><link linkend="javawscore-common-options">-e</link></computeroutput> option.
    </para>
   <para>
     Please note if the secure container is used (started without the <computeroutput>-nosec</computeroutput> argument) to make sure to pass the correct service url (https protocol, right port number) to <computeroutput>counter-create</computeroutput> and add the <computeroutput><link linkend="javawscore-common-options">-z</link></computeroutput> argument to the command line. For example:
  </para>
  <screen> $ bin/counter-create -s https://localhost:8443/wsrf/services/CounterService -z none > epr</screen>

    </entry>
  </row>

  <row valign="top">
    <entry>4.</entry>
    <entry><para>In the same window, run (a couple of times):</para>
      <screen> $ bin/counter-add -e epr 2</screen>
    <para>As a result you should see something like the following:</para>
    <screen> $ bin/counter-add -e epr 2
   2          
 $ bin/counter-add -e epr 2
   4</screen>
   <para>
     Please note that if secure container was used you might need to add the <computeroutput><link linkend="javawscore-common-options">-z</link></computeroutput> argument to the command line. For example:
   </para>
   <screen> $ bin/counter-add -e epr -z none 2</screen>
    </entry>
  </row>

</tbody></tgroup>
</informaltable>
</section>


<section id="javawscore-samples-management"><title>Management Sample</title>

<para>
The <computeroutput>ManagementService</computeroutput> sample service allows the users to view and dynamically modify the WSDD properties of a given service. The WSDD information of a given service is exposed as resource properties. 
In this example, we will be removing the <computeroutput>QueryResourceProperties</computeroutput> operation provider from the <computeroutput>ContainerRegistryService</computeroutput>. 
</para>
<para>
Please note that the changes made to the services via the <computeroutput>ManagementService</computeroutput> are not permanent.
</para>

<informaltable frame="none">  
<tgroup cols="2"><tbody>

  <row valign="top">
   <entry>1.</entry>
   <entry><para>Change to the <computeroutput>$GLOBUS_LOCATION</computeroutput> directory:</para>
    <screen> $ cd $GLOBUS_LOCATION</screen>
  </entry>
 </row>

  <row valign="top">
    <entry>2.</entry>
    <entry><para>Start the container by running:</para>
      <screen> $ bin/globus-start-container</screen>
   </entry>
  </row>

  <row valign="top">
    <entry>3.</entry>
    <entry><para>In another window, run:</para>
      <screen> $ bin/wsrf-query -z self -s https://localhost:8443/wsrf/services/ManagementService \
    -k {http://axis.org}ServiceName ContainerRegistryService</screen>
    <para>As a result you should see something like the following:</para>
<screen>&lt;ns1:ServiceWSDD xmlns:ns0="http://xml.apache.org/axis/wsdd/" 
                  xmlns:ns1="http://xml.apache.org/axis/wsdd/"&gt;
 &lt;ns1:loadOnStartup&gt;true&lt;/ns1:loadOnStartup&gt;
 &lt;ns1:providers&gt;GetRPProvider&lt;/ns1:providers&gt;
 &lt;ns1:providers&gt;GetMRPProvider&lt;/ns1:providers&gt;
 &lt;ns1:providers&gt;QueryRPProvider&lt;/ns1:providers&gt;
 &lt;ns1:handlerClass&gt;org.globus.axis.providers.RPCProvider&lt;/ns1:handlerClass&gt;
 &lt;ns1:className&gt;org.globus.registry.RegistryService&lt;/ns1:className&gt;
 &lt;ns1:allowedMethodsClass&gt;org.globus.core.registry.RegistryPortType&lt;/ns1:allowedMethodsClass&gt;
 &lt;ns1:scope&gt;Application&lt;/ns1:scope&gt;
 &lt;ns1:wsdlFile&gt;share/schema/core/registry/registry_service.wsdl&lt;/ns1:wsdlFile&gt;
 &lt;ns1:provider&gt;Handler&lt;/ns1:provider&gt;
&lt;/ns1:ServiceWSDD&gt;</screen>
    <para>
     The above command queries the <computeroutput>ManagementService</computeroutput> and returns the WSDD information of the <computeroutput>ContainerRegistryService</computeroutput>. 
   </para>
   <para></para>
   </entry>
  </row>

  <row valign="top">
    <entry>4.</entry>
    <entry><para>To demonstrate that the <computeroutput>ContainerRegistryService</computeroutput> supports the <computeroutput>QueryResourceProperties</computeroutput> operation run the following command:</para>
      <screen> $ bin/wsrf-query -z self -s https://localhost:8443/wsrf/services/ContainerRegistryService</screen>
    <para>As a result you should see something like the following (a list of <computeroutput>&lt;ns1:Entry&gt;</computeroutput>):</para>
<screen>&lt;ns0:RegistryRP xmlns:ns0="http://www.globus.org/namespaces/2004/06/registry"&gt;
 &lt;ns1:Entry&gt;
 ...
 &lt;/ns1:Entry&gt;
 &lt;ns1:Entry&gt;
 ...
 &lt;/ns1:Entry&gt;
&lt;/ns1:RegistryRP&gt;</screen>
  <para></para>
   </entry>
  </row>

  <row valign="top">
    <entry>5.</entry>
    <entry>
     <para>Next, create an <computeroutput>in.xml</computeroutput> file with the following contents:</para>
<screen>&lt;ns1:doc xmlns:ns1="http://xml.apache.org/axis/wsdd/"&gt;
 &lt;ns1:providers&gt;GetRPProvider&lt;/ns1:providers&gt;
 &lt;ns1:providers&gt;GetMRPProvider&lt;/ns1:providers&gt;
&lt;/ns1:doc&gt;</screen>
     <para>Then run the following command:</para>
      <screen> $ bin/wsrf-update-property -z self -s https://localhost:8443/wsrf/services/ManagementService \
    -k {http://axis.org}ServiceName ContainerRegistryService in.xml</screen>
   <para>
The above command updates the <computeroutput>providers</computeroutput> resource property of the <computeroutput>ContainerRegistryService</computeroutput> resource of <computeroutput>ManagementService</computeroutput>. That results in the <computeroutput>QueryRPProvider</computeroutput> provider to be removed from the operation provider list of the <computeroutput>ContainerRegistryService</computeroutput>.
  </para>
  <para></para>
   </entry>
  </row>

  <row valign="top">
    <entry>6.</entry>
    <entry><para>Now perform the query operation again:</para>
      <screen> $ bin/wsrf-query -z self -s https://localhost:8443/wsrf/services/ContainerRegistryService</screen>
    <para>Since the operation provider for the <computeroutput>QueryResourceProperties</computeroutput> operation was removed the above command should generate the following error message:</para>
<screen>
Error: java.lang.Exception: [CORE] Operation 'QueryResourceProperties' defined
in wsdl but it's not implemented in the 'ContainerRegistryService' service.</screen>
   <para>
You can add the <computeroutput>QueryResourceProperties</computeroutput> operation provider by adding the <computeroutput>&lt;ns1:providers&gt;QueryRPProvider&lt;/ns1:providers&gt;</computeroutput> entry to the <computeroutput>in.xml</computeroutput> file and running the command in step 5 again.
  </para>
   </entry>
  </row>

</tbody></tgroup>
</informaltable>

</section>



