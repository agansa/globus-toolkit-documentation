<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
        "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="javawscore-configuring" xreflabel="Configuring Java WS Core">
    <title>Configuring</title>

    <indexterm type="javawscore-howto">
        <primary>configuring</primary>
    </indexterm>

    <indexterm type="javawscore">
        <primary>configuring</primary>
    </indexterm>

    <section id="javawscore-Interface_Config_Frag-overview">
        <title>Configuration overview</title>

        <indexterm type="javawscore">
            <primary>configuring</primary>

            <secondary>overview</secondary>
        </indexterm>

        <para>Java WS Core provides per-
            <constant>gar</constant>
            configuration
            and supports configuration profiles. The configuration information of a
            service is mainly encapsulated in two separate configuration files:
        </para>

        <itemizedlist>
            <listitem>
                <simpara>
                    <glossterm baseform="server-config.wsdd">server-config.wsdd
                        (Web Service Deployment Descriptor)
                    </glossterm>
                    - contains information
                    about the web service.
                </simpara>
            </listitem>

            <listitem>
                <simpara>
                    <glossterm baseform="jndi-config.xml">jndi-config.xml (JNDI
                        configuration file)
                    </glossterm>
                    - contains information about the
                    resource management.
                </simpara>
            </listitem>
        </itemizedlist>

        <para>A service that supports security might also have the
            <emphasis>
                <filename>security-config.xml</filename>
            </emphasis>
            (security deployment
            descriptor) file. Please see
            <olink targetdoc="wsaajavaDescriptor"/>
            for details.
        </para>

        <para>All these configuration files are dropped into the
            <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/</computeroutput>
            directory during the deployment process.
        </para>
    </section>

    <section id="javawscore-Interface_Config_Frag-syntax">
        <title>Syntax of the interface:</title>

        <section id="javawscore-Interface_Config_Frag-GlobalConfig">
            <title>Global Configuration</title>

            <indexterm type="javawscore">
                <primary>configuring</primary>

                <secondary>global</secondary>
            </indexterm>

            <para>The global properties are specified in the
                <computeroutput>&lt;globalConfiguration&gt;</computeroutput>
                section of
                <computeroutput>*server-config.wsdd</computeroutput>
                files in the
                <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/</computeroutput>
                directory. The configuration item
                <emphasis>name</emphasis>
                corresponds
                to the "<emphasis>name</emphasis>" attribute in a
                <computeroutput>&lt;parameter&gt;</computeroutput>
                sub element, and the
                <emphasis>value</emphasis>
                is put as a "<emphasis>value</emphasis>"
                attribute within the same parameter element.
            </para>

            <table>
                <title>General configuration parameters</title>

                <tgroup cols="4">
                    <thead>
                        <row>
                            <entry>Name</entry>

                            <entry>Value</entry>

                            <entry>Description</entry>

                            <entry>Comments</entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry>
                                <emphasis>logicalHost</emphasis>
                            </entry>

                            <entry>&lt;hostname&gt;</entry>

                            <entry>This parameter specifies the hostname to use instead of
                                the default local host. It is equivalent to setting the
                                <computeroutput>GLOBUS_HOSTNAME</computeroutput>
                                environment
                                property. Can be FQDN or just hostname.
                            </entry>

                            <entry>Optional</entry>
                        </row>

                        <row>
                            <entry>
                                <emphasis>disableDNS</emphasis>
                            </entry>

                            <entry>&lt;boolean&gt;</entry>

                            <entry>This parameter specifies whether to perform DNS lookup on
                                the
                                <computeroutput>logicalHost</computeroutput>
                                parameter. By
                                default,
                                <computeroutput>"false"</computeroutput>
                                is assumed
                                (DNS lookup is performed).
                            </entry>

                            <entry>Optional</entry>
                        </row>

                        <row>
                            <entry>
                                <emphasis>domainName</emphasis>
                            </entry>

                            <entry>&lt;domain name&gt;</entry>

                            <entry>This parameter specifies the domain name to append to the
                                host name if the host name is not qualified by a domain.
                            </entry>

                            <entry>Optional</entry>
                        </row>

                        <row>
                            <entry>
                                <emphasis>publishHostName</emphasis>
                            </entry>

                            <entry>&lt;boolean&gt;</entry>

                            <entry>This parameter specifies whether to publish the hostname
                                or the ip address. It is only used when DNS lookups are enabled
                                (
                                <computeroutput>disableDNS</computeroutput>
                                is false).
                            </entry>

                            <entry>Optional</entry>
                        </row>

                        <row>
                            <entry
                                    id="javawscore-Interface_Config_Frag-serverId">
                                <emphasis>server.id</emphasis>
                            </entry>

                            <entry>&lt;string&gt;</entry>

                            <entry>This parameter specifies the server id. The server id is
                                used to uniquely identify each container instance. For example,
                                each container gets its own persistent directory based on the
                                server id. By default, the standalone container server id is
                                "<computeroutput>&lt;ip&gt;-&lt;containerPort&gt;</computeroutput>".
                                In Tomcat, the server id will default to
                                "<computeroutput>&lt;ip&gt;-&lt;webApplicationName&gt;</computeroutput>".
                            </entry>

                            <entry>Optional</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <table id="javawscore-configuring-webContext">
                <title>Standalone/embedded container-specific configuration
                    parameters
                </title>
                <tgroup cols="4">
                    <thead>
                        <row>
                            <entry>Name</entry>

                            <entry>Value</entry>

                            <entry>Description</entry>

                            <entry>Comments</entry>
                        </row>
                    </thead>

                    <tbody>

                        <row>
                            <entry>
                                <emphasis>containerTimeout</emphasis>
                            </entry>

                            <entry>&lt;int&gt;</entry>

                            <entry>This parameter controls the container timeout. That is,
                                the maximum amount of time the container will wait to receive a
                                message from the client. By default it is set to 3
                                minutes.
                            </entry>

                            <entry>Optional</entry>
                        </row>

                        <row>
                            <entry>
                                <emphasis>webContext</emphasis>
                            </entry>

                            <entry>&lt;name&gt;</entry>

                            <entry>This parameter specifies the context name under which the
                                services are published under:
                                <computeroutput>
                                    http://&lt;host&gt;:&lt;port&gt;/&lt;webContext&gt;/services/MyService
                                </computeroutput>
                                .
                                By default "<computeroutput>wsrf</computeroutput>" name is used.
                                In Tomcat, this parameter is set to the web application's
                                name.
                            </entry>

                            <entry>Optional</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para></para>

        </section>

        <section id="javawscore-Interface_Config_Frag-PerformanceTuning">
            <title>Container Performance Tuning</title>
            <para>
                While there aren't a large number of parameters which you can use to tune the container for performance,
                configuring your container in a manner appropriate to the needs of your application can yield
                significant benefits. Having said that, these are very general guidelines which may not apply to every
                situation. In addition, many commonly used services have configuration recommendations. It is
                strongly suggested that you check the performance tuning guide for your particular service before
                attempting to change these settings on your own.
            </para>
            <section id="javawscore-Interface_Config_Frag-PerformanceTuning-JVM">
                <title>JVM Parameters</title>
                <para>
                    The first major parameters you can adjust are not strictly container parameters, but tweaking
                    the parameters of the JVM in which your container is running can provide significant performance
                    benefits.
                    Each implementation of the JVM has it's own set of parameters which can be modified, however, all
                    JVM's
                    have parameters to change the heap memory usage. By default, the JVM claims 64 MB from the operating
                    system. This will be too small for any real deployment of the container. For a service such as GRAM,
                    which expects to process large numbers of jobs which may exist for an extended period of time, we
                    recommend specifying at least 1024 MB for the maximum heap memory. In addition, you should specify
                    the
                    minimum amount of heap memory your container will use. To set these values for the container,
                    execute this command:
                    <screen>
GLOBUS_OPTIONS="-Xms256M -Xmx1024M"
                    </screen>
                    This will tell the virtual machine to claim 256 MB as the minimum heap size and 1024 MB as the
                    maximum heap size. As a general rule of thumb, if you specify more memory, your performance will
                    improve. Of course, this is only the case if your machine has sufficient memory.
                </para>
                <para>
                    In addition, certain JVM implementations have additional parameters which can improve performance.
                    The
                    most notable is in the Sun JVM implementation. Specifying the process to be
                    <computeroutput>-server</computeroutput>
                    allows the JVM to run in "server" mode. The JVM will typically perform better on CPU intensive tasks
                    (like most GT containers) when in "server" mode. To set this value, add
                    <computeroutput>-server</computeroutput>
                    to your
                    <computeroutput>GLOBUS_OPTIONS</computeroutput>
                    variable:
                    <screen>
GLOBUS_OPTIONS="$GLOBUS_OPTIONS -server"
                    </screen>
                </para>
            </section>
            <section id="javawscore-Interface_Config_Frag-PerformanceTuning-Container">
                <title>Container Parameters</title>

                <para>
                    The Container parameters also play a significant role in the performance of your container. The main
                    parameters relate to threads.
                </para>
                <para>
                    Setting up threads for a container is as much an art as a science, so here are some guidelines for
                    configuring your container. The number of threads determines how many concurrent requests your
                    container can service. However, just setting this number to a high value is not a good solution,
                    because each thread takes resources. Ideally, you would want to set this number to be equal to the
                    number of processors your machine has, because that would mean that each thread is being serviced
                    all the time (of course, that is assuming that your computer isn't doing anything else, which is
                    never. That's why this is "ideally"). However, unless you are getting only 1 or 2 requests at a
                    time,
                    this will prevent requests from being processed in a timely manner. So, when configuring this value,
                    you will generally want to find a balance between the number of requests you expect to receive and
                    the resources available on the machine. You should usually try to set this value as low as you can.
                    Having said that, if you expect a large number of requests and those requests are either completed
                    quickly or do the work in a separate thread, the default value of 20 maximum threads is usually
                    sufficient. However, in that scenario, you will probably want to set the minimum number of threads
                    to 20 as well. That way you won't take time starting and stopping threads.
                </para>
                <para>
                    So, as a basic rule of thumb, the default thread configuration will be sufficient unless, you a)
                    expect to receive a large number of concurrent requests which can be processed quickly
                    (in which case you should make the minimum and maximum number of threads equal) or b) you will have
                    a low number of concurrent requests that can be processed quickly (in which case, you might consider
                    reducing the maximum number of threads) or c) you have will receive a large number of concurrent
                    requests which take a long time to process (in which case you should increase the maximum number of
                    threads). The third situation listed is definitely not ideal, because it will put a heavy load on
                    the server with no real way to balance it. In this scenario, you should consider passing the
                    processing from your service to the WorkManager. The specific configuration parameters are listed
                    below.
                </para>
                <table>
                    <title>Container Thread Parameters</title>
                    <tgroup cols="4">
                        <thead>
                            <row>
                                <entry>Name</entry>

                                <entry>Value</entry>

                                <entry>Description</entry>

                                <entry>Comments</entry>
                            </row>
                        </thead>

                        <tbody>
                            <row>
                                <entry>
                                    <emphasis>containerThreads</emphasis>
                                </entry>

                                <entry>&lt;int&gt;</entry>

                                <entry>This parameter controls the initial thread pool size for
                                    the container. If not set, it defaults to 1.
                                </entry>

                                <entry>Optional</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>containerThreadsMax</emphasis>
                                </entry>

                                <entry>&lt;int&gt;</entry>

                                <entry>This parameter sets the maximum number of threads for the
                                    container. By default it is set to 4 * the
                                    <computeroutput>containerThread</computeroutput>
                                    setting.
                                </entry>

                                <entry>Optional</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>containerThreadsHighWaterMark</emphasis>
                                </entry>

                                <entry>&lt;int&gt;</entry>

                                <entry>This parameter controls when the thread pool of the
                                    container should start shrinking (if the number of idle threads
                                    exceeds this number). By default it is set to 2 * the
                                    <computeroutput>containerThread</computeroutput>
                                    setting.
                                </entry>

                                <entry>Optional</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <para>The default Thread settings are as follows:</para>
                <table>
                    <title>Default container thread pool settings</title>

                    <tgroup cols="3">
                        <thead>
                            <row>
                                <entry>Type</entry>

                                <entry>Min. threads</entry>

                                <entry>Max. threads</entry>
                            </row>
                        </thead>

                        <tbody>
                            <row>
                                <entry>
                                    <emphasis>standalone</emphasis>
                                </entry>

                                <entry align="center">2</entry>

                                <entry align="center">20</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>embedded</emphasis>
                                </entry>

                                <entry align="center">1</entry>

                                <entry align="center">3</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </section>
            <section id="javawscore-Interface_Config_Frag-PerformanceTuning-Client">
                <title>Client Parameters</title>
                <para>The connection timeout parameter in the client can also play a role in tuning performance. This
                    is a new feature in the 4.2 release. It allows a client to keep the http connection open to the
                    server
                    across multiple requests. Setting this to a higher value will mean the same connection is used
                    for longer. This can positively impact performance by eliminating some of the overhead involved in
                    connecting to the server. However, this is not a magic bullet, so don't expect to see huge
                    improvements
                    from this parameter. If you have a long running task on the server, you will probably see modest
                    improvement in the time required to actually submit the request to the server, but the latency in
                    your
                    request will likely make that mostly moot. Also, if you keep a connection open, you will be limiting
                    the ability of other clients to connect. So this is a parameter that should be changed carefully,
                    depending on your particular circumstances.
                </para>
            </section>
        </section>

        <section id="javawscore-Interface_Config_Frag-ServiceConfig">
            <title>Service Configuration</title>

            <indexterm type="javawscore">
                <primary>configuring</primary>

                <secondary>service</secondary>
            </indexterm>

            <section id="javawscore-Interface_Config_Frag-ServiceConfig-WSDD">
                <title>WSDD</title>

                <indexterm type="javawscore">
                    <primary>configuring</primary>

                    <secondary>service</secondary>

                    <tertiary>WSDD</tertiary>
                </indexterm>

                <para>An example of a deployment descriptor for a
                    CounterService:
                </para>

                <screen>
&lt;service name="CounterService" provider="Handler" use="literal" style="document"&gt; &lt;parameter name="className"
        value="org.globus.wsrf.samples.counter.CounterService"/&gt;
    &lt;parameter name="handlerClass" value="org.globus.axis.providers.RPCProvider"/&gt;
    &lt;parameter name="scope" value="Application"/&gt;
    &lt;wsdlFile&gt;share/schema/core/samples/counter/counter_service.wsdl&lt;/wsdlFile&gt;
    &lt;parameter name="allowedMethodsClass" value="com.counter.CounterPortType"/&gt;
    &lt;parameter name="providers" value=" DestroyProvider SetTerminationTimeProvider
        GetRPProvider SubscribeProvider GetCurrentMessageProvider"/&gt;
&lt;/service&gt;
                </screen>

                <para>Services are defined in a
                    <computeroutput>&lt;service&gt;</computeroutput>
                    element. The
                    "<emphasis>name</emphasis>" attribute of the
                    <computeroutput>&lt;service&gt;</computeroutput>
                    element defines the
                    remotely accessible name of the service. The service handle will have
                    the form of &lt;hosting environment URL&gt;/foo, where:
                </para>

                <itemizedlist>
                    <listitem>
                        <simpara>the hosting environment URL typically is
                            <computeroutput>http://&lt;host&gt;:&lt;port&gt;/wsrf/services.</computeroutput>
                        </simpara>
                    </listitem>

                    <listitem>
                        <simpara>
                            <emphasis>foo</emphasis>
                            is the name of the service
                            (<computeroutput>&lt;service name="foo"
                            ...&gt;</computeroutput>).
                        </simpara>
                    </listitem>
                </itemizedlist>

                <para>The
                    <emphasis>use</emphasis>
                    attribute should be set to
                    <emphasis>literal</emphasis>
                    and the
                    <emphasis>style</emphasis>
                    attribute to
                    <emphasis>document</emphasis>
                    for all WSRF/WSN based
                    services. The configuration information for a service is defined by
                    various
                    <computeroutput>&lt;parameter&gt;</computeroutput>
                    sub-elements within a
                    <computeroutput>&lt;service&gt;</computeroutput>
                    element. The configuration item
                    <emphasis>name</emphasis>
                    corresponds
                    to the "<emphasis>name</emphasis>" attribute in a
                    <computeroutput>&lt;parameter&gt;</computeroutput>
                    sub element, and
                    the
                    <emphasis>value</emphasis>
                    is put as a
                    "<emphasis>value</emphasis>" attribute within the same parameter
                    element.
                </para>

                <table>
                    <title>Axis Standard Parameters</title>

                    <tgroup cols="4">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis>Name</emphasis>
                                </entry>

                                <entry>
                                    <emphasis>Value</emphasis>
                                </entry>

                                <entry>
                                    <emphasis>Description</emphasis>
                                </entry>

                                <entry>
                                    <emphasis>Comments</emphasis>
                                </entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>className</emphasis>
                                </entry>

                                <entry>&lt;class&gt;</entry>

                                <entry>This parameter specifies a class that implements the
                                    web service methods.
                                </entry>

                                <entry>Required</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>handlerClass</emphasis>
                                </entry>

                                <entry>&lt;class&gt;</entry>

                                <entry>This parameter specifies what dispatcher to use to send
                                    a request to a service method. This parameter is required if
                                    the
                                    <emphasis>provider</emphasis>
                                    attribute of the
                                    <emphasis>service</emphasis>
                                    is set to
                                    <computeroutput>Provider</computeroutput>. The default
                                    dispatcher we provide is called
                                    <emphasis>org.globus.axis.providers.RPCProvider</emphasis>. It
                                    enables special features such as operation providers or
                                    security support.
                                </entry>

                                <entry>Recommended in our environment</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>scope</emphasis>
                                </entry>

                                <entry>&lt;value&gt;</entry>

                                <entry>Scope value can be one of:
                                    <emphasis>Request</emphasis>
                                    (the default),<emphasis>Application</emphasis>, or
                                    <emphasis>Session</emphasis>. If
                                    <emphasis>Request</emphasis>
                                    scope is used, a new service object is created for each SOAP
                                    request that comes in for the service. If
                                    <emphasis>Application</emphasis>
                                    scope is used, only a single
                                    instance of the service object is created and used for all
                                    SOAP requests that come in for the service. If
                                    <emphasis>Session</emphasis>
                                    scope is used, a new service
                                    object is created for each session-enabled client who accesses
                                    the service.
                                    <emphasis>Note:</emphasis>
                                    Only
                                    <emphasis>Request</emphasis>
                                    and
                                    <emphasis>Application</emphasis>
                                    scopes are supported when
                                    used with
                                    <emphasis>org.globus.axis.providers.RPCProvider</emphasis>
                                    handlerClass.
                                </entry>

                                <entry>
                                    <emphasis>Application</emphasis>
                                    scope is
                                    recommended
                                </entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>wsdlFile</emphasis>
                                </entry>

                                <entry>&lt;path&gt;</entry>

                                <entry>This parameter points to a wsdl file for the service.
                                    The wsdl file must contain the
                                    <emphasis>wsdl:service</emphasis>
                                    entry. The file location can
                                    be relative or absolute. A relative file location is
                                    recommended.
                                </entry>

                                <entry>Required in our environment</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>allowedMethods</emphasis>
                                </entry>

                                <entry>&lt;list of methods&gt;</entry>

                                <entry>This parameter specifies a space or comma separated
                                    list of method names that can be called via SOAP.
                                    <computeroutput>"*"</computeroutput>
                                    indicates that all
                                    methods of the service class can be invoked via SOAP.
                                </entry>

                                <entry>Optional. By default all methods are allowed.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>

                <table>
                    <title>Java WS Core Parameters</title>

                    <tgroup cols="4">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis>Name</emphasis>
                                </entry>

                                <entry>
                                    <emphasis>Value</emphasis>
                                </entry>

                                <entry>
                                    <emphasis>Description</emphasis>
                                </entry>

                                <entry>
                                    <emphasis>Comments</emphasis>
                                </entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>loadOnStartup</emphasis>
                                </entry>

                                <entry>&lt;boolean&gt;</entry>

                                <entry>If set to
                                    <emphasis>true</emphasis>
                                    this parameter will
                                    cause the web service and the corresponding ResourceHome (if
                                    any) to be initialized (with proper security settings if
                                    configured) at container startup. This is useful for
                                    restarting some tasks, etc. at container startup without
                                    having to call the service. Please check
                                    <olink
                                            targetdoc="javawscoreDeveloper"
                                            targetptr="javawscore-developer-service-startup"></olink>
                                    for
                                    details.
                                </entry>

                                <entry>Optional</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>allowedMethodsClass</emphasis>
                                </entry>

                                <entry>&lt;class&gt;</entry>

                                <entry>This parameter is similar to the
                                    <emphasis>allowedMethods</emphasis>
                                    standard Axis property but
                                    it specifies a Java class or an interface that is introspected
                                    to come up with a list of allowed methods that can be called
                                    remotely on the service. It is useful for easily restricting
                                    the SOAP-accessible methods of the service. Usually the class
                                    specified in this parameter would be the remote interface
                                    class generated for the service. This parameter only has
                                    effect if used with
                                    <emphasis>org.globus.axis.providers.RPCProvider</emphasis>
                                    handlerClass.
                                </entry>

                                <entry>Optional</entry>
                            </row>

                            <row>
                                <entry>
                                    <emphasis>providers</emphasis>
                                </entry>

                                <entry>&lt;list of providers&gt;</entry>

                                <entry>This parameter specifies a space separated list of
                                    provider names or class names. Please see the
                                    <olink
                                            targetdoc="javawscoreDeveloper"
                                            targetptr="javawscore-developer-OperationProvider">Operation
                                        provider support
                                    </olink>
                                    section for details. This parameter
                                    only has effect if used with
                                    <emphasis>org.globus.axis.providers.RPCProvider</emphasis>
                                    handlerClass.
                                </entry>

                                <entry>Optional</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>

                <para>Please see
                    <ulink
                            url="http://ws.apache.org/axis/java/user-guide.html#PublishingServicesWithAxis">Custom
                        Deployment
                    </ulink>
                    for details on Axis Web Services Deployment
                    Descriptor.
                </para>
            </section>

            <section id="javawscore-Interface_Config_Frag-ServiceConfig-JNDI">
                <title>JNDI</title>

                <indexterm type="javawscore">
                    <primary>configuring</primary>

                    <secondary>service</secondary>

                    <tertiary>JNDI</tertiary>
                </indexterm>

                <para>An example of a JNDI configuration bit for a
                    CounterService:
                </para>

                <screen> &lt;service name="CounterService"&gt; &lt;resource name="home"
                    type="org.globus.wsrf.samples.counter.CounterHome"&gt; &lt;resourceParams&gt;
                    &lt;parameter&gt; &lt;name&gt;factory&lt;/name&gt;
                    &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
                    &lt;/parameter&gt; &lt;parameter&gt;
                    &lt;name&gt;resourceClass&lt;/name&gt;
                    &lt;value&gt;org.globus.wsrf.samples.counter.PersistentCounter&lt;/value&gt;
                    &lt;/parameter&gt; &lt;parameter&gt;
                    &lt;name&gt;resourceKeyName&lt;/name&gt;
                    &lt;value&gt;{http://counter.com}CounterKey&lt;/value&gt;
                    &lt;/parameter&gt; &lt;parameter&gt;
                    &lt;name&gt;resourceKeyType&lt;/name&gt;
                    &lt;value&gt;java.lang.Integer&lt;/value&gt; &lt;/parameter&gt;
                    &lt;/resourceParams&gt; &lt;/resource&gt; &lt;/service&gt;</screen>

                <para>Each service in WSDD should have a matching entry in the JNDI
                    configuration file with the same name. Under each service entry in
                    JNDI different resource objects or entries might be defined. Please
                    see
                    <olink targetdoc="javawscoreDeveloper"
                           targetptr="javawscore-developer-jndi"></olink>
                    for details.
                    Each service entry in JNDI should have a resource defined called
                    <computeroutput>"home"</computeroutput>. That resource is the
                    <glossterm>ResourceHome</glossterm>
                    implementation for the service (as
                    specified by the
                    <computeroutput>type</computeroutput>
                    attribute).
                    Depending on the
                    <computeroutput>ResourceHome</computeroutput>
                    implementation different options can be configured for the
                    <computeroutput>ResourceHome</computeroutput>. Currently we have two
                    main base
                    <computeroutput>ResourceHome</computeroutput>
                    implementations:
                    <computeroutput>org.globus.wsrf.impl.ResourceHomeImpl</computeroutput>
                    and
                    <computeroutput>org.globus.wsrf.impl.ServiceResourceHome</computeroutput>.
                </para>

                <para>
                    <emphasis>Note:</emphasis>
                    All
                    <computeroutput>"home"</computeroutput>
                    resources must specify a
                    <computeroutput>factory</computeroutput>
                    parameter with
                    <computeroutput>org.globus.wsrf.jndi.BeanFactory</computeroutput>
                    value.
                </para>

                <section id="javawscore-Interface_Config_Frag-ServiceConfig-JNDI-ResourceHomeImpl">
                    <title>ResourceHomeImpl</title>

                    <para>The
                        <emphasis>ResourceHomeImpl</emphasis>
                        is a generic and
                        reusable
                        <computeroutput>ResourceHome</computeroutput>
                        implementation. It supports persistent resources, resource caching,
                        resource sweeper, etc.
                    </para>

                    <table>
                        <title>ResourceHomeImpl parameters</title>

                        <tgroup cols="4">
                            <tbody>
                                <row>
                                    <entry>
                                        <emphasis>Name</emphasis>
                                    </entry>

                                    <entry>
                                        <emphasis>Value</emphasis>
                                    </entry>

                                    <entry>
                                        <emphasis>Description</emphasis>
                                    </entry>

                                    <entry>
                                        <emphasis>Comments</emphasis>
                                    </entry>
                                </row>

                                <row>
                                    <entry>
                                        <emphasis>resourceKeyName</emphasis>
                                    </entry>

                                    <entry>&lt;qname&gt;</entry>

                                    <entry>This parameter specifies a QName of the resource key.
                                        The namespace is specified in the
                                        <computeroutput>{}</computeroutput>. For example, this QName
                                        will be used to discover the SOAP header that contains the
                                        key of the resource in the request.
                                    </entry>

                                    <entry>Required</entry>
                                </row>

                                <row>
                                    <entry>
                                        <emphasis>resourceKeyType</emphasis>
                                    </entry>

                                    <entry>&lt;class&gt;</entry>

                                    <entry>This parameter specifies the type of the resource key
                                        as a Java class. The key XML element is deserialized into
                                        this Java type. The Java type can be for any simple Java
                                        type, Axis generated bean, or a class with a type
                                        mapping.
                                    </entry>

                                    <entry>Optional. Defaults to
                                        <computeroutput>java.lang.String</computeroutput>
                                    </entry>
                                </row>

                                <row>
                                    <entry>
                                        <emphasis>resourceClass</emphasis>
                                    </entry>

                                    <entry>&lt;class&gt;</entry>

                                    <entry>This parameter specifies the classname of the
                                        resource object. This is used to ensure that right type of
                                        resource object is added to resource home and to instantiate
                                        the right object if the resource supports
                                        persistence.
                                    </entry>

                                    <entry>Required</entry>
                                </row>

                                <row>
                                    <entry>
                                        <emphasis>sweeperDelay</emphasis>
                                    </entry>

                                    <entry>&lt;long&gt;</entry>

                                    <entry>This parameter specifies how often the resource
                                        sweeper runs in milliseconds.
                                    </entry>

                                    <entry>Optional. Defaults to 1 minute</entry>
                                </row>

                                <row>
                                    <entry>
                                        <emphasis>cacheLocation</emphasis>
                                    </entry>

                                    <entry>&lt;jndi path&gt;</entry>

                                    <entry>This parameter specifies the JNDI location of the
                                        resource cache for this resource home. Please see
                                        <olink
                                                targetptr="javawscore-Interface_Config_Frag-resourcecache">Configuring
                                            Resource Cache
                                        </olink>
                                        below for details.
                                    </entry>

                                    <entry>Optional</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </table>

                    <section id="javawscore-Interface_Config_Frag-resourcecache">
                        <title>Configuring Resource Cache</title>

                        <para>If
                            <emphasis>ResourceHomeImpl</emphasis>
                            is configured with
                            resource class that implements the
                            <emphasis>PersistenceCallback</emphasis>
                            interface it will store
                            the resource objects wrapped in Java<ulink
                                url="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ref/SoftReference.html">
                            SoftReference</ulink>.
                            That allows the JVM to automatically reclaim these resource
                            objects, thus reducing the memory usage. Since the JVM can decide
                            to reclaim these objects at any point, sometimes a resource object
                            can be reclaimed between two subsequent invocations on the same
                            resource. This for example can cause the state of the resource to
                            be reloaded from disk on each call. To prevent the JVM from
                            reclaiming the resource objects so quickly a cache can be setup up
                            to hold direct references to these objects. A basic LRU (least
                            recently used) cache implementation is provided. Other cache
                            implementations can be used as long as they implement the
                            <emphasis>org.globus.wsrf.utils.cache.Cache</emphasis>
                            interface.
                        </para>

                        <para>To configure a cache for
                            <emphasis>ResourceHomeImpl</emphasis>
                            first define a cache
                            resource entry in JNDI, for example:
                        </para>

                        <screen>
&lt;resource name="cache" type="org.globus.wsrf.utils.cache.LRUCache"&gt;
    &lt;resourceParams&gt;
        &lt;parameter&gt;
            &lt;name&gt;factory&lt;/name&gt;
            &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name&gt;timeout&lt;/name&gt;
            &lt;value&gt;120000&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name&gt;maxSize&lt;/name&gt;
            &lt;value&gt;1000&lt;/value&gt;
        &lt;/parameter&gt;
    &lt;/resourceParams&gt;
&lt;/resource&gt;
                        </screen>

                        <para>The "<emphasis>timeout</emphasis>" parameter (in ms) is used
                            to specify the idle time of the resource object before it is
                            removed from the cache. Also, the "<emphasis>maxSize</emphasis>"
                            parameter can be used to specify the maximum size of the cache. By
                            default the cache is configured without any size limit and 5
                            minutes timeout.
                        </para>

                        <para>Once the cache resource entry is defined add the
                            "<emphasis>cacheLocation</emphasis>" parameter to the service
                            <emphasis>home</emphasis>
                            resource. The
                            "<emphasis>cacheLocation</emphasis>" parameter value is the JNDI
                            name of the cache resource:
                        </para>

                        <screen>
&lt;service name="CounterService"&gt;
    &lt;resource name="home" type="..."&gt;
        &lt;resourceParams&gt;
            ...
            <emphasis> &lt;parameter&gt;
                &lt;name&gt;cacheLocation&lt;/name&gt;
                &lt;value&gt;java:comp/env/services/CounterService/cache&lt;/value&gt;
            &lt;/parameter&gt;</emphasis>
            ...
        &lt;/resourceParams&gt;
    &lt;/resource&gt;
    ...
    &lt;resource name="cache" type="org.globus.wsrf.utils.cache.LRUCache"&gt;
        ...
    &lt;/resource&gt;
&lt;/service&gt;
                        </screen>

                        <para>Please note that once the object is removed from the cache
                            it is still up to the JVM to actually reclaim the object. Also,
                            the same cache resource can be reused in different services but
                            usually one cache per service should be configured.
                        </para>
                    </section>
                </section>

                <section id="javawscore-Interface_Config_Frag-ServiceConfig-JNDI-ServiceResourceHome">
                    <title>ServiceResourceHome</title>

                    <para>This implementation does not accept any special
                        parameters.
                    </para>
                </section>
            </section>
        </section>

        <section id="javawscore-Interface_Config_Frag-usageStatisticsTargets">
            <title>Usage Statistics Configuration</title>

            <indexterm type="javawscore">
                <primary>configuring</primary>

                <secondary>usage statistics</secondary>
            </indexterm>

            <para>Java WS Core container and other GT services are configured to
                send out usage statistics. Please see the
                <olink
                        targetdoc="javawscoreAdmin" targetptr="javawscore-admin-usage">Usage
                    Statistics
                </olink>
                section in the
                <olink
                        targetdoc="javawscoreAdmin"></olink>
                for more information.
            </para>

            <para>The targets to which the usage statistics are sent to are
                configured via the
                <emphasis>
                    <computeroutput>usageStatisticsTargets</computeroutput>
                </emphasis>
                parameter defined in the
                <computeroutput>&lt;globalConfiguration&gt;</computeroutput>
                section of
                the
                <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/server-config.wsdd</computeroutput>
                file. The
                <emphasis>
                    <computeroutput>usageStatisticsTargets</computeroutput>
                </emphasis>
                parameter specifies a space separated list of targets to which the usage
                statistics of various components will be sent to. Each target is of
                form:
                <computeroutput>host[:port]</computeroutput>
                (port is optional, if
                not specified a default port will be assumed). By default usage
                statistics are sent to
                <computeroutput>usage-stats.globus.org:4810</computeroutput>.
            </para>

            <para>To disable sending of the usage statistics remove this parameter,
                comment it out, or remove all of its values.
            </para>
        </section>

        <section id="javawscore-Interface_Config_Frag-ConfigurationProfiles">
            <title>Configuration Profiles</title>

            <indexterm type="javawscore">
                <primary>configuring</primary>

                <secondary>profiles</secondary>
            </indexterm>

            <para>Configuration profiles allow for the same Java WS Core
                installation to have multiple configurations. That is, the same
                installation can be used to run different containers each with different
                configuration.
            </para>

            <para>When a
                <glossterm baseform="GAR">.gar</glossterm>
                file is
                deployed, a
                <computeroutput>-Dprofile</computeroutput>
                option can be
                specified to deploy the configuration files under a specific profile
                name. If the profile name is specified, the deploy operation will drop
                the configuration file as
                <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/&lt;profile.name&gt;-server-config.wsdd
                </computeroutput>
                and/or
                <computeroutput>
                    $GLOBUS_LOCATION/etc/&lt;gar.id&gt;/&lt;profile.name&gt;-jndi-config.xml</computeroutput>.
                The configuration profiles can also be created by hand simply by copying
                and/or renaming the configuration files appropriately. Each
                configuration profile should duplicate the contents of
                <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/server-config.wsdd</computeroutput>
                and
                <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/jndir-config.xml</computeroutput>
                in order to have the basic functionality work properly.
            </para>

            <para>Once a configuration profile is created, the
                <olink
                        targetdoc="javawscoreDeveloper"
                        targetptr="globus-start-container">standalone container
                </olink>
                can be
                started with a
                <computeroutput>-profile</computeroutput>
                option to load
                configuration files in a specific profile.
            </para>
        </section>
    </section>

    <section>
        <title>Configuring an
            <computeroutput>/etc/init.d</computeroutput>
            entry
            for the standalone container
        </title>

        <indexterm type="javawscore-howto">
            <primary>configuring</primary>

            <secondary>/etc/init.d for the standalone container</secondary>
        </indexterm>

        <indexterm type="javawscore">
            <primary>configuring</primary>

            <secondary>/etc/init.d for the standalone container</secondary>
        </indexterm>

        <para>To create an
            <computeroutput>/etc/init.d</computeroutput>
            entry for
            the standalone container do the following steps:
        </para>

        <orderedlist>
            <listitem>
                <para>As root create
                    <computeroutput>/etc/init.d/gt4container</computeroutput>
                    script with
                    the following contents:
                </para>

                <screen>
ACCOUNT=globus GLOBUS_LOCATION=&lt;globusLocation&gt;
INIT=$GLOBUS_LOCATION/etc/init.d/globus-ws-java-container su $ACCOUNT -c "$INIT $*"
                </screen>
            </listitem>

            <listitem>
                <para>Set executable permissions on the
                    <computeroutput>/etc/init.d/gt4container</computeroutput>
                    script and
                    register it with the
                    <computeroutput>init.d</computeroutput>
                    system:
                </para>

                <screen>$ chmod +x /etc/init.d/gt4container $ /sbin/chkconfig -a gt4container</screen>

                <para>After this step the container should start automatically after
                    the next reboot. Make sure the container is configured with a global
                    security descriptor that explicitly points to long term
                    credentials.
                </para>
            </listitem>
        </orderedlist>

        <para>To start the container by hand run:</para>

        <screen>$ /etc/init.d/gt4container start</screen>

        <para>To stop the container by hand run:</para>

        <screen>$ /etc/init.d/gt4container stop</screen>
    </section>
</chapter>