<?xml version='1.0' encoding='UTF-8'?>

<title>GT4 CAS Admin Guide</title>

<titleabbrev>Admin Guide</titleabbrev>

<section id="introduction"><title>Introduction</title>

  <para>This guide contains advanced configuration information for system administrators

  working with the Community Authorization Service (CAS). It provides references

  to information on procedures typically performed by system administrators,

    including installing, configuring, deploying, and testing the installation.</para>
  <important>
    <simpara> This information is in addition to the basic Globus Toolkit prerequisite, 
      overview, installation, security configuration instructions in the <ulink url="../../admin/docbook/">GT 4.0 System Administrator's Guide</ulink>.  
      Read through this guide before continuing!</simpara>  
  </important>

  <para><emphasis>Note:</emphasis> Typically a single CAS server is run per VO

  and multiple client installations are done. This document contains

  information about deploying a CAS server and is not needed for a CAS

  client installation. Please refer to the documentation for <ulink url="#casClientInstall">CAS client install</ulink>.</para>

</section>

<section id="installing-cas"><title>Building and Installing</title>

  <para>The CAS server and client are built and installed as part of

    a default GT 4.0 installation. For basic installation instructions,  refer to the <ulink url="http://www-unix.globus.org/toolkit/docs/4.0/admin/docbook/">GT 4.0 System Administrator&apos;s Guide</ulink>.

    No extra installation steps are required for this component.</para>

  <para id="casClientInstall">The CAS client can be installed by

itself. Please refer to <emphasis>FILL ME(link to top level install guide for installing a given package)</emphasis></para>

</section>

<section id="configuring"><title>Configuring </title>

&WS_AA_CAS_Interface_Config_Frag;

</section>

<section id="deploying"><title>Deploying</title>

  <para>The CAS service is deployed as a part of  a standard toolkit installation. 
    Please refer to the <ulink url="../../admin/docbook/">System Administrator&apos;s Guide</ulink> for details. Other than the steps described in
the above guide, the following are needed to deploy the CAS service.</para>


  <section id="casCreds"><title>Obtaining credentials for the CAS service</title>

    <para>The CAS service can run with its own service specific credentials. Instructions 

      for obtaining <glossterm linkend="svc-cred">service credentials</glossterm> may be found <ulink url="http://www.globus.org/toolkit/docs/2.4/admin/guide-verify.html#ldapcert">here</ulink>.

</para>

    <para>The standard administrator clients that come with the distribution by default use  identity authorization  to authorize the service they are running against (and expect that the CAS service has credentials

      that have the FQDN of the host the server is running on and the service name &quot;cas&quot; as part of DN). Command line options can be used to specify the identity of the CAS service, if the default identity is not used. The command in the above mentioned <ulink url="http://www.globus.org/toolkit/docs/2.4/admin/guide-verify.html#ldapcert">web page</ulink> may be altered as follows to get credentials for the CAS server:</para>

    <screen>casadmin$ grid-cert-request -service <emphasis>cas</emphasis> -host <emphasis>FQDN</emphasis></screen>

    <para>The certificate and <glossterm linkend="priv-key">private key</glossterm> are typically placed in <filename>/etc/grid-security/cas-cert.pem</filename> and <filename>/etc/grid-security/cas-key.pem</filename>,

  respectively. In this document the locations of certificate and key files are

  referred to as CAS_CERT_FILE and CAS_KEY_FILE, respectively.

The subject name in these credentials is expected by CAS clients by default.</para>

  </section>

  <section id="dbInstall"><title>Database installation and configuration </title>

    <para>CAS uses a back end database to store all user data. This section briefly describes the <link linkend="dbInstall">installation of such a database</link> and the <link linkend="createDb">creation of the database</link> using  the schema required  by the CAS back end.

</para>

    <section id="installDb">

      <title>Installing the database </title>

      <para>While any database with a JDBC driver and support for a reasonable set of SQL may be used, PostgreSQL has been used for development

and testing. The driver for the same  is included in the distribution. If a

different database is used, the corresponding driver should be added to $GLOBUS_LOCATION/lib.

</para>

      <para>Brief instructions on how to install a database (specifically

  PostgreSQL) can be found <ulink url="http://www-unix.globus.org/toolkit/3.0/ogsa/docs/admin/installation.html">here</ulink>.

  For more detailed instructions, please refer to documentation for the database you are installing.

  </para>

    </section>

    <section id="createDb">

      <title>Creating the CAS database </title>

      <para>The schema  for the database that needs to be created for CAS can be found

  at <filename> $GLOBUS_LOCATION/etc/globus_cas_service/casDbSchema/cas_pgsql_database_schema.sql</filename></para>

      <para>To create a database, for example <emphasis>casDatabase</emphasis>, on a PostgreSQL installation

  on a local machine run the following commands:</para>

      <screen>casadmin$ createdb casDatabase  

casadmin$ psql -U casadmin -d casDatabase -f  \

$GLOBUS_LOCATION/etc/globus_cas_service/casDbSchema/cas_pgsql_database_schema.sql</screen>

      <para>You will see a list of notices on the screen. Unless any of them say &quot;ERROR&quot;,

  these are just informational output.</para>

    </section>

    <section id="bootstrapingDb">

      <title>Bootstrapping the CAS database </title>

      <para>The CAS database needs to be initialized with data  specific to CAS and information about a super user to allow bootstrapping  of CAS operations. The command line script <emphasis>cas-server-bootstrap</emphasis> can be used to achieve this.</para>

      <screen>cas-server-bootstrap [&lt;options&gt;] -d &lt;dbPropFile&gt; [ -implicit | -b &lt;bootstrapFile&gt; ]</screen>

      <table>

        <title>Command line options</title>

        <tgroup cols="2">

          <tbody>

            <row>

              <entry>

                <option>-help</option>

              </entry>

              <entry>Prints the help message.</entry>

            </row>

            <row>

              <entry>

                <option>-debug</option>

              </entry>

              <entry>Runs the script with debug trace.</entry>

            </row>

            <row>

              <entry>

                <option>-d</option>

                <filename>

                  <replaceable>dbPropertiesFile</replaceable>

                </filename>

              </entry>

              <entry>

                <para>File name with database properties as follows:

  <screen>dbDriver=<replaceable>database driver name</replaceable>

dbConnectionURL=<replaceable>database connection URL</replaceable>

dbUserName=<replaceable>Username to access database</replaceable>

dbPassword=<replaceable>Password for the above username</replaceable></screen>

</para>

              </entry>

            </row>

            <row>

              <entry>

                <option>-b <replaceable>bootstrapFile</replaceable></option>

              </entry>

              <entry>This option populates the database with super user data and points to a file with data to use for bootstrapping the database. A template file for this can be found at <filename>$GLOBUS_LOCATION/share/globus_cas_service/bootstrapTemplate</filename> and a sample file can be found at <filename>$GLOBUS_LOCATION/share/globus_cas_service/bootstrapSample</filename>.</entry>

            </row>

            <row>

              <entry>

                <option>-implicit</option>

              </entry>

              <entry>Populates the database with: a) CAS server implicit data&mdash;this adds the CAS server itself as a CAS object and implicit service/actions like enrolling users, objects and so on; and b) service/action and namespace relevant to FTP like read, write and so on.</entry>

            </row>

          </tbody>

        </tgroup>

      </table>

      <para>Sample bootstrap command:</para>

      <para>To bootstrap the CAS database with both implicit and user data the following command can be used. Prior to running the command, the following files need to be created with appropriate values filled in.

</para>

      <itemizedlist>

        <listitem>

          <para><filename>$GLOBUS_LOCATION/share/globus_cas_service/casDbProperties</filename>

<screen>dbDriver=org.postgresql.Driver

dbConnectionURL=jdbc:postgresql://127.0.0.1/casDatabase

dbUsername=tester

dbPassword=foobar</screen>

</para>

        </listitem>

        <listitem>

          <para><filename>$GLOBUS_LOCATION/share/globus_cas_service/bootstrapProperties</filename>

<screen>ta-name=defaultTrustAnchor

ta-authMethod=X509

ta-authData=/C=US/O=Globus/CN=Default CA

user-name=superUser

user-subject=/O=Grid/O=Globus/OU=something/CN=someone

userGroupname=superUserGroup</screen></para>

        </listitem>

        <listitem>

          <para>Command to run:

<screen>casadmin$ cd $GLOBUS_LOCATION

casadmin$ bin/cas-server-bootstrap \

 -d share/globus_cas_service/casDbProperties \

-implicit -b \ share/globus_cas_service/bootstrapProperties</screen>

</para>

        </listitem>

      </itemizedlist>

      <para>Once the database has been created the CAS service needs to be configured to use it as described <ulink url="../../security/cas/WS_AA_CAS_Public_Interfaces.html#s-cas-public-config">here</ulink>.</para>

    </section>
  </section> 

  <section id="tomcatDeploy"><title>Deploying into Tomcat</title>

<para>CAS has been tested to work without any additional setup when deployed into Tomcat. Please follow these <ulink url="http://www-unix.globus.org/toolkit/docs/4.0/common/javawscore/admin-index.html#javawscore-admin-tomcat-deploying">basic instructions</ulink> to deploy GT4 services into Tomcat. Note
  that the Java WS Core module needs to be built and configured as
  described in the previous sections.</para> 
  </section>
  </section>

<section id="testing"> <title>Testing</title>

  <para>CAS has two sets of tests, one for the back end database access module and

  another set to test the service itself. To install both tests, install the

  CAS test package (<emphasis>gt4-cas-delegation-test-3.9-src_bundle.tar.gz</emphasis>) using

  GPT. <emphasis>FILLME: instructions </emphasis> into <emphasis>GLOBUS_LOCATION</emphasis>.</para>

  <para><emphasis> Assumptions: </emphasis></para>

  <itemizedlist>

    <listitem>

      <simpara>A back end database has been set up and configured.</simpara>

    </listitem>

    <listitem>

      <simpara>The CAS service and tests are installed in <emphasis>$GLOBUS_LOCATION</emphasis>.</simpara>

    </listitem>

    <listitem>

      <para>The sample commands assume:

      <orderedlist>

          <listitem>

            <simpara>The container is started up on localhost and port 8443.</simpara>

          </listitem>

          <listitem>

            <simpara>The database username is <emphasis>tester</emphasis>.</simpara>

          </listitem>

          <listitem>

            <simpara>The database name is <emphasis>casDatabase</emphasis>.</simpara>

          </listitem>

          <listitem>

            <simpara>The database is on host <emphasis>foo.bar.edu</emphasis> and the default port.</simpara>

          </listitem>

        </orderedlist>

  </para>

    </listitem>

  </itemizedlist>

  <section>

    <title> Testing the back end database module </title>

    <para>

<orderedlist>

        <listitem>

          <para>Run:

      <screen>cd $GLOBUS_LOCATION </screen></para>

        </listitem>

        <listitem id="testDbConfig">

          <para>Populate the file <filename>etc/globus_cas_unit_test/casTestProperties</filename> with

    the following database configuration information:

        <table>

              <title>Test database properties</title>

              <tgroup cols="2">

                <tbody>

                  <row>

                    <entry>dbDriver </entry>

                    <entry> The JDBC driver to be used</entry>

                  </row>

                  <row>

                    <entry>dbConnectionURL </entry>

                    <entry>The JDBC connection url to be used to connect to the database</entry>

                  </row>

                  <row>

                    <entry>dbUsername </entry>

                    <entry>The user name to use when connecting to the database </entry>

                  </row>

                  <row>

                    <entry>dbPassword </entry>

                    <entry>The password corresponding to the user name</entry>

                  </row>

                </tbody>

              </tgroup>

            </table>

        

  </para>

        </listitem>

        <listitem>

          <para>The database needs to be empty for these tests to work and will be deleted by this target. Run:

      <screen>ant -f share/globus_cas_unit_test/cas-test-build.xml testDatabase </screen></para>

        </listitem>

        <listitem>

          <simpara>Test reports are placed in <filename>$GLOBUS_LOCATION/share/globus_cas_unit_test/cas-test-reports</filename>.</simpara>

        </listitem>

      </orderedlist>

</para>

    <important>

      <para>The <link linkend="bootstrapingDb">database bootstrap</link> needs to be done again for the server to be ready to receive client requests. </para>

    </important>

  </section>

  <section>

    <title> Testing the CAS service module </title>

    <para>These tests can be set up so as to be able to test multiple user scenarios

  or  they can be configured to run as just a single identity. The first set of

  tests are used to test admin functionality and set up the database for a second

  user. As the second user the permissions and queries are tested to ensure that

  the setup worked.</para>

    <para>All the configuration information for the test needs to be configured in  the <filename>etc/globus_cas_unit_test/casTestProperties</filename> file.

  The database section of the properties file needs to be configured as described <link linkend="testDbConfig">here</link>. In addition the following properties need to be configured  to run the tests:</para>

    <table id="testPropertiesConfig">

      <title>Test properties</title>

      <tgroup cols="2">

        <tbody>

          <row>

            <entry>user1SubjectDN</entry>

            <entry>The DN of the user running the first set of tests.</entry>

          </row>

          <row>

            <entry>user2SubjectDN</entry>

            <entry>The DN of the user running the second set of tests. This DN has to be different from the value specified for user1SubjectDN. Note: Both tests can be run as the same user as long as the DN of the certificate being used to run the tests matches the value specified in user1SubjectDN. In this case, the value of user2SubjectDN can be set to a arbitrary string.</entry>

          </row>

          <row>

            <entry>maxAssertionLifetime</entry>

            <entry>Should match the value set in the service configuration as shown in <ulink url="../../security/cas/WS_AA_CAS_Public_Interfaces.html#s-cas-public-config">Configuration Information</ulink>.</entry>

          </row>

          <row>

            <entry>host</entry>

            <entry>Host on which the CAS service is running.</entry>

          </row>

          <row>

            <entry>port</entry>

            <entry>Port on which the CAS service is running.</entry>

          </row>

          <row>

            <entry>securityType</entry>

            <entry>This is an optional parameter indicating the security type to use. Can be set to <constant>message</constant> for Secure Message or <constant>conversation</constant> for Secure Conversation or <constant>transport</constant> for Secure Transport (the default configuration).</entry>

          </row>

          <row>

            <entry>protType</entry>

            <entry>This is an optional parameter indicating the protection type to use. Can be set to <constant>signature</constant> for integrity protection (the default configuration) or <constant>encryption</constant> for privacy protection.</entry>

          </row>

        </tbody>

      </tgroup>

    </table>

    <para> Steps for testing:</para>

    <orderedlist>

      <listitem>

        <para>Run:

      <screen>cd $GLOBUS_LOCATION</screen></para>

      </listitem>

      <listitem>

        <para>Source <replaceable>$GLOBUS_LOCATION/etc/globus-devel-env.sh</replaceable> or <replaceable>$GLOBUS_LOCATION/etc/globus-devel-env.csh</replaceable> or <replaceable>$GLOBUS_LOCATION/etc/globus-devel-env.bat</replaceable> as appropriate for your environment.</para>

      </listitem>

      <listitem>

        <para>In the test properties file, set <replaceable>user2SubjectDN</replaceable> to the subject

    in your regular proxy. The following returns the appropriate string:

      <screen>casadmin$ java org.globus.tools.CertInfo -subject -globus</screen></para>

      </listitem>

      <listitem>

        <para>Generate an independent proxy using the following command:

      <screen>casadmin$ java org.globus.tools.ProxyInit -independent</screen></para>

      </listitem>

      <listitem>

        <para>Set the identity in the proxy generated from the above step as <emphasis>user1SubjectDN</emphasis> in

    the test properties file. The following command will return the relevant

    string:

      <screen>casadmin$ java org.globus.tools.ProxyInfo -subject -globus</screen></para>

      </listitem>

      <listitem>

        <simpara>Start the container on the port and host configured in <xref linkend="testPropertiesConfig"/>.</simpara>

      </listitem>

      <listitem>

        <para>The following command runs the tests for self permissions and sets up the database

  for a user with subjectDN user2SubjectDN:

        <screen>casadmin$ ant -f share/globus_cas_unit_test/cas-test-build.xml user1TestService</screen></para>

      </listitem>

      <listitem>

        <para>To test as the second user, generate a proxy for the subject DN specified

      for the second user:

        <screen>casadmin$ java org.globus.tools.ProxyInit </screen></para>

      </listitem>

      <listitem>

        <para>The database needs to be empty for these tests to work and this target deletes all entries in database. Then run the following:

      <screen>casadmin$ ant -f share/globus_cas_unit_test/cas-test-build.xml user2TestService</screen></para>

      </listitem>

      <listitem>

        <simpara>Test reports are placed in <filename>$GLOBUS_LOCATION/share/globus_cas_unit_test/cas-test-reports</filename>.</simpara>

      </listitem>

      <listitem>

        <para>After these tests, the CAS database needs to be reset. The following

      command will delete all entries from the database:

        <screen>casadmin$ psql -U casadmin -d casDatabase -f GLOBUS_LOCATION/share/cas/database_delete.sql</screen>

  </para>

      </listitem>

    </orderedlist>

    <important>

      <para>The <link linkend="bootstrapingDb">database bootstrap</link> needs to be done again for the server to be ready to receive client requests. </para>

    </important>

  </section>

</section>

<section id="admin-example"><title>Example of CAS Server Administration </title>

  <para>The following contains an example of administering the CAS server policies using

the CAS administrative clients described.  <emphasis>FILLME: add link to admin command line when its done.</emphasis>

</para>

  <para>Alice, Bob and Carol are three members of a community who have set up a Community

  Authorization Service:

<itemizedlist>

      <listitem>

        <simpara>Alice&apos;s role is primarily to administer the CAS server. </simpara>

      </listitem>

      <listitem>

        <simpara>Bob is an analyst who needs read access to much of the community data. </simpara>

      </listitem>

      <listitem>

        <simpara>Carol is a scientist who needs to be able to both read and write community data. </simpara>

      </listitem>

    </itemizedlist>

</para>

  <para>These examples show how:

<orderedlist>

      <listitem>

        <simpara>Alice adds the users Bob and Carol to the CAS server.</simpara>

      </listitem>

      <listitem>

        <simpara>Alice adds a FTP server with some data available to the community.</simpara>

      </listitem>

      <listitem>

        <simpara>Alice adds permissions for the users using the CAS administration clients. </simpara>

      </listitem>

    </orderedlist>

</para>

  <para>These examples assume the following:

<itemizedlist>

      <listitem>

        <simpara>Alice has installed the CAS server and bootstrapped the database with herself as super user. Please refer to previous chapters in this guide for details on setting up the server and bootstrapping with data.</simpara>

      </listitem>

      <listitem>

        <simpara>Alice&apos;s nickname on the CAS server is <emphasis>alice</emphasis> and at bootstrap she has created a user group, <emphasis>suGroup</emphasis>, which has super user permissions on the database.</simpara>

      </listitem>

      <listitem>

        <simpara>The CAS service URL is http://localhost:8080/wsrf/services/CASService. </simpara>

      </listitem>

      <listitem>

        <simpara>For all commands listed below the environment variable $GLOBUS_LOCATION has been set to point to the Globus Toolkit installation and the commands are run from $GLOBUS_LOCATION.</simpara>

      </listitem>

      <listitem>

        <simpara>The environment variable CAS_SERVER_URL has been set to point to the CAS server URL, http://localhost:8080/wsrf/services/CASService. </simpara>

      </listitem>

    </itemizedlist>

</para>

  <section>

    <title>Adding a user group </title>

    <para>Since at the time of booting up the CAS server only  the user group that

  has super user permissions on the CAS server is created, Alice  will want to

  create another user group to which new users  can be added and to which permissions 

   on newly enrolled CAS entities may be given. This also eases the process of giving the 

  same rights to many users. Given that there are two types of roles in the community

  she might want to create two groups, <emphasis>analysts</emphasis> and <emphasis>scientists</emphasis>.

</para>

    <para>Also, all permissions on the newly created group will be given to users of

  a particular user group. For example, Alice  may  want all users of the user group <emphasis>analysts</emphasis> to

  be able to manipulate the group.

</para>

    <para>To create a new user group Alice uses the <emphasis>cas-group-admin</emphasis> client. It

  requires a name for the new group being created, say <emphasis>analysts</emphasis>. 

</para>

    <screen>alice%  cas-group-admin user create analysts analysts</screen>

    <para>This will create a user group <emphasis>analysts</emphasis> and give all users in that group

  the permission to manage the group (i.e add users, remove users and so on).

  She can similarly create a group called <emphasis>scientists</emphasis>.</para>

  </section>

  <section>

    <title>Adding a trust anchor</title>

    <para>Prior to adding Bob and Carol to the CAS server, Alice needs to ensure that the

  trust anchors for both have been added. If they share the trust anchor

  with Alice then this step can be skipped, since at bootstrap Alice&apos;s trust

  anchor would have been added to the database. 

</para>

    <para>In our example Alice and Carol share a trust anchor different from Bob&apos;s.

  Therefore, Alice needs to add Bob&apos;s trust anchor by using the <emphasis>cas-enroll</emphasis> client

  with the <emphasis>trustAnchor</emphasis> option. She needs to provide details about the

  trust anchor such as the authentication method and authentication data used.

</para>

    <screen>alice%  cas-enroll trustAnchor analysts AbcTrust X509 &quot;/C=US/O=some/CN=ABC CA&quot;</screen>

    <para>The above will enroll a trust anchor with nickname <emphasis>AbcTrust</emphasis> that uses <emphasis>X509</emphasis> as its authentication method and has the DN specified in the command. The members of

the <emphasis>analysts</emphasis> user group are given all rights on this object. This implies

that any user who has this trust anchor  is assumed to present credentials signed by

this trust anchor.

</para>

  </section>

  <section>

    <title>Adding users</title>

    <para>Now Alice can add Bob and Carol as users using the <emphasis>cas-enroll</emphasis> command

  with the <emphasis>user</emphasis> option. She needs to provide the user&apos;s subject DN and

  a reference to the trust anchor used by the user. As with any entity added

  to the CAS server, the admin needs to choose a user group whose members will

  have all permissions on that entity. In this example, Alice would like the

  members of the user group <emphasis>suUser</emphasis> to be able to manipulate the user entity <emphasis>Bob</emphasis>.

</para>

    <screen>alice% cas-enroll user suUser bob &quot;/O=Our Community/CN=Bob Foo&quot; AbcTrust</screen>

    <para>Alice uses a similar command to add Carol to the CAS database.

</para>

  </section>

  <section>

    <title>Adding users to a user group</title>

    <para>The CAS server allows rights to be assigned only to user groups and not to individual

  users. Hence, before Alice can assign rights to Bob or Carol, she needs to add

  them to some user group. She does this by using  the <command>cas-group-add-entry</command> client

  with the <emphasis>user</emphasis> option to indicate she is adding to a user group. This

  client requires the group name and the nickname of the user who needs to be added.

  To add Bob to the <emphasis>analysts</emphasis> group, the command would be:

</para>

    <screen>alice% cas-group-add-entry user analysts bob</screen>

    <para>If a user group <emphasis>scientists</emphasis> was created, Carol could similarly be added

  as a member.</para>

  </section>

  <section>

    <title>Adding a new FTP server</title>

    <para>Alice now has the community users in the database. The next step is 

  to add some resources. Because the community currently has the FTP server

  foo.bar.edu available to it she will add it to the CAS database.

</para>

    <para>Each resource or object in the CAS server has a namespace associated  with it

  that defines certain features. For example, it can define the comparison algorithm

  that is to be used when the object&apos;s name is compared. It may

  also define the base URL that should be prefixed to objects that belong to

  this namespace. In this case, Alice chooses to use the <emphasis>FTPDirectoryTree</emphasis> namespace

  that is added to the CAS server at startup. She uses the <emphasis>cas-enroll</emphasis> client

  with the <emphasis>object</emphasis> option to add the FTP server to the CAS database:

</para>

    <screen>alice% cas-enroll object suGroup ftp://foo.bar.edu/* FTPDirectoryTree</screen>

    <para>This command adds the FTP server as an object and gives all members of the <emphasis>suGroup</emphasis> rights

to manipulate the object.

</para>

    <para>To be able to grant/revoke access on an individual directory, add an object

  for the directory. For example, if Alice would like to be able to manipulate

  the <emphasis>data</emphasis> directory on the server as a separate entity, the following command will

  add an object for that.

</para>

    <screen>alice% cas-enroll object suGroup ftp://foo.bar.edu/data/* FTPDirectoryTree</screen>

  </section>

  <section>

    <title>Creating an object group </title>

    <para>Alice suspects that the community will end up with more directories containing

  data on other servers that will have polices identical with the  ones on the /data directory

  on foo.bar.edu. To manage this  she is going to create an object group called <emphasis>data</emphasis> and

  assign foo.bar.edu/data to this group. This will allow her to grant rights

  on this group and easily add other directories to this group later.

</para>

    <para>To create a group called <emphasis>data</emphasis>, she uses the <emphasis>cas-group-admin</emphasis> client

  with the <emphasis>group</emphasis> and <emphasis>create</emphasis> options:

</para>

    <screen>alice% cas-group-admin object create suGroup data</screen>

    <para>This creates an object group called <emphasis>data</emphasis> and the members of <emphasis>suGroup</emphasis> get

all rights on this group and hence should be able to add/remove members, grant

rights to add/delete from this group to others and also delete this group.

</para>

  </section>

  <section>

    <title>Adding members to an object group</title>

    <para>Alice now can add foo.bar.edu/data to the <emphasis>data</emphasis> group. She can do this

  by using the <emphasis>cas-group-add-entry</emphasis> with the <emphasis>object</emphasis> option. To add

  the above object, <emphasis>ftp://foo.bar.edu/data/*</emphasis> in the namespace <emphasis>FooFTPNamespace</emphasis>,

  to the object group <emphasis>data</emphasis> Alice uses the following command:

</para>

    <screen>alice% cas-group-add-entry object data object FooFTPNamespace ftp://foo.bar.edu/data/*</screen>

    <para>In the above command:</para>

    <itemizedlist>

      <listitem>

        <simpara>the first <emphasis>object</emphasis> refers to the group type.</simpara>

      </listitem>

      <listitem>

        <simpara><emphasis>data</emphasis> is the name of the object group.</simpara>

      </listitem>

      <listitem>

        <simpara>the second <emphasis>object</emphasis> refers to the type of CAS entity that is being added as a member.</simpara>

      </listitem>

      <listitem>

        <simpara>the last two parameters define the namespace and the object that needs to be added. </simpara>

      </listitem>

    </itemizedlist>

  </section>

  <section>

    <title>Adding service types </title>

    <para>Alice now needs to add information about the kinds of rights that can be

  granted for these objects. These are stored as <emphasis>service types</emphasis> and relevant

  actions are mapped to these service types.</para>

    <para>In this scenario, the kind of service types that Alice should add would be <emphasis>file</emphasis>, <emphasis>directory</emphasis> and

  so on. To do so the <emphasis>cas-enroll</emphasis> client with the <emphasis>serviceType</emphasis> option

  may be used. To add a service type called <emphasis>file</emphasis> and give members of <emphasis>suGroup</emphasis> all

  rights on this service type Alice uses the following command.</para>

    <screen>alice% cas-enroll serviceType suGroup file</screen>

  </section>

  <section>

    <title>Adding action mappings</title>

    <para>The relevant action mappings to the above mentioned service types would be <emphasis>read</emphasis>, <emphasis>write</emphasis> and

  so on. Alice needs to add these mappings to the database so that she can grant

  rights that allow a user to have <emphasis>file/read</emphasis> or <emphasis>file/write</emphasis> permissions

  on some object.

</para>

    <para>To add action mappings to a service type, she uses the <command>cas-action</command> client

  with the <option>add</option> option. The following command adds a mapping of action <emphasis>read</emphasis> to

  service type <emphasis>file</emphasis>.

</para>

    <screen>alice% cas-action add file add</screen>

    <para>Similarly, she can add other mappings, like <emphasis>write</emphasis>, to this service type.

</para>

  </section>

  <section>

    <title>Granting permissions</title>

    <para>Alice now has resources in the object group <emphasis>data</emphasis> and users in the

  user groups <emphasis>analysts</emphasis> and <emphasis>scientists</emphasis>. She now wants to grant permissions

  on  the <emphasis>data</emphasis> group to the analysts and scientists, namely read permissions

  to the analysts and read and write permissions to the scientists.

</para>

    <para>To grant permissions Alice needs to use the <command>cas-rights-admin</command> with

  the <option>grant</option> option. To give read permissions to the analysts group Alice

  runs: 

</para>

    <screen>alice% cas-rights-admin grant analysts objectGroup data serviceAction file read</screen>

    <para>She similarly grants rights to <emphasis>scientists</emphasis> group.

</para>

  </section>

</section>

<section id="security_considerations"><title>Security Considerations </title>

&WS_AA_CAS_Security_Considerations_Frag;

</section>

<section id="troubleshooting"> <title>Troubleshooting</title>

  <section><title> Database connectivity errors </title>

    <para>If the CAS service fails with following error:<screen>

 faultCode: {http://schemas.xmlsoap.org/soap/envelope/}Server.userException

 faultSubcode:

 faultString: org.apache.commons.dbcp.DbcpException: Connection

refused. Check t hat the hostname and port are correct and that the

postmaster is accepting TCP/I P connections.</screen></para>

    <itemizedlist>

      <listitem>

        <simpara>Ensure the database properties (connectionURL, userName, password) in <emphasis>$GLOBUS_LOCATION/globus_cas_service/jndi-config.xml</emphasis> are correct.</simpara>

      </listitem>

      <listitem>

        <simpara>Ensure that the database is set up with permission to receive TCP/IP connections.</simpara>

      </listitem>

    </itemizedlist>

  </section>

&Credential_Troubleshooting_Frag;

</section>

