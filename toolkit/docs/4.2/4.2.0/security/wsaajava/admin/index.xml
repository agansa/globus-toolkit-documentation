<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % xinclude SYSTEM "../../../xinclude.mod" >
%xinclude;

]>
<book id="wsaajavaAdmin">
  <title>GT4 Java WS Security Admin Guide</title>
  <titleabbrev>Admin Guide</titleabbrev>
  <bookinfo id="wsaajava-admin-introduction">
    <abstract>
      <title>Introduction</title>
      <para>This guide contains advanced configuration information for system administrators working
        with Java WS Security. It provides references to information on procedures typically
        performed by system administrators, including installing, configuring, deploying, and
        testing the installation.</para>
      <para>
        <important>
          <simpara> This information is in addition to the basic Globus Toolkit prerequisite,
            overview, installation, security configuration instructions in the <olink
              targetdoc="gtadmin"/>. Read through this guide before continuing!</simpara>
        </important>
      </para>
      <formalpara>
        <title>Authentication/message protection issues</title>
        <para>The main administration issues for authentication/message-protection deal with
          configuring credential-related settings. There are multiple mechanisms for doing this: <itemizedlist>
            <listitem>
              <para>Security Descriptors (This is the <emphasis>preferred</emphasis> mechanism)<itemizedlist>
                  <listitem>
                    <simpara>Container Security Descriptor</simpara>
                  </listitem>
                  <listitem>
                    <simpara>Service Security Descriptor</simpara>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <simpara>CoG properties</simpara>
            </listitem>
            <listitem>
              <simpara>Environment variables</simpara>
            </listitem>
            <listitem>
              <simpara>Relying on default behavior. The only default behaviors available concern the
                proxy file and trusted certificates locations.</simpara>
            </listitem>
          </itemizedlist></para>
      </formalpara>
      <formalpara>
        <title>Authorization issues</title>
        <para>Authorization in Java WS Security is enforced on the server and the client side. Admin
          configuration could include determining the container/service level authorization
          mechanism and setting up and managing authorization policy, e.g. entries in
            <glossterm>grid map file</glossterm> and so on. The <olink
            targetptr="wsaajava-configuring"/> chapter describes how to configure Java WS security
          descriptors. </para>
      </formalpara>
    </abstract>
  </bookinfo>
  <chapter id="wsaajava-admin-installing">
    <title>Building and Installing</title>
    <para>This component is built and installed as a part of Java WS Core. See "Building and
      Installing" in the <olink targetdoc="javawscoreAdmin">Java WS Core Admin Guide</olink> for
      more information.</para>
  </chapter>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../Java_WS_Security_Interface_Config_Frag.xml"/>
  <chapter id="wsaajava-admin-deploying">
    <title>Deploying</title>
    <para> This component is deployed as a part of <olink targetdoc="javawscoreAdmin"
        targetptr="javawscore-admin-deploying">Java WS Core</olink>.</para>
  </chapter>
  <chapter id="wsaajava-admin-testing">
    <title>Testing</title>
    <para>To execute security tests ensure that <olink targetdoc="javawscoreAdmin"
        targetptr="javawscore-admin-testing">Ant with JUnit is configured</olink>.</para>
    <para>All the security tests require a valid credential. Refer to <olink targetdoc="gtadmin"
        targetptr="gtadmin-basic-security">Security section of GT Administrator guide</olink> for
      details on acquiring credentials. </para>
    <para>The security tests are included in <filename
      >$GLOBUS_LOCATION/lib/wsrf_test_unit.jar</filename>. This jar contains tests for both the Java
      WS Core component and the WS Authentication and Authorization components contained in the Java
      WS Core package.</para>
    <para>To execute the tests, pass the above jar file to the test script as described in <olink
        targetdoc="javawscoreDeveloper" targetptr="javawscore-developer-runningtests"/>. To ensure
      that only security tests are run, set <option>-DsecurityTestsOnly=true</option>. </para>
    <para>By default the tests require that the container and the tests use the same credentials,
      i.e self authorization is done on secure calls. </para>
    <para>The tests allow for another configuration in which the container can be configured with
        <glossterm>host credentials</glossterm> and the tests can be run with any credentials.</para>
    <itemizedlist>
      <listitem>
        <simpara>Configure the container to use host credentials using the security descriptor as
          described in the <olink targetdoc="wsaajava" targetptr="wsaajava-secdesc-configCred"
            >container descriptor</olink> section.</simpara>
      </listitem>
      <listitem>
        <para>Edit <filename
          >$GLOBUS_LOCATION/etc/globus_wsrf_test_unit/server-config.wsdd</filename>. <itemizedlist>
            <listitem>
              <para> Comment out the configured descriptor in
                <emphasis>SecurityTestService</emphasis>, <emphasis>RPParamTestService</emphasis>
                and <emphasis>AuthzCalloutTestService</emphasis> that specifies self authorization.
                <screen>&lt;!-- Does self authz by default --&gt;

&lt;!-- parameter name=&quot;securityDescriptor&quot; 
    value=&quot;@config.dir@/security-config.xml&quot;/ --&gt;
</screen></para>
            </listitem>
            <listitem>
              <para>Uncomment the configuration for identity authorization.
                <screen>&lt;!-- For use only when identity authz is used--&gt;

&lt;parameter name=&quot;securityDescriptor&quot; 
    value=&quot;@config.dir@/identity-security-config.xml&quot;/&gt;
</screen></para>
            </listitem>
            <listitem>
              <para>In <filename
                  >$GLOBUS_LOCATION/etc/globus_wsrf_test_unit/identity-security-config.xml</filename>,
                set the value of the property <emphasis>identity</emphasis> to the subject DN of the
                credentials used to run the tests.
                <screen>&lt;!-- set to expected identity --&gt;

&lt;param:parameter name=&quot;identity&quot; 
    value=&quot;Identity used by client&quot;/&gt;
</screen></para>
            </listitem>
          </itemizedlist></para>
      </listitem>
      <listitem>
        <para>Edit <filename
            >$GLOBUS_LOCATION/etc/globus_wsrf_test_unit/test-container-security-config.xml</filename>
          to add the following element, before &lt;reject-limited-proxy value=&quot;true&quot;/&gt;
          <screen>
    &lt;credential&gt;
      &lt;cert-key-files&gt;
        &lt;key-file value="path to container key"/&gt;
        &lt;cert-file value="path to container cert"/&gt;
      &lt;/cert-key-files&gt;
    &lt;/credential&gt;
      </screen></para>
      </listitem>
      <listitem>
        <para> Start a secure and insecure standalone container.
          <screen>
    $ cd $GLOBUS_LOCATION
    $ bin/globus-start-container -nosec
    </screen>
          On another window,
          <screen>
    $ cd $GLOBUS_LOCATION
    $ bin/globus-start-container
    </screen></para>
      </listitem>
      <listitem>
        <para>To run tests against external containers, secure and insecure, on localhost ports 8180
          and 8181 respectively, the command would be:
          <screen width="120">
ant -f share/globus_wsrf_test/runtests.xml runServer 
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_unit.jar 
       -DsecurityTestsOnly=true
       -Djunit.jvmarg=-Dsecurity.test.client.authz=host 
       -Dsecurity.test.authz.identity=&quot;container/suject/DN&quot; 
       -Dsecurity.test.enc.cred=&quot;/server/public/certificate&quot;
       -Dsecurity.test.server.cert=&quot;/server/public/certificate/file&quot;
       -Dsecurity.test.server.key=&quot;/server/key/file&quot;
       -Dtest.server.url=http://127.0.0.1:8181/wsrf/services/ 
       -Dsecure.test.server.url=https://127.0.0.1:8180/wsrf/services/ 
</screen></para>
      </listitem>
      <listitem>
        <para>For example, if the container security descriptor has credentials configured as
            <emphasis>/etc/grid-security/containercert.pem</emphasis> and
            <emphasis>/etc/grid-security/containerkey.pem</emphasis> and the DN of the credential is
            <emphasis>/DC=org/OU=Services/CN=-testDN/CN=some.host.edu</emphasis>, the command to run
          would be:
          <screen width="120">
ant -f share/globus_wsrf_test/runtests.xml runServer 
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_unit.jar 
       -DsecurityTestsOnly=true 
       -Djunit.jvmarg=-Dsecurity.test.client.authz=host 
       -Dtest.server.url=http://127.0.0.1:8181/wsrf/services/ 
       -Dsecure.test.server.url=https://127.0.0.1:8180/wsrf/services/ 
      -Dsecurity.test.authz.identity=&quot;/DC=org/OU=Services/CN=-testDN/CN=some.host.edu&quot; 
       -Dsecurity.test.server.cert=&quot;/etc/grid-security/containercert.pem&quot;
       -Dsecurity.test.server.key=&quot;/etc/grid-security/containerkey.pem&quot;
    -Dsecurity.test.enc.cred=/etc/grid-security/containercert.pem</screen></para>
      </listitem>
    </itemizedlist>
  </chapter>
  <chapter id="wsaajava-admin-security-considerations">
    <title>Security Considerations </title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../Java_WS_Security_Security_Considerations_Frag.xml"/>
  </chapter>
  <chapter id="wsaajava-admin-debugging">
    <title>Debugging</title>
    <para>Because Java WS Security is built on Java WS Core, it uses the same sys admin logging,
      described below:</para>
    <xi:include href="../../../common/javawscore/Java_WS_Core_Logging_Frag.xml"
      xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </chapter>
  <chapter id="wsaajava-admin-troubleshooting">
    <title>Troubleshooting</title>
    <para>For a list of common errors in GT, see <olink targetdoc="gtuser" targetptr="errors"/>.</para>
    <xi:include href="../../Credential_Troubleshooting_Frag.xml"
      xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="../Java_WS_Security_Errors_Frag.xml"
      xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <section>
      <title>For more troubleshooting</title>
      <para>
        <itemizedlist>
          <listitem>
            <para><olink targetdoc="javawscoreAdmin" targetptr="javawscore-admin-troubleshooting"
            /></para>
          </listitem>
          <listitem>
            <para><olink targetdoc="gtadmin" targetptr="gtadmin-basic-security">Globus Toolkit
                Administrator Guide - Security Section</olink></para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </chapter>
  <glossary role="auto" id="glossary-wsaajavaAdmin">
    <!-- 
    <remark>some terms not in the docs but wanted in glossary: 
    <glossterm>scheduler</glossterm>
    </remark>
    -->
    <glossdiv>
      <title>A</title>
      <glossentry>
        <glossterm>Dummy term</glossterm>
        <glossdef>
          <para>This is a dummy entry for the automatic glossary database. Do not edit.</para>
        </glossdef></glossentry>
    </glossdiv>
  </glossary>
</book>
