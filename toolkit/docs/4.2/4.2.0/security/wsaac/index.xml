<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % xinclude SYSTEM "../../xinclude.mod">
%xinclude;
]>
<book id="wsaac" xreflabel="C WS Security">
  <title>GT <replaceable role="entity">version</replaceable>: C WS
  Security</title>

  <titleabbrev>C WS Security</titleabbrev>

  <bookinfo>
    <abstract>
      <title>Introduction</title>

      <para>PDF version of this doc is available <ulink
      url="wsaac.pdf">here</ulink>.</para>
    </abstract>
  </bookinfo>

  <chapter id="wsaac-overview">
    <title>Overview</title>

    <para>There are three main aspects to C WS Security: authentication,
    message protection and authorization.</para>

    <section id="wsaac-overview-authent-message">
      <title>Authentication and message protection</title>

      <para>Authentication and message protection are tightly coupled:
      authentication establishes that the remote entity is who he claims to be
      and then, using the keys, the message sent is secured. Toolkit supports
      two types of mechanisms to achieve this: <itemizedlist>
          <listitem>
            <simpara>Message-level Security mechanisms, which implement the
            WS-Security standard and the WS-SecureConversation specification
            to provide message protection for GT4’s SOAP messages</simpara>
          </listitem>

          <listitem>
            <simpara>Transport-level Security mechanisms, which use
            transport-level security (TLS) mechanisms</simpara>
          </listitem>
        </itemizedlist></para>

      <para>The message protection mechanisms are described in further detail
      under <olink targetdoc="message"></olink>.</para>

      <para>In all mechanisms supported in the toolkit, integrity and privacy
      protection mechanisms are supported, with integrity being the default
      level of protection. Also, the authentication is mutual in all cases;
      that is, the server authenticates the client and the client
      authenticates the server.</para>
    </section>

    <section id="wsaac-overview-authorization">
      <title>Authorization</title>

      <para>Once authentication is complete, the peer identity is established
      and the next step is authorization. Authorization happens after
      authentication (and in some cases once a secure message is received),
      where you establish whether the remote entity is permitted to perform
      the requested action. An <olink targetdoc="authzframe">Authorization
      Framework</olink> provides this functionality on the server and client
      side.</para>

      <para>On the server side, authorization is accomplished via a framework
      that allows for a variety of authorization schemes, including the
      following: <itemizedlist>
          <listitem>
            <simpara>“grid-mapfile”,</simpara>
          </listitem>

          <listitem>
            <simpara>access control list,</simpara>
          </listitem>

          <listitem>
            <simpara>access control list defined by a service,</simpara>
          </listitem>

          <listitem>
            <simpara>custom authorization handler, and</simpara>
          </listitem>

          <listitem>
            <simpara>access to an authorization service via the SAML
            protocol.</simpara>
          </listitem>
        </itemizedlist></para>

      <para>On the client side, a similar but subset of the server mechanisms
      are provided. The client configures the preferred authentication
      mechanism to use for an invocation using <olink targetdoc="messagePI"
      targetptr="message-interface-domain-syntax">stub configuration</olink>.
      Multiple message protection mechanisms can be used to secure the same
      message, with a performance cost incurred. The server can configure the
      set of acceptable security mechanisms in an invocation using security
      descriptors. The server response is secured with the same protection
      mechanism as the request.</para>
    </section>

    <section>
      <title>Anonymous access</title>

      <para>The WS Secure Conversation and Transport Layer Security mechanisms
      (see <olink targetdoc="message"></olink>) allow for anonymous access,
      where the client need not furnish credentials. In this mechanism,
      authentication and message protection steps are still done and it is not
      an insecure call. But the keys are generated on the fly and the server
      has no way to establish the identity of the client. Therefore,
      authorization must accomodate amonymous clients, if indeed the server
      would like to accept anonymous clients.</para>
    </section>

    <section>
      <title>Other tools: Delegation Service and Community Authorization
      Service (CAS)</title>

      <para>Another important piece of security infrastructure is the ability
      of an entity to delegate its rights to another. The WS Secure
      Conversation mechanism allows for delegation as a part of the protocol
      and alternatively <olink targetdoc="delegation">Delegation
      Service</olink> can be used to delegate credentials to any
      service.</para>

      <para>The toolkit also provides <olink targetdoc="cas">Community
      Authorization Service (CAS)</olink>, a service that can be used to
      manage and assert fine-grained rights for users.</para>
    </section>
  </chapter>

  <chapter id="wsaac-authz" xreflabel="Authorization in C WS Security">
    <title>Authorization in C WS Security</title>

    <para>[fixme]</para>
  </chapter>

  <chapter id="wsaac-authent"
           xreflabel="Authentication in C WS Security">
    <title>Authentication in C WS Security</title>

    <para>[fixme]</para>
  </chapter>

  <chapter id="wsaac-troubleshooting"
           xreflabel="Troubleshooting in C WS Security">
    <title>Troubleshooting</title>

    <xi:include href="C_WS_Security_Error_Codes.xml"
                xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
  </chapter>

  <glossary id="glossary-wsaac" role="auto">
    <!-- 
        <remark>some terms not in the docs but wanted in glossary: 
        <glossterm>scheduler</glossterm>
        </remark>
        -->

    <glossdiv>
      <title>A</title>

      <glossentry>
        <glossterm>Dummy term</glossterm>

        <glossdef>
          <para>This is a dummy entry for the automatic glossary database. Do
          not edit.</para>
        </glossdef>
      </glossentry>
    </glossdiv>
  </glossary>
</book>