<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="gram4-jobdescription">
<title>Job descriptions</title>

<section id="gram4-jobdescription-singlejob">
<title>Single-Job Description</title>
    <para>The general form of a <glossterm>job description</glossterm> used to start a single job (meant
for creating a Managed Executable Job Resource instance) is as follows:</para>

<screen>
&lt;job&gt;
    &lt;!--put additional elements here--&gt;
    &lt;executable&gt;&lt;!--put executable here--&gt;&lt;/executable&gt;
    &lt;!--put additional elements here--&gt;
&lt;/job&gt;
</screen>
<para>Here is a basic example of a job description for a single-job:</para>
<screen>
&lt;job&gt;
    &lt;executable&gt;bin/echo&lt;/executable&gt;
    &lt;argument&gt;Testing&lt;/argument&gt;
    &lt;argument&gt;1...2...3&lt;/argument&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
&lt;/job&gt;
</screen>

</section>

<section id="gram4-jobdescription-multijob">
<title>Multi-Job Description</title>
<para>The general form of a job description used to start a multi-job (meant
for creating a Managed Multi Job Resource instance) is as follows:</para>

<screen>
&lt;multiJob&gt;
    &lt;!--Put subjob default elements here.--&gt;
    &lt;job&gt;
        &lt;factoryEndpoint
                xmlns:gram="http://www.globus.org/namespaces/2008/03/gram/job"
                xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
            &lt;wsa:Address&gt;
                &lt;!--put ManagedJobFactoryService address here--&gt;
            &lt;/wsa:Address&gt;
            &lt;wsa:ReferenceParameters&gt;
                &lt;gram:ResourceID>&lt;!--put scheduler type here--&gt;&lt;/gram:ResourceID&gt;
            &lt;/wsa:ReferenceParameters&gt;
        &lt;/factoryEndpoint&gt;
        &lt;executable&gt;&lt;!--put executable path here--&gt;&lt;/executable&gt;
    &lt;/job&gt;
    &lt;!--put additional job elements here--&gt;
&lt;/multiJob&gt;
</screen>
<para>Here is a basic example of a job description for a multi-job:</para>
<screen>
&lt;multiJob&gt;
    &lt;executable>/bin/echo&lt;/executable&gt;
    &lt;stdout>${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr>${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;job&gt;
        &lt;factoryEndpoint
                xmlns:gram="http://www.globus.org/namespaces/2008/03/gram/job"
                xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
            &lt;wsa:Address&gt;
                https://mymachine.mydomain.com:8443/wsrf/services/ManagedJobFactoryService
            &lt;/wsa:Address&gt;
            &lt;wsa:ReferenceParameters&gt;
                &lt;gram:ResourceID>PBS&lt;/gram:ResourceID&gt;
            &lt;/wsa:ReferenceParameters&gt;
        &lt;/factoryEndpoint&gt;
        &lt;argument>Testing&lt;/argument&gt;
        &lt;argument>1...2...3&lt;/argument&gt;
    &lt;job&gt;
    &lt;job&gt;
        &lt;factoryEndpoint
                xmlns:gram="http://www.globus.org/namespaces/2008/03/gram/job"
                xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
            &lt;wsa:Address&gt;
                https://myothermachine.myotherdomain.org:8443/wsrf/services/ManagedJobFactoryService
            &lt;/wsa:Address&gt;
            &lt;wsa:ReferenceParameters&gt;
                &lt;gram:ResourceID>Pbs&lt;/gram:ResourceID&gt;
            &lt;/wsa:ReferenceParameters&gt;
        &lt;/factoryEndpoint&gt;
        &lt;argument>Hi There!&lt;/argument&gt;
        &lt;argument>Dear John!&lt;/argument&gt;
    &lt;/job&gt;
&lt;/multiJob&gt;
</screen>
</section>

<section id="gram4-jobdescription-staging">
<title>Staging Directives</title>
<para>
  The GRAM4 job description schema imports types from the RFT job
  description schema for specifying staging directives (i.e.
  <computeroutput>fileStageIn</computeroutput>,
  <computeroutput>fileStageOut</computeroutput>, and
  <computeroutput>fileCleanUp</computeroutput>).
  See <olink targetdoc="rftPI" targetptr="rft-domain"/> for details
  on these imported types.
</para>
<para>
  Since <computeroutput>fileStageIn</computeroutput> and
  <computeroutput>fileStageOut</computeroutput> are of type
  <ulink url="../../../data/rft/rft_job_description.html#type_TransferRequestType">TransferRequestType</ulink>
  and <computeroutput>fileCleanUp</computeroutput> is of
  type <ulink url="../../../data/rft/rft_job_description.html#type_DeleteRequestType">DeleteRequestType</ulink>,
  mentally replace "transferRequest" with "fileStageIn" or "fileStageOut", and
  "deleteRequest" with "fileCleanUp" in the <olink targetdoc="rftPI" targetptr="rft-domain">RFT transfer request
  documentation</olink>.  The 'Request Options' section is of particular usefulness.
</para>
</section>


<section id="gram4-jobdescription-schema">
<title>Job Description Schema Reference</title>
<para>Please see <ulink url="../schemas/gram_job_description.html">Job
Description Schema documentation</ulink> for details about the job description
elements, ordering of elements and substitution variables used to define GRAM jobs.
</para>
</section>

<section id="gram4-jobdescription-variables">
<title>Variables</title>
<para>
  Job description variables are special strings in a job description that are
  replaced by the GRAM service with values that the client-side does not
  <emphasis>a priori</emphasis> know.</para>
<para>The set of variables is fixed in the gram service implementation. This is 
  different from previous implementations of
  <glossterm baseform="Resource Specification Language">RSL</glossterm>
  substitutions in GT2 and GT3, where a user could define a new variable for
  use inside a job description document. This was done to preserve the
  simplicity of the job description
  XML schema (relatively to the GT3.2 RSL schema), which does not require a 
  specialized XML parser to serialize a job description document.</para>
<para>
  Valid variables and their description:</para>
<informaltable><tgroup cols="2">
    <tbody>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_USER_HOME
            </emphasis></para></entry>
            <entry><para>The path to the home directory for the
            local account/user</para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_USER_NAME
            </emphasis></para></entry>
            <entry><para>The local account the job is running under</para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_JOB_ID
            </emphasis></para></entry>
            <entry><para>UUID of the job, created on the server-side</para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_SCRATCH_DIR
            </emphasis></para></entry>
            <entry><para>An alternative directory where a file system is
            shared with the compute nodes that a user might want to use.
            Typically it will provide more space than the users default
            HOME dir. This directory's value may contain ${GLOBUS_USER_HOME},
            which will be replaced with value of that substitution.
            </para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_LOCATION
            </emphasis></para></entry>
            <entry><para>Path to the Globus Toolkit installation</para></entry>
        </row>
    </tbody>
</tgroup></informaltable>

<para>Variable substitutions may not occur in all job description attributes.
Their use is restricted to those which contain arbitrary string data and which
may be used to access the local resource associated with a job. The list of
attributes which may contain variables is:</para>
<itemizedlist>
    <listitem><simpara>executable</simpara></listitem>
    <listitem><simpara>directory</simpara></listitem>
    <listitem><simpara>argument</simpara></listitem>
    <listitem><simpara>environment</simpara></listitem>
    <listitem><simpara>stdin</simpara></listitem>
    <listitem><simpara>stdout</simpara></listitem>
    <listitem><simpara>stderr</simpara></listitem>
    <listitem><simpara>libraryPath</simpara></listitem>
    <listitem><simpara>fileStageIn</simpara></listitem>
    <listitem><simpara>fileStageOut</simpara></listitem>
    <listitem><simpara>fileCleanUp</simpara></listitem>
</itemizedlist>
</section>

<section id="gram4-jobdescription-extensions">
<title>Job Description Extensions</title>
<para>
To allow adding features to GRAM4 while avoiding breaking compatibility
between versions, an extensibility point was included in the job description
schema. This appears as the <computeroutput>&lt;extensions&gt;</computeroutput>
element at the bottom of a job description document. Starting with version 4.2.0
of the Globus Toolkit, GRAM4 will support both a number of specific extenions
as well as generic constructs that can be used for passing custom values to the
resource manager/scheduler adapter Perl modules.
</para>
    <section id="gram4-jobdescription-extensions-specific">
    <title>Supported Extensions</title>
    <para>
    The following are specific supported extensions to the GRAM4 job
    description schema. They do not require any modification of the resource
    manager/scheduler adapter Perl modules.
    </para>
        <section id="gram4-jobdescription-extensions-specific-multiauthzsubject">
        <title>Multijob Authorization Subject</title>
        <para>
        The <computeroutput>multiAuthzSubject</computeroutput> extension is used
        to specify the credential subject/DN to be used by the multijob being
        created for authorizing the subjob factory service. If specified, all
        subjob factory services must be using the same credential. This is
        meant to address the case where a set of test containers is deployed
        which are all running under a single user's proxy credentials as opposed
        to individual host credentials.
        </para>

        <para>
        For example, if the subjob factory services are using a credential with
        the subject "/DC=org/DC=doegrids/OU=People/CN=John Doh 123456", the
        subjob should be submitted as follows:
        </para>

        <para>
        <screen>
&lt;multiJob&gt;
    ...
    &lt;job&gt;
        ...
    &lt;/job&gt;
    &lt;job&gt;
        ...
    &lt;/job&gt;
    &lt;extensions&gt;
        &lt;multiAuthzSubject&gt;/DC=org/DC=doegrids/OU=People/CN=John Doh 123456&lt;/multiAuthzSubject&gt;
    &lt;/extensions&gt;
&lt;/multiJob&gt;
        </screen>
        </para>
        </section>

        <section id="gram4-jobdescription-extensions-specific-nodes">
        <title>PBS Node Selection Parameters</title>
        <para>
        Node selection constraints in PBS can be specified in two ways,
        generally using a construct intended to eventually apply to all resource
        managers which support node selection, or explicitly by sepcifiying a
        simple string element. The former will be more portable, but the later
        will appeal to those familiar with specifying node constraints for PBS
        jobs.
        </para>

        <para>
        To specify PBS node selection constraints explicitly, one can simply
        constuct a single, simple string extension element named
        <computeroutput>nodes</computeroutput> with a value that conforms to the
        <computeroutput>#PBS -l nodes=...</computeroutput> PBS job description
        directive. The Globus::GRAM::ExtensionsHandler module will make this
        available to the PBS adapter script by invoking
        <computeroutput>$description->{nodes}</computeroutput>.  The updated PBS
        adapter package checks for this value and will create a directive in the
        PBS job description using this value.
        </para>

        <para>
        To use the generic construct for specifying node selection constraints,
        use the
        <computeroutput>resourceAllocationGroup</computeroutput> element:
        </para>

        <para>
        <screen>
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;!-- Optionally select hosts by type and number... --&gt;
        &lt;hostType&gt;...&lt;/hostType&gt;
        &lt;hostCount&gt;...&lt;/hostCount&gt;

        &lt;!-- *OR* by host names --&gt;

        &lt;hostName&gt;...&lt;/hostName&gt;
        &lt;hostName&gt;...&lt;/hostName&gt;
        . . .


        &lt;!-- With a total CPU count for this group... --&gt;
        &lt;cpuCount&gt;...&lt;/cpuCount&gt;

        &lt;!-- *OR* an explicit number of CPUs per node... --&gt;
        &lt;cpusPerNode&gt;...&lt;/cpusPerNode&gt;
        . . .


        &lt;!-- And a total process count for this group... --&gt;
        &lt;processCount&gt;...&lt;/processCount&gt;

        &lt;!-- *OR* an explicit number of processes per node... --&gt;
        &lt;processesPerNode&gt;...&lt;/processesPerNode&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;
        </screen>
        </para>

        <para>
        Extension elements specified according to the above pseudo-schema will
        be converted to an appropriate <computeroutput>nodes</computeroutput>
        parameter which will be treated as if an explicit
        <computeroutput>nodes</computeroutput> extension element were specified.
        Multiple <computeroutput>resourceAllocationGroup</computeroutput>
        elements may be specified.  This will simply append the constraints to
        the <computeroutput>nodes</computeroutput> paramater with a '+'
        separator.  Note that one cannot specify both hostType/hostCount and
        hostName elements.  Similarly, one cannot specify both processCount and
        processesPerNode elements.
        </para>

        <para>
        Here are some examples of using
        <computeroutput>resourceAllocationGroup</computeroutput>:
        </para>

        <para>
        <screen>
&lt;!-- #PBS -l nodes=1:ppn=10 --&gt;
&lt;!-- 10 processes --&gt;
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;processCount&gt;10&lt;/processCount&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;

&lt;!-- #PBS -l nodes=activemural:ppn=10+5:ia64-compute:ppn=2 --&gt;
&lt;!-- 1 process (process default) --&gt;
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostType&gt;activemural&lt;/hostType&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
    &lt;/resourceAllocationGroup&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostType&gt;ia64-compute&lt;/hostType&gt;
        &lt;hostCount&gt;5&lt;/hostCount&gt;
        &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;

&lt;!-- #PBS -l nodes=vis001:ppn=5+vis002:ppn=5+comp014:ppn=2+comp015:ppn=2 --&gt;
&lt;!-- 15 total processes --&gt;
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostName&gt;vis001&lt;/hostName&gt;
        &lt;hostName&gt;vis002&lt;/hostName&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;processesPerHost&gt;5&lt;/processesPerHost&gt;
    &lt;/resourceAllocationGroup&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostName&gt;comp014&lt;/hostName&gt;
        &lt;hostName&gt;comp015&lt;/hostName&gt;
        &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
        &lt;processCount&gt;5&lt;/processCount&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;
        </screen>
        </para>
        </section>
    </section>

    <section id="gram4-jobdescription-extensions-constructs">
    <title>Additional Extension Constructs</title>
    <para>
    The following are general constructs that are supported by the
    ExtensionsHandler.pm Perl module. Although no modifications to
    ExtensionsHandler.pm are required, you will need to edit the appropriate
    resource manager/scheduler adapter Perl module as neccessary to affect
    the submission of jobs to the local resource manager/batch scheduler.
    </para>

    <para>
    The GRAM4 job description schema includes a section for extending the job
    description with custom elements.  To make sense of this in the resource
    manager adapter Perl scripts, a Perl module named
    Globus::GRAM::ExtensionsHandler is provided to turn these custom elements
    into paramters that the adapter scripts can understand.
    </para>

    <para>
    It should be noted that although non-GRAM XML elements only are allowed 
    in the <computeroutput>&lt;extensions&gt;</computeroutput> element of the
    job description, the extensions handler makes no distinction based on
    namespace.  Thus, <computeroutput>&lt;foo:myparam&gt;</computeroutput> and 
    <computeroutput>&lt;bar:myparam&gt;</computeroutput> will both be treated as
    just <computeroutput>&lt;myparam&gt;</computeroutput>.
    </para>

    <para>
    Familiarity with the adapter scripts is assumed in the following
    subsections.
    </para>

        <section id="gram4-jobdescription-extensions-constructs-simple">
        <title>Simple String Parameters</title>
        <para>
        Simple string extension elements are converted into single-element
        arrays with the name of the unqualified tag name of the extension
        element as the array's key name in the Perl job description hash. Simple
        string extension elements can be considered a special case of the string
        array construct in the next section.
        </para>

        <para>
        For example, adding the following element to the
        <computeroutput>&lt;extensions&gt;</computeroutput> element of the job
        description:
        </para>

        <para>
        <screen>&lt;extensions&gt;
    &lt;myparam&gt;yahoo!&lt;/myparam&gt;
&lt;/extensions&gt;</screen>
        </para>

        <para>
        will cause the <computeroutput>$description->myparam()</computeroutput>
        to return the following value:
        </para>

        <para>
        <screen>'yahoo!'</screen>
        </para>
        </section>

        <section id="gram4-jobdescription-extensions-constructs-array">
        <title>String Array Parameters</title>
        <para>
        String arrays are a simple iteration of the simple string element construct.
        If you specify more than one simple string element in the job description, these
        will be assembled into a multi-element array with the unqualified tag name of
        the extension elements as the array's key name in the Perl job description hash.
        </para>

        <para>
        For example:
        </para>

        <para>
        <screen>
&lt;extensions&gt;
    &lt;myparams&gt;Hello&lt;/myparams&gt;
    &lt;myparams&gt;World!&lt;/myparams&gt;
&lt;/extensions&gt;
        </screen>
        </para>

        <para>
        will cause the <computeroutput>$description->myparams()</computeroutput> to
        return the following value:
        </para>

        <para>
        <screen>
            [ 'Hello', 'World!' ]
        </screen>
        </para>
        </section>

        <section id="gram4-jobdescription-extensions-constructs-namevalue">
        <title>Name/Value Parameters</title>
        <para>
        Name/value extension elements can be thought of as string arrays with an XML
        attribute 'name'.  This will cause the creation of a two-dimensional array with
        the unqualified extension element tag name as the name of the array in the
        Perl job description hash.
        </para>

        <para>
        For example:
        </para>

        <para>
        <screen>
&lt;extensions&gt;
    &lt;myvars name="pi"&gt;3.14159&lt;/myvars&gt;
    &lt;myvars name="mole"&gt;6.022 x 10^23&lt;/myvars&gt;
&lt;/extensions&gt;
        </screen>
        </para>

        <para>
        will cause the <computeroutput>$description->myvars()</computeroutput> to
        return the following value:
        </para>

        <para>
        <screen>[ [ 'pi', '3.14159'], ['mole', '6.022 x 10^23'] ]</screen>
        </para>
        </section>
    </section>

    <section id="gram4-jobdescription-extensions-adaptersupport">
    <title>Supporting custom extensions in the Perl adapter modules.</title>
    <para>
    See the System Administrator's Guide section on
    <olink targetdoc="gram4Admin" targetptr="gram4-configuring"/> for information on how to
    customize the resource manager/scheduler adapter Perl modules
    </para>
    </section>
</section>

</chapter>