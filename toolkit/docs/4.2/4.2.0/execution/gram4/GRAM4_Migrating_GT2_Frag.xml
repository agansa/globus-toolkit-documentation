<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

  <chapter id="gram4-migrating-gt2">
    <title>Migrating GRAM from GT2</title>
<section> <title>Admin - Migration Guide</title>

  <section id="gram4-migrating-gt2-install"><title>Installation / Deployment Differences</title>

<para>In GRAM2, jobs are submitted to a job manager process started by a
Gatekeeper process. The Gatekeeper process is typically started out by an
  inetd server, which forks a new gatekeeper per job. In GRAM4, jobs are
started by the ManagedExecutionJobService, which is a Java service
implementation running within the globus service container.</para>

<para>The gatekeeper searches the $GLOBUS_LOCATION/etc/grid-services directory to
determine which services it will start. Typically there is one
job manager service entry file in that directory per scheduler type.</para>

</section> <!-- Install / Deploy Differences -->

<!--
how does the service container know what services are deployed?
gridftp dependency
rft dependency
-->

  <section id="gram4-migrating-gt2-security"><title>Security Differences</title>

    <section id="gram4-migrating-gt2-proxies"><title>Proxies and Delegation</title>

<para>
  In GRAM2, the GRAM client is required to delegate a proxy credential to
  the Gatekeeper so that the job manager can send authenticated job state change
  messages.
</para>

<para>
  In GRAM4, delegation is done as needed using the DelegationFactoryService.
  Jobs may be passed references to delegated credentials as part of the job
  description.
</para>
</section> <!-- Proxies and Delegation -->

    <section id="gram4-migrating-gt2-network"><title>Network Communication</title>

<para>
  In GRAM2, communication between the client and gatekeeper is done using
  GSI-wrapped messages. Communication between the the client and job manager are
  sent using SSL. The job manager uses the delegated credential for file
  streaming or staging as well. Mutual authentication is done on all connections.
  All communications consist of a single request-response pattern. Network
  connections and security contexts are never cached between messages.
</para>

<para>
  In GRAM4, communication may be secured using TLS, ws secure messaging, or
  ws secure conversation, depending on service configuration. When doing
  authentication, the service will use the credentials of the container, or
  for secure message or conversation, a service-specific credential. It will
  not use a delegated credential when communicating with the client.
</para>

</section> <!-- Network Communication-->

    <section id="gram4-migrating-gt2-root"><title>Root / Local Account Access</title>
<para>
  The gatekeeper process is started as a root service out of inetd. It then
  uses the grid-mapfile decide which local user it should setuid()
  to before starting the job manager process, based on the credential used to
  submit the job request. The user may optionally propose a non-default user-id
  by specifying it in the gatekeeper contact string. The job manager process runs
  entirely under the local user account.
</para>

<para>
  In GRAM4, the job management service runs within a container shared with
  other services. The container is run under a non-privileged account. All
  commands which need to be run as a particular user (such as interactions with
  the <glossterm>scheduler</glossterm>) are started via <glossterm baseform="superuser do">sudo</glossterm>. Authorization is done via the
  globus-gridmap-and-execute program.
</para>

</section> <!-- Root / Local Account Access -->

</section> <!-- Security Differences -->

  <section id="gram4-migrating-gt2-schedulerdiff"><title>Scheduler Interaction Differences</title>
<para>
  In GRAM2, all file system and scheduler interactions occur within a perl
  module called by the globus-job-manager-script.pl program. Scheduler-specific
  perl modules implement a number of methods which are used by the job manager:
</para>
  <itemizedlist>
    <listitem><simpara>submit</simpara></listitem>
    <listitem><simpara>poll</simpara></listitem>
    <listitem><simpara>cancel</simpara></listitem>
    <listitem><simpara>signal</simpara></listitem>
    <listitem><simpara>make_scratchdir</simpara></listitem>
    <listitem><simpara>remove_scratchdir</simpara></listitem>
    <listitem><simpara>stage_in</simpara></listitem>
    <listitem><simpara>stage_out</simpara></listitem>
    <listitem><simpara>cache_cleanup</simpara></listitem>
    <listitem><simpara>remote_io_file_create</simpara></listitem>
    <listitem><simpara>proxy_relocate</simpara></listitem>
    <listitem><simpara>proxy_update</simpara></listitem>
  </itemizedlist>

<para>
  Only a small set of these script methods are used in the GRAM4
  implementation.  The subset used is:
</para>
  <itemizedlist>
    <listitem><simpara>submit</simpara></listitem>
    <listitem><simpara>poll (called only once per job and only for fork/condor jobs to merge output)</simpara></listitem>
    <listitem><simpara>cancel</simpara></listitem>
    <listitem><simpara>cache_cleanup</simpara></listitem>
  </itemizedlist>

<para>
  Some of the functionality has been moved into other services for reliability
  or performance reasons. Other functions have been removed altogether.
</para>
  <itemizedlist>
    <listitem><simpara>poll: SEG</simpara></listitem>
    <listitem><simpara>signal: dropped</simpara></listitem>
    <listitem><simpara>make_scratchdir: rft</simpara></listitem>
    <listitem><simpara>remove_scratchdir: rft</simpara></listitem>
    <listitem><simpara>stage_in: rft</simpara></listitem>
    <listitem><simpara>stage_out: rft</simpara></listitem>
    <listitem><simpara>remote_io_file_create:
                       rft or resource property queries</simpara></listitem>
    <listitem><simpara>proxy_relocate: delegation service</simpara></listitem>
    <listitem><simpara>proxy_update: delegation service</simpara></listitem>
  </itemizedlist>

</section> <!-- Scheduler Interaction Differences -->


  <section id="gram4-migrating-gt2-localnode"><title>Local Node Impact</title>

<para>
  In GRAM2, each job submitted would cause the following processes to be
  created:
</para>
  <itemizedlist>
    <listitem><simpara>gatekeeper (short lived)</simpara></listitem>
    <listitem><simpara>job manager (lives the duration of the job)</simpara></listitem>
    <listitem><simpara>perl script (short lived 4 or more instances depending on job type)</simpara></listitem>
    <listitem><simpara>perl script poll called periodically</simpara></listitem>
  </itemizedlist>

<para>
  In GRAM4, each job causes the following processes to be created
</para>
  <itemizedlist>
    <listitem><simpara> sudo + perl script--(typically 2 times: submit, cache_cleanup)</simpara></listitem>
    <listitem><simpara> for fork jobs, one fork-starter process (blocked waiting for a signal) for the duration of the job</simpara></listitem>
  </itemizedlist>

<para>
  Additionally, there will be a per-scheduler instance of the <glossterm baseform="Scheduler Event Generator">SEG</glossterm> program,
  monitoring a log file for job state changes.
  Migration from GRAM2 to GRAM4
</para>

</section> <!-- Local Node Impact -->

</section> <!-- Admin -->

  <section id="gram4-migrating-gt2-user"><title>User - Migration Guide</title>

    <section id="gram4-migrating-gt2-commandlinetools"><title>Command Line Tools</title>
<para>
 Typical interactions with the GRAM2 service were done with either
 the globusrun or command or the globus-job suite of scripts (globus-job-submit,
 globus-job-run, globus-job-get-output, globus-job-status, globus-job-clean).
 The main difference between these sets of commands is that globusrun required
  a <glossterm>job description</glossterm> in <glossterm baseform="Resource Specification Language">RSL</glossterm> format, and the globus-job-submit and globus-job-run
 scripts would construct that based on command line options. 
</para>

<para>
  In GRAM4, the <glossterm>globusrun-ws</glossterm> command implements the functionality of globusrun
 using the XML Job Description language in place of the RSL format job
 description of GRAM2. It also allows specifying parts of the Job
 Description with simple command line arguments (for executable and arguments),
 similar to what one would do with globus-job-run. Like globusrun, the
 globusrun-ws program supports both the interactive and batch submission of GRAM
 jobs.
</para>

  <table><title>Command Line Option Comparison</title> <tgroup cols="3">
    <thead> <row>
      <entry>Description</entry>
      <entry>GRAM2 globusrun option</entry>
      <entry>GRAM4 globusrun-ws option</entry>
    </row> </thead><tbody>
    <row>
      <entry>Interactive Multirequest Control</entry>
      <entry>-i</entry>
      <entry>NO EQUIVALENT</entry>
    </row>

    <row>
      <entry>Job Description File Path</entry>
      <entry>-f &lt;rsl filename&gt; | -file &lt;rsl filename&gt;</entry>
      <entry>-f &lt;filename&gt; | -job-description-file &lt;filename&gt;</entry>
    </row>

    <row>
      <entry>Quiet operation</entry>
      <entry>-q | -quiet</entry>
      <entry>-q | -quiet</entry>
    </row>

    <row>
      <entry>File streaming of stdout and stderr *see note 1*</entry>
      <entry>-o (Implies -q)</entry>
      <entry>-s | -streaming (Implies -q, sometimes -staging-delegate)</entry>
    </row>

    <row>
      <entry>Enable embedded GASS Server</entry>
      <entry>-s | -server (Implies -o and -q)</entry>
      <entry>NO EQUIVALENT</entry>
    </row>

    <row>
      <entry>Enable writing to the embedded GASS Server</entry>
      <entry>-w | -write-allow (Implies -s and -q)</entry>
      <entry>NO EQUIVALENT</entry>
    </row>

    <row>
      <entry>Specify Service Contact</entry>
      <entry>-r &lt;resource-manager&gt; | -resource &lt;resource-manager&gt; (Specifies Gatekeeper contact)</entry>
      <entry>-F, -Ft, or -Ff; Use either factory service contact (-F), Factory Type (-Ft) or Factory EPR file (-Ff)</entry>
    </row>

    <row>
      <entry>Do not terminate job when SIGINT is received.</entry>
      <entry>-n | -no-interrupt</entry>
      <entry>-n | -no-cleanup</entry>
    </row>

    <row>
      <entry>Destroy a job based on a job - contact</entry>
      <entry>-k &lt;job contact&gt; | -kill &lt;job contact&gt;</entry>
      <entry>-kill -j &lt;filename&gt; | -kill -job-epr-file &lt;filename&gt;</entry>
    </row>

    <row>
      <entry>Get current job status</entry>
      <entry>-status &lt;job contact&gt;</entry>
      <entry>-status -j &lt;filename&gt; | -status -job-epr-file &lt;filename&gt;</entry>
    </row>

    <row>
      <entry>Batch mode job submission</entry>
      <entry>-b | -batch or -F | -fast-batch</entry>
      <entry>-batch | -b</entry>
    </row>

    <row>
      <entry>Refresh proxy</entry>
      <entry>-refresh-proxy &lt;job contact&gt; | -y &lt;job contact&gt;</entry>
      <entry>NO EQUIVALENT</entry>
    </row>

    <row>
      <entry>Stop a job manager process, saving state</entry>
      <entry>-stop-manager &lt;job contact&gt;</entry>
      <entry>NO EQUIVALENT</entry>
    </row>

    <row>
      <entry>Validate job description without submitting job</entry>
      <entry>-p | -parse</entry>
      <entry>-validate</entry>
    </row>

    <row>
      <entry>Ping job manager</entry>
      <entry>-a | -authenticate-only</entry>
      <entry>NO EQUIVALENT</entry>
    </row>

    <row>
      <entry>Dryrun</entry>
      <entry>-d | -dryrun</entry>
      <entry>NO EQUIVALENT</entry>
    </row>
  </tbody> </tgroup> </table> <!-- Command Line Option Comparison -->

<para>
 Note 1:
 In GRAM2, streaming is done using https connections from the job manager
  to a GASS server embedded in the globusrun program. In GRAM4, streaming is
 implemented by accessing a gridftp server configured to run along with the
 service container.
</para>

<para>
 globusrun-ws has additional options to deal with file streaming, monitoring an
 existing job, authentication and authorization, http timeouts, default
 termination time, encryption, etc.
</para>

</section> <!-- Command Line Tools -->

</section> <!-- User -->

<section> <title>Developer - API and RSL Migration Guide</title>

<para>
   This table describes the migration path for applications which use
   the C language interface to GRAM2. This table covers the
   globus_gram_client API.
</para>

  <table><title>C API Migration Table</title> <tgroup cols="2"> 
    <thead> <row>
      <entry>GT2 API Command</entry>
      <entry>GT4 API Command</entry>
    </row> </thead><tbody>
    <row>
      <entry>globus_gram_client_callback_allow()</entry>
      <entry>globus_notification_create_consumer()</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_job_request()</entry>
      <entry>ManagedJobFactoryPortType_GetResourceProperty_epr_register()</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_request()</entry>
      <entry>ManagedJobFactoryPortType_GetResourceProperty_epr()</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_job_cancel()</entry>
      <entry>ManagedExecutableJobPortType_Destroy_epr_register()</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_cancel()</entry>
      <entry>ManagedExecutableJobPortType_Destroy_epr()</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_status()</entry>
      <entry>ManagedExecutableJobPortType_GetResourceProperty_epr() with the property name {http://www.globus.org/namespaces/2008/03/gram/job/types}state</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_job_status()</entry>
      <entry>ManagedExecutableJobPortType_GetResourceProperty_epr_register() with the property name {http://www.globus.org/namespaces/2008/03/gram/job/types}state</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_refresh_credentials()</entry>
      <entry>globus_delegation_client_util_delegate_epr</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_job_refresh_credentials()</entry>
      <entry>globus_delegation_client_util_delegate_epr_register()</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_job_signal()</entry>
      <entry>ManagedExecutableJobPortType_release_epr_register()</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_signal()</entry>
      <entry>ManagedExecutableJobPortType_release_epr()</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_job_callback_registration()</entry>
      <entry>ManagedExecutableJobPortType_Subscribe_epr_register()</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_callback_register()</entry>
      <entry>ManagedExecutableJobPortType_Subscribe_epr()</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_job_callback_unregistration()</entry>
      <entry>SubscriptionManager_Destroy_epr_register()</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_callback_unregister()</entry>
      <entry>SubscriptionManager_Destroy_epr()</entry>
    </row>
    <row>
      <entry>globus_gram_client_callback_disallow()</entry>
      <entry>globus_notification_destroy_consumer()</entry>
    </row>
    <row>
      <entry>globus_gram_client_job_contact_free()</entry>
      <entry>wsa_EndpointReferenceType_destroy()</entry>
    </row>
    <row>
      <entry>globus_gram_client_error_string()</entry>
      <entry>globus_error_get(result)</entry>
    </row>
    <row>
      <entry>globus_gram_client_set_credentials()</entry>
      <entry>globus_soap_message_handle_set_attr() with the property name
GLOBUS_SOAP_MESSAGE_USER_CREDENTIAL_KEY and the value the gss_cred_id_t</entry>
    </row>
    <row>
      <entry>globus_gram_client_ping()</entry>
      <entry>XXX? Maybe factory get resource properties?</entry>
    </row>
    <row>
      <entry>globus_gram_client_register_ping()</entry>
      <entry>XXX? Maybe factory get resource properties?</entry>
    </row>
    <row>
      <entry>globus_gram_client_debug()</entry>
      <entry>set GLOBUS_SOAP_MESSAGE_DEBUG environment variable to MESSAGES to see XML messages sent/received</entry>
    </row>
    <row>
      <entry>globus_gram_client_version()</entry>
      <entry>NO EQUIVALENT</entry>
    </row>
    <row>
      <entry>globus_gram_client_attr_init()</entry>
      <entry>globus_soap_message_attr_init()</entry>
    </row>
    <row>
      <entry>globus_gram_client_attr_destroy()</entry>
      <entry>globus_soap_message_attr_destroy()</entry>
    </row>
    <row>
      <entry>globus_gram_client_attr_set_credential()</entry>
      <entry>globus_soap_message_handle_set_attr() with the property name GLOBUS_SOAP_MESSAGE_USER_CREDENTIAL_KEY and the value the gss_cred_id_t</entry>
    </row>
    <row>
      <entry>globus_gram_client_attr_get_credential()</entry>
      <entry>globus_soap_message_attr_get() with the property name GLOBUS_SOAP_MESSAGE_USER_CREDENTIAL_KEY.  Migration from GRAM2 to GRAM4</entry>
    </row>
  </tbody> </tgroup> </table> <!-- API Migration Table -->

  <para>
    GRAM2 uses a custom language for specifying a job description.  GRAM4
    uses an xml based language for this same purpose. In GRAM2, relations
    (such as count=5) can occur in any order within the RSL; in GRAM4, the
   relations must be in the order in the XML schema definition. The RSL
   attribute description below is in the order defined by the XML schema
  </para>
  <table><title>RSL Migration Table</title> <tgroup cols="2">
    <thead> <row>
      <entry>GT2 RSL Attribute</entry>
      <entry>GT4 job description element</entry>
    </row> </thead><tbody>

    <row>
      <entry>(username = NAME)</entry>
      <entry>&lt;localUserId&gt;NAME&lt;localUserId&gt;</entry>
    </row>

    <row>
      <entry>(two_phase = TWO_PHASE_TIMEOUT) *See Note 1*</entry>
      <entry>&lt;holdState&gt;Pending&lt;/holdState&gt;</entry>
    </row>

    <row>
      <entry>(executable = EXE)</entry>
      <entry>&lt;executable&gt;EXE&lt;/executable&gt;</entry>
    </row>

    <row>
      <entry>(directory = DIR)</entry>
      <entry>&lt;directory&gt;DIR&lt;/directory&gt;</entry>
    </row>

    <row>
      <entry>(arguments=ARG1 ... ARGN)</entry>
      <entry>&lt;argument&gt;ARG1&lt;/argument&gt;
    ...
    &lt;argument&gt;ARGN&lt;/argument&gt;</entry>
    </row>

    <row>
      <entry>(environment = (ENV_VAR_1 ENV_VAL_1) ...  (ENV_VAR_N ENV_VAL_N))</entry>
      <entry>&lt;environment&gt;
        &lt;name&gt;ENV_VAR_1&lt;/name&gt;
        &lt;value&gt;ENV_VAL_1&lt;/name&gt;
        ...
        &lt;name&gt;ENV_VAR_N&lt;/name&gt;
        &lt;value&gt;ENV_VAR_N&lt;/value&gt;
    &lt;/environment&gt;</entry>
    </row>

    <row>
      <entry>(stdin = LOCAL_FILE_PATH) *See Note 2*</entry>
      <entry>&lt;stdin&gt;file:///LOCAL_FILE_PATH&lt;/stdin&gt;</entry>
    </row>

    <row>
      <entry>(stdout = LOCAL_FILE_PATH) *See Note 2*</entry>
      <entry>&lt;stdout&gt;file:///LOCAL_FILE_PATH&lt;/stdout&gt;</entry>
    </row>

    <row>
      <entry>(stderr = LOCAL_FILE_PATH) *See Note 2*</entry>
      <entry>&lt;stderr&gt;file:///LOCAL_FILE_PATH&lt;/stderr&gt;</entry>
    </row>

    <row>
      <entry>(count = NUMBER)</entry>
      <entry>&lt;count&gt;NUMBER&lt;/count&gt;</entry>
    </row>

    <row>
      <entry>(library_path = PATH_ELEMENT_1 ... PATH_ELEMENT_N)</entry>
      <entry>&lt;libraryPath&gt;PATH_ELEMENT_1&lt;/libraryPath&gt;
    ...
    &lt;libraryPath&gt;PATH_ELEMENT_N&lt;/libraryPath&gt;</entry>
    </row>

    <row>
      <entry>(host_count = NUMBER)</entry>
      <entry>&lt;hostCount&gt;NUMBER&lt;/hostCount&gt;</entry>
    </row>

    <row>
      <entry>(project = PROJECT)</entry>
      <entry>&lt;project&gt;PROJECT&lt;/project&gt;</entry>
    </row>

    <row>
      <entry>(queue = QUEUE)</entry>
      <entry>&lt;queue&gt;QUEUE&lt;/queue&gt;</entry>
    </row>

    <row>
      <entry>(max_time = MINUTES)</entry>
      <entry>&lt;maxTime&gt;MINUTES&lt;/maxTime&gt;</entry>
    </row>

    <row>
      <entry>(max_wall_time = MINUTES)</entry>
      <entry>&lt;maxWallTime&gt;MINUTES&lt;/maxWallTime&gt;</entry>
    </row>

    <row>
      <entry>(max_cpu_time = MINUTES)</entry>
      <entry>&lt;maxCpuTime&gt;MINUTES&lt;/maxCpuTime&gt;</entry>
    </row>

    <row>
      <entry>(max_memory = MEGABYTES)</entry>
      <entry>&lt;maxMemory&gt;MEGABYTES&lt;/maxMemory&gt;</entry>
    </row>

    <row>
      <entry>(min_memory = MEGABYTES)</entry>
      <entry>&lt;minMemory&gt;MEGABYTES&lt;/minMemory&gt;</entry>
    </row>

    <row>
      <entry>(job_type = JOBTYPE)</entry>
      <entry>&lt;jobType&gt;JOBTYPE&lt;/jobType&gt;</entry>
    </row>

    <row>
      <entry>(file_stage_in = (REMOTE_GRIDFTP_URL_1 LOCAL_FILE_PATH_1) ...
                     (REMOTE_GRIDFTP_URL_N LOCAL_FILE_PATH_N)) *See Note 4*</entry>
      <entry>&lt;fileStageIn&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;REMOTE_GRIDFTP_URL_1&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;file:///LOCAL_FILE_PATH_1&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;REMOTE_GRIDFTP_URL_N&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;file:///LOCAL_FILE_PATH_N&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageIn&gt;</entry>
    </row>

    <row>
      <entry>(file_stage_out = (LOCAL_FILE_PATH_1 REMOTE_GRIDFTP_URL_1) ...
                     (LOCAL_FILE_PATH_N REMOTE_GRIDFTP_URL_N)) *See Note 4*</entry>
      <entry>&lt;fileStageOut&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;file:///LOCAL_FILE_PATH_1&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;REMOTE_GRIDFTP_URL_1&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;file:///LOCAL_FILE_PATH_N&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;REMOTE_GRIDFTP_URL_N&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageOut&gt;</entry>
    </row>

  </tbody> </tgroup> </table> <!-- API Migration Table -->

<para>
  Note 1: The globusrun-ws program will automatically release the hold after
  receiving the indicated hold state. To simulate the two-phase submit timeout,
  an application could set the initial termination time of the resource. A
  hold state may be set for fileCleanUp state for two-phase commit end, but
  it is not possible to submit a job with both hold states.
</para>

<para>
  Note 2: stdin, stdout, and stderr must only be a local file URL.  Ftp and
  gridftp URLs can be handled by using a fileStageIn and fileStageOut elements
  (described below).
</para>

<para>
  Note 3: Value job types for GRAM4 are multiple (the default), single, mpi,
  and condor.
</para>

<para>
  Note 4: The GRAM4 service uses RFT to transfer files. This only supports
  gridftp and ftp file transfers. The local file path must be a mappable by 
  an entry in the file system mapping file.
</para>

<para>
  The following RSL attributes have no direct equivalent in GRAM4:
</para>
  <itemizedlist>

    <listitem><simpara>dry_run:
      Similar behavior can be obtained by using a job hold state of
      Pending and then destroying the job resource without releasing the hold.
    </simpara></listitem>

    <listitem><simpara>file_stage_in_shared: 
      No support for the GASS cache, hence this is gone. Applications may use
      RFT to transfer files before submitting a batch of jobs.
    </simpara></listitem>

    <listitem><simpara>gass_cache: 
      GASS cache is not used by GRAM4, so there is no need for setting the
      cache path.
    </simpara></listitem>

    <listitem><simpara>gram_my_job: 
      collective operations are enabled for every managed execution job
      service via rendezvous registration
    </simpara></listitem>

    <listitem><simpara>proxy_timeout: 
      Delegated security proxies are handled via the DelegationFactory Service.
      Resource lifetime is controlled by the wsrl:SetTerminationTime operation
    </simpara></listitem>

    <listitem><simpara>remote_io_url: 
      The GRAM4 service does not use GASS, so there is no equivalent to this.
    </simpara></listitem>

    <listitem><simpara>restart: 
      There is no equivalent.
    </simpara></listitem>

    <listitem><simpara>rsl_substitution: 
      The GRAM4 service does not support user-defined substitutions. Certain
      values may be referenced in some RSL values by a similar technique, but
      these are for system configuration parameters only. See the GRAM4 job
      description document for description of RSL variable syntax, values, and
      attributes where they may be used.
    </simpara></listitem>

    <listitem><simpara>save_state: 
      All GRAM4 jobs are persistent, so there is no elements related to this.
    </simpara></listitem>

    <listitem><simpara>scratch_dir: 
      This is now a deployment configuration option.
    </simpara></listitem>

    <listitem><simpara>stderr_position: 
      Standard error streaming is now a feature of the globusrun-ws program
      instead of part of the GRAM4 service, so there is no equivalent element
      for restarting error streaming at a specific point.
    </simpara></listitem>

    <listitem><simpara>stdout_position: 
      Standard output streaming is now a feature of the globusrun-ws program
      instead of part of the GRAM4 service, so there is no equivalent element
      for restarting output streaming at a specific point.
    </simpara></listitem>

  </itemizedlist>

  <para>Here are some examples of converting some GRAM2 RSLs to GRAM4.
  </para>

  <table><title>RSL Migration Examples</title> <tgroup cols="2">
    <thead> <row>
      <entry>GRAM2 RSL</entry>
      <entry>GRAM4 Job Description</entry>
    </row> </thead><tbody>
    <row>
      <entry>
        <screen>
(* Simple Job Request With Arguments *)
&amp;(executable = /bin/echo)
(arguments = Hello, Grid)</screen>
    </entry>
      <entry>
        <screen>
&lt;?xml version="1.0"?&gt;
&lt;!-- Simple Job Request With Arguments --&gt;
&lt;job xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job/description"&gt;
&nbsp;&nbsp;&lt;ns1:executable&gt;/bin/echo&lt;/ns1:executable&gt;
&nbsp;&nbsp;&lt;ns1:argument&gt;Hello,&lt;/ns1:argument&gt;
&nbsp;&nbsp;&lt;ns1:argument&gt;Grid&lt;/ns1:argument&gt;
&lt;/job&gt;</screen>
      </entry>
    </row>
    <row>
      <entry>
        <screen>
(* Multijob Request *)
+(
   &amp;(executable = /bin/echo)
   (arguments = Hello, Grid From Subjob 1)
   (resource_manager_name = resource-manager-1.globus.org)
   (count = 1)
 )
(
   &amp;(executable = mpi-hello)
   (arguments = Hello, Grid From Subjob 2)
   (resource_manager_name = resource-manager-2.globus.org)
   (count = 2)
   (jobtype = mpi)
 )</screen>
      </entry>
      <entry>
        <screen>
            &lt;?xml version="1.0"?&gt;
            &lt;!-- Multijob Request --&gt;
            &lt;multiJob
                &lt;!-- namespace of GRAM resource ID elements --&gt;
                xmlns:gram="http://www.globus.org/namespaces/2008/03/gram/job"
                &lt;!-- namespace of WS-Addressing (EPR) elements --&gt;
                xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
                &lt;factoryEndpoint&gt;
                  &lt;wsa:Address&gt;
                    &lt;!-- URL for the factory service on resource-manager-0.globus.org --&lt;
                    https://resource-manager-0.globus.org:8443/wsrf/services/ManagedJobFactoryService
                  &lt;/wsa:Address&gt;
                  &lt;!-- ReferenceParameters are optional --&lt;
                  &lt;wsa:ReferenceParameters&gt;
                    &lt;!-- ID for the "Multi" factory resource --&gt;
                    &lt;gram:ResourceID&gt;Multi&lt;/gram:ResourceID&gt;
                  &lt;/wsa:ReferenceParameters&gt;
                  &lt;wsa:ReferenceParameters/&gt;
                &lt;/factoryEndpoint&gt;
                &lt;job&gt;
                  &lt;factoryEndpoint&gt;
                    &lt;wsa:Address&gt;
                        &lt;!-- URL for the factory service on resource-manager-1.globus.org --&gt;
                        https://resource-manager-1.globus.org:8443/wsrf/services/ManagedJobFactoryService
                    &lt;/wsa:Address&gt;
                    &lt;!-- ReferenceParameters are optional --&lt;
                    &lt;wsa:ReferenceParameters&gt;
                      &lt;!-- ID for the "Fork" factory resource --&gt;
                      &lt;gram:ResourceID&gt;Fork&lt;/gram:ResourceID&gt;
                    &lt;/wsa:ReferenceParameters&gt;
                    &lt;wsa:ReferenceParameters/&gt;
                  &lt;/factoryEndpoint&gt;
                  &lt;executable&gt;/bin/echo&lt;/executable&gt;
                  &lt;argument&gt;Hello,&lt;/argument&gt;
                  &lt;argument&gt;Grid&lt;/argument&gt;
                  &lt;argument&gt;From&lt;/argument&gt;
                  &lt;argument&gt;Subjob&lt;/argument&gt;
                  &lt;argument&gt;1&lt;/argument&gt;
                  &lt;count&gt;1&lt;/count&gt;
                &lt;/job&gt;

                &lt;job&gt;
                  &lt;factoryEndpoint&gt;
                    &lt;wsa:Address&gt;
                        &lt;!-- URL for the factory service on resource-manager-2.globus.org --&gt;
                        https://resource-manager-2.globus.org:8443/wsrf/services/ManagedJobFactoryService
                    &lt;/wsa:Address&gt;
                    &lt;!-- ReferenceParameters are optional --&lt;
                    &lt;wsa:ReferenceParameters&gt;
                      &lt;!-- ID for the "Fork" factory resource --&gt;
                      &lt;gram:ResourceID&gt;Fork&lt;/gram:ResourceID&gt;
                    &lt;/wsa:ReferenceParameters&gt;
                    &lt;wsa:ReferenceParameters/&gt;
                  &lt;/factoryEndpoint&gt;
                  &lt;executable&gt;mpi-hello&lt;/executable&gt;
                  &lt;argument&gt;Hello,&lt;/argument&gt;
                  &lt;argument&gt;Grid&lt;/argument&gt;
                  &lt;argument&gt;From&lt;/argument&gt;
                  &lt;argument&gt;Subjob&lt;/argument&gt;
                  &lt;argument&gt;2&lt;/argument&gt;
                  &lt;count&gt;2&lt;/count&gt;
                  &lt;jobType&gt;mpi&lt;/jobType&gt;
                &lt;/job&gt;
            &lt;/multiJob&gt;
        </screen>
      </entry>
    </row>
    </tbody> </tgroup> </table>

</section> <!-- Developer -->
</chapter>