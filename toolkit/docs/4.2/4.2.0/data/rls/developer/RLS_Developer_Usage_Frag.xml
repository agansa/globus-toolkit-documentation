<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="rls-developer-scenarios">
    <title>Usage scenarios</title>
    <section id="rls-developer-scenarios-java"><title>Java Examples</title>
        <para>This section provides examples of a few basic operations using the new Java client API. Here is an outline of the typical steps used to resolve a replica location.</para>
        <itemizedlist>
            <listitem><simpara>Establish a connection to the Replica Location Index service</simpara></listitem>
            <listitem><simpara>Construct a list of the logical names to be used in the query</simpara></listitem>
            <listitem><simpara>Query the index service</simpara></listitem>
            <listitem><simpara>Inspect the return list and construct lists of logical names to be used in queries to the Local Replica Catalog services</simpara></listitem>
            <listitem><simpara>Query the catalog services</simpara></listitem>
            <listitem><simpara>Inspect the results returned by the catalog services</simpara></listitem>
        </itemizedlist>
        <section><title>Create a connection source</title>
            <simpara>A connection source is needed in order to establish connections to the RLS. The connection source may be shared and is a thread safe object. The <computeroutput>SimpleRLSConnectionSource</computeroutput> may be directly instantiated by the client or it may be used as a JNDI object and shared by multiple clients (e.g., in a container that supports JNDI). In this example, the client instantiates the connection source.</simpara>
            <screen>
                RLSConnectionSource source = null;
                try {
                    source = new SimpleRLSConnectionSource();
                } catch (RLSException e) {
                    // handle exception
                }
            </screen>
        </section>
    </section>
    <section id="rls-developer-scenarios-examplecode"><title>Example Code</title>
        <para>This section provides examples illustrating the basic usage of the client interfaces
            supported by the RLS. Using the client API, developers may create client applications that
            interact with the RLS server to perform replica location operations.</para>
        <para>
            <emphasis>Developing in C</emphasis>
        </para>
        <para>Client applications developed in C must do <emphasis>both</emphasis> of the following:</para>
        <orderedlist>
            <listitem>
                <simpara>Include the client header file at
                    <computeroutput>$GLOBUS_LOCATION/include/globus_rls_client.h</computeroutput>.</simpara>
            </listitem>
            <listitem>
                <simpara>Link to the client shared library at
                    <computeroutput>$GLOBUS_LOCATION/lib/libglobus_rls_client_gcc32dbgpthr</computeroutput>.</simpara>
            </listitem>
        </orderedlist>
        <para>For <ulink url="test.c">C language example code</ulink>, click <ulink url="test.c"
                >here</ulink>. </para>
        <para>
            <emphasis>Developing in Java</emphasis>
        </para>
        <para>Client applications developed in Java must do <emphasis>all</emphasis> of the following:</para>
        <orderedlist>
            <listitem>
                <simpara>Include the RLS Jar, <computeroutput>$GLOBUS_LOCATION/lib/globus_rls_client.jar</computeroutput>,
                    in the CLASSPATH.</simpara>
            </listitem>
            <listitem>
                <simpara>Import the RLS Package
                    <computeroutput>org.globus.replica.rls.*</computeroutput>.</simpara>
            </listitem>
        </orderedlist>
        <para>For <ulink url="testrls.java">Java language example code</ulink>, click <ulink
                url="testrls.java">here</ulink>. </para>
    </section>
</chapter>
