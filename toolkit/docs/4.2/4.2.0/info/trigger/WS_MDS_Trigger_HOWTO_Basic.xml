<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="trigger-howto-basic">
        <chapterinfo>
            <date>June 2008</date>
        </chapterinfo>
        <title>Trigger Service - Easy HowTo </title>
  <indexterm type="trigger"><primary>tutorial</primary><secondary>basic</secondary></indexterm>
  <indexterm type="trigger-howto"><primary>tutorial</primary><secondary>basic</secondary></indexterm>
  <section id="trigger-howto-basic-purpose"><title>Purpose</title>
  <para>The purpose of this Easy HowTo is to introduce the GT4/WS MDS component known as the Trigger, 
      as well as to provide an example of setting one up successfully.  The current GT <replaceable role="entity">version</replaceable> documentation provides a basic reference and will be updated as features are added, 
    but for those of you who would like to get a simple trigger working without going through all of the documentation, this document is for you.</para>
    
    <para>We will be creating a simple trigger from scratch, and setting it up completely. To get the basic idea of how this is done, we will only use elements available in the default 
      GT4 installation to show you how to use triggers.</para>
  </section>
  <section id="trigger-howto-basic-prereq"><title>Prerequisites</title>
<para>To get the most out of this tutorial, you will need:</para>
  <itemizedlist>
    <listitem><para>A Globus Toolkit installation</para></listitem>
    <listitem><para>Some basic familiarity with <ulink url="http://www.w3.org/TR/xpath">XML Path Language (XPath).</ulink></para></listitem>
    <listitem><para>A valid X.509 user certificate</para></listitem>
  </itemizedlist>
  </section>
  
  <section id="trigger-howto-basic-intro"><title>Introduction</title>
  
  <para>The Trigger Service collects information and then performs actions based on that information.  The Trigger Service works like this:</para>
<orderedlist>
<listitem><para>Administrators use a configuration file to specify the names and locations of <emphasis>trigger actions</emphasis>, programs that can be executed by the Trigger Service as a result of trigger conditions being met.</para></listitem>
<listitem><para>Administrators use a service interface to specify what information will be collected by the Trigger Service.  This interface is called the Aggregator Framework and is the same configuration interface used by the Index Service</para></listitem>
<listitem><para>Users use a service interface to define <emphasis>triggers</emphasis>.  A trigger includes (among other things) an XPath query string and the name of one of the trigger actions defined in step 1.</para></listitem>
<listitem><para>The Trigger Service periodically collects data (based on the configuration specified in step 2) and, for each trigger specified in step 3, evaluates the XPath query associated with the trigger and then executes the trigger's action if the query returns true.</para></listitem>
</orderedlist>
    <para>In this example, we will configure the Trigger Service to monitor the Default Index Service running in the same Globus container, and then set up a trigger that will add an entry to a log file any time the number of Index Service  is less than 1.
This is not necessarily a practical example of how you would use a trigger, but it's simple enough to 
      give you a basic idea of how to set one up. So let's get started!</para>
      </section>
      
  <section id="trigger-howto-basic-tutorial"><title>Trigger Tutorial</title>
  <section id="trigger-howto-basic-prelim"><title>Preliminaries:  Set Up Your Environment</title>
    <para>First things first -- in order to run most Globus commands, you must have your environment set up correctly and have a valid proxy certificate.  To set up your environment, first set the GLOBUS_LOCATION environment variable to the directory in which Globus is installed.  To finish setting up your environment, run:</para>
<screen>
. $GLOBUS_LOCATION/etc/globus-user-env.sh
</screen>
<para>if you're a Bourne shell user, or</para>
<screen>
source $GLOBUS_LOCATION/etc/globus-user-env.csh
</screen>
<para>if you're a C shell user.  Finally, generate a proxy certificate with:</para>
<screen>
$GLOBUS_LOCATION/bin/grid-proxy-init -verify -debug
</screen>
  </section>
    <section id="trigger-howto-basic-config-actions"><title>Configure Trigger Action Programs</title> 
      <para>Next, we will specify what commands can be used in Trigger Service triggers.  The Trigger Service comes with some simple action scripts in the <filename>$GLOBUS_LOCATION/libexec/trigger</filename> directory; we will edit the
<filename>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/jndi-config.xml</filename> file to enable them:</para>
      <screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jndiConfig xmlns="http://wsrf.globus.org/jndi/config"&gt;
    &lt;global&gt;
       &lt;resource name="configuration"
                 type="org.globus.mds.aggregator.impl.AggregatorConfiguration"&gt;
            ...
       &lt;/resource&gt;
      
       &lt;resource name="triggerConfiguration"
                 type="org.globus.mds.trigger.impl.TriggerConfiguration"&gt;
          &lt;resourceParams&gt;
             &lt;parameter&gt;
                 ...
             &lt;/parameter&gt;
             &lt;parameter&gt;
	        &lt;name&gt;<emphasis role="strong">executableMappings</emphasis>&lt;/name&gt;
	        &lt;value&gt;<emphasis> role="strong">trigger-action-default=trigger-action-default.sh, trigger-action-input-default=trigger-action-input-default.sh</emphasis>&lt;/value&gt;
	     &lt;/parameter&gt;
	  &lt;/resourceParams&gt;
       &lt;/resource&gt;  
                    
    &lt;/global&gt;
    
    &lt;service name="TriggerRegistrationService"&gt;
          ...
    &lt;/service&gt;
       ...

&lt;/jndiConfig&gt;
      </screen>
<para>This <filename>jndi-config.xml</filename> file defines an <computeroutput>executableMappings</computeroutput> parameter.  The format of the <computeroutput>executableMappings</computeroutput> parameter is a sequence of name=value strings, separated by commas.
The left hand side of each name/value pair is the name that users will specify in trigger definitions; the right hand side is the path name (relative to the <filename>$GLOBUS_LOCATION/libexec/trigger</filename> directory) of the program to execute.  In this example, we
define two trigger actions: <computeroutput>trigger-action-default</computeroutput> maps to <filename>$GLOBUS_LOCATION/libexec/trigger/trigger-action-default.sh</filename>, and <computeroutput>trigger-action-input-default</computeroutput> maps to <filename>$GLOBUS_LOCATION/libexec/trigger-action-input-default.sh</filename>.  These action scripts are distributed as part of the Globus distribution.  The version of <filename>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/jndi-config.xml</filename> distributed with Globus has these mappings defined in a commented-out section; in order to continue with this example, you must uncomment them.</para>
<para>Before you continue, you'll need to restart your Globus container to make the
changes to
jndi-config.xml take effect.  If you normally use <filename>/etc/init.d/gt4container</filename>, then you can type <computeroutput>/etc/init.d/gt4container restart</computeroutput>, or you can kill the running Globus container (if there is one) and run <computeroutput>$GLOBUS_LOCATION/etc/globus-start-container-detached</computeroutput> by hand.  If you have a production container running and want to test the trigger service with a different instance on another port, you can run <computeroutput>globus-start-container-detached -p <emphasis>NNNN</emphasis></computeroutput> to cause the new container to listen on port <emphasis>NNNN</emphasis>.</para>
</section>
    <section id="trigger-howto-basic-registration"><title>Configure the Trigger Service to Collect Information</title>
      <para>The next thing we will do is configure the trigger service to collect some information (we will later configure the trigger service to periodically run a query on that information and, based on the results of the query, take some action).  In this example, we will configure the trigger service to collect infoformation by querying the Default Index Service running in the same Globus container for the entire contents of its index.</para>
<para>The Trigger Service uses the <olink targetdoc="aggregator">Aggregator Framework</olink> to configure its sources of information.  Aggregator sources are configured through a service interface; we will create a
file specifying configuration parameters and then run the <computeroutput><olink targetptr="mds-servicegroup-add">mds-servicegroup-add</olink></computeroutput> command to read that configuration file and register the configuration information with the Trigger Service.  We will start with the example trigger registration file included with Globus distributions in <filename>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</filename></para>
<screen>
  &lt;DefaultServiceGroupEPR&gt;
    &lt;wsa:Address&gt;<emphasis role="strong">https://localhost:8443/wsrf/services/TriggerRegistrationService</emphasis>&lt;/wsa:Address&gt;
  &lt;/DefaultServiceGroupEPR&gt;
  &lt;ServiceGroupRegistrationParameters
      xmlns="http://mds.globus.org/servicegroup/client"
      xmlns:wsa="http://www.w3.org/2005/08/addressing"
      xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    &lt;RegistrantEPR
        xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
      &lt;wsa:Address&gt;<emphasis role="strong">https://localhost:8443/wsrf/services/DefaultIndexService</emphasis>&lt;/wsa:Address&gt;
    &lt;/RegistrantEPR&gt;
    &lt;RefreshIntervalSecs&gt;600&lt;/RefreshIntervalSecs&gt;
    &lt;Content xsi:type="agg:AggregatorContent"
             xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;agg:GetResourcePropertyPollType 
             xmlns:wssg="http://docs.oasis-open.org/wsrf/sg-2"&gt;
          &lt;agg:PollIntervalMillis&gt;30000&lt;/agg:PollIntervalMillis&gt;
          &lt;agg:ResourcePropertyName&gt;wssg:Entry&lt;/agg:ResourcePropertyName&gt;
        &lt;/agg:GetResourcePropertyPollType&gt;
      &lt;/agg:AggregatorConfig&gt;
      &lt;agg:AggregatorData /&gt;
    &lt;/Content&gt;
  &lt;/ServiceGroupRegistrationParameters&gt;
&lt;/ServiceGroupRegistrations&gt;
</screen>
<para>For this example, the only items in the registration file that you
might need to edit are the <computeroutput>DefaultServiceGroupEPR</computeroutput> (the
address of your trigger registration service) and the <computeroutput>RegistrantEPR</computeroutput> (the address of the resource you want to monitor; in this case, your Default Index Service).  If these look correct (i.e., the host names and port numbers correspond to
the Globus container you just started),
then you do not need
to edit this file at all.</para>
<para>Finally, run mds-servicegroup-add to register these configuration parameters to the Trigger Service:</para>
<screen>
mds-servicegroup-add $GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml &amp;
</screen>
<para>Of course, if you copied the trigger-registration-example.xml file before editing it, you would use the name of the edited file instead.  The output from <computeroutput>mds-servicegroup-add</computeroutput> should look something like this:</para>
<screen>
Processing configuration file...
INFO: Processed 1 registration entries
INFO: Successfully registered https://localhost:8443/wsrf/services/DefaultIndexService to servicegroup at https://localhost:8443/wsrf/services/TriggerRegistrationService
</screen>
<warning><para>In general, it's a bad idea to use loopback addresses like "localhost" or "127.0.0.1" in MDS configuration files (because if you configure a remote host to poll "localhost" for information, the remote host will poll itself, not the host that the mds-servicegroup-add command was run from).  We can get away with it here because all the
addresses we're using are local, but in real life, it's better to use non-local IP addresses or fully-qualified domain names</para></warning>
    </section>

<section id="trigger-howto-basic-define-triggers"><title>Define Triggers</title>
      <para>Now, we're going to define a trigger that checks how many Entries are being registered by the Index Service and then takes actions based on the results.  But first, let's check how many Entries are being registered by the Index Service. Type the following command in one line (substituting your hostname and port if appropriate):</para>
      <screen>$GLOBUS_LOCATION/bin/wsrf-query -s https://127.0.0.1:8443/wsrf/services/DefaultIndexService 'count(//*[local-name()="Entry"])'</screen>
      <para>On our setup we get: <emphasis>3</emphasis>.</para>
    </section>
  <section><title>Create A Trigger</title>
    <para>At this point, the Trigger Service is collecting information, but we haven't told it to do anything with that information.  We will now follow a few simple steps to set up a trigger.</para>
<orderedlist><listitem><para>First, we'll create the trigger:</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-create -b https://127.0.0.1:8443/wsrf/services https://127.0.0.1:8443/wsrf/services/DefaultIndexService</screen>
<para>The first argument (<computeroutput>-b https://127.0.0.1:8443/wsrf/services</computeroutput>) specifies the Trigger Service that we want to use.  The second argument specifies which monitored resource we would like to act upon.  (Note:  in this tutorial, we're only monitoring one resource.  But we could be monitoring several, by specifying several sets of ServiceGroupRegistrationParameters in the configuration file we used with mds-servicegroup-add, or by running mds-servicegroup-add multiple times with different configuration files).
        <para>The client should produce output similar to the following:</para>
        <screen>
   MDS4 Trigger Creation Client
   ----------------------------

**     Service URL: https://127.0.0.1:8443/wsrf/services/DefaultIndexService

Checking current monitored services (Trigger Registrations)...
OK
Address: https://128.9.64.191:8443/wsrf/services/TriggerService
Reference property[0]:
<ns1:TriggerResourceKey xmlns:ns1="http://mds.globus.org/2007/03/TriggerResourceKey"><emphasis>546aae00-418b-11dd-a5ea-ebfac2dfbbee</emphasis></ns1:TriggerResourceKey>

--> Trigger has been created.
</screen>
<para>The <computeroutput>TriggerResourceKey</computeroutput> is anidentifier created by the Trigger Service to identify this newly-created trigger.  It is sometimes also referred to as a Trigger ID.</para>
      </listitem>
      <listitem>
        <para>Now we have a trigger, but not a very interesting one.  We can see some information about it by typing:</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-view -b https://127.0.0.1:8443/wsrf/services</screen>
<para>As above, the <computeroutput>-b https://127.0.0.1:8443/wsrf/services</computeroutput> specifies the Trigger Service to use.  If you specify a Trigger ID, then
<computeroutput>mds-trigger-view</computeroutput> will display detailed information about that trigger.  In this case, we didn't, so <computeroutput>mds-trigger-view</computeroutput> will display summary information about all triggers.  The output should look something like the following:</para>
        <screen>
   MDS4 Trigger View Client
   ------------------------

Monitored Services (Trigger Registrations)

1) /wsrf/services/DefaultIndexService

TriggerID:      546aae00-418b-11dd-a5ea-ebfac2dfbbee
TRIGGER NAME:   Default Trigger Name
MATCHING RULE:  count(//*[local-name()='Entry'])&lt;1
ACTION SCRIPT:  trigger-action-default
TRIGGER STATUS: disabled
        </screen>
        <para>This gives us some important information:</para>
<itemizedlist>
<listitem><para>a shorthand reference to the service being monitored (the same one we specified in the <computeroutput>mds-trigger-create</computeroutput> command</para></listitem>
<listitem><para>the newly-created Trigger ID (which we will use in future requests to the Trigger Service)</para></listitem>
<listitem><para>the matching rule (an XPath query that returns true if the number of Index Service entries is less than one)</para></listitem>
<listitem><para>the trigger action (if the condition specified in the matching rule is met, then the trigger will run the command mapped to the name <computeroutput>trigger-action-default</computeroutput> in the trigger service's jndi-config.xml file).  This is a script that will append a line to the file <filename>$GLOBUS_LOCATION/trigger_service_base_action_log</filename>.</para></listitem>
<listitem><para>Most importantly, the trigger status is <computeroutput>disabled</computeroutput>, which means that the matching rule will not be evaluated, nor will the trigger action be run.</para></listitem>
</itemizedlist>
</listitem>
      <listitem><para>The <computeroutput>mds-trigger-edit</computeroutput> command is used to change the trigger's properties (its matching rule, action, enabled/disabled status, etc.).  The syntax is: </para></listitem>
        <screen>mds-trigger-edit -b baseURL [TriggerID] [Parameter="Value"]</screen>
<para>Let's enable this trigger.  By enabling/activating the trigger, we turn it "on", meaning that it will take the Matching Rule and evaluate
          this against incoming aggregator data from our monitored service (the Default Index Service).</para>
        <screen>mds-trigger-edit -b https://127.0.0.1:8443/wsrf/services \
      546aae00-418b-11dd-a5ea-ebfac2dfbbee TriggerStatus=enabled</screen>
        <para>Now that this trigger is "enabled", we have an active trigger that is evaluating data.  You may notice this in the service container logs
          if it is running in "debug" mode (You can allow "debug" information by uncommenting: <computeroutput>log4j.category.org.globus.mds.trigger=DEBUG</computeroutput>  
          in your <computeroutput>$GLOBUS_LOCATION/container-log4j.properties</computeroutput> file). However, in a default Globus setup, the Matching Rule for this trigger always evaluates to false, so the trigger will not fire.  (The action associated with this trigger appends a line to the log file <computeroutput>$GLOBUS_LOCATION/trigger_service_base_action_log</computeroutput>.  You can verify that the trigger is not firing by checking that the file doesn't exist (or that if it does exist, that it hasn't been appended to recently).</para>
<para>Let's change our Matching Rule so that the trigger will evaluate to "true" and cause the trigger to fire.</para>
        <screen>mds-trigger-edit -b https://127.0.0.1:8443/wsrf/services \
             546aae00-418b-11dd-a5ea-ebfac2dfbbee \
             MatchingRule="count(//*[local-name()='Entry'])&gt;0"
</screen>
        <para>Typing <computeroutput>mds-trigger-view -b https://127.0.0.1:8443/wsrf/services</computeroutput> will summarize what we've done:</para>
        <screen>
   MDS4 Trigger View Client
   ------------------------

Monitored Services (Trigger Registrations)

1) /wsrf/services/DefaultIndexService

TriggerID:      546aae00-418b-11dd-a5ea-ebfac2dfbbee
TRIGGER NAME:   Default Trigger Name
MATCHING RULE:  count(//*[local-name()='Entry'])&gt;0
ACTION SCRIPT:  trigger-action-default
TRIGGER STATUS: enabled
</screen>
      </listitem>
    </orderedlist>
    
<para>To view more details about this particular trigger, type: <screen>mds-trigger-view -b https://127.0.0.1:8443/wsrf/services \
        546aae00-418b-11dd-a5ea-ebfac2dfbbee</screen></para>
    <screen>
   MDS4 Trigger View Client
   ------------------------

----Detailed Trigger Information----------------------------

MONITORED SERVICE:  https://127.0.0.1:8443/wsrf/services/DefaultIndexService
TriggerID:          546aae00-418b-11dd-a5ea-ebfac2dfbbee
TRIGGER NAME:       Default Trigger Name

MATCHING RULE:      count(//*[local-name()='Entry'])&gt;0
ACTION SCRIPT:      trigger-action-default
TRIGGER STATUS:     enabled

ENABLE BOOLEAN:                         true
ACTION SCRIPT INPUT FULL ORIGINAL:      true
ACTION SCRIPT INPUT XPATH QUERY RESULT: true

MINIMUM FIRING INTERVAL: 20
MINIMUM MATCH TIME:      30

START TIME:            N/A
END TIME:              N/A

INVALIDITY START TIME: N/A
INVALIDITY END TIME:   N/A

----Non-editable stats--------------------------------------
RULE LAST CHECKED AT: 2008-06-23 19:09:18 PDT-0700
CONDITION TRUE SINCE: 2008-06-23 19:03:48 PDT-0700
ACTION FIRED AT:      2008-06-23 19:09:18 PDT-0700
------------------------------------------------------------
</screen>
<para>Now after a minute or so, you will notice that the trigger has fired successfully.  You can verify this by checking the contents of the log file we created in our action script from above:</para>
      <screen>more $GLOBUS_LOCATION/trigger_service_base_action_log</screen>
      <para>This should look similar to the following</para>
      <screen>
Trigger Service Entry: Sun Jun 17 14:45:26 CDT 2007
Trigger Service Entry: Sun Jun 17 14:45:56 CDT 2007
Trigger Service Entry: Sun Jun 17 14:46:26 CDT 2007
Trigger Service Entry: Sun Jun 17 14:46:56 CDT 2007
      </screen>
      <para>There is a 30 second interval that we specified in our aggregator configuration file above.  This should probably be lengthened eventually so that you don't have the triggers going off so often.</para>

  </section>
 
      <section id="trigger-howto-basic-congrats"> <title>Congratulations!</title>

<para>You have now successfully setup, configured, registered, created, edited and tested a trigger from scratch!</para>
<para><emphasis>Next Steps:</emphasis> Check out the documentation and create more triggers to perform actions more relevant to your own objectives. 
  Experiment with the XPath queries to expand the possibilities of what you can use them for. If you have questions, feel free to [contact us]!</para>
      </section>
  
  <section><title>Troubleshooting</title>
<para>For MDS Trigger troubleshooting information, see <olink targetdoc="triggerUser" targetptr="trigger-troubleshooting"/>.</para>
  </section>
</section>
 </chapter>
