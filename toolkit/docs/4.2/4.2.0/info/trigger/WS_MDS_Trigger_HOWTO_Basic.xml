<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="trigger-howto-basic">
        <chapterinfo>
            <date>(version 2.0) November 2006</date>
        </chapterinfo>
        <title>Trigger Service - Easy HowTo </title>
  <indexterm type="trigger"><primary>tutorial</primary><secondary>basic</secondary></indexterm>
  <indexterm type="trigger-howto"><primary>tutorial</primary><secondary>basic</secondary></indexterm>
  <section id="trigger-howto-basic-purpose"><title>Purpose</title>
  <para>The purpose of this Easy HowTo is to introduce the GT4/WS MDS component known as the Trigger, 
      as well as to provide an example of setting one up successfully.  The current GT <replaceable role="entity">version</replaceable> documentation provides a basic reference and will be updated as features are added, 
    but for those of you who would like to get a simple trigger working without going through all of the documentation, this document is for you.</para>
    
    <para>We will be creating a simple trigger from scratch, and setting it up completely. To get the basic idea of how this is done, we will only use elements available in the default 
      GT4 installation to show you how to use triggers.</para>
  </section>
  <section id="trigger-howto-basic-prereq"><title>Prerequisites</title>
  <itemizedlist>
    <listitem><para>Basic GT4 installation (one of the following):</para>
      <itemizedlist>
      <listitem><para>GT 4.1.3+ Installation (including Java WS Core and WS MDS Aggregator Framework).</para>
        <note><para>GT 4.1.3+ is simply a preview to some of the upcoming GT 4.2 functionality.  The trigger state is still highly developmental.</para></note>
      </listitem>
        </itemizedlist>
    </listitem>
    <listitem><para>Basic <ulink url="http://www.w3.org/TR/xpath">XML Path Language (XPath)</ulink></para></listitem>
  </itemizedlist>
  </section>
  
  <section id="trigger-howto-basic-intro"><title>Introduction</title>
  
  <para>Triggers collect information from information providers using the same mechanism as the Index service (within the context of the common aggregator
      framework); but once that data is collected, we can configure a <emphasis role="strong">trigger</emphasis> to perform an action based on that data.</para>
    <para>Once the conditions are prepared, and the collected data is evaluated, the data will be compared to the conditions and, if there's a match, the trigger will set an action to occur.</para>
    <para>Learning to use triggers involves understanding what you are doing conceptually and knowing how to configure everything properly. 
      Below we'll go through an example trigger configuration file and discuss some steps that should occur in an example setup. 
      Generally when setting up a trigger you should follow the steps outlined in this tutorial.</para>
    <para>First let's explain what we are doing. We're going to set up a trigger to monitor the Default Index Service, and we'll use it to act as a function of how many Entries are in the Default Index Service.  
      Based on the number of entries, we can set the trigger to execute an action. When we want an action to occur, our trigger will execute a script that will create a [log] file in our $GLOBUS_LOCATION directory 
      [and every 30 seconds that the new entry is still registered, we'll add a notification to this log file].  This is not necessarily a practical example of how you would use a trigger, but it's simple enough to 
      give you a basic idea of how to set one up. So let's get started!</para>
      </section>
      
  <section id="trigger-howto-basic-tutorial"><title>Trigger Tutorial</title>
    <section id="trigger-howto-basic-config"><title>Trigger Registration Configuration</title>
      <para>The first thing we do is to configure the trigger service to collect some information (we will later configure the trigger service to periodically run a query on that information and, based on the results of the query, take some action).  In this example, we will configure the trigger service to collect infoformation by querying the Default Index Service running in the same Globus container for the entire contents of its index.</para>
<para>The Trigger Service uses the <olink targedoc="aggregator">Aggregator Framework</olink> to configure its sources of information.  Aggregator sources are configured through a service interface; we will create a
file specifying configuration parameters and then run the <command><olink targetptr="mds-servicegroup-add">mds-servicegroup-add</olink></command> command to read that configuration file and register the configuration information with the Trigger Service.  We will start with the example trigger registration file included with Globus distributions in <command>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</command></para>
<screen>
  &lt;DefaultServiceGroupEPR&gt;
    &lt;wsa:Address&gt;<strong>https://localhost:8443/wsrf/services/TriggerRegistrationService</strong>&lt;/wsa:Address&gt;
  &lt;/DefaultServiceGroupEPR&gt;
  &lt;ServiceGroupRegistrationParameters
      xmlns="http://mds.globus.org/servicegroup/client"
      xmlns:wsa="http://www.w3.org/2005/08/addressing"
      xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    &lt;RegistrantEPR
        xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
      &lt;wsa:Address&gt;<strong>https://localhost:8443/wsrf/services/DefaultIndexService</strong>&lt;/wsa:Address&gt;
    &lt;/RegistrantEPR&gt;
    &lt;RefreshIntervalSecs&gt;600&lt;/RefreshIntervalSecs&gt;
    &lt;Content xsi:type="agg:AggregatorContent"
             xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;agg:GetResourcePropertyPollType 
             xmlns:wssg="http://docs.oasis-open.org/wsrf/sg-2"&gt;
          &lt;agg:PollIntervalMillis&gt;30000&lt;/agg:PollIntervalMillis&gt;
          &lt;agg:ResourcePropertyName&gt;wssg:Entry&lt;/agg:ResourcePropertyName&gt;
        &lt;/agg:GetResourcePropertyPollType&gt;
      &lt;/agg:AggregatorConfig&gt;
      &lt;agg:AggregatorData /&gt;
    &lt;/Content&gt;
  &lt;/ServiceGroupRegistrationParameters&gt;
&lt;/ServiceGroupRegistrations&gt;
</screen>
<para>For this example, the only items in the registration file that you
might need to edit are the <strong>DefaultServiceGroupEPR</strong> (the
address of your trigger registration service) and the <strong>RegistrantEPR</strong> (the address of the resource you want to monitor; in this case, your Default Index Service).  If these look correct (i.e., if you're running your Globus
container using the default port and security parameters), then you do not need
to edit this file at all.</para>
    </section>
    <section id="trigger-howto-basic-config-action-script"><title>Trigger Action Script Configuration</title> 
      <para> We have the trigger set to execute an action whenever our conditions are met, but we need to determine what those actions will be.  
        What do we want the trigger to do if it's going to fire?  We do this by setting up a Trigger Action Script.</para>
      
      <para>Here we write the action script; we'll make it very simple:</para>
      
      <screen>
#!/bin/sh

DATE=`date`

echo "Trigger Service Entry: $DATE" &gt;&gt; $GLOBUS_LOCATION/trigger_service_base_action_log

cat &lt;&lt;EOF
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;OurActionScriptOutput&gt;
  &lt;OurDataDetected&gt;true&lt;/OurDataDetected&gt;
&lt;/OurActionScriptOutput&gt;
EOF
      </screen>
      <para><emphasis>Note: This example script should be provided if your have a recent installation, however if not:</emphasis></para>
      
      <para>Save this file as: <filename>$GLOBUS_LOCATION/libexec/trigger/trigger-action-default.sh</filename></para>
      
      <important><para>Be sure that this file is executable! (e.g. chmod u+x trigger-action-default.sh)</para></important>
    </section>
    
    <section><title>Start the container</title>
      
      <para><emphasis>Now start the container:</emphasis> (Note: the <computeroutput>-p</computeroutput> option allows you to specify a port.  We have been using 8444 in this example.  
        You may also specify <computeroutput>-nosec</computeroutput> if you want to ignore security.)</para>
      <screen>$GLOBUS_LOCATION/bin/globus-start-container -p 8444</screen>
      <para>You may also need to set up your environment variables, and/or generate a new proxy certificate: </para>
      
<screen id="info-trigger-exampletest">
source $GLOBUS_LOCATION/etc/globus-user-env.sh
$GLOBUS_LOCATION/bin/grid-proxy-init -verify -debug
</screen>
      <para>But before we create the trigger, let's just quickly test how many Entries are being registered by the Index Service. Type the following command in one line:</para>
      <screen>$GLOBUS_LOCATION/bin/wsrf-query -s https://127.0.0.1:8444/wsrf/services/DefaultIndexService 'count(//*[local-name()="Entry"])'</screen>
      <para>On our setup we get: <emphasis>3</emphasis>.</para>
    </section>
    
    <section><title>Create Trigger Registration</title>
    
<para>The registration step is necessary to connect the information source with the Trigger Registration Service (an aggregator service). We configured this above.  
  This step provides access to the information source data so that the trigger can then make this information available and act on it accordingly.</para>
    <para>Once the configurations have been properly set, it's easy to register them with the Trigger Registration Service.</para>
      <para>We will create the trigger registration by running <emphasis><olink targetdoc="aggregatorPI" targetptr="mds-servicegroup-add"/></emphasis> 
      to perform the registrations specified in the configuration file (that we configured above).</para>
    <para>Run the following command:</para>
    <screen>$GLOBUS_LOCATION/bin/mds-servicegroup-add $GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</screen>
    
<important><para>Be sure the above command is on one line.</para></important>

<para>If everything went well, you should get something like:</para>
    <screen>Processing configuration file...
INFO: Processed 1 registration entries
INFO: Successfully registered https://127.0.0.1:8444/wsrf/services/DefaultIndexService \
to servicegroup at https://127.0.0.1:8444/wsrf/services/TriggerRegistrationService
    </screen>
    </section>
    
  <section><title>Create Trigger</title>
    <para>Now that we have created a trigger registration, and we have a service that will be monitored, we're ready to create the actual trigger whose parameters will 
      indicate what information we will be evaluating against any incoming data.  It will also specify and execute the action script that we've created.  
      All trigger creation and management is performed via clients.</para>
    <para>In this HowTo, we will be using the command-line clients that are provided with your installation.  
      (There is also a web interface, but setting that up will be discussed in an upcoming HowTo).  The web interface is easier to use and more visually appealing than the command-line clients!)</para>
    <orderedlist numeration="loweralpha">
      <listitem>
        <para>We must configure the [command-line] clients according to your individual setup:</para>
        <screen>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/client-config-settings</screen>
        <para>This file should already be included in your install. It basically looks like this:</para>
        <screen>DefaultServiceAddress: https://127.0.0.1:8444/wsrf/services/</screen>
        <para>The most important item to edit is the first line.  Be sure that the host service address corresponds to your deployed container.  
          When you start the container a list of service addresses will indicate what you should be using for this parameter.</para>
      </listitem>
      <listitem>
        <para>Now we create the trigger</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-create https://127.0.0.1:8444/wsrf/services/DefaultIndexService</screen>
        <para>The client should produce output similar to the following:</para>
        <screen>
WS MDS Trigger Creation Client
  ----------------------------
  
  **     Service URL: https://127.0.0.1:8444/wsrf/services/DefaultIndexService
  
  Checking current monitored services (Trigger Registrations)...
  OK
  --&gt; Trigger has been created.
</screen>
      </listitem>
      <listitem>
        <para>Test the trigger creation by typing the following command:</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-view</screen>
        <para>This command should produce output similar to the following:</para>
        <screen>
          WS MDS Trigger View Client
          ------------------------
          
          Monitored Services (Trigger Registrations)
          
          1) /wsrf/services/DefaultIndexService
          
          TriggerID:      955e9d90-61d0-11dc-897d-dc2058e0ce31
          TRIGGER NAME:   Default Trigger Name
          MATCHING RULE:  count(//*[local-name()='Entry'])&lt;1
          ACTION SCRIPT:  trigger-action-default.sh
          TRIGGER STATUS: disabled
          
        </screen>
        <para>This output tells us that there is one trigger registration (with the DefaultIndexService) and that the trigger we have just created is called "Default Trigger Name", 
          we see the EPR Resource Key which we will refer to as the "Trigger ID" and this TriggerID is required for editing the trigger, we see a Matching Rule 
          (which is an XPath query against the monitored service, or the DefaultIndexService), we see the name of the trigger action script (located in 
          <filename>$GLOBUS_LOCATION/libexec/trigger/</filename>), and we see that the trigger is DISABLED.  This means that the trigger will not fire, nor will it try to evaluate any data.  
          Basically, this is an inactive trigger.</para>
      </listitem>
      <listitem>
        <para>In order to make things happen you must enable the trigger.  This is done with the <computeroutput>mds-trigger-edit</computeroutput> command.  The syntax is: </para>
        <screen>mds-trigger-edit [TriggerID] [Parameter="Value"]</screen>
        <para>(For a list of possible parameters, see the "Trigger Service Resource Properties" section of the Public Interface Guide)</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-edit 955e9d90-61d0-11dc-897d-dc2058e0ce31 TriggerName="NewName"</screen>
        <para>This will output something similar to:</para>
        <screen>
WS MDS Trigger Edit Client
------------------------

Note: currently, only one parameter may be edited at a time.
** Edit Query: TriggerName=NewName

Trigger Parameter: TriggerName
Trigger Parameter Value: NewName

Setting TriggerName to NewName...
Done.
        </screen>
        <para>Changing the name of the trigger is completely up to you.  It's not really important except if you're managing tons of triggers.  
          But let's enable this trigger.  By enabling/activating the trigger, we turn it "on", meaning that it will take the Matching Rule and evaluate
          this against incoming aggregator data from our monitored service (the Default Index Service).</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-edit 955e9d90-61d0-11dc-897d-dc2058e0ce31 TriggerStatus="enabled"</screen>
        <para>When this trigger is "enabled", we now have an active trigger that is actively evaluating data.  You may notice this in the service container screen 
          if you're in "debug" mode (You can allow "debug" information by uncommenting: <computeroutput>log4j.category.org.globus.mds.trigger=DEBUG</computeroutput>  
          in your <computeroutput>$GLOBUS_LOCATION/container-log4j.properties</computeroutput> file).  But our trigger will not fire since the Matching Rule evaluates to false.  
          There is more than one entry in the Default Index Service, so when we use our Matching Rule, a false evaluation will not allow the trigger to fire.  
          So let's change our Matching Rule so that the trigger will evaluate to "true", thus firing the trigger.</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-edit 955e9d90-61d0-11dc-897d-dc2058e0ce31 MatchingRule="count(//*[local-name()='Entry'])&gt;1"</screen>
        <para>Typing <computeroutput>$GLOBUS_LOCATION/bin/mds-trigger-view</computeroutput> will basically summarize what we've done:</para>
        <screen>
Monitored Services (Trigger Registrations)

1) /wsrf/services/DefaultIndexService

TriggerID:      955e9d90-61d0-11dc-897d-dc2058e0ce31
TRIGGER NAME:   New Name
MATCHING RULE:  count(//*[local-name()='Entry'])>1
ACTION SCRIPT:  trigger-action-default.sh
TRIGGER STATUS: enabled
</screen>
      </listitem>
    </orderedlist>
    
<para>To view more details about this particular trigger, type: <screen>$GLOBUS_LOCATION/bin/mds-trigger-view 955e9d90-61d0-11dc-897d-dc2058e0ce31</screen></para>
<para>Syntax: mds-trigger-view [TriggerID]</para>
    <screen>
WS MDS Trigger View Client
 ------------------------

----Detailed Trigger Information----------------------------

MONITORED SERVICE:  https://127.0.0.1:8444/wsrf/services/DefaultIndexService
TriggerID:          955e9d90-61d0-11dc-897d-dc2058e0ce31
TRIGGER NAME:       New Name

MATCHING RULE:      count(//*[local-name()='Entry'])>1
ACTION SCRIPT:      trigger-action-default.sh
TRIGGER STATUS:     enabled

ENABLE BOOLEAN:                         true
ACTION SCRIPT INPUT FULL ORIGINAL:      true
ACTION SCRIPT INPUT XPATH QUERY RESULT: true

MINIMUM FIRING INTERVAL: 20
MINIMUM MATCH TIME:      30

START TIME:            N/A
END TIME:              N/A

INVALIDITY START TIME: N/A
INVALIDITY END TIME:   N/A

----Non-editable stats--------------------------------------
RULE LAST CHECKED AT: N/A
CONDITION TRUE SINCE: N/A
ACTION FIRED AT:      N/A
------------------------------------------------------------

</screen>
<para>Now after a minute or so, you will notice that the trigger has fired successfully.  You can verify this by checking the contents of the log file we created in our action script from above:</para>
      <screen>more $GLOBUS_LOCATION/trigger_service_base_action_log</screen>
      <para>This should look similar to the following</para>
      <screen>
Trigger Service Entry: Sun Jun 17 14:45:26 CDT 2007
Trigger Service Entry: Sun Jun 17 14:45:56 CDT 2007
Trigger Service Entry: Sun Jun 17 14:46:26 CDT 2007
Trigger Service Entry: Sun Jun 17 14:46:56 CDT 2007
      </screen>
      <para>There is a 30 second interval that we specified in our aggregator configuration file above.  This should probably be lengthened eventually so that you don't have the triggers going off so often.</para>

  </section>
 
  </section>
      <section id="trigger-howto-basic-congrats"> <title>Congratulations!</title>

<para>You have now successfully setup, configured, registered, created, edited and tested a trigger from scratch!</para>
<para><emphasis>Next Steps:</emphasis> Check out the documentation and create more triggers to perform actions more relevant to your own objectives. 
  Experiment with the XPath queries to expand the possibilities of what you can use them for. If you have questions, feel free to [contact us]!</para>
  <para>Please keep in mind that this is in a highly developmental stage, so there may be errors, or unpredictable behavior.  Feel free to let us know what works, 
    what doesn't, and your general experiences with the trigger service.</para>
      </section>
  
  <section><title>Troubleshooting</title>
<para>For MDS Trigger troubleshooting information, see <olink targetdoc="triggerUser" targetptr="trigger-troubleshooting"/>.</para>
  </section>
 </chapter>
