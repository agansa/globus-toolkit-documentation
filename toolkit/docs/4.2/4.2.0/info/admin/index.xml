<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % xinclude SYSTEM "../../xinclude.mod" >
%xinclude;

]>
<book id="mdsAdmin">
  <title>GT <replaceable role="entity">version</replaceable> WS Monitoring and Discovery Services (WS MDS)
    : System Administrator's Guide</title>
  <titleabbrev>WS MDS System Administrator's Guide</titleabbrev>
  <bookinfo id="mds-admin-introduction">
    <abstract>
      <title>Introduction</title>
      <para>This guide contains advanced configuration information for system administrators working
        with MDS. It provides references to information on procedures typically performed by system
        administrators, including installation, configuring, deploying, and testing the
        installation.</para>
      <para>
        <important>
          <simpara> This information is in addition to the basic Globus Toolkit prerequisite,
            overview, installation, security configuration instructions in the <olink
              targetdoc="gtadmin"/>. Read through this guide before continuing!</simpara>
        </important>
      </para>
    </abstract>
  </bookinfo>
  <index type="mds-howto"><title>MDS Admin Howtos</title></index>
  <chapter id="mds-admin-installing">
    <title>Building and Installing</title>
    <indexterm type="mds"><primary>building</primary></indexterm>
    <indexterm type="mds"><primary>installing</primary></indexterm>
    <indexterm type="mds-howto"><primary>building</primary></indexterm>
    <indexterm type="mds-howto"><primary>installing</primary></indexterm>
    <para>MDS is built and installed as part of a default GT <replaceable role="entity"
      >version</replaceable> installation. See <olink targetdoc="gtadmin"/> for more
    information.</para>
  </chapter>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="MDS_Interface_Config_Frag.xml"/>
  <chapter id="mds-admin-deploying">
    <title>Deploying</title>
    <indexterm type="mds"><primary>deploying</primary></indexterm>
    <indexterm type="mds-howto"><primary>deploying</primary></indexterm>
    <para>Because MDS is built on top of Java WS Core, make sure you are familiar with the
      deployment information <olink targetdoc="javawscoreAdmin"
        targetptr="javawscore-admin-deploying">here</olink>.</para>
    <section id="mds-admin-deploying-vo">
      <title>Deploying MDS into a Virtual Organization (VO)</title>
      <indexterm type="mds"><primary>deploying</primary><secondary>in a Virtual Organization (VO)</secondary></indexterm>
    <indexterm type="mds-howto"><primary>deploying</primary><secondary>in a Virtual Organization (VO)</secondary></indexterm>
      <para>MDS should be deployed in a distributed fashion. Some components should be deployed
        central to a VO, while others should be deployed on individual resources. This document is a
        suggested deployment, and is not the only way in which MDS components can be deployed.</para>
      <section>
        <title>What to deploy where</title>
        <para>The following diagrams outlines a VO-wide deployment:</para>
        <para>[FIXME better diagram]</para>
      </section>
      <section>
        <title>Central to the VO</title>
        <orderedlist>
          <listitem>
            <para>The following steps are VO-wide, although the services deployed do not need to be
              run on the same host or be at the same location. <itemizedlist>
                <listitem>
                  <para>Deploy an index service central to the VO to collect information about all
                    of the resources in the VO.</para>
                </listitem>
                <listitem>
                  <para>If your VO is part of a larger VO, register the central index service of
                    your VO to the central index of the larger VO.</para>
                </listitem>
                <listitem>
                  <para>Install the WebMDS servlet to show the contents of the central index service
                    in a web browser.</para>
                </listitem>
                <listitem>
                  <para>Deploy a Trigger Service to notify interested parties about changes in the
                    status of the VO.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
          <listitem>
            <para>On each GRAM4 installation <itemizedlist>
                <listitem>
                  <para>Configure cluster monitoring at each GRAM installation to publish
                    information about each resource. [FIXME more details about how schedulers do not
                    need config?]</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </orderedlist>
      </section>
    </section>
  </chapter>
  <chapter id="mds-admin-advanced">
    <title>Advanced Configuration</title>
    <para>Now that you have a basic hierarchy of default Index Services monitoring the other GT
      services, you will most likely want to monitor other resources from your Grid. The following
      sections show how to register WSRF services as well as other non-WSRF resources.</para>
    <section id="mds-admin-register-wsrf">
      <title>Registering a WSRF service to an Index Service</title>
      <indexterm type="mds"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary></indexterm>
    <indexterm type="mds-howto"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary></indexterm>
      <para>You need the following before you register a WSRF resource with an Index Service:</para>
      <itemizedlist>
        <listitem>
          <para>Decide how you want to get information into the Index Service. The following
            correspond to common Java WS Core user commands (in fact, you can use those commands
            ahead of time to 'test' what information will end up in the Index Service): <itemizedlist>
              <listitem><indexterm type="mds"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>request single resource property</tertiary></indexterm>
    <indexterm type="mds-howto"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>request single resource property</tertiary></indexterm>
                <para>Request single resource property: <command><olink targetdoc="javawscorePI" targetptr="wsrf-get-property">wsrf-get-property</olink></command></para>
              </listitem>
              <listitem><indexterm type="mds"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>request multiple resource properties</tertiary></indexterm>
    <indexterm type="mds-howto"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>request multiple resource properties</tertiary></indexterm>
                <para>Request one or more resource properties: <command>
                  <olink targetdoc="javawscorePI" targetptr="wsrf-get-properties">wsrf-get-properties</olink></command></para>
              </listitem>
              <listitem><indexterm type="mds"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>query resource properties via XPath</tertiary></indexterm>
    <indexterm type="mds-howto"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>request single resource properties via XPath</tertiary></indexterm>
                <para>Query resource properties with XPath: <command><olink targetdoc="javawscorePI" targetptr="wsrf-query">wsrf-query</olink></command> or <command><olink targetdoc="javawscorePI" targetptr="globus-xpath-query">globus-xpath-query</olink></command></para>
              </listitem>
              <listitem><indexterm type="mds"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>subscribe to a Topic</tertiary></indexterm>
    <indexterm type="mds-howto"><primary>registering to an Index Service</primary><secondary>WSRF service</secondary><tertiary>subscribe to a Topic</tertiary></indexterm>
                <para>Subscribe to a WSRF Topic: <command><olink targetdoc="javawscorePI" targetptr="wsn-subscribe">wsn-subscribe</olink></command></para>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>Know the <indexterm type="mds"><primary>EPR</primary></indexterm>EPR of the Index Service you want to register to. This can be seen in the
            container output at startup of the container on the index host, and will look something
            like this: <filename>https://myhost:8443/wsrf/services/DefaultIndexService</filename>,
            (from a default installation of GT version)</para>
        </listitem>
        <listitem>
          <para>Know the EPR to the resource and the names of the resource properties you want to
            advertise (basically the same information you would use for the corresponding user
            command).</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>If the WSRF service does not advertise the data you want as RPs, you need to use the
          instructions for <olink targetdoc="mdsAdmin"
            targetptr="mds-admin-register-custom-usefulrp"/>.</para>
      </note>
      <para>For more information, see the documentation for the the <olink targetdoc="aggregatorPI"
          targetptr="mds-servicegroup-add"/> tool.</para>
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../aggregator/sources/aggregator_sources_general_config.xml"/>
      <section id="mds-admin-register-wsrf-content-block">
        <title>Options for the <computeroutput>Content</computeroutput> block</title>
        <indexterm type="mds"><primary>configuration file, registering</primary><secondary>Content block options</secondary></indexterm>
        <section id="mds-admin-register-wsrf-single-rp">
          <title>Request single resource property (GetResourcePropertyPollType)</title>
          <indexterm type="mds"><primary>configuration file, registering</primary><secondary>Content block options</secondary><tertiary>GetResourcePropertyPollType</tertiary></indexterm>
          <screen>&lt;Content 
    xsi:type="agg:AggregatorContent"
    xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
  &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
    &lt;agg:GetResourcePropertyPollType&gt;
         <emphasis role="strong">&lt;agg:PollIntervalMillis>interval_in_ms&lt;/agg:PollIntervalMillis&gt;</emphasis>
         <emphasis role="strong">&lt;agg:ResourcePropertyName>rp_namespace:rp_localname&lt;/agg:ResourcePropertyName&gt;</emphasis>
    &lt;/agg:GetResourcePropertyPollType&gt;
  &lt;/agg:AggregatorConfig&gt; 
  &lt;agg:AggregatorData/&gt;
&lt;/Content&gt;
</screen>
          <para>where: <variablelist>
              <varlistentry>
                <term><computeroutput>PollIntervalMillis</computeroutput></term>
                <listitem>
                  <para>is the poll refresh period in milliseconds.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><computeroutput>ResourcePropertyName</computeroutput></term>
                <listitem>
                  <para>is the QName of the resource property you want to poll.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </section>
        <section id="mds-admin-register-wsrf-multi-rps">
          <title>Request one or more resource properties (GetMultipleResourcePropertiesPollType)</title>
          <indexterm type="mds"><primary>configuration file, registering</primary><secondary>Content block options</secondary><tertiary>GetMultipleResourcePropertiesPollType</tertiary></indexterm>
          <screen>&lt;Content
    xmlns:agg="http://mds.globus.org/aggregator/types"
    xsi:type="agg:AggregatorContent"> &lt;agg:AggregatorConfig
    xsi:type="agg:AggregatorConfig">
    &lt;agg:GetMultipleResourcePropertiesPollType>
    <emphasis role="strong">&lt;agg:PollIntervalMillis>interval_in_ms&lt;/agg:PollIntervalMillis></emphasis>
    <emphasis role="strong">&lt;agg:ResourcePropertyNames>rp1_namespace:rp1_localname&lt;/agg:ResourcePropertyNames>
    &lt;agg:ResourcePropertyNames>rp2_namespace:rp3_localname&lt;/agg:ResourcePropertyNames>
    &lt;agg:ResourcePropertyNames>rp3_namespace:rp3_localname&lt;/agg:ResourcePropertyNames></emphasis>
    &lt;/agg:GetMultipleResourcePropertiesPollType>
    &lt;/agg:AggregatorConfig> 
    &lt;agg:AggregatorData/>
&lt;/Content>
        </screen>
          <para>where: <variablelist>
              <varlistentry>
                <term><computeroutput>PollIntervalMillis</computeroutput></term>
                <listitem>
                  <para>is the poll refresh period in milliseconds.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><computeroutput>ResourcePropertyNames</computeroutput></term>
                <listitem>
                  <para>are the QNames of the resource properties to poll for. There is no limit on
                    the number of ResourcePropertyNames that may be specified.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </section>
        <section id="mds-admin-register-wsrf-query">
          <title>Query resource properties with XPath (QueryResourcePropertiesPollType)</title>
          <indexterm type="mds"><primary>configuration file, registering</primary><secondary>Content block options</secondary><tertiary>QueryResourcePropertiesPollType</tertiary></indexterm>
          <para>If a QueryResourcePropertiesPollType block is used, QueryAggregatorSource will
            request that a query be executed against the Resource Property Set of the remote
            resource. In the GT4 implementation of WSRF Core, the only query language that is
            supported is XPath. The block has this form:</para>
          <screen>&lt;Content 
    xmlns:agg="http://mds.globus.org/aggregator/types"
    xsi:type="agg:AggregatorContent"> 
    &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig">
    &lt;agg:QueryResourcePropertiesPollType>
         <emphasis role="strong">&lt;agg:PollIntervalMillis>interval_in_ms&lt;/agg:PollIntervalMillis>
         &lt;agg:QueryExpressionDialect="dialect">Query Expression&lt;/agg:QueryExpression></emphasis>
    &lt;/agg:QueryResourcePropertiesPollType>
    &lt;/agg:AggregatorConfig> 
    &lt;agg:AggregatorData/>
&lt;/Content>
        </screen>
          <para>where: <variablelist>
              <varlistentry>
                <term><computeroutput>PollIntervalMillis</computeroutput></term>
                <listitem>
                  <para>is the poll refresh period in milliseconds.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><computeroutput>QueryExpression</computeroutput></term>
                <listitem>
                  <para>is an <computeroutput>xsd:any</computeroutput> element - the <computeroutput
                      >Dialect</computeroutput> attribute specifies the dialect of the query
                    expression.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </section>
        <section id="mds-admin-register-wsrf-subscribe">
          <title>Subscribe to a WSRF Topic (AggregatorSubscriptionType)</title>
          <indexterm type="mds"><primary>configuration file, registering</primary><secondary>Content block options</secondary><tertiary>AggregatorSubscriptionType</tertiary></indexterm>
          <para>The configuration block for SubscriptionAggregatorSource looks like this:</para>
          <screen>&lt;Content
   xmlns:agg="http://mds.globus.org/aggregator/types"
   xsi:type="agg:AggregatorContent">
   &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig">
       &lt;agg:AggregatorSubscriptionType>
           <emphasis role="strong">&lt;TopicExpression Dialect="dialect">
           Topic Expression
           &lt;/TopicExpression></emphasis>
           &lt;Precondition Dialect="dialect">
           Precondition
           &lt;/Precondition>
           &lt;Selector Dialect="dialect">
           Selector
           &lt;/Selector>
           &lt;SubscriptionPolicy>
           Subscription Policy
           &lt;/SubscriptionPolicy>
           &lt;InitialTerminationTime>time&lt;/InitialTerminationTime>
       &lt;/agg:AggregatorSubscriptionType>
   &lt;/agg:AggregatorConfig>
   &lt;agg:AggregatorData/>
&lt;/Content>
        </screen>
          <para>where: <variablelist>
              <varlistentry>
                <term><computeroutput>TopicExpression</computeroutput></term>
                <listitem>
                  <para>is the only required parameter; it specifies the topic expression to use in
                    the subscription request.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </section>
      </section>
    </section>
    <section id="mds-admin-advanced-providers">
      <title>Registering any Grid resource via Information Providers</title>
       <indexterm type="mds"><primary>registering to an Index Service</primary><secondary>any Grid resource</secondary></indexterm>
    <indexterm type="mds-howto"><primary>registering to an Index Service</primary><secondary>any Grid resource</secondary></indexterm>
      <para>There are other types of resources in a Grid you may want to register: a non-WSRF
        resource (anything other than a service that publishes resource properties; for example, a web server or a file system) or a WSRF service that has the data you
        want but does not publish it as resource properties.</para>
      <important>
        <para>Any time you want to register a resource but cannot directly access resource
          properties, you need an <olink targetdoc="mdsAdmin"
            targetptr="mds-admin-advanced-providers">information provider</olink> to interface
          between that resource and WS MDS.</para>
      </important>
      <para>As discussed in the <olink targetdoc="infoKey" targetptr="info-key-mds4-interfaces">MDS
      Key Concepts guide</olink>, <indexterm type="mds"><primary>information providers</primary></indexterm>information providers 
        are basically the link between what you
        want monitored and WS MDS. WS MDS comes with standard information providers to monitor clusters, queueing systems, some non-WSRF services, and other useful things.
        You can also write
        your own custom information providers for just about any kind of Grid resource you need to
        monitor.</para>
      <section id="mds-admin-register-agg-or-usefulrp">
        <title>Aggregator Framework vs UsefulRP</title>
        <para>There are two interfaces available for deploying information providers:  <command><olink targetdoc="usefulrp">UsefulRP</olink></command> and the <command><olink targetdoc="aggregatorSources" targetptr="aggregator-sources-execution">Execution Aggregator Source</olink></command>.</para>
<para>The UsefulRP framework can be used by any service that runs in a Globus container to create and advertise a resource property.  The service code makes a call to a UsefulRP Java method, which in turn reads a configuration file to determine how to generate the resource property (by executing a command, reading a file, calling a Java method, or some combination of those methods).  For a real-life example, the GRAM service uses UsefulRP to create and publish a resource property contaning information about the queues that it manages, then registers that resource property to the default Index server running in the same Globus container.  End-users can find that information by querying GRAM directly or by querying MDS.  Because the Index Service is a WSRF service that runs in the Globus container, it can also publish resource properties using UsefulRP; however, these will be published as separate resource properties rather than added to the same service group as the rest of the index information.</para>
<para>The Execution Aggregator Source is a mechanism for adding information to the resource property / service group used by the Index (or Trigger) service.  An Index or Trigger service configured to use the Execution Aggregator Source will execute a program periodically and update its service group with the output of that program.</para>
        <para>However, all a sysadmin typically needs to know about aggregator vs. usefulrp is that
          they require different methods of configuration (outlined in [a later section]). The
          following section lists available information providers that are based on both aggregator
          and usefulrp.</para>
      </section>
      <section id="mds-admin-advanced-providers-standard">
        <title>Default Information Providers</title>
        <indexterm type="mds"><primary>information providers</primary><secondary>default</secondary></indexterm>
        <para>The following list includes information providers available with a default
          installation of GT <replaceable role="entity">version</replaceable>:</para>
        <itemizedlist>
          <listitem>
            <para>UsefulRP-based Information Providers: Information providers are available for
              [Ganglia], [Hawkeye] and [Nagios]. They are based on UsefulRP and the GLUE 1.1 schema.
              For more information, see <olink targetptr="mds-admin-advanced-clusters"/>.</para>
          </listitem>
          <listitem>
            <para>Aggregator-based Information Providers: <itemizedlist>
                <listitem>
                  <para>[Web Check Information Provider] - This provider connects to a web server.
                    If the connection can successful be made the server is registered as alive,
                    otherwise it is down.</para>
                </listitem>
                <listitem>
                  <para>[Cert Check Information Provider] - This provider will monitor the life of a
                    remote certificate. It connects to an SSL TCP listener and obtains the
                    certificate from it. If then checks the cert for subject, start date, end data,
                    and email address. All of this information is put in the index if it is
                    successfully obtained.</para>
                </listitem>
                <listitem>
                  <para>[GridFTP Information Provider] - This provider connects to a GridFTP server,
                    reads its banner, and puts the banner in the Index Service. If the connection
                    cannot be made in 30 seconds, or some other error occurs the server is marked as
                    down.</para>
                </listitem>
                <listitem>
                  <para>[GKrellm Information Provider] - Monitors local resources and provides basic
                    system information for Unix systems.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>
      </section>
      <section id="mds-admin-advanced-providers-custom">
        <title>Configuring custom information providers</title>
        <!--  fixme - what about configuring an executing index service?  
          also, laura has some images that would go well around here somewhere-->
        <section id="mds-admin-register-custom-agg">
          <title>Configuring a custom information provider based on Aggregator</title>
          <indexterm type="mds"><primary>information providers</primary><secondary>configuring, Aggregator</secondary></indexterm>
          <para>The Aggregator Framework is the underlying foundation of the MDS services (Index,
            Trigger) and is what registers WSRF services to a DefaultIndexService. In this [method],
            an <emphasis>execution aggregator source</emphasis> information provider gathers
            arbitrary XML information by executing an external script or program (similar to how we
            set up the <olink targetdoc="mdsAdmin" targetptr="mds-admin-email-trigger">Trigger
              Service</olink>).</para>
          <para>But first, a little bit about <indexterm type="mds"><primary>aggregator sources</primary></indexterm>aggregator sources, in particular the execution
            aggregator source. In <olink targetdoc="infoKey" targetptr="info-key-mds4-interfaces">
              Key Concepts</olink>, we talked about three aggregator sources: query, subscription
            and execution. We have already covered the query and subscription sources - they are
            based on WSRF and are used when <olink targetdoc="mdsAdmin"
              targetptr="mds-admin-register-wsrf">registering WSRF services</olink>: <itemizedlist>
              <listitem>
                <para>The <indexterm type="mds"><primary>aggregator sources</primary><secondary>query</secondary></indexterm>query aggregator source is used when registering via single resource
                  property, multiple resource properties and querying. </para>
              </listitem>
              <listitem>
                <para>The <indexterm type="mds"><primary>aggregator sources</primary><secondary>subscription</secondary></indexterm>subscription aggregator source, as you can guess, is used when registering
                  via subscriptions.</para>
              </listitem>
            </itemizedlist>In general, you do not need to know much more about those two (unless you
            want to develop applications using those mechanisms, in which case you can learn more
              <olink targetdoc="aggregatorSources">here</olink>).</para>
          <para>Unlike the query and subscription sources, the <indexterm type="mds"><primary>aggregator sources</primary><secondary>execution</secondary></indexterm>execution aggregator source is not
            based on WSRF; instead, it gets its information through any executable with an output of
            well-formed XML. </para>
          <para>To configure this type of information provider, in general, you need to:</para>
          <orderedlist>
            <listitem>
              <para>Save the executable to <filename>$GLOBUS_LOCATION/libexec/aggrexec/</filename>.
                Note: for Aggregator, it is required that you save the executable to this
              location.</para>
            </listitem>
            <listitem>
              <para>Enable the provider in WS MDS by editing the <indexterm type="mds"><primary>jndi-config.xml</primary></indexterm><filename
                >jndi-config.xml</filename> for the Index Service to add a mapping in
                  <computeroutput>executableMappings</computeroutput>.</para>
            </listitem>
            <listitem>
              <para>Configure the registration file using <indexterm type="mds"><primary>configuration file, registering</primary><secondary>Content block options</secondary><tertiary>ExecutionPollType</tertiary></indexterm><computeroutput
                >ExecutionPollType</computeroutput> in the <computeroutput>Content</computeroutput>
                block:
                  <screen>
&lt;Content xsi:type="agg:AggregatorContent"
   xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
  &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
    &lt;agg:ExecutionPollType&gt;
      &lt;agg:PollIntervalMillis&gt;<parameter>interval_in_ms</parameter>&lt;/agg:PollIntervalMillis&gt;
      &lt;agg:ProbeName&gt;<parameter>dummy_namespace</parameter>:<parameter>probe_name</parameter>&lt;/agg:ProbeName&gt;
    &lt;/agg:ExecutionPollType&gt;
  &lt;/agg:AggregatorConfig&gt;
  &lt;agg:AggregatorData/&gt;
 &lt;/Content&gt;
    </screen></para>
              
            </listitem>
            <listitem>
              <para>Register with <command>mds-servicegroup-add</command>.</para>
            </listitem>
          </orderedlist>
          <para>For a detailed tutorial, see <olink targetdoc="indexDeveloper"
              targetptr="index-howto-nonws-infoprovider"/>
          </para>
        </section>
        <section id="mds-admin-register-custom-usefulrp">
          <title>Configuring a custom information provider based on UsefulRP/RPProvider</title>
          <indexterm type="mds"><primary>information providers</primary><secondary>configuring, UsefulRP</secondary></indexterm>
          <para>This method is similar to the above method in that it requires an executable that
            outputs well-formed XML. However the procedure is a little simpler. In general, you need
            to:</para>
          <orderedlist>
            <listitem>
              <para>Choose a schema for your data.</para>
            </listitem>
            <listitem>
              <para>Save the executable to <filename>$GLOBUS_LOCATION/libexec/</filename> (although
                it is not strictly necessary; ie, you can save them anywhere you want as long as the path is reflected in the following config file).</para>
            </listitem>
            <listitem>
              <para>Edit an RPProvider configuration file to enable the information provider you
                just wrote. This file must be saved to <filename
                  >$GLOBUS_LOCATION/etc/globus_wsrf_mds_index/</filename>.</para>
            </listitem>
            <listitem>
              <para>Restart container</para>
            </listitem>
          </orderedlist>
          <para>These steps are described in more detail in two documents:</para>
          <itemizedlist>
            <listitem>
              <para><olink targetdoc="usefulrpDeveloper" targetptr="usefulrp-howto-external-element"
                  >How to Write an External Element producer using the RPProvider Framework</olink>
                - detailed tutorial shows you how to register a non-WSRF, dynamic resource via
                UsefulRP/RPProvider.</para>
            </listitem>
            <listitem>
              <para><olink targetdoc="usefulrpDeveloper" targetptr="usefulrp-howto-file-element">How
                  to Write a File Element producer using the RPProvider Framework</olink> - as
                above, but for static resources (pulls in static contents from a file).</para>
            </listitem>
          </itemizedlist>
          <para>For even more details, see the documentation for <olink targetdoc="usefulrp"/>.</para>
          <para>Note: If this is a GLUE-based information provider, you do not need to do any
            configuration. GRAM4 and WS MDS will automatically take care of the registration. [FIXME
            - make sure i'm saying this right]</para>
        </section>
      </section>
      <section id="mds-admin-advanced-clusters">
        <title>Registering Clusters and Condor Pools</title>
        <indexterm type="mds"><primary>information providers</primary><secondary>clusters</secondary></indexterm>
        <indexterm type="mds"><primary>information providers</primary><secondary>Condor pools</secondary></indexterm>
        <para>WS MDS is frequently used with cluster monitoring systems, such as Ganglia and Hawkeye
          (for Condor pools). GT <replaceable role="entity">version</replaceable> includes
          information providers for Hawkeye, Ganglia and Nagios. These information providers are
          based on the <indexterm type="mds"><primary>information providers</primary><secondary>GLUE 1.1 schema</secondary></indexterm>GLUE 1.1 schema and UsefulRP to collect information from two sources: the
          scheduler and the cluster monitoring system. Both sources are merged to form a single
          output resource property in the GLUE schema (which is used by <olink targetdoc="gram4"
            >GRAM4</olink> and accessible via the Index Service).</para>
        <para>In general, you simply edit a configuration file to add the correct configuration
          block, then restart the container. To make it simpler, you can use the
          mds-gluerp-configure tool to create a configuration file with the correct values.</para>
        <note>
          <para>The scheduler does not need to be configured for default providers - GRAM4 already
            knows the scheduler bundle to use through other means.</para>
        </note>
        <para>For configuration details, follow these links: <itemizedlist>
            <listitem>
              <para><olink targetdoc="ganglia" targetptr="ganglia-reference">Ganglia</olink></para>
            </listitem>
            <listitem>
              <para><olink targetdoc="hawkeye" targetptr="hawkeye-reference">Hawkeye</olink></para>
            </listitem>
            <listitem>
              <para><olink targetdoc="nagios" targetptr="nagios-reference">Nagios</olink></para>
            </listitem>
          </itemizedlist></para>
        <section>
          <title>Writing new cluster providers -> dev guide</title>
          <para>There are two kinds of providers used by the GLUE Resource Property:</para>
          <itemizedlist>
            <listitem>
              <para>Scheduler providers - which provide information about the queues that a batch
                system makes available. Scheduler providers should be written as executables with a
                name corresponding to the name of the batch system.</para>
            </listitem>
            <listitem>
              <para>Cluster information providers - which provide information about the host(s) on
                which GRAM will run jobs. Cluster providers can be written either as Java classes or
                as executables.</para>
            </listitem>
          </itemizedlist>
          <para>Java providers should implement the <ulink
              url="http://www-unix.globus.org/api/javadoc-4.0.0/globus_wsrf_mds_usefulrp/org/globus/mds/usefulrp/glue/GLUEElementProducer.html"
              >GLUEElementProducer</ulink> interface.</para>
          <para>Executable providers should output a single XML document to stdout when executed,
            and then exit.</para>
          </section>
      </section>
    </section>
  </chapter>
  <chapter id="mds-admin-testing">
    <title>Testing</title>
    <indexterm type="mds"><primary>testing</primary></indexterm>
    <para>[FIXME describe]</para>
  </chapter>
  <chapter id="mds-admin-sec-considerations">
    <title>Security Considerations</title>
    <para>[FIXME - which frag to import?]</para>
  </chapter>
    <chapter id="mds-admin-debugging">
    <title>Debugging</title>
    <para>Because WS MDS is based on the Java WS Core, information on troubleshooting the container is
      included here:</para>
    <xi:include href="../../common/javawscore/Java_WS_Core_Logging_Frag.xml"
      xmlns:xi="http://www.w3.org/2001/XInclude"/>
  </chapter>
  <chapter id="mds-admin-troubleshooting">
    <title>Troubleshooting</title>
    <para>For a list of common errors in GT, see <olink targetdoc="gtuser" targetptr="errors"/>.</para>
        <para>FIXME - should we pull in the error tables from aggregator/index/trigger/webmds? </para>
        <!-- pulling in java ws core errors -->
    <xi:include href="../../common/javawscore/Java_WS_Core_Errors_Frag.xml"
      xmlns:xi="http://www.w3.org/2001/XInclude"/>

  </chapter>
  <!-- i don't think usage stats will be collected for this, but just in case
<section id="mds-admin-usage"><title>Usage statistics collection by the Globus Alliance</title>
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
  href="../WS_MDS_UsefulRP_Usage_Statistics_Frag.xml"/>
</section>
  -->
  <index type="mds"/>
</book>
