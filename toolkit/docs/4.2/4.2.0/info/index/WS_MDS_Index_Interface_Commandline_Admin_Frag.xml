<?xml version='1.0' encoding='UTF-8'?>

    <para>The <xref linkend="mds-servicegroup-add"/> command in the 
        Aggregator Framework is used to configure the Index Service to query information from various sources. </para>

    <para> The <xref linkend="globus-index-add"/> command line tool
is written using WS C and offers similar functionality to <xref linkend="mds-servicegroup-add"/> with a few new options.</para>


<refentry id="globus-index-add">
<refmeta>
<refentrytitle>globus-index-add</refentrytitle>
 <manvolnum>1</manvolnum>
 </refmeta>
 <refnamediv>
 <refname>globus-index-add</refname>
 <refpurpose>Registering grid resources to MDS index services</refpurpose>
 </refnamediv>
 <refsynopsisdiv><cmdsynopsis>
 <command>globus-index-add</command>
 </cmdsynopsis>
 </refsynopsisdiv>
 <refsect1><title>Tool description</title>
 <para><command>globus-index-add</command> Allows a user to register entries to an Index service and to refresh existing entries.  The tool can be run in daemon mode where it is much like <xref linkend="mds-servicegroup-add"/>.  In daemon mode it runs until canceled, periodically refreshing the entry.  Unlike <xref linkend="mds-servicegroup-add"/> the add and refresh step can be 
seperated.  When adding the user can save the EPR of the entry they just 
added.  Then at a later time they can use that EPR to update the entry.
This feature makes it possible to script around updates and adds.  Further
it allows for entry information to be permisted in the event that the 
add client dies.</para>

     <para>Registrations are defined in an XML configuration file, which is documented here: <xref linkend="mds-servicegroup-add-registering" />.</para>
     <para>For an example using an Index Service, see <xref linkend="mds-servicegroup-add-simple-usage" />.</para>
 </refsect1>

 <refsect1><title>Command syntax</title>
 <para>The basic syntax for <command>globus-index-add</command> is:
 <screen>globus-index-add [options] </screen>
 where:</para>

 <informaltable>
 <tgroup cols="2"><tbody>
     <row>
        <entry>-h</entry>
        <entry>Print a usage message.</entry>
     </row>
     <row>
        <entry>-q</entry>
        <entry>Write no output messages</entry>
     </row>
     <row>
        <entry>-d</entry>
        <entry>Run in daemon mode, refreshing the entry every updates cycle.</entry>
     </row>
     <row>
        <entry>-u</entry>
        <entry>Update the entry given in the epr.</entry>
     </row>
     <row>
        <entry>-vb</entry>
        <entry>Verbose output</entry>
     </row>
     <row>
        <entry>-e &lt;endpoint string&gt;</entry>
        <entry>The endpoint string.  Ex: http(s)://host:port/service-group-address.  This is used with -a</entry>
     </row>
     <row>
        <entry>-a &lt;file&gt;</entry>
        <entry>Add to the index service the entry describe in this ServiceGroupRegistrations file.</entry>
     </row>
     <row>
        <entry>-E &lt;file&gt;</entry>
        <entry>&lt;file&gt; contains the EPR of the entry to update with -u</entry>
     </row>
     <row>
        <entry>-t &lt;minutes&gt;</entry>
        <entry>Set the number of minutes for the entry to live.  Used for both -a and -u.</entry>
     </row>
     <row>
        <entry>-me &lt;integer&gt;</entry>
        <entry>Set the maximum amount of retries to update before failing.
          The program will continue to retry to attempt the refresh &lt;integer&gt; number of times </entry>
     </row>
     <row>
        <entry>-z [self] | [host] | [id &lt;subject&gt;]</entry>
        <entry>Set the authz method.</entry>
     </row>
     <row>
        <entry>-ms [sig] | [conv] | [trans]</entry>
        <entry>Security mechanism.  'msg' for secure message, 'conv' for secure conversation, 'trans' for transport.  The default is trans.</entry>
     </row>
 </tbody></tgroup>
 </informaltable>
 </refsect1>
</refentry>
