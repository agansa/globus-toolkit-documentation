<title>GT 4.0 OGSA-DAI (Tech Preview): System Administrator's Guide</title>
<titleabbrev> System Administrator's Guide</titleabbrev>
<section id="s-ogsadai-admin-introduction"><title>Introduction</title>
    <para>This guide contains
        installation and configuration information for system administrators installing
        OGSA-DAI. It explains how to install, configure and test the installation. </para>
</section>
<section id="s-ogsadai-admin-installing"><title>Building and installing</title>  
    <para>OGSA-DAI is not built and installed as part of the standard Globus Toolkit installation. 
    You will find the installation bundle in the contributions directory. You will need to install 
    the Java WS-Core from the Globus distribution.</para>
<section id="s-ogsadai-admin-prereq">    
<title>Prerequisites</title>
    
   <para> The deployment and use of the OGSA-DAI WSRF distribution will be easier if you are 
    already familiar with:</para>
    
 <itemizedlist>
      <listitem><para>OGSA-DAI concepts and terms: Reading the user's guide included in the 
          OGSA-DAI distribution should provide you with this information.</para></listitem>
     <listitem><para>WS-Addressing concepts and terms: an introduction to WS-Addressing is available at <ulink url="http://www-106.ibm.com/developerworks/library/specification/ws-add">http://www-106.ibm.com/developerworks/library/specification/ws-add</ulink>.</para></listitem>
     <listitem><para> Web Services Resource Framework (WSRF) concepts and terms: the WSRF specifications can be found at <ulink url="http://www.globus.org/wsrf">http://www.globus.org/wsrf</ulink>.</para></listitem></itemizedlist>
    
<section id="s-ogsadai-admin-prereq-software">    
<title>Prerequisite Software</title>
    
    <para>To use OGSA-DAI WSRF you will need the following software:</para>
<itemizedlist>    
    <listitem><para>Java 1.4.0: OGSA-DAI WSRF has been tested on this version of Java though may work with other Java 1.4.x flavours.</para></listitem>
    <listitem><para>Jakarta ANT 1.5: see <ulink url="http://ant.apache.org">http://ant.apache.org</ulink>.</para></listitem>
   <listitem><para> Globus Toolkit Java WS Core
<itemizedlist>       
    <listitem><para>This provides a Java-based implementation of WSRF and is available at: <ulink url="http://www-unix.globus.org/toolkit/downloads/development">http://www-unix.globus.org/toolkit/downloads/development</ulink>.</para></listitem>
   <listitem><para> Information on Globus Toolkit 4.0 can also be found at:
       <ulink url="http://www-unix.globus.org/toolkit/docs/4.0/GT4Facts">http://www-unix.globus.org/toolkit/docs/4.0/GT4Facts</ulink>.</para></listitem>
   </itemizedlist>
   </para></listitem>
    </itemizedlist>
</section>
    <section id="s-ogsadai-admin-prereq-jars">    
    <title>Prerequisite JARs</title>
    
  <para>  You will need the following JARS to be able to compile OGSA-DAI:</para>
        <table><title>Prerequisite JARs</title>
            <tgroup cols="4">
                <thead>
                <row>
                    <entry><command>OGSA-DAI Functionality</command></entry>
                    <entry><para>JAR</para></entry>
                    <entry><para>Package Name</para></entry>
                    <entry><para>URL</para></entry>
                </row></thead>
                <tbody>
                <row>
                    <entry><command>File-related activities</command></entry>
                    <entry><para>jakarta-oro-2.0.7.jar</para></entry>
                    <entry><para>Jakarta Oro 2.0.7 (Note that 2.0.8 has not been tested with OGSA-DAI)</para></entry>
                    <entry><para><ulink url="http://jakarta.apache.org/oro">http://jakarta.apache.org/oro</ulink></para></entry>
                </row>
                <row>
                    <entry><command>XML database-related activities </command></entry>
                    <entry><para>xmldb.jar </para></entry>
                    <entry><para>Initial Public Release </para></entry>
                    <entry><para>Available in Xindice - <ulink url="http://xml.apache.org/xindice">http://xml.apache.org/xindice</ulink></para></entry>
                </row>
                <row>
                    <entry><command> Indexed file-related activities</command></entry>
                    <entry><para>lucene-1.4-final.jar </para></entry>
                    <entry><para>Lucene 1.4</para></entry>
                    <entry><para><ulink url="http://jakarta.apache.org/lucene">http://jakarta.apache.org/lucene</ulink></para></entry>
                </row>
            </tbody>
                </tgroup>
        </table>
    </section>
    <section id="s-ogsadai-admin-prereq-drivers"> 
   <title> Data Resource Drivers</title>
    
   <para> You will also need to download the corresponding database drivers for any data 
       resources you wish to expose using the OGSA-DAI WSRF distribution. Data resources and 
       drivers that have been tested against OGSA-DAI are:</para>
<itemizedlist>    
    <listitem><para> MySQL
        <itemizedlist>
            <listitem><para>MySQL Connector J/2. Available from: http://www.mysql.com. Note that if you use version 4.1.x of MySQL you will need version 3.1 of the driver.</para></listitem>
            <listitem><para>Required JAR: mysql-connector-java-XXX.jar where XXX is the version of the driver.</para></listitem>
        </itemizedlist></para></listitem>
    <listitem><para>DB2
        <itemizedlist>        
            <listitem><para>DB2 JDBC Driver. Available from http://www.ibm.com/software/data/db2.</para></listitem>
            <listitem><para>Required JARs: db2jcc.jar, db2jcc_licence_cu.jar.</para></listitem>
        </itemizedlist></para></listitem>
    <listitem><para>Oracle
   <itemizedlist>     
       <listitem><para>Oracle JDBC Drivers for Java 1.2+. Available from <ulink url="http://www.oracle.com">http://www.oracle.com</ulink>.</para></listitem>
        <listitem><para>Required JAR:classes12.zip - rename as classes12.jar.</para></listitem>
        </itemizedlist></para></listitem>
    <listitem><para> Xindice 1.0
        <itemizedlist>
         <listitem><para>Xindice 1.0. Available from http://xml.apache.org/xindice.</para></listitem>
        <listitem><para>Required JARs: xindice.jar, xmldb-xupdate.jar, openorb-1.2.0.jar.</para></listitem>
        </itemizedlist></para></listitem>
    <listitem><para>Microsoft SQL Server
        <itemizedlist>
            <listitem><para>MS SQL Server JDBC driver. Available from http://www.microsoft.com.</para></listitem>
            <listitem><para>Required JARs: mssqlserver.jar, msbase.jar, msutil.jar.</para></listitem>
        </itemizedlist></para></listitem>
    <listitem><para>PostgreSQL
        <itemizedlist>
    <listitem><para>PostgreSQL JDBC driver. Available from http://www.postgresql.org.</para></listitem>
    <listitem><para>Required JAR: pgXXXX.jar where XXXX is the version of the driver.</para></listitem>
        </itemizedlist></para></listitem>
    <listitem><para>Derby
  <itemizedlist>      
    <listitem><para>Apache Derby driver. Available from http://incubator.apache.org/derby/.</para></listitem>
    <listitem><para>Required JAR: derby.jar.</para></listitem>
        </itemizedlist></para></listitem>
    <listitem><para>HSQL
    <itemizedlist>    
    <listitem><para>HSQL 1.7.x driver. Available from http://hsqldb.sourceforge.net </para></listitem>
        <listitem><para>Required JAR: hsql.jar.</para></listitem>
    </itemizedlist></para></listitem>
        
    <listitem><para>Exist
<itemizedlist>        
    <listitem><para>Exist 1.0 Beta 2 driver. Available from http://exist.sourceforge.net/</para></listitem>
    <listitem><para>Required JARs: exist.jar, xmlrpc-1.2-patched.jar.</para></listitem>
</itemizedlist></para></listitem>
        
        </itemizedlist>
    </section>
</section>
    <section id="s-ogsadai-admin-building">    
<title>    Building OGSA-DAI WSRF</title>
    
    <para>This section describes how to build OGSA-DAI WSRF.</para>
        <section id="s-ogsadai-admin-building-insertjar">  
    <title>Insert the Prerequisite JAR Files</title>
    
 <para>   First, download the prerequisite JAR files (listed above):</para>
   <itemizedlist> 
    <listitem><para> jakarta-oro-2.0.7.jar</para></listitem>
    <listitem><para>lucene-1.4-final.jar</para></listitem>
    <listitem><para> xmldb.jar</para></listitem>
   </itemizedlist> 
    <para>and put these into the OGSA-DAI distribution's lib directory.</para>
        
        </section>       
        
        <section  id="s-ogsadai-admin-download">     
   <title> Download and Compile GT4</title>
    
    <para>Now, you need to download and compile Globus Toolkit 4 Web Services Core. 
        The GT4 instructions tell you how to do this.</para>
    
        </section>
        <section id="s-ogsadai-admin-build-wsrf">
       <title> Build OGSA-DAI WSRF</title>
    
   <para> To build OGSA-DAI WSRF:</para>
    <itemizedlist>
  <listitem><para>Set a GLOBUS_LOCATION environment variable to point to the location of your GT4 distribution. For example, under UNIX, enter:
    
    <screen>$ export GLOBUS_LOCATION=/path/to/Globus/directory</screen></para></listitem>
    
    <listitem><para>Run the following from within the OGSA-DAI distribution directory:
    
    <screen>$ ant makeGar</screen>
        </para></listitem>
    </itemizedlist>
    <para>OGSA-DAI WSRF will then be built. Note that before you can use OGSA-DAI you must configure it. This is covered in the deployment section. </para>
    </section>
    </section>  
</section>
<section id="s-ogsadai-admin-configuring"><title>Configuring </title>
    <para>Please consult <xref linkend="s-ogsadai-admin-deploying" /> for information on configuring OGSA-DAI services.</para>
    
</section>
<section id="s-ogsadai-admin-deploying"><title>Deploying</title>
    <para>This section assumes that you have built the WSRF version of OGSA-DAI from source.</para>
    <section id="s-ogsadai-admin-deploying-install">    
   <title> Installing OGSA-DAI WSRF</title>
    
    <para>This section describes how to install OGSA-DAI WSRF onto the GT4 container or Apache Tomcat.</para>
        <section id="s-ogsadai-admin-deploying-gt4"> 
    <title>Deploying OGSA-DAI WSRF onto GT4</title>
    
   <para> If you wish to deploy OGSA-DAI WSRF onto the GT4 Web services container then keep reading. 
       If however you want to deploy OGSA-DAI WSRF onto Apache Tomcat then see <xref linkend="s-ogsadai-admin-deploying-tomcat" />.</para>
    
   <para> To deploy OGSA-DAI WSRF onto GT4:</para>
    <itemizedlist>
    <listitem><para>Set a GLOBUS_LOCATION environment variable to point to the location of your GT4 distribution. 
        For example, under UNIX (for the bash or Bourne shell - with csh you will have to use the corresponding syntax for setenv, similarly for the examples quoted below), enter:
    <screen>$ export GLOBUS_LOCATION=/path/to/Globus/directory</screen>
    </para></listitem>
    <listitem><para>Run the following from within the OGSA-DAI WSRF distribution directory:
    <screen>$ ant deployGTContainer</screen></para></listitem>
    </itemizedlist>
    <para>OGSA-DAI WSRF will then be deployed.</para>
        </section>
        <section id="s-ogsadai-admin-deploying-tomcat"><title> Deploying OGSA-DAI WSRF onto Tomcat</title>
    
    <para>Before you can deploy OGSA-DAI WSRF onto Tomcat you will need to deploy GT4 onto Tomcat. You can do this as follows, if you have not already done so:</para>
<itemizedlist>    
    <listitem><para>Set a GLOBUS_LOCATION environment variable to point to the location of your GT4 distribution. For example, under UNIX, enter:
    
    <screen>$ export GLOBUS_LOCATION=/path/to/Globus/directory</screen></para></listitem>
<listitem><para>    
    Set a CATALINA_HOME environment variable to point to the location of Tomcat. For example, under UNIX, enter:
    
   <screen> $ export CATALINA_HOME=/path/to/Tomcat/directory</screen>
    </para></listitem>
<listitem><para>    * Run the following from within the GT4 distribution directory:
    <screen>$ cd $GLOBUS_LOCATION
$ ant -f share/globus_wsrf_common/tomcat/tomcat.xml deployTomcat  \
    -Dtomcat.dir=$CATALINA_HOME</screen>
    </para></listitem>
    <listitem><para>For more information see the <ulink url="../../admin/docbook/">GT4 installation instructions</ulink>.</para></listitem>
    </itemizedlist>
   <para> Now, to deploy OGSA-DAI WSRF onto Tomcat, run the following from within the OGSA-DAI distribution directory:</para>
    
    <screen>$ ant deployTomcat</screen>
    
    <para>OGSA-DAI WSRF will then be deployed to Tomcat.</para>
    
   <note> <simpara>As an alternative to setting CATALINA_HOME you can specify the Tomcat location at the command-line as follows:</simpara>
    
    <screen>$ ant deployTomcat -Dtomcat.dir=/path/to/Tomcat/directory</screen>
   </note>
   </section>
    </section>
    <section id="s-ogsadai-admin-deploying-expose">    <title>Exposing Data Resources using OGSA-DAI WSRF</title>
    
<para>    To expose a data resource via an OGSA-DAI WSRF data service is a three-step process:</para>
    <orderedlist>
    <listitem><para>Deploy an OGSA-DAI data service. This data service initially exposes 0 data service resources.</para></listitem>
    <listitem><para>Deploy a data service resource. The data service resource contains information about a data resource and the activities clients can perform on that data resource via a data service.</para></listitem>
    <listitem><para>Add a data service resource to a data service. This instructs the data service to expose the data service resource and so allows clients to interact with the data service resource - thereby interacting with a data resource.</para></listitem>
    </orderedlist>
    <para>The deployment approach is flexible to support a wide variety of scenarios. 
        For example multiple data services can expose the same data service resource or one data service can expose multiple data service resources.</para>
        <section id="s-ogsadai-admin-deploying-dataservice">
    <title>Deploying an OGSA-DAI Data Service</title>
    
<para>    This section describes how to deploy an OGSA-DAI data service which initially will expose 0 data service resources.</para>
    
<para>    To deploy a data service under Tomcat:</para>
<itemizedlist>
    <listitem><para>    
    Run the following command from within the OGSA-DAI WSRF distribution directory:
    
    <screen>$ ant deployDataServiceTomcat -Dtomcat.dir=/path/to/Tomcat/directory \
    -Ddai.service.path=service/path</screen>
    <itemizedlist>
   <listitem><para><command> -Dtomcat.dir=</command> : 
    specifies the location of Tomcat. If this argument is omitted then the Tomcat location specified within CATALINA_HOME is used.</para></listitem>
    <listitem><para>
    <command>-Ddai.service.path=</command>
    specifies the local URL of the service. For example -Ddai.service.path=ogsadai/DataService specifies a data service whose URL will be 
        http://HOST:PORT/wsrf/services/ogsadai/DataService.</para></listitem>
    </itemizedlist>
    </para></listitem>
    <listitem><para>The data service will be deployed onto Tomcat.</para></listitem>
    </itemizedlist>
   <para> To deploy a data service under GT4 requires execution of the deployDataServiceGT4 target. This takes the same arguments as deployDataServiceTomcat. 
        The exception is the -Dtomcat.dir argument - this target instead accepts -Dgt.dir= which specifies the location of GT4. 
        If this argument is omitted then the GT4 location specified within GLOBUS_LOCATION is used.</para>
        </section>
        <section id="s-ogsadai-admin-deploying-testing">
    <title>Checking the OGSA-DAI Data Service Deployment</title>
    
    <para>To test that a service has deployed under GT4:</para>
    <itemizedlist>
  <listitem><para>  Start the GT4 container:
    
    <screen>$ cd $GLOBUS_LOCATION
$ ./bin/globus-start-container -nosec</screen>
    </para></listitem>
   <listitem><para>Eventually a list of service URLs will be displayed. You should see one corresponding to your service. For example:
    
    <screen>[22]: http://129.215.56.6:8080/wsrf/services/ogsadai/DataService</screen></para></listitem>
   </itemizedlist>
        
    <para>To test that a service has deployed under Tomcat:</para>
   <itemizedlist> 
    <listitem><para>Restart Tomcat.</para></listitem>
<listitem><para>    Using a Web browser, visit the following URL:
    
    <screen>http://TOMCAT.HOST:TOMCAT.PORT/wsrf/services</screen>
    
    Eventually a list of service URLs will be displayed. You should see one corresponding to your service. For example:
    
    <screen>ogsadai/DataService (wsdl) </screen>
    </para></listitem>
     <listitem><para>Click on the (wsdl) link and the WSDL describing the service should appear. For example:
    
   <screen> &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;wsdl:definitions name="DataService" 
...</screen></para></listitem>
   </itemizedlist>    
            <para> An alternative is to test the service using the OGSA-DAI WSRF listResourcesClient client. We describe how to do this in <link linkend="s-ogsadai-admin-deploying-listing">Listing Data Service Resources</link>.</para>
        </section>  
        <section  id="s-ogsadai-admin-deploying-dataresources">
        <title>Deploying Data Service Resources</title>
        
        <para>This section describes how to deploy a data service resource. Once deployed the data service resource can then be added to the set of those exposed by a 
            data service as described in <link linkend="s-ogsadai-admin-deploying-dr2ds">Adding a Data Service Resource to a Data Service</link>.</para>
        
        <para>A data service resource file is used specify the properties of your data service resource. 
        This is a simple ANT properties file consisting of argument=value values. 
        You can reuse the same file to deploy the same data service resource under different names or to customise a specific configuration in small or major ways. 
        Alternatively you can just write a new file each time.
        </para>
        <para>Within the OGSA-DAI WSRF distribution directory we provide an example - data.service.resource.properties. The file is fully commented.</para>
        
        <para>The properties are as follows:</para>
    <itemizedlist>    
        <listitem><para>dai.resource.id=...- name for the data service resource.</para></listitem>
        <listitem><para>dai.data.resource.type=[Relational | XML | Files] - the type of data resource to which the data service resource provides access.</para></listitem>
        <listitem><para>dai.product.name= ... - data resource product name (optional).</para></listitem>
        <listitem><para>dai.product.vendor= ... - data resource product vendor (optional).</para></listitem>
        <listitem><para>dai.product.version= ... - data resource product version (optional).</para></listitem>
        <listitem><para>dai.data.resource.uri= ... - data resource URI. This must be compatible with the driver class specified next.</para></listitem>
        <listitem><para>dai.driver.class= ... - data resource driver class name. This is optional only if dai.data.resource.type=Files.</para></listitem>
        <listitem><para>dai.credential= ... - Grid certificate credentials of a user permitted to access the data resource. If omitted then any user will be allowed access.</para></listitem>
        <listitem><para>dai.user.name= ... - data resource user name. Optional only if there is no user name required for a database.</para></listitem>
        <listitem><para>dai.password=... - corresponding data resource password. Optional if there is no user name required, or if the password is null.</para></listitem>
    </itemizedlist>
        
        <para>To deploy a data service resource under Tomcat:</para>
        <itemizedlist>
       <listitem><para>Take a copy of data.service.resource.properties within the OGSA-DAI WSRF distribution directory.</para></listitem>
       <listitem><para>Load the file into an editor and provide values specifying your data service resource - the comments in the file should help you.</para></listitem>
        <listitem><para>When done, save the file.</para></listitem>
        <listitem><para>Put all the JARs implementing the data resource driver within the drivers directory within the OGSA-DAI WSRF distribution directory.</para></listitem>
        <listitem><para>Run the following command from within the OGSA-DAI WSRF distribution directory:
        <screen>$ ant deployResourceTomcat -Dtomcat.dir=/path/to/Tomcat/directory
        -Ddai.service.resource.file=DAI-SERVICE-RESOURCE-FILE</screen>
       <itemizedlist> 
        <listitem><para><command>-Dtomcat.dir=</command> specifies the location of Tomcat. If this argument is omitted then the Tomcat location specified within CATALINA_HOME is used.</para></listitem>
        <listitem><para><command>-Ddai.service.resource.file=</command> specifies the location of a data service resource properties file. If no argument is given then a default location of data.service.resource.properties (within the OGSA-DAI WSRF distribution directory) is assumed.</para></listitem>
        </itemizedlist>
        </para></listitem>
            <listitem><para>The data service resource will be deployed. For example:
        
        <screen>$ ant deployResourceTomcat -Ddai.service.resource.file=my.config
...
[echo] Reading properties file my.config
[echo] Data service resource ID: MySQLResource
[echo] Data resource type: Relational
[echo] Data resource product: MySQL
[echo] Data resource vendor: MySQL
[echo] Data resource version: 1.0
[echo] Data resource URI: jdbc:mysql://amethyst.epcc.ed.ac.uk:3306/ogsadai/DATABASE
[echo] Data resource credential: 
[echo] Data resource user name: ogsadai
[echo] Data resource password: ogsadai
[echo] Data driver class: org.gjt.mm.mysql.Driver
[echo] Deploying data service resource MySQLResource...
...
[echo] Data service resource deployed!</screen>
        </para></listitem>
            <listitem><para> Values in the same data service resource file can be overridden at the command line via the use of -Dproperty=value flags. 
                For example to deploy another data service resource with the same configuration as held within my.config you can execute:
        
       <screen> $ ant deployResourceTomcat -Ddai.service.resource.file=my.config \
        -Ddata.resource.id=AnotherResource</screen>
        
        As another example, consider deploying a data service resource with the same configuration but with a different location:
        
        <screen>$ ant deployResourceTomcat -Ddai.service.resource.file=my.config \
        -Ddata.resource.id=YetAnotherResource \
        -Ddai.data.resource.uri=jdbc:mysql://myhost:8080/some/other/DB</screen>
        
        Alternatively, you can just edit your data service resource file.</para></listitem>
        </itemizedlist>
        <para>To deploy data service resources under GT4 requires execution of the deployResourceGT4 target. 
        This takes the same arguments as deployResourceTomcat. The exception is the -Dtomcat.dir argument. 
        This target instead accepts -Dgt.dir= which specifies the location of GT4. 
        If this argument is omitted then the GT4 location specified within GLOBUS_LOCATION is used.</para>
        </section>    
        <section id="s-ogsadai-admin-deploying-dr2ds">    
    <title>Adding a Data Service Resource to a Data Service</title>
        
        <para>This section describes how to add a data service resource to a data service, thereby allowing clients to access and interact with the data service resource.</para>
        
        <para>To add data service resources to data services under Tomcat:</para>
    <itemizedlist>    
       <listitem><para>Run the following command from within the OGSA-DAI WSRF distribution directory:
        
        <screen>$ ant addResourceTomcat -Dtomcat.dir=/path/to/Tomcat/directory \
        -Ddai.service.path=service/path -Ddai.resource.id=ResourceID</screen>
  <itemizedlist>      
        <listitem><para><command>-Dtomcat.dir=</command> specifies the location of Tomcat. If this argument is omitted then the Tomcat location specified within CATALINA_HOME is used.</para></listitem>
        <listitem><para><command>-Ddai.service.path=</command> specifies the local URL of the service. For example -Ddai.service.path=ogsadai/DataService specifies a data service whose URL will be http://HOST:PORT/wsrf/services/ogsadai/DataService.</para></listitem>
        <listitem><para><command>-Ddai.resource.id=</command> is the ID of the data service resource that the data service is to expose. 
           This must be the name of a data service resource which you have already deployed as described earlier in the section on 
            <link linkend="s-ogsadai-admin-deploying-dataresources">Deploying Data Service Resources</link>. For example:
            <command>-Ddai.service.resource=MySQLResource</command></para></listitem>
           </itemizedlist>
        </para></listitem>        </itemizedlist>

<para>       You will need to shutdown and restart Tomcat before clients are able to access the new data service resource.</para>
     
        <para>To add data service resources under GT4 requires execution of the addResourceGT4 target. 
    This takes the same arguments as addResourceTomcat. The exception is the -Dtomcat.dir= argument. 
    This target instead accepts -Dgt.dir= which specifies the location of GT4. If this argument is omitted then the GT4 location 
    specified within GLOBUS_LOCATION is used.</para>
  <para>      
        It is also possible to remove data service resources from a data service, if for example clients are to no longer be allowed to access a 
      data service resource via a particular service. This is described in the section on <link linkend="s-ogsadai-admin-deploying-removing">Removing a Data Service Resource from a Data Service</link> below.
        </para>
       <para> After restarting your service, you can test whether the new data service resource was successfully added using the 
           OGSA-DAI WSRF listResourcesClient client. We describe how to do this in <link linkend="s-ogsadai-admin-deploying-listing">Listing Data Service Resources</link>.</para>
        </section>
    </section>    
    <section id="s-ogsadai-admin-deploying-listing">   
    <title>Listing Data Service Resources</title>
        
        <para>To list the data service resources exposed by a data service:</para>
   <itemizedlist>     
        <listitem><para>Ensure that your Web services container is running.</para></listitem>
        <listitem><para>Ensure that either CATALINA_HOME or GLOBUS_LOCATION environment variables are set.</para></listitem>
        <listitem><para>Run the following command from within the OGSA-DAI WSRF distribution directory:
        
        <screen>$ ant listResourcesClient -Ddai.url=SERVICE-URL</screen>
        
        where <command>-Ddai.url=</command> specifies the URL of the data service. If omitted then a default URL of <filename>http://localhost:8080/wsrf/services/ogsadai/DataService</filename> is used.

       For example:
        
        <screen>$ ant listResourcesClient  \
        -Ddai.url=http://e3000.epcc.ed.ac.uk:8080/wsrf/services/ogsadai/MyDataService</screen>
        
        The data service resources exposed by your service will be displayed. For example:
        
        <screen>[java] Contacting ... http://localhost:8080/wsrf/services/ogsadai/DataService
[java] Service version: WSRF 4.0
[java] Number of resources: 0</screen>
        
        For example:
        
        <screen>[java] Contacting ... http://localhost:8080/wsrf/services/ogsadai/DataService
[java] Service version: WSRF 4.0
[java] Number of resources: 2
[java] Resource: MySQLResource
[java] Resource: AnotherResource</screen>
       </para></listitem>
        </itemizedlist>
        <note><simpara>As an alternative to setting CATALINA_HOME or GLOBUS_LOCATION you can specify the Tomcat or 
            GT4 locations using the <command>-Dtomcat.dir=/path/to/Tomcat/directory</command> or <command>-Dgt.dir=/path/to/Globus/directory</command> flags respectively.</simpara></note>
    </section>
    <section id="s-ogsadai-admin-deploying-querying">  
    <title>Querying Data Service Resource Properties</title>
        
        <para>To query the properties of a data service resource exposed by a data service:</para>
        <itemizedlist>
        <listitem><para>Ensure that your Web services container is running.</para></listitem>
        <listitem><para>Ensure that the GLOBUS_LOCATION environment variable points to your GT4 distribution.</para></listitem>
        <listitem><para>Invoke the Globus GetProperty Client:
        
        <screen>$ cd $GLOBUS_LOCATION
$ ./bin/wsrf-get-property -s DATA-SERVICE-URI  \
        -k {http://ogsadai.org.uk}DataServiceResourceKey DATA-RESOURCE-NAME 
        PROPERTY-NAME</screen>
        
        For example:
        
            <screen>$ cd $GLOBUS_LOCATION
$ ./bin/wsrf-get-property  \
        -s http://localhost:8080/wsrf/services/ogsadai/DataService \ 
        -k {http://ogsadai.org.uk}DataServiceResourceKey MySQLResource \
            {http://ogsadai.org.uk/namespaces/2004/05/gdsf}databaseSchema</screen>
            The value of the property will then be displayed.
        </para></listitem>
        <listitem><para>Properties can include:
  <itemizedlist>          
        <listitem><para>{http://ogsadai.org.uk/namespaces/2004/05/gdsf/config}productInfo - information on a data resource, including name, vendor and version.</para></listitem>
        <listitem><para>For relational data resources: {http://ogsadai.org.uk/namespaces/2004/05/gdsf}databaseSchema - data resource schema.</para></listitem>
        <listitem><para>For XML data resources: {http://ogsadai.org.uk/namespaces/2004/05/gdsf}collectionSchema - data resource collection schema.</para></listitem>
        <listitem><para>{http://ogsadai.org.uk/namespaces/2004/05/gdsf}activityType - activities the data service resource can be requested to perform on the data resource - the legal activities in Perform documents that can be sent to the data service resource via the data service.</para></listitem>
        <listitem><para>{http://ogsadai.org.uk/namespaces/2004/05/gds_perform}performDocumentSchema - XML Schema specifying the legal structure of Perform documents that can be sent to the data service resource via the data service.</para></listitem>
        <listitem><para>{http://ogsadai.org.uk/namespaces/2004/05/gds_perform}requestStatus - status of execution of the current or more recent Perform document sent to the data service resource.</para></listitem>
        </itemizedlist>
        </para></listitem>
        </itemizedlist>
    </section>
    <section id="s-ogsadai-admin-deploying-submitting">
        <title>Submitting Perform Documents</title>
        
        <para>To submit a Perform document to a data service resource exposed by a data service and so perform some data resource-related activities (e.g. query a database):</para>
      <itemizedlist>  
        <listitem><para>Ensure that your Web services container is running.</para></listitem>
        <listitem><para>Ensure that either CATALINA_HOME or GLOBUS_LOCATION environment variables are set.</para></listitem>
        <listitem><para>Run the following command from within the OGSA-DAI WSRF distribution directory:
        
        <screen>$ ant dataServiceClient -Ddai.url=SERVICE-URL \
        -Ddai.resource.id=RESOURCE-ID \
        -Ddai.action=PERFORM-DOC-LOCATION</screen>
       
        where:
            <itemizedlist>
        <listitem><para>-Ddai.url= specifies the URL of the data service. If omitted then a default URL of http://localhost:8080/wsrf/services/ogsadai/DataService is used.</para></listitem>
        <listitem><para>-Ddai.resource.id= specifies the data service resource at which the Perform document is targeted.</para></listitem>
        <listitem><para>-Ddai.action= specifies the location of an OGSA-DAI Perform document.</para></listitem></itemizedlist>
  
        For example:
        
        <screen>$ ant dataServiceClient  \
        -Ddai.url=http://localhost:8080/wsrf/services/ogsadai/MyDataService \
        -Ddai.resource.id=MySQLResource \
        -Ddai.action=examples/GDSPerform/JDBC/query/select1Row.xml </screen>
        </para></listitem>
          
       <listitem><para>The Perform document will be forwarded to the data service and executed by the specified data service resource. For example:
        
        <screen>[echo] Executing Perform document on resource One...
[java] Contacting ... http://localhost:8080/wsrf/services/ogsadai/MyDataService
[java] Service version: WSRF 4.0
[java] Number of resources: 2
[java] Resource: MySQLResource
[java] Resource: AnotherResource
[java] Data Resource: MySQLResource
[java] About to invoke Perform...
[java] Perform completed!
[java] Response: 
[java] &lt;?xml version="1.0" encoding="UTF-8"?&gt;
[java] &lt;ns1:response xmlns:ns1="http://ogsadai.org.uk/namespaces/2004/09/service/types"&gt;
[java] &lt;request status="COMPLETED"
     xmlns="http://ogsadai.org.uk/namespaces/2004/09/service/types"/&gt;
...</screen>
            </para></listitem>
      </itemizedlist>
            <note><simpara>As an alternative to setting CATALINA_HOME or GLOBUS_LOCATION you can specify the 
                Tomcat or GT4 locations using the <command>-Dtomcat.dir=/path/to/Tomcat/directory</command> or <command>-Dgt.dir=/path/to/Globus/directory</command> flags respectively.</simpara></note>
            
        <para>  If you have a previous <ulink url="http://www.ogsadai.org.uk/">OGSA-DAI release</ulink> (version 4.0 or higher) then the OGSA-DAI <ulink url="http://www.ogsadai.org.uk/docs/R5/doc/dbs/index.html">test database tables</ulink> are suitable for use with these example 
        Perform documents.</para>
    </section>       
    <section id="s-ogsadai-admin-deploying-removing"> 
    <title>Removing a Data Service Resource from a Data Service</title>
            
            <para>This section describes how to remove a data service resource from a data service - the data service will no longer expose the data service resource.</para>
            
           <para> To remove data service resources from data services under Tomcat:</para>
            <itemizedlist>
            <listitem><para>Run the following command from within the OGSA-DAI WSRF distribution directory:
            
            <screen>$ ant removeResourceTomcat -Dtomcat.dir=/path/to/Tomcat/directory \
            -Ddai.service.path=service/path -Ddai.resource.id=ResourceID</screen>
            where:<itemizedlist>
            <listitem><para>-Dtomcat.dir= specifies the location of Tomcat. If this argument is omitted then the Tomcat location specified within CATALINA_HOME is used.</para></listitem>
            <listitem><para>-Ddai.service.path= specifies the local URL of the service. For example -Ddai.service.path=ogsadai/DataService specifies a data service whose URL will be http://HOST:PORT/wsrf/services/ogsadai/DataService.</para></listitem>
            <listitem><para>-Ddai.resource.id= is the ID of the data service resource that the data service is no longer to expose. For example -Ddai.service.resource=MySQLResource</para></listitem></itemizedlist>
       </para></listitem>
            <listitem><para>You will need to shutdown and restart Tomcat before the changes take effect.</para></listitem>
            </itemizedlist>
       
            <para>To remove data service resources from data services under GT4 requires execution of the removeResourceGT4 target. 
                This takes the same arguments as removeResourceTomcat. The exception is the -Dtomcat.dir= argument - this target instead accepts -Dgt.dir= which specifies the location of GT4. If this argument is omitted then the GT4 location specified within GLOBUS_LOCATION is used.</para>
    </section> 
    <section id="s-ogsadai-admin-deploying-undeploying">    
       <title>Undeploying OGSA-DAI WSRF</title>
            
            <para>This section describes how to remove OGSA-DAI WSRF from the GT4 Web services container or Tomcat.</para>
            
            <para>Undeployment erases all OGSA-DAI XML Schema, OGSA-DAI-specific JAR files and configuration files from the destination.</para>
        <section id="s-ogsadai-admin-deploying-undeploying-gt4">
            <title>Undeploying OGSA-DAI WSRF from GT4</title>
            
            <para>To undeploy OGSA-DAI WSRF from GT4:</para>
            <itemizedlist>
            <listitem><para>Set a GLOBUS_LOCATION environment variable to point to the location of your GT4 distribution. For example, under UNIX, enter:
            
            <screen>$ export GLOBUS_LOCATION=/path/to/Globus/directory</screen>
            </para></listitem>
            <listitem><para>Run the following from within the OGSA-DAI distribution directory:
            
           <screen>$ ant undeployGTContainer</screen></para></listitem>
            </itemizedlist>
            <para>OGSA-DAI WSRF will then be undeployed.</para>
        </section>
        <section id="s-ogsadai-admin-deploying-undeploying-tomcat">    
    <title>Undeploying OGSA-DAI WSRF from Tomcat</title>
            
            <para>To undeploy OGSA-DAI WSRF from Tomcat:</para>
        <itemizedlist>    
            <listitem><para>Set a CATALINA_HOME environment variable to point to the location of Tomcat. For example, under UNIX, enter:
            
            <screen>$ export CATALINA_HOME=/path/to/Tomcat/directory</screen></para></listitem>
            <listitem><para>Run the following from within the OGSA-DAI distribution directory:
            
            <screen>$ ant undeployTomcat</screen></para></listitem>
            
            <listitem><para>OGSA-DAI WSRF will then be undeployed from Tomcat.</para></listitem>
        </itemizedlist>
 <note>  <simpara> 
     As an alternative to setting CATALINA_HOME you can specify the Tomcat location at the command-line as follows: </simpara>  
            
            <screen>$ ant undeployTomcat -Dtomcat.dir=/path/to/Tomcat/directory</screen>
</note>
    </section>
    </section>
    <section id="s-ogsadai-admin-deploying-where">
    <title>Where Does Stuff Go?</title>
            
            <para>This section describes the locations of OGSA-DAI related files after deployment on Tomcat or GT4.</para>
            
            <para>Under GT4, OGSA-DAI resides in the following places:</para>
            <itemizedlist>
            <listitem><para>share/schema/ogsadai/ - OGSA-DAI XML Schema and WSDL.</para></listitem>
            <listitem><para>lib/ - OGSA-DAI JAR files.</para></listitem>
            <listitem><para>etc/ogsadai_wsrf/ - OGSA-DAI configuration files - see below.</para></listitem>
            </itemizedlist>
            <para>Under Tomcat, OGSA-DAI resides in the following places:</para>
            <itemizedlist>
            <listitem><para>webapps/wsrf/share/schema/ogsadai/ - OGSA-DAI XML Schema and WSDL.</para></listitem>
            <listitem><para>webapps/wsrf/WEB-INF/lib/ - OGSA-DAI JAR files.</para></listitem>
            <listitem><para>webapps/wsrf/WEB-INF/etc/ogsadai_wsrf/ - OGSA-DAI configuration files - see below.</para></listitem>
            </itemizedlist>
        
            <para>The OGSA-DAI WSRF configuration files residing in the etc/ogsadai_wsrf directories are as follows:</para>
      <itemizedlist>      
            <listitem><para>server-config.wsdd - deployment descriptors for the current OGSA-DAI services.</para></listitem>
            <listitem><para>jndi-config.xml - JNDI deployment descriptors for the current OGSA-DAI services (see the GT4 documentation for more information).</para></listitem>
            <listitem><para>Data service resource files for each current data service. There will be one of these XML files for each current OGSA-DAI service. These files maintain a list of the current data service resources for each data service. The file name is derived from the service path e.g. a service with relative service path ogsadai/DataService has a file _ogsadai_DataService.dsr.xml.</para></listitem>
            <listitem><para>Data service resource directories. There is one such directory for each deployed data service resource - the directory shares the name of the data service resource e.g. MyRelationalResource Each directory contains:
            <itemizedlist>
            <listitem><para>dataResourceConfig.xml - data resource configuration file for the data service resource.</para></listitem>
            <listitem><para>activityConfig.xml - activity configuration file for the data service resource.</para></listitem>
            <listitem><para>DatabaseRoles.xml - roleMaps file for the data service resource.</para></listitem>
            </itemizedlist>
            </para></listitem>
      </itemizedlist>
        <para> To convert existing OGSA-DAI Perform documents to be compatible with OGSA-DAI WSRF see the <link linkend="s-ogsadai-admin-deploying-converting">next section</link>.</para>
    </section>
    <section id="s-ogsadai-admin-deploying-converting">
            <title>Converting OGSA-DAI Perform Documents</title>
            
           <para> In previous releases of OGSA-DAI, Perform documents were specified in a gds related namespace. 
        In OGSA-DAI WSRF we have removed from Perform document namespaces information related to the specification (OGSI, WSI, WSRF) 
        implemented at the service level.</para>
            
            <para>To convert Perform documents provided in the main OGSA-DAI distribution (for example OGSA-DAI release 5), within examples, or your own existing Perform documents, into this generic format:</para>
            <itemizedlist>
             <listitem><para>   
            Execute the ConvertPerform target within the OGSA-DAI WSRF ANT script:
            
            <screen>$ cd $DAI_WSRF
$ ant ConvertPerform -Dperform.dir=PATH-TO-PERFORM-DIRECTORY</screen>
            
            where PATH-TO-PERFORM-DIRECTORY contains files, all of which are assumed to be Perform documents. For example:
            
            <screen>$ cd $DAI_WSRF
$ ant ConvertPerform -Dperform.dir=examples/GDSPerform/JDBC/query</screen>
                 
            </para></listitem>
            <listitem><para>Do not worry if you make a mistake, the ANT target will make backups (with extension .bak) prior to converting the documents.</para></listitem>
            </itemizedlist>
    </section>
</section>
<section id="s-ogsadai-admin-testing"><title>Testing</title>
    <para>Please see <xref linkend="s-ogsadai-admin-deploying" /> for information on testing and configuring OGSA-DAI.</para>
</section>

<section id="s-ogsadai-admin-security_considerations"><title>Security considerations</title>
    &OGSA-DAI_Security_Considerations_Frag;
</section>

<section id="s-ogsadai-admin-troubleshooting"><title>Troubleshooting</title>
    <section id="s-ogsadai-admin-troubleshooting-cannotconnect"><title>Cannot connect to MySQL server on localhost:3306 exception</title>
    <para>I am using MySQL and keep on getting a java.sql.SQLException: Cannot connect to MySQL server on 
        localhost:3306 exception - what is the problem? </para>
    
     <para>The MySQL JDBC driver recommended in the OGSA-DAI documentation is not compatible with the latest versions of MySQL. 
    This is the case for MySQL 4.1.6 and 4.1.7 and may be the case for other versions. This problem usually causes the following error message to be logged:</para>
    
    <screen>java.sql.SQLException: Cannot connect to MySQL server on localhost:3306.
        Is there a MySQL server running on the machine/port you are trying to connect to? (java.lang.NumberFormatException)</screen>
    
    <para>To address this problem all you need to do is use a newer version of the MySQL JDBC driver JAR which can be downloaded from:</para>
    
    <para><ulink url="http://www.mysql.com/products/connector/j/">http://www.mysql.com/products/connector/j/</ulink></para>
    
<para>If you have already deployed services using the incompatible JAR, follow these steps:</para>
    <itemizedlist>
    <listitem><para>Stop your container.</para></listitem>
    <listitem><para>Replace the JAR file in the lib directory in the container. See Where Does Stuff Go? above.</para></listitem>
    <listitem><para>restart the container.</para></listitem>
   </itemizedlist>
    </section>
    <section id="s-ogsadai-admin-troubleshooting-illegalaccess"><title>Illegal access error</title>
   <para> Why do I get Exception in thread "main" java.lang.IllegalAccessError: tried to access field...?</para>
  <para>  
    This error can arise due to clashes of Xalan shipped with certain versions of Java and that shipped with the Globus Toolkit. 
      Please see the OGSA-DAI FAQ at <ulink url="http://www.ogsadai.org.uk/docs/current/doc/misc/FAQ.html#IllegalAccessError">http://www.ogsadai.org.uk/docs/current/doc/misc/FAQ.html#IllegalAccessError</ulink> for more information.
  </para>
        <para>
            Please check up the OGSA-DAI website (<ulink url="http://www.ogsadai.org.uk">www.ogsadai.org.uk</ulink>) for any updates. 
            In particular the OGSA-DAI FAQ although 
    note that this also caters for the non-WSRF distributions of OGSA-DAI. </para>
    </section>
</section>



