<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="cwscore-apis">
    <title>APIs</title>
    <section>
        <title>Programming Model Overview</title>
        <para> The C WS-Core provides interfaces for developers interested in writing web services
            and clients in C. The primary APIs available to the developer are the C stub bindings
            generated from WSDL and XSD. These APIs provide the structures and type definitions for
            each XML Schema type, client stub functions for invoking services, and service skeleton
            code that allows service writers to fill in the service implementation. </para>
        <para> The client stub bindings provide the following: <itemizedlist>
                <listitem>
                    <simpara>Portable ANSI-C API</simpara>
                </listitem>
                <listitem>
                    <simpara>Control of message handling and configurable attributes through client
                        handles</simpara>
                </listitem>
                <listitem>
                    <simpara>Asynchronous stub functions for non-blocking requests</simpara>
                </listitem>
                <listitem>
                    <simpara>EPR encapsulation for easy interaction with resources</simpara>
                </listitem>
                <listitem>
                    <simpara>Convenient handling of XSD wildcards</simpara>
                </listitem>
            </itemizedlist>
        </para>
        <para> For service writers, the C WS-Core provides service-side skeleton bindings that
            perform the necessary routing and marshalling for a service operation. The interface to
            the developer is through the service implementation functions that must be filled in.
            The service-side programming model includes the ability to load operation providers,
            which are generic operation implementations that exist over a set of services. This is
            useful with WSRF, where pseudo-operation inheritance exists. As well, message handling
            can be controlled at the service implementation level, providing flexibility and control
            to the service developer. </para>
        <para> The C WS-Core provides resource management using the resource API. This is a C API
            that can be invoked from within C services for creation, access, and control of
            resources and resource properties. </para>
    </section>

    <section>
        <title>Component API</title>

        <itemizedlist>

            <listitem>
                <simpara><ulink
                        url="http://www.globus.org/api/c-globus-4.2.0/globus_c_wsrf_resource/html/index.html"
                        >Resource and Resource Property API</ulink>: Useful for writing WSRF-enabled
                    services. This API allows resources to be created, accessed, and modified from
                    within a C Web Service implementation. </simpara>
            </listitem>

            <listitem>
                <simpara><ulink
                        url="http://www.globus.org/api/c-globus-4.2.0/globus_c_ws_messaging/html/index.html"
                        >Service Engine and Message Attributes</ulink>: The message attributes
                    provides mechanisms for manipulating runtime parameters of messages. This
                    includes security setup, specific HTTP and WS-Addressing configuration, among
                    others. </simpara>
                <simpara> The service engine API is useful for embedding Web Services in C programs.
                    This API allows an application to directly control service invocations and
                    interact with services as they are being invoked. It also provides a convenient
                    API for running a NotificationConsumer service (receiving notifications) from
                    within a client application. </simpara>
            </listitem>

            <listitem>
                <simpara><ulink
                        url="http://www.globus.org/api/c-globus-4.2.0/globus_notification_consumer/html/index.html"
                        >Notification Consumer API</ulink>: Allows creation of NotificationConsumer
                    resource instances from a client API. This API can be used in combination with
                    the Service Engine API to receive notifications. </simpara>
            </listitem>


            <listitem>
                <para><ulink
                        url="http://www.globus.org/api/c-globus-4.2.0/globus_c_wsrf_core_bindings/html/index.html"
                        >WSRF Core Bindings API</ulink>: These are the types generated from the set
                    of core WSRF schemas. For example, the
                    <emphasis>wsa_EndpointReferenceType</emphasis> passed to all EPR stub functions
                    is a generated type from the WS-Addressing schema. The other schemas include: <itemizedlist>
                        <listitem>
                            <simpara>WS-Addressing</simpara>
                        </listitem>
                        <listitem>
                            <simpara>WS-BaseFaults</simpara>
                        </listitem>
                        <listitem>
                            <simpara>WS-ResourceProperties</simpara>
                        </listitem>
                        <listitem>
                            <simpara>WS-ResourceLifetime</simpara>
                        </listitem>
                        <listitem>
                            <simpara>WS-BaseN</simpara>
                        </listitem>
                        <listitem>
                            <simpara>WS-ServiceGroup</simpara>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
        </itemizedlist>
    </section>
</chapter>
