<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % xinclude SYSTEM "../../../xinclude.mod" >
%xinclude;

]>
<book id="cwscoreUser">
  <title>GT <replaceable role="entity">version</replaceable> C WS Core : User's Guide</title>
  <titleabbrev>User's Guide</titleabbrev>
  <bookinfo>
    <abstract>
      <title>Introduction</title>
      <para> The C WS Core is an implementation of Web Services, WSRF, and WSN specifications in the
        C programming language. This means that a user can write their own Web Services and clients
        in C, and use the APIs and tools included in in the C WS Core to manage WS-Resources.</para>
      <para> The C WS Core includes:<itemizedlist>
          <listitem>
            <simpara>A small container for services</simpara>
          </listitem>
          <listitem>
            <simpara>An embeddable service container API</simpara>
          </listitem>
          <listitem>
            <simpara>API for managing resources</simpara>
          </listitem>
          <listitem>
            <simpara>API for managing notification consumers</simpara>
          </listitem>
          <listitem>
            <simpara>A WSDL to C binding generator</simpara>
          </listitem>
          <listitem>
            <simpara>Security Support</simpara>
          </listitem>
        </itemizedlist>
      </para>
      <para> It does not include support at this time for WSDL generation from C header files, or
        embedding services into 3rd party containers.</para>
    </abstract>
  </bookinfo>
  
   <chapter id="cwscore-user-using">
  <title>Using WS C Core Commands</title>


<!--
  <para>need the following topics:</para>
  <itemizedlist>
   <listitem><para>how do i subscribe to a service's topic?</para></listitem>
   <listitem><para>how do i query a resource?</para></listitem>
   <listitem><para> how do i destroy a resource?</para></listitem>
  </itemizedlist>
  -->

  <section id="cwscore-user-start-container">
    <title>Starting the C Container</title>
<indexterm type="cwscore"><primary>container</primary><secondary>starting</secondary></indexterm>
    <para>The <command>globus-wsc-container</command> command is an
    implementation of a Web Service container for hosting services written in
    C. By default, the container will run in the foreground and process SOAP
    requests until terminated by a signal.  See <olink targetptr="globus-wsc-container">globus-wsc-container</olink> documentation
    for a complete list of command-line options.

    <screen>
<prompt>%</prompt> <command>globus-wsc-container</command>

<computeroutput>Contact: https://grid.example.org:8443/</computeroutput></screen>
    </para>
  </section>

  <section id="cwscore-user-stop-container">
    <title>Stopping the C Container</title>
      <indexterm type="cwscore"><primary>container</primary><secondary>stopping</secondary></indexterm>
    <para>There is no special command for stopping a C container. If the
    command is in the foreground (default), then sending the TERM signal
    (typically <keycap>ctrl</keycap>-<keycap>C</keycap>).
    
    <screen>
<prompt>%</prompt> <command>globus-wsc-container</command>

<computeroutput>Contact: https://grid.example.org:8443</computeroutput>

<userinput>^C</userinput>

<computeroutput>Execution cancelled, cleaning up.</computeroutput>

<prompt>%</prompt> </screen>
    
    
    If the container is in the background, it can be terminated with the
    POSIX-standard <command>kill</command> command. If the container was
    started with the <option>-pidfile</option> command-line option, that fill
    can be read to determine which process to kill. For example:

    <screen>
<prompt>%</prompt> <command>globus-wsc-container -bg -pidfile $GLOBUS_LOCATION/var/wsc.pid</command>

<computeroutput>Contact: https://grid.example.org:8443</computeroutput>

<prompt>%</prompt> <command>cat $GLOBUS_LOCATION/var/wsc.pid</command>

<computeroutput>19773</computeroutput>

<prompt>%</prompt> <command>kill 19773</command>

<prompt>%</prompt> </screen>
    
    The container will automatically remove the PID file
    (<filename>$GLOBUS_LOCATION/var/wsc.pid</filename> in this example).
    </para>
  </section>

  <section id="cwscore-user-query-resources">
    <title>Accessing Resources Properties with C WS Core</title>
<indexterm type="cwscore"><primary>resource properties</primary><secondary>accessing</secondary></indexterm>
    <para>
    WSRF services share information on resource state through
    <glossterm baseform="resource properties">resource properties</glossterm>.
    C WS Core provides several tools for inspecting these properties. A
    <olink targetdoc="gtdeveloper" targetptr="gt-rp">list 
    of the properties</olink> provided by Globus Toolkit services is
    available in the developer's guide.
    </para>

    <para>
    The <olink 
    targetptr="globus-wsrf-get-property"><command>globus-wsrf-get-property</command></olink> and
    <command><olink 
    targetptr="globus-wsrf-get-properties">globus-wsrf-get-properties</olink></command>
    commands provide two options for getting the value of a single resource
    property or multiple resource properties, respectively. For this example,
    we'll explore some of the properties provided by the GRAM4 service.
    </para>

    <para>First, we'll check the version information of a GRAM4 service using
    <command>globus-wsrf-get-property</command>:
    <screen>
<prompt>% </prompt><command>globus-wsrf-get-property</command> <option>-s</option> <option>https://grid.example.org:8443/wsrf/services/ManagedJobFactoryService</option> \
    <option>'{http://mds.globus.org/metadata/2005/02}ServiceMetaDataInfo'</option>

<computeroutput><![CDATA[<ns1:ServiceMetaDataInfo xmlns:ns1="http://mds.globus.org/metadata/2005/02">
    <ns1:startTime>2008-06-19T16:34:31.248Z</ns1:startTime>
    <ns1:version>4.1.0</ns1:version>
    <ns1:serviceTypeName>ManagedJobFactoryService</ns1:serviceTypeName>
</ns1:ServiceMetaDataInfo>]]></computeroutput>

<prompt>% </prompt></screen>
    </para>

    <para>
    Now, we'll check for some system-specific information using
    <command>globus-wsrf-get-properties</command>:
    <screen>
<prompt>% </prompt><command>globus-wsrf-get-properties</command> <option>-s</option> <option>https://grid.example.org:8443/wsrf/services/ManagedJobFactoryService</option> \
    <option>'{http://www.globus.org/namespaces/2004/10/gram/job}hostCPUType'</option> \
    <option>'{http://www.globus.org/namespaces/2004/10/gram/job}hostOSName'</option>

<computeroutput>
<![CDATA[<ns1:hostCPUType xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job">i686</ns1:hostCPUType>
<ns2:hostOSName xmlns:ns2="http://www.globus.org/namespaces/2008/03/gram/job">Linux</ns2:hostOSName>]]>

</computeroutput>
<prompt>% </prompt></screen>
    </para>

    <para>
    The
    <command><olink targetptr="globus-wsrf-query">globus-wsrf-query-propery</olink></command>
    program can be used to perform more sophisticated queries of resource
    properties using <glossterm baseform="XML Path Language">XPath</glossterm> expressions.
    We can check for the number of local resource managers supported by this
    installation:

<screen>
<prompt>% </prompt><command>globus-wsrf-query</command> \
    <option>-s</option> <option>https://grid.example.org:8443/wsrf/services/ManagedJobFactoryService</option> \
    <option>'count(//*[local-name() = "availableLocalResourceManagers"])'</option>

<computeroutput>2</computeroutput>
<prompt>% </prompt></screen>
    </para>

    <para>We can then get the names of the local resource managers:

<screen>
<prompt>% </prompt><command>globus-wsrf-query</command> \
    <option>-s</option> <option>https://grid.example.org:8443/wsrf/services/ManagedJobFactoryService</option> \
    <option>'//*[local-name() = "availableLocalResourceManagers"]/*[1]/text()'</option>

<computeroutput>Fork</computeroutput>

<prompt>% </prompt><command>globus-wsrf-query</command> \
    <option>-s</option> <option>https://grid.example.org:8443/wsrf/services/ManagedJobFactoryService</option> \
    <option>'//*[local-name() = "availableLocalResourceManagers"]/*[2]/text()'</option>

<computeroutput>Multi</computeroutput>

<prompt>% </prompt></screen>
    </para>

  </section>

 </chapter>

 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../C_WS_Core_Interface_Commandline_Frag.xml"/>

 
  <chapter id="cwscore-user-troubleshooting">
    <title>Troubleshooting</title>
<indexterm type="cwscore"><primary>errors</primary></indexterm>
    <para>For a list of common errors in GT, see <olink targetdoc="gtuser" targetptr="errors"/>.</para>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../C_WS_Core_Errors_Frag.xml"/>
  </chapter>
  <chapter id="cwscore-user-usage">
    <title>Usage statistics collection by the Globus Alliance</title>
      <indexterm type="cwscore"><primary>usage statistics</primary></indexterm>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../C_WS_Core_Usage_Statistics_Frag.xml"/>
  </chapter>

      <glossary role="auto" id="glossary-cwscoreUser">
        <!-- 
        <remark>some terms not in the docs but wanted in glossary: 
        <glossterm>scheduler</glossterm>
        </remark>
        -->
        <glossdiv><title>A</title>
            <glossentry>
                <glossterm>Dummy term</glossterm>
                <glossdef>
                    <para>This is a dummy entry for the automatic glossary datab
ase. Do not edit.</para>
                </glossdef>
            </glossentry>
        </glossdiv>
      </glossary>
    <index type="cwscore">
    <title>Index</title>
</index>
</book>
