<?xml version='1.0' encoding='UTF-8'?>

<title>GT 4.0 Java WS Core : System Administrator&apos;s Guide</title>
<titleabbrev>System Administrator&apos;s Guide</titleabbrev>
<section id="s-javawscore-admin-introduction">
  <title>Introduction</title>
  <para>This guide contains advanced configuration information for system administrators
  working with Java WS Core. It provides references to information on procedures
  typically performed by system administrators, including installation, configuring,
    deploying, and testing the installation.</para>
  <important>
    <simpara>This information is in addition to the basic Globus Toolkit prerequisite, overview, installation, security configuration instructions in the <ulink url="../../admin/docbook/">GT 4.0 System Administrator&apos;s Guide</ulink>. Read through this guide before continuing!</simpara>
  </important>
</section>
<section id="installing">
  <title>Building and Installing</title>
  <para>Java WS Core  is built and installed as part of a default GT 4.0 installation.
        For basic installation instructions, see the <ulink url="../../admin/docbook/">GT 4.0 System Administrator&apos;s Guide</ulink>. No extra installation steps are required for this component.</para>
  <para>The following are optional instructions for more advanced types of installations.
  These are for those advanced users who want to build the latest code from CVS or are just interested in the Java WS Core.</para>
  <section id="s-javawscore-admin-buildfromsource">
    <title>Building from source</title>
    <orderedlist>
	    <listitem>
              <para>
Obtain the source code for Java WS Core:
</para>
              <formalpara>
                <title>From CVS</title>
                <para>
<orderedlist>
                    <listitem>
                      <para>
  To get the latest source from cvs execute:
 <screen> cvs -d :pserver:anonymous@cvs.globus.org:/home/globdev/CVS/globus-packages \
     checkout wsrf</screen>
 </para>
                    </listitem>
                    <listitem>
                      <para>
  Change into the <computeroutput>wsrf</computeroutput> directory.
 <screen> cd wsrf</screen>
 </para>
                    </listitem>
                  </orderedlist></para>
              </formalpara>
              <formalpara>
                <title>From Core-only source distribution</title>
                <para><orderedlist>
                    <listitem>
                      <para>
   Untar or unzip the distribution archive.
   <screen> tar xvfz ws-core-XXX-src.tar.gz</screen>
 </para>
                    </listitem>
                    <listitem>
                      <para>
  Change into the unpacked distribution directory.
   <screen> cd ws-core-XXX</screen>
 </para>
                    </listitem>
                  </orderedlist></para>
              </formalpara>
            </listitem>
	    <listitem>
            <para>Set the <computeroutput>GLOBUS_LOCATION</computeroutput> environment variable to the absolute path of the target directory of your installation. On Windows:</para>
<screen> set GLOBUS_LOCATION=c:\gt4</screen>
<para>On Unix/Linux:</para>
<screen> setenv GLOBUS_LOCATION /soft/gt4/</screen>
<para> or </para>
<screen> export GLOBUS_LOCATION=/soft/gt4/</screen>
<para>
If <computeroutput>GLOBUS_LOCATION</computeroutput> is not set, an <computeroutput>install</computeroutput> directory will be created under the current directory.
</para></listitem>
            <listitem>
              <para>Run:
 <screen> ant all</screen>
 </para>
              <para>
  Additional arguments can be specified on the <computeroutput>ant</computeroutput> command line to customize the build:
  <itemizedlist>
                  <listitem>
                    <simpara><computeroutput>-DwindowsOnly=false</computeroutput> - generate launch scripts for standard Globus tools such as <computeroutput>grid-proxy-init</computeroutput>, etc. (Unix/Linux only)</simpara>
                  </listitem>
                  <listitem>
                    <simpara><computeroutput>-Dall.scripts=true</computeroutput> - generate Windows and Unix launch scripts</simpara>
                  </listitem>
                  <listitem>
                    <simpara><computeroutput>-Denable.container.desc</computeroutput> - create and configure the container with a global security descriptor</simpara>
                  </listitem>
                </itemizedlist>
 </para>
            </listitem>
    </orderedlist>
  </section>
  <section id="s-javawscore-admin-installcoreonlybinary">
    <title>Installing Core-only binary distribution</title>
    <orderedlist>
	    <listitem><para>
		Untar or unzip the distribution archive. <screen> tar xvfz ws-core-XXX-bin.tar.gz</screen>
            </para></listitem>
            <listitem><para>Change into the unpacked distribution directory. <screen> cd ws-core-XXX</screen>
            </para></listitem>
            <listitem><para>
            Set the <computeroutput>GLOBUS_LOCATION</computeroutput> environment variable to the unpacked distribution directory.  On Windows:</para>
<screen> set GLOBUS_LOCATION=c:\gt4</screen>
<para>On Unix/Linux:</para>
<screen> setenv GLOBUS_LOCATION /soft/gt4/</screen>
<para> or </para>
<screen> export GLOBUS_LOCATION=/soft/gt4/</screen>
</listitem>
    </orderedlist>
    <para>
<emphasis>Note: </emphasis>Please make sure to have the <ulink url="http://java.sun.com/products/jaas/index-10.html">JAAS</ulink> library installed if running with J2SE 1.3.1.
</para>
  </section>
</section>
<section id="s-javawscore-admin-configuring" xreflabel="Java WS Core Configuration">
  <title>Configuring</title>
&Java_WS_Core_Interface_Config_Frag;
</section>
<section id="s-javawscore-admin-deploying">
  <title>Deploying</title>
  <para>
  The Globus services can be run either in the standalone Java WS Core container that is installed with GT, or deployed into Tomcat.
  </para>
  <section>
      <title>Java WS Core container</title>
      <para>The standalone Java WS Core container can be started and stopped with the 
       provided <command>globus-start-container</command>
       and <command>globus-stop-container</command>
       programs. There are also helper programs (available only with the full GT installation) to start and stop the container
       detached from the controlling terminal (<command>globus-start-container-detached</command> and <command>globus-stop-container-detached</command>).  These commands are documented in the <ulink url="../../common/javawscore/Java_WS_Core_Commandline_Frag.html">Java WS Core Command Reference</ulink>.
      </para>
 
    <section>
      <title>Deploying and undeploying services</title>
      <para>
       To deploy a service into Java WS Core container use the <command>globus-deploy-gar</command> tool. To undeploy a service use <command>globus-undeploy-gar</command>.  These commands are documented in the 
<ulink url="../../common/javawscore/Java_WS_Core_Commandline_Frag.html">Java WS Core Command Reference</ulink>.  
      </para>
    </section>

    <section>
      <title>Recommended JVM settings for the Java WS Core container</title>
      <para>
      It is recommended to increase the maximum heap size of the JVM when running the container. By default on Sun JVMs a 64MB maximum heap size is used. The maximum heap size can be set using the <computeroutput>-Xmx</computeroutput> JVM option. Example:
     </para>
     <screen> $ setenv GLOBUS_OPTIONS -Xmx512M
 $ $GLOBUS_LOCATION/bin/globus-start-container</screen>
     <para>
     The above example will make the container start with maximum heap size set to 512MB.
     </para>
     <para>
     It is also recommended to experiment with other JVM settings to improve performance. For example, the <computeroutput>-server</computeroutput> option on Sun JVMs enables a server VM which can deliver better performance for server applications.
     </para>
    </section>
  </section>

  <section id="javawscore-admin-tomcat-deploying">
    <title>Deploying into Tomcat</title>
    <para>To deploy a Java WS Core installation into Tomcat run:</para>

<screen>$ cd $GLOBUS_LOCATION
$ ant -f share/globus_wsrf_common/tomcat/tomcat.xml deploySecureTomcat -Dtomcat.dir=<emphasis>&lt;tomcat.dir&gt;</emphasis></screen>

<para>Where <emphasis>&lt;tomcat.dir&gt;</emphasis> is an <emphasis>absolute</emphasis> path to the Tomcat installation directory. 
Also, <computeroutput>-Dwebapp.name=&lt;name&gt;</computeroutput> can be specified to set the name of the web application under which the installation will be deployed. By default &quot;<computeroutput>wsrf</computeroutput>&quot; web application name is used.
</para>
<para>
The <computeroutput>deploySecureTomcat</computeroutput> task will update an existing Tomcat deployment if Java WS Core was already deployed under the specified web application name. The <computeroutput>redeploySecureTomcat</computeroutput> task can be used instead to overwrite the existing deployment.
</para>
<note>
   <simpara>Please note that during deployment a subset of the files from Java WS Core installation is copied into Tomcat. Also, the copied files in Tomcat might have different permissions then the originals.</simpara>
</note>

    <para>In addition to the above deployment step you will also need to modify
the Tomcat <filename>&lt;tomcat_root&gt;/conf/server.xml</filename> configuration file. In particular you will need to add the following configuration entries:
</para>
    <itemizedlist>
      <listitem>
        <para>Tomcat 4.1.x</para>
        <orderedlist>
            <listitem>
              <para>Add a HTTPS Connector in the <emphasis>&lt;Service name=&quot;Tomcat-Standalone&quot;&gt;</emphasis> section and update the parameters
appropriately with your local configuration:</para> 
<screen>&lt;Connector
  className=&quot;org.apache.catalina.connector.http.HttpConnector&quot;
  port=&quot;8443&quot; minProcessors=&quot;5&quot; maxProcessors=&quot;75&quot;
  authenticate=&quot;true&quot; secure=&quot;true&quot; scheme=&quot;https&quot;
  enableLookups=&quot;true&quot; acceptCount=&quot;10&quot; debug=&quot;0&quot;&gt;
    &lt;Factory
       className=&quot;org.globus.tomcat.catalina.net.HTTPSServerSocketFactory&quot;
        proxy=&quot;/path/to/proxy/file&quot;
        cert=&quot;/path/to/certificate/file&quot;
        key=&quot;/path/to/private/key/file&quot;
        cacertdir=&quot;/path/to/ca/certificates/directory&quot;/&gt;
&lt;/Connector&gt;</screen>
              <para>In the above the <computeroutput>proxy</computeroutput>, <computeroutput>cert</computeroutput>, <computeroutput>key</computeroutput> and <computeroutput>cacertdir</computeroutput> attributes are optional. Furthermore, the <computeroutput>proxy</computeroutput> and the combination of <computeroutput>cer</computeroutput>t and <computeroutput>key</computeroutput> attributes are mutually exclusive.
</para>
            </listitem>
            <listitem>
              <para>Add a HTTPS Valve in the <emphasis>&lt;Engine name=&quot;Standalone&quot; ... &gt; </emphasis>section:</para>
<screen>&lt;Valve className=&quot;org.globus.tomcat.catalina.valves.HTTPSValve&quot;/&gt;</screen>
            </listitem>
          </orderedlist>
      </listitem>
      <listitem>
        <para>Tomcat 5.0.x</para>
    <orderedlist>
            <listitem>
              <para>Add a HTTPS Connector in the <emphasis>&lt;Service name=&quot;Catalina&quot;&gt;</emphasis> section and update the parameters
appropriately with your local configuration: </para>
<screen>&lt;Connector
  className=&quot;org.globus.tomcat.coyote.net.HTTPSConnector&quot;
  port=&quot;8443&quot; maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot; 
  autoFlush=&quot;true&quot;
  disableUploadTimeout=&quot;true&quot; scheme=&quot;https&quot;
  enableLookups=&quot;true&quot; acceptCount=&quot;10&quot; debug=&quot;0&quot; 
   proxy=&quot;/path/to/proxy/file&quot;
   cert=&quot;/path/to/certificate/file&quot;
   key=&quot;/path/to/private/key/file&quot;
   cacertdir=&quot;/path/to/ca/certificates/directory&quot;/&gt;</screen>
        <para>In the above the <computeroutput>proxy</computeroutput>, <computeroutput>cert</computeroutput>, <computeroutput>key</computeroutput> and <computeroutput>cacertdir</computeroutput> attributes are optional. Furthermore, the <computeroutput>proxy</computeroutput> and the combination of <computeroutput>cer</computeroutput>t and <computeroutput>key</computeroutput> attributes are mutually exclusive.
</para>
            </listitem>
            <listitem>
              <para>Add a HTTPS Valve in the <emphasis>&lt;Engine name=&quot;Catalina&quot; ... &gt; </emphasis>section:</para>
<screen>&lt;Valve className=&quot;org.globus.tomcat.coyote.valves.HTTPSValve&quot;/&gt;</screen>
            </listitem>
          </orderedlist>
      </listitem>
    </itemizedlist>

    <para>Also, you may have to edit <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/web.xml</filename> if you are running Tomcat on a non-default port, i.e. not using port 8443 (HTTPS). For example, if you run Tomcat on port 443 using HTTPS then the WSRF servlet entry should be modified as follows:</para>
    <screen>&lt;web-app&gt;
...
    &lt;servlet&gt;
        &lt;servlet-name&gt;WSRFServlet&lt;/servlet-name&gt;
        &lt;display-name&gt;WSRF Container Servlet&lt;/display-name&gt;
        &lt;servlet-class&gt;
            org.globus.wsrf.container.AxisServlet
        &lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;defaultProtocol&lt;/param-name&gt;
            &lt;param-value&gt;https&lt;/param-value&gt;
        &lt;/init-param&gt; 
        &lt;init-param&gt;
            &lt;param-name&gt;defaultPort&lt;/param-name&gt;
            &lt;param-value&gt;443&lt;/param-value&gt;
        &lt;/init-param&gt;   
        &lt;load-on-startup&gt;true&lt;/load-on-startup&gt; 
    &lt;/servlet&gt;
...
&lt;/web-app&gt;</screen>

<note>
   <simpara>We recommend running Tomcat with Java 1.4.2+.</simpara>
</note>

    <section>
      <title>Enabling local invocations</title>
      <para>
	      To enable <ulink url="../../common/javawscore/developer-index.html#s-javawscore-developer-LocalInvocations">local invocation</ulink> in Tomcat you must add <computeroutput>axis-url.jar</computeroutput> to the CLASSPATH before starting Tomcat. 
</para>
      <para>
For example on Windows:
</para>
<screen>
 &gt; cd &lt;tomcat.dir&gt;
 &gt; set CLASSPATH=&lt;tomcat.dir&gt;\common\lib\axis-url.jar
 &gt; bin\startup
</screen>
<para>
On Unix/Linux (csh/tcsh):
</para>
<screen>
 $ cd &lt;tomcat.dir&gt;
 $ setenv CLASSPATH &lt;tomcat.dir&gt;/common/lib/axis-url.jar
 $ bin/startup
</screen>
<para>
</para>
    </section>

    <section id="javawscore-admin-tomcat-debugging">
      <title>Debugging</title>

      <section>
      <title>Tomcat log files</title>
      <para>
      Please always check the Tomcat log files under the <filename>&lt;tomcat.dir&gt;/logs</filename> directory for any errors or exceptions.
      </para>
      </section>

      <section>
      <title>Enabling Log4J debugging</title>

  <itemizedlist>
      <listitem>
        <para>Tomcat 4.1.x</para>
        <para>
         Copy <filename>$GLOBUS_LOCATION/lib/commons-logging.jar</filename> files to <filename>&lt;tomcat.dir&gt;/common/lib</filename> directory. Also, copy <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/classes/log4j.properties</filename> file to <filename>&lt;tomcat.dir&gt;/common/classes/</filename> directory. Then configure the Log4j configuration file in <filename>&lt;tomcat.dir&gt;/common/classes/</filename> directory appropriately. The debugging settings will affect all the code in <emphasis>all</emphasis> web applications.
        </para>
      </listitem>
      <listitem>
        <para>Tomcat 5.0.x</para>
        <para>
         Copy <filename>$GLOBUS_LOCATION/lib/log4j-1.2.8.jar</filename> and <filename>$GLOBUS_LOCATION/lib/commons-logging.jar</filename> files to <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/lib/</filename> directory. Then configure the Log4j configuration file in <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/classes/</filename> directory appropriately. The debugging settings will only affect the web application code.
      </para>
     </listitem>
   </itemizedlist>
    </section>
     </section>
    <section>
      <title>Creating WAR file</title>
      <para>
To create a <computeroutput>.war</computeroutput> of a Java WS Core installation do:
</para>
<screen>
 $ cd $GLOBUS_LOCATION
 $ ant -f share/globus_wsrf_common/tomcat/tomcat.xml war -Dwar.file=<emphasis>&lt;war.file&gt;</emphasis>
</screen>
<para>
Where <emphasis>&lt;war.file&gt;</emphasis> specifies the <emphasis>absolute</emphasis> path of the war file.
</para>
      <para>
Please note that deploying a <computeroutput>war</computeroutput> file might not be enough to have a working Java WS Core deployment. For example, in some cases the <computeroutput>xalan.jar</computeroutput> must be placed in the <computeroutput>endorsed</computeroutput> directory of the container.
</para>
    </section>

    <section>
      <title>Deploying and undeploying services</title>
      <para>
To deploy a service into Tomcat, first deploy the service into a regular GT installation using the <command>globus-deploy-gar</command> tool and then deploy the GT installation into Tomcat (as described in <xref linkend="s-javawscore-admin-deploying" />). Similarly, to undeploy a service, first undeploy the service from a regular GT installation using <command>globus-undeploy-gar</command> tool and then <emphasis>deploy</emphasis> the GT installation into Tomcat.
      </para>
<note>
   <simpara>Some GT services may not work properly in Tomcat.</simpara>
</note>
    </section>

 </section>
</section>
<section id="s-javawscore-admin-testing">
  <title>Testing</title>
  <para>To execute Java WS Core tests first ensure Ant is configured with JUnit (To install JUnit with Ant copy the junit.jar found in the JUnit distribution to the $ANT_HOME/lib directory).</para>
  <para>To execute the test do the following:</para>
<orderedlist>
          <listitem>
            <para>Start the standalone container with <computeroutput>-nosec</computeroutput> argument:
 <screen>
 $ cd $GLOBUS_LOCATION
 $ bin/globus-start-container -nosec</screen>
</para>
          </listitem>
          <listitem>
            <para>Run the interoperability tests:
 <screen>
 $ ant -f share/globus_wsrf_test/runtests.xml runServer \
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_interop.jar</screen>
</para>
          </listitem>
          <listitem>
            <para>Run the unit tests:
 <screen>
 $ ant -f share/globus_wsrf_test/runtests.xml runServer \
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_unit.jar -DbasicTestsOnly=true</screen>
</para>
          </listitem>
          <listitem>
            <para>If some tests failed examine the test results in the <computeroutput>$GLOBUS_LOCATION/share/globus_wsrf_test/tests/test-reports/</computeroutput> directory.</para>
          </listitem>

  </orderedlist>
  <para>
	  Please see <ulink url="../../common/javawscore/developer-index.html#s-javawscore-developer-runningtests">
		  the developer guide</ulink> for more information on running the tests and the testing infrastructure.
</para>
</section>
<section id="s-javawscore-admin-security_considerations">
  <title>Security Considerations </title>
&Java_WS_Core_Security_Considerations_Frag;
</section>
<section id="s-javawscore-admin-troubleshooting">
  <title>Troubleshooting</title>
  <section id="s-javawscore-admin-globusstop">
    <title><computeroutput>globus-stop-container</computeroutput> fails with an authorization error</title>
    <para>
By default <computeroutput>globus-stop-container</computeroutput> must be executed with the same credentials as the container it is running with. If the <emphasis>ShutdownService</emphasis> or the container is configured with separate private key and certificate files (usually <computeroutput>/etc/grid-security/containercert.pem</computeroutput> and <computeroutput>/etc/grid-security/containerkey.pem</computeroutput>) do the following to stop the container:
</para>
<screen>
 $ grid-proxy-init -cert /etc/grid-security/containercert.pem \
                   -key /etc/grid-security/containerkey.pem \
                   -out containerproxy.pem
 $ setenv X509_USER_PROXY containerproxy.pem
 $ globus-stop-container
 $ unsetenv X509_USER_PROXY
 $ rm containerproxy.pem
</screen>
<para>
Alternatively, the <emphasis>ShutdownService</emphasis> can be configured with a separate gridmap file to allow a set of users to stop the container. Please see the <ulink url="../../security/wsaa.html">WS Authentication &amp; Authorization</ulink> section for details.
</para>
  </section>
  <section id="s-javawscore-admin-globusstart">
    <title><computeroutput>globus-start-container</computeroutput> hangs during startup</title>
    <para>
By default Sun 1.4.x+ JVMs are configured to use <computeroutput>/dev/random</computeroutput> device as an entropy source. Sometimes the machine can run out of entropy and applications (such as the container) using the <computeroutput>/dev/random</computeroutput> device will block until more entropy is available. One workaround for this issue is to configure the JVM to use <computeroutput>/dev/urandom</computeroutput> (non-blocking) device instead. For Sun JVMs a <computeroutput>java.security.egd</computeroutput> system property can be set to configure a different entropy source. To set the system property and pass it to <computeroutput>globus-start-container</computeroutput> script do the following:
</para>
<screen>
 export GLOBUS_OPTIONS=-Djava.security.egd=file:/dev/urandom
</screen>
<para>or</para>
<screen>
 setenv GLOBUS_OPTIONS -Djava.security.egd=file:/dev/urandom
</screen>
<para>
The same issue can also affect client programs. If you are running a client program with a GT generated script, you can set the <computeroutput>GLOBUS_OPTIONS</computeroutput> environment property as described above. However, if you are using a custom script or directly launching a program using the <computeroutput>java</computeroutput> command line, make sure to set the <computeroutput>java.security.egd</computeroutput> system property explicitly on the <computeroutput>java</computeroutput> command line. For example:
</para>
<screen>
 java -classpath $CLASSPATH -Djava.security.egd=file:/dev/urandom my.package.FooProgram
</screen>
<para>
<emphasis>Note:</emphasis> This does not apply to Windows machines.
</para>
  </section>
  <section id="s-javawscore-admin-programsfail">
    <title>Programs fail with <computeroutput>java.lang.NoClassDefFoundError: javax/security/...</computeroutput> errors</title>
    <para>
These errors might occur when running with J2SE 1.3.1 and the <ulink url="http://java.sun.com/products/jaas/index-10.html">JAAS</ulink> library is not installed. Either install the <ulink url="http://java.sun.com/products/jaas/install_notes.html">JAAS</ulink> library or upgrade to J2SE 1.4.x or higher.
</para>
  </section>

  <section id="s-javawscore-admin-tomcat-npe">
    <title><computeroutput>ConcurrentModificationException</computeroutput> in Tomcat 5.0.x</title>

<para>
If the following exception is visible in the Tomcat logs at startup it might cause the <computeroutput>HTTPSValve</computeroutput> to fail:
</para>
<screen>java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:782)
	at java.util.HashMap$EntryIterator.next(HashMap.java:824)
	at java.util.HashMap.putAllForCreate(HashMap.java:424)
	at java.util.HashMap.clone(HashMap.java:656)
	at mx4j.server.DefaultMBeanRepository.clone(DefaultMBeanRepository.java:56)</screen>
<para>
The <computeroutput>HTTPSValve</computeroutput> might fail with the following exception:
</para>
<screen>java.lang.NullPointerException
	at org.apache.coyote.tomcat5.CoyoteRequest.setAttribute(CoyoteRequest.java:1472)
	at org.apache.coyote.tomcat5.CoyoteRequestFacade.setAttribute(CoyoteRequestFacade.java:351)
	at org.globus.tomcat.coyote.valves.HTTPSValve.expose(HTTPSValve.java:99)
</screen>
<para>
These exceptions will prevent the transport security to work properly in Tomcat.
</para><para>
This is a Tomcat bug. Keep restarting Tomcat until it starts without the <computeroutput>ConcurrentModificationException</computeroutput> or switch to a different version of Tomcat.
</para>
  </section>


  <section id="s-javawscore-admin-troubleshooting-general">
    <title>General troubleshooting information</title>
&Java_WS_Core_Troubleshooting_Frag;
  </section>
</section>
<section id="s-javawscore-admin-usage">
  <title>Usage statistics collection by the Globus Alliance</title>
&Java_WS_Core_Usage_Statistics_Frag;
</section>
