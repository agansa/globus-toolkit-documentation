<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % xinclude SYSTEM "../../../xinclude.mod">
%xinclude;
]>
<section id="javawscore-deploying-tomcat" xreflabel="Deploying into Tomcat">
  <title>Deploying into Tomcat</title>

  <indexterm type="javawscore-howto">
    <primary>deploying your installation</primary>

    <secondary>into Tomcat</secondary>
  </indexterm>

  <indexterm type="javawscore">
    <primary>deploying your installation</primary>

    <secondary>into Tomcat</secondary>
  </indexterm>

  <para>To deploy a Java WS Core installation into Tomcat run:</para>

  <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_common/tomcat/tomcat.xml
    deploySecureTomcat \ -Dtomcat.dir=<emphasis>&lt;tomcat.dir&gt;</emphasis>
  </screen>

  <para>Where <emphasis>&lt;tomcat.dir&gt;</emphasis> is an
  <emphasis>absolute</emphasis> path to the Tomcat installation directory.
  Also, <computeroutput>-Dwebapp.name=&lt;name&gt;</computeroutput> can be
  specified to set the name of the web application under which the
  installation will be deployed. By default
  "<computeroutput>wsrf</computeroutput>" web application name is used.
   To enable <olink targetdoc="javawscoreDeveloper"
    targetptr="javawscore-connecting-localinvocations">local invocation</olink>
    in Tomcat you must specify <computeroutput>-Dlocal.invocations=true</computeroutput>
  </para>

  <para>The <computeroutput>deploySecureTomcat</computeroutput> task will
  update an existing Tomcat deployment if Java WS Core was already deployed
  under the specified web application name. The
  <computeroutput>redeploySecureTomcat</computeroutput> task can be used
  instead to overwrite the existing deployment.</para>
    
  <note>
    <simpara>Please note that during deployment a subset of the files from
    Java WS Core installation is copied into Tomcat. Also, the copied files in
    Tomcat might have different permissions then the originals.</simpara>
  </note>

  <para>In addition to the above deployment step you will also need to modify
  the Tomcat <filename>&lt;tomcat_root&gt;/conf/server.xml</filename>
  configuration file. In particular you will need to add the following
  configuration entries:</para>

  <itemizedlist>
    <listitem>
      <para>Tomcat 4.1.x</para>

      <orderedlist>
        <listitem>
          <para>Add a HTTPS Connector in the <emphasis>&lt;Service
          name="Tomcat-Standalone"&gt;</emphasis> section and update the
          parameters appropriately with your local configuration:</para>

          <screen> &lt;Connector className="org.apache.catalina.connector.http.HttpConnector"
            port="8443" minProcessors="5"
            maxProcessors="75" authenticate="true"
            secure="true" scheme="https"
            enableLookups="true" acceptCount="10"
            debug="0"&gt; 
   &lt;Factory className="org.globus.tomcat.catalina.net.HTTPSServerSocketFactory"
            proxy="/path/to/proxy/file"
            cert="/path/to/certificate/file"
            key="/path/to/private/key/file"
            cacertdir="/path/to/ca/certificates/directory"
            encryption="true"/&gt; 
 &lt;/Connector&gt;</screen>

          <para>In the above the <computeroutput>proxy</computeroutput>,
          <computeroutput>cert</computeroutput>,
          <computeroutput>key</computeroutput> and
          <computeroutput>cacertdir</computeroutput> attributes are optional.
          Furthermore, the <computeroutput>proxy</computeroutput> and the
          combination of <computeroutput>cert</computeroutput> and
          <computeroutput>key</computeroutput> attributes are mutually
          exclusive. The <computeroutput>encryption</computeroutput> attribute
          is also optional (defaults to <computeroutput>true</computeroutput>
          if not set).</para>

          <important>
            <simpara>The credentials and certificate configuration is used
            only by the connector and is not used by the rest of the web
            services stack in Globus Toolkit. To configure credentials for use
            in the toolkit, refer <olink targetdoc="wsaajava"
            targetptr="wsaajava-secdesc-introduction"></olink>.</simpara>
          </important>

          <para>The <computeroutput>mode</computeroutput> attribute can also
          be set to specify the connection mode. There are two supported
          connection modes: <computeroutput>ssl</computeroutput> and
          <computeroutput>gsi</computeroutput>. The
          <computeroutput>ssl</computeroutput> mode indicates a regular SSL
          connection mode. The <computeroutput>gsi</computeroutput> mode
          indicates a SSL connection mode with transport-level delegation
          support. The <computeroutput>ssl</computeroutput> mode is the
          default mode if the <computeroutput>mode</computeroutput> attribute
          is not specified. Please note that the
          <computeroutput>gsi</computeroutput> mode is intended for advanced
          users only.</para>
        </listitem>

        <listitem>
          <para>Add a HTTPS Valve in the <emphasis>&lt;Engine
          name="Standalone" ... &gt; </emphasis>section:</para>

          <screen>&lt;Valve
            className="org.globus.tomcat.catalina.valves.HTTPSValve"/&gt;</screen>
        </listitem>
      </orderedlist>
    </listitem>

    <listitem>
      <para>Tomcat 5.0.x</para>

      <orderedlist>
        <listitem>
          <para>Add a HTTPS Connector in the <emphasis>&lt;Service
          name="Catalina"&gt;</emphasis> section and update the parameters
          appropriately with your local configuration:</para>

          <screen>&lt;Connector
            className="org.globus.tomcat.coyote.net.HTTPSConnector"
            port="8443" maxThreads="150"
            minSpareThreads="25" maxSpareThreads="75"
            autoFlush="true" disableUploadTimeout="true"
            scheme="https" enableLookups="true"
            acceptCount="10" debug="0"
            proxy="/path/to/proxy/file"
            cert="/path/to/certificate/file"
            key="/path/to/private/key/file"
            cacertdir="/path/to/ca/certificates/directory"
            encryption="true"/&gt;</screen>

          <para>In the above the <computeroutput>proxy</computeroutput>,
          <computeroutput>cert</computeroutput>,
          <computeroutput>key</computeroutput> and
          <computeroutput>cacertdir</computeroutput> attributes are optional.
          Furthermore, the <computeroutput>proxy</computeroutput> and the
          combination of <computeroutput>cert</computeroutput> and
          <computeroutput>key</computeroutput> attributes are mutually
          exclusive. The <computeroutput>encryption</computeroutput> attribute
          is also optional (defaults to <computeroutput>true</computeroutput>
          if not set).</para>

          <important>
            <simpara>The credentials and certificate configuration is used
            only by the connector and is not used by the rest of the web
            services stack in Globus Toolkit. To configure credentials for use
            in the toolkit, refer <olink targetdoc="wsaajava"
            targetptr="wsaajava-secdesc-introduction"></olink>.</simpara>
          </important>

          <para>The <computeroutput>mode</computeroutput> attribute can also
          be set to specify the connection mode. There are two supported
          connection modes: <computeroutput>ssl</computeroutput> and
          <computeroutput>gsi</computeroutput>. The
          <computeroutput>ssl</computeroutput> mode indicates a regular SSL
          connection mode. The <computeroutput>gsi</computeroutput> mode
          indicates a SSL connection mode with transport-level delegation
          support. The <computeroutput>ssl</computeroutput> mode is the
          default mode if the <computeroutput>mode</computeroutput> attribute
          is not specified. Please note that the
          <computeroutput>gsi</computeroutput> mode is intended for advanced
          users only.</para>
        </listitem>

        <listitem>
          <para>Add a HTTPS Valve in the <emphasis>&lt;Engine name="Catalina"
          ... &gt; </emphasis>section:</para>

          <screen>&lt;Valve
            className="org.globus.tomcat.coyote.valves.HTTPSValve"/&gt;</screen>
        </listitem>
      </orderedlist>
    </listitem>

    <listitem>
      <para id="javawscore-admin-tomcat-55">Tomcat 5.5.x: 
        <xi:include href="Java_WS_Core_Tomcat_55_Frag.xml"
        xmlns:xi="http://www.w3.org/2001/XInclude"/>
      </para>
    </listitem>
  </itemizedlist>

  <note>
    <simpara>It is recommend to run Tomcat with Java 1.4.2+.</simpara>
  </note>

  <section>
    <title><filename>web.xml</filename> configuration</title>

    <para>You may have to edit
    <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/web.xml</filename> if
    you are running Tomcat on a non-default port, that is if not using port
    8443 (HTTPS). For example, if you run Tomcat on port 443 using HTTPS then
    the WSRF servlet entry should be modified to have the following
    <computeroutput>defaultProtocol</computeroutput> and
    <computeroutput>defaultPort</computeroutput> parameters:</para>

    <screen>&lt;web-app&gt; ... &lt;servlet&gt;
      &lt;servlet-name&gt;WSRFServlet&lt;/servlet-name&gt;
      &lt;display-name&gt;WSRF Container Servlet&lt;/display-name&gt;
      &lt;servlet-class&gt; org.globus.wsrf.container.AxisServlet
      &lt;/servlet-class&gt; &lt;init-param&gt;
      &lt;param-name&gt;defaultProtocol&lt;/param-name&gt;
      &lt;param-value&gt;https&lt;/param-value&gt; &lt;/init-param&gt;
      &lt;init-param&gt; &lt;param-name&gt;defaultPort&lt;/param-name&gt;
      &lt;param-value&gt;443&lt;/param-value&gt; &lt;/init-param&gt;
      &lt;load-on-startup&gt;true&lt;/load-on-startup&gt; &lt;/servlet&gt;
      ... &lt;/web-app&gt;</screen>

    <para>Alternatively, you can use the <filename>setDefaults</filename> Ant
    task to set the default protocol/port in the <filename>web.xml</filename>
    file:</para>

    <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_common/tomcat/tomcat.xml setDefaults \
        -Dtomcat.dir=<emphasis>&lt;tomcat.dir&gt;</emphasis> \
        -DdefaultPort=<emphasis>&lt;port&gt;</emphasis>
        -DdefaultProtocol=<emphasis>&lt;protocol&gt;</emphasis>
    </screen>

    <para>Also, by default the <olink targetdoc="javawscoreAdmin"
    targetptr="javawscore-configuring-webContext">
    <computeroutput>webContext</computeroutput> </olink> property is set to
    the directory name of the web application on the file system. However,
    sometimes the context under which the web application is published might
    be different from the directory name of the application. In such cases it
    is necessary to explicitly configure the published context name in the
    <filename>web.xml</filename> file. To configure the web application
    context name set the <computeroutput>webContext</computeroutput> parameter
    in <filename>web.xml</filename> file. For example (assuming services are
    published under
    <computeroutput>http://localhost:8080/foo/services</computeroutput>) the
    <computeroutput>webContext</computeroutput> should be set to:</para>

    <screen>&lt;web-app&gt; ... &lt;servlet&gt;
      &lt;servlet-name&gt;WSRFServlet&lt;/servlet-name&gt; ...
      &lt;init-param&gt; &lt;param-name&gt;webContext&lt;/param-name&gt;
      &lt;param-value&gt;foo&lt;/param-value&gt; &lt;/init-param&gt; ...
      &lt;load-on-startup&gt;true&lt;/load-on-startup&gt; &lt;/servlet&gt;
      ... &lt;/web-app&gt;</screen>
  </section>

  <section id="javawscore-admin-tomcat-debugging">
    <title>Debugging</title>

    <section>
      <title>Tomcat log files</title>

      <para>Please always check the Tomcat log files under the
      <filename>&lt;tomcat.dir&gt;/logs</filename> directory for any errors or
      exceptions.</para>
    </section>

    <section>
      <title>Enabling Log4J debugging</title>

      <itemizedlist>
        <listitem>
          <para>Tomcat 4.1.x</para>

          <para>Copy
          <filename>$GLOBUS_LOCATION/lib/common/commons-logging-*.jar</filename>
          files to <filename>&lt;tomcat.dir&gt;/common/lib</filename>
          directory. Also, copy
          <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/classes/log4j.properties</filename>
          file to <filename>&lt;tomcat.dir&gt;/common/classes/</filename>
          directory. Then configure the Log4j configuration file in
          <filename>&lt;tomcat.dir&gt;/common/classes/</filename> directory
          appropriately. The debugging settings will affect all the code in
          <emphasis>all</emphasis> web applications.</para>
        </listitem>

        <listitem>
          <para>Tomcat 5.0.x, 5.5.x</para>

          <para>Copy
          <filename>$GLOBUS_LOCATION/lib/common/log4j-*.jar</filename> and
          <filename>$GLOBUS_LOCATION/lib/common/commons-logging-*.jar</filename>
          files to
          <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/lib/</filename>
          directory. Then configure the Log4j configuration file in
          <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/classes/</filename>
          directory appropriately. The debugging settings will only affect the
          web application code.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Creating WAR file</title>

    <para>To create a <computeroutput>.war</computeroutput> of a Java WS Core
    installation do:</para>

    <screen>$ cd $GLOBUS_LOCATION $ ant -f share/globus_wsrf_common/tomcat/tomcat.xml war
        -Dwar.file=<emphasis>&lt;war.file&gt;</emphasis>
    </screen>

    <para>Where <emphasis>&lt;war.file&gt;</emphasis> specifies the
    <emphasis>absolute</emphasis> path of the war file.</para>

    <para>Please note that deploying a <computeroutput>war</computeroutput>
    file might not be enough to have a working Java WS Core deployment. For
    example, in some cases the <computeroutput>xalan.jar</computeroutput> must
    be placed in the <computeroutput>endorsed</computeroutput> directory of
    the container.</para>
  </section>

  <section>
    <title>Deploying and undeploying services</title>

    <para>Assuming Java WS Core is already deployed into Apache Tomcat (as
    described in <olink targetdoc="javawscoreAdmin"
    targetptr="javawscore-admin-deploying"></olink>), use the <olink
    targetdoc="javawscoreDeveloper" targetptr="deployGar"></olink> tool with
    the <command>-tomcat &lt;tomcat.dir&gt;</command> option to deploy your GT
    service directly into Tomcat. Similarly, to undeploy a service, use the
    <olink targetdoc="javawscoreDeveloper" targetptr="undeployGar"></olink>
    tool with the <command>-tomcat &lt;tomcat.dir&gt;</command> option to
    undeploy the service from Tomcat.</para>

    <para>Alternatively, to indirectly deploy a service into Tomcat, first
    deploy the service into a regular GT installation using the <olink
    targetdoc="javawscoreDeveloper" targetptr="deployGar"></olink> tool and
    then redeploy the GT installation into Tomcat (as described in <olink
    targetdoc="javawscoreAdmin"
    targetptr="javawscore-admin-deploying"></olink>). Similarly, to undeploy a
    service, first undeploy the service from a regular GT installation using
    <olink targetdoc="javawscoreDeveloper" targetptr="undeployGar"></olink>
    tool and then <emphasis>redeploy</emphasis> the GT installation into
    Tomcat.</para>

    <note>
      <simpara>Some GT services may not work properly in Tomcat.</simpara>
    </note>
  </section>
</section>