<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<section id="javawscore-error-codes"><title>Java WS Core Error Codes</title>
 <table frame='all' id="javawscore-error-codes-table"><title>Java WS Core Error Codes</title>
    <indexterm type="javawscore">
  <primary>error codes</primary>
    </indexterm>
  <indexterm type="user">
  <primary>error codes</primary>
   <secondary>Java WS Core</secondary>
 </indexterm>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<colspec colname='c3'/>
<thead>
<row>
  <entry>Error Code</entry>
  <entry>Definition</entry>
  <entry>Possible Solutions</entry>
</row>
</thead>
<tbody>
<row>
  <entry>"globus-stop-container fails with an authorization error"</entry>
  <entry>By default globus-stop-container  must be executed with the same credentials as the container it is running with.</entry>
  <entry>
   <orderedlist>
    <listitem><para>If the ShutdownService or the container is configured with separate private key and certificate files 
     (usually <filename>/etc/grid-security/containercert.pem</filename> and 
     <filename>/etc/grid-security/containerkey.pem</filename>) do the following to stop the container:

 <screen>$ grid-proxy-init -cert /etc/grid-security/containercert.pem \ -key
        /etc/grid-security/containerkey.pem \ -out containerproxy.pem $ setenv X509_USER_PROXY
        containerproxy.pem $ globus-stop-container $ unsetenv X509_USER_PROXY $ rm
        containerproxy.pem</screen></para></listitem>
    <listitem><para>Alternatively, the ShutdownService can be configured with a separate gridmap file to allow a set of users to stop the container. 
     Please see [FIXME WS Authentication &amp; Authorization] for details.</para></listitem>
   </orderedlist>
   
  </entry>
</row>
 <row>
  <entry>"globus-start-container hangs during startup"</entry>
  <entry>By default Sun 1.4.x+ JVMs are configured to use the <filename>/dev/random</filename> device as an entropy source. 
   Sometimes the machine can run out of entropy and applications (such as the container) using the <filename>/dev/random</filename> device 
   will block until more entropy is available.</entry>
  <entry><orderedlist>
   <listitem><para>One workaround for this issue is to configure the JVM to use /dev/urandom  (non-blocking) device instead. For Sun JVMs a java.security.egd system property can be set to configure a different entropy source. To set the system property and pass it to globus-start-container script do the following:

 <screen>export GLOBUS_OPTIONS=-Djava.security.egd=file:/dev/urandom</screen>

or

 <screen>setenv GLOBUS_OPTIONS -Djava.security.egd=file:/dev/urandom</screen></para></listitem>
   <listitem><para>The same issue can also affect client programs. If you are running a client program with a GT generated script, 
    you can set the <envar>GLOBUS_OPTIONS</envar> environment property as described above. 
    However, if you are using a custom script or directly launching a program using the Java  command line, make sure to set the 
    <property>java.security.egd</property> system property explicitly on the Java command line. For example:

<screen> java -classpath $CLASSPATH -Djava.security.egd=file:/dev/urandom
        my.package.FooProgram</screen>

Note: This does not apply to Windows machines.</para></listitem>
  </orderedlist>
  </entry>
 </row>
 <row>
  <entry><code>ConcurrentModificationException</code>  (in Tomcat 5.0.x)</entry>
  <entry>If the following exception is visible in the Tomcat logs at startup it might cause the HTTPSValve  to fail:

<screen>java.util.ConcurrentModificationException at
        java.util.HashMap$HashIterator.nextEntry(HashMap.java:782) at
        java.util.HashMap$EntryIterator.next(HashMap.java:824) at
        java.util.HashMap.putAllForCreate(HashMap.java:424) at
        java.util.HashMap.clone(HashMap.java:656) at
        mx4j.server.DefaultMBeanRepository.clone(DefaultMBeanRepository.java:56)</screen>

The HTTPSValve might fail with the following exception:

<screen>java.lang.NullPointerException at
        org.apache.coyote.tomcat5.CoyoteRequest.setAttribute(CoyoteRequest.java:1472) at
        org.apache.coyote.tomcat5.CoyoteRequestFacade.setAttribute(CoyoteRequestFacade.java:351) at
        org.globus.tomcat.coyote.valves.HTTPSValve.expose(HTTPSValve.java:99)</screen>

These exceptions will prevent the transport security to work properly in Tomcat.</entry>
  <entry>This is a Tomcat bug. Keep restarting Tomcat until it starts without the ConcurrentModificationException or switch to a different version of Tomcat.</entry>
 </row>
 <row>
  <entry><code>java.net.SocketException: Invalid argument or cannot assign requested address</code></entry>
  <entry>FIXME</entry>
  <entry>If you see this error in the container log or on the client side, try setting the following property:

 <screen>$ export GLOBUS_OPTIONS="-Djava.net.preferIPv4Stack=true"</screen></entry>
 </row>
 <row>
  <entry>GAR deploy/undeploy fails with <code>container is running</code> error</entry>
  <entry>A GAR file can only be deployed or undeployed locally while the container is off. However, GAR deployment/undeployment might 
   still sometimes fail with this error even if the container is off. This usually happens if the container has crashed or was stopped 
   improperly preventing the container from cleaning up its state files.</entry>
  <entry>To resolve this problem delete any files under the <filename>$GLOBUS_LOCATION/var/state</filename> directory and try to 
   redeploy/reundeploy the GAR file again.</entry>
 </row>
</tbody>
</tgroup>
</table>

</section>
