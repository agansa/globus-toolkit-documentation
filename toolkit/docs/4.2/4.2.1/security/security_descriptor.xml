<?xml version='1.0' encoding='UTF-8'?>

<title>Java WS Security Descriptor Framework</title>
<section id="security-secdesc-introduction">
  <title>Security Descriptors Introduction</title>
  <para>Security descriptors contain various security properties like credentials,
    the <glossterm>grid map file</glossterm> location, required authentication and authorization mechanisms and so on. There are four
  types of security descriptors in the code base for setting container, 
  service, resource and client security properties:</para>
  <informaltable>
  <tgroup cols="2">
  <tbody>
    <row>
      <entry><emphasis role="strong"> Descriptor Type</emphasis></entry>
      <entry><emphasis role="strong"> Funcationality</emphasis></entry>
    </row>
    <row>
      <entry>container security descriptor</entry>
      <entry>determines the container level security requirement that needs to be enforced.</entry>
    </row>
    <row>
      <entry>service security descriptor</entry>
      <entry>determines the service level security requirement that needs to be enforced.</entry>
    </row>      
    <row>
      <entry>resource security descriptor</entry>
      <entry>determines the resource level security requirement that needs to be enforced.</entry>
    </row>
    <row>
      <entry>client security descriptor</entry>
      <entry>determines the security properties that need to be used for a particular invocation.</entry>
    </row>
  </tbody>
  </tgroup>
  </informaltable>

  <para>Each of these is represented as a Java object and can be
  altered programmatically. If the security descriptor file is altered
  at runtime, it will <emphasis role="strong">not</emphasis> be reloaded</para>

  <para> Service and container security descriptors can be configured as  XML files in the global and service deployment descriptor as shown below.  Resource security descriptors can only be created dynamically, either programmatically or from a descriptor  file. Client security descriptor can be configured as a XML file and set as property on Stub. </para>

</section>

<section id="security-secdesc-configDesc">
  <title>Configuring security descriptors </title>

  <section id="security-secdesc-configDesc-container">
  <title>Configuring Container Security Descriptor</title>

  <orderedlist>

  <listitem> <para>The container security descriptor can be configured in the <emphasis>&lt;globalConfiguration&gt;</emphasis> section of the Java WS Core deployment descriptor. That file is in <filename>wsrf/java/core/source/deploy-server.wsdd</filename> if editing source, prior to deploy or <filename>$GLOBUS_LOCATION/etc/globus_wsrf_core/server-config.wsdd</filename> in a binary install.</para>

  <screen>
   &lt;globalConfiguration&gt;
   ...
   &lt;parameter name=&quot;containerSecDesc&quot;
              value=&quot;/path/to/container/descrptor/file.xml&quot;&gt;
   ...
   &lt;globalConfiguration&gt;
   ...
   </screen>
  </listitem>

  <listitem> <para> The descriptor file name can also be specified as a parameter when the Java WS Core continer is started up. The option is <command>-containerSecDesc &quot;/path/to/container/descrptor/file.xml&quot;</command></para>

  <note><para>This setting takes precendence over 1</para></note>
  </listitem>
  </orderedlist>

  </section> <!-- container sec desc -->

 <section id="security-secdesc-configDesc-service">
  <title>Configuring Service Security Descriptor</title>
  <orderedlist>
  <listitem><para> The service security descriptor can be configured in the service's deployment descriptor section as parameter. The parameter is a name/value that provides the path to the security descriptor file.

<screen>
   &lt;service name=&quot;MyDummyService&quot; provider=&quot;Handler&quot; 
   style=&quot;document&quot;&gt;
   ...
   &lt;parameter name=&quot;securityDescriptor&quot; 
      value=&quot;org/globus/wsrf/impl/security/descriptor/security-config.xml&quot;/&gt;
   ...
   &lt;/service&gt;</screen>

  </para>
  </listitem>
  <listitem><para> A ServiceSecurityDescriptor object can be created and initialized in the service's contructor.
<screen>
    public MyDummyService() throws Exception {

        ServiceSecurityDescriptor serviceDesc = 
            new ServiceSecurityDescriptor();

        // set security properties on the above object using get/set methods
        // in the API

        ServiceSecurityHelper
            .setSecurityDescriptor(&quot;DummyServiceName&quot;
                                   serviceDesc);
</screen>
  </para>

  <note><para> This method takes precendence over 1 </para></note>
  </listitem>

  <listitem><para> A ServiceSecurityDescriptor object can be created similar to above, but initialized from a file and set in the constructor.
<screen>
    public MyDummyService() throws Exception {

        ServiceSecurityDescriptor serviceDesc = 
            new ServiceSecurityDescriptor(&quot;/path/to/security/file&quot;);

        ServiceSecurityHelper
            .setSecurityDescriptor(&quot;DummyServiceName&quot;
                                   serviceDesc);
</screen>
  </para>

  <note><para> This method takes precendence over 1 </para></note>
  </listitem>
  </orderedlist>
</section> <!-- service sec desc -->

 <section id="security-secdesc-configDesc-resource">
  <title>Configuring Resource Security Descriptor</title>
  <orderedlist>
  <listitem><para> A ServiceSecurityDescriptor object can be created and initialized in the service's contructor.
<screen>
    public MyDummyService() throws Exception {

        ServiceSecurityDescriptor serviceDesc = 
            new ServiceSecurityDescriptor();

        // set security properties on the above object using get/set methods
        // in the API

        ServiceSecurityHelper
            .setSecurityDescriptor(&quot;DummyServiceName&quot;
                                   serviceDesc);
</screen>
  </para>
  </listitem>

  <listitem><para> A ServiceSecurityDescriptor object can be created similar to above, but initialized from a file and set in the constructor.
<screen>
    public MyDummyService() throws Exception {

        ServiceSecurityDescriptor serviceDesc = 
            new ServiceSecurityDescriptor(&quot;/path/to/security/file&quot;);

        ServiceSecurityHelper
            .setSecurityDescriptor(&quot;DummyServiceName&quot;
                                   serviceDesc);
</screen>
  </para>
  </listitem>
  </orderedlist>
</section> <!-- resource sec desc -->

 <section id="security-secdesc-configDesc-client">
  <title>Configuring Client Security Descriptor</title>
 <orderedlist>
 <listitem><para> Client security descriptors from a file can be configured directory on stub as follows:
<screen>
// Client security descriptor file 
String CLIENT_DESC = 
  &quot;org/globus/wsrf/samples/counter/client/client-security-config.xml&quot;;
//Set descriptor on Stub 
((Stub)port)._setProperty(Constants.CLIENT_DESCRIPTOR_FILE, CLIENT_DESC);
</screen>
</para>
</listitem>

<listitem><para>Client security descriptors object can be constructed from a file and configured directory on stub as follows:
<screen>
// Client security descriptor file 
String CLIENT_DESC = &quot;org/globus/wsrf/samples/counter/client/client-security-config.xml&quot;;
ClientSecurityDescriptor desc = new ClientSecurityDescriptor(CLIENT_DESC);
//Set descriptor on Stub 
((Stub)port)._setProperty(Constants.CLIENT_DESCRIPTOR, desc);
</screen>
</para>
<note><para> This takes precedence over 1</para></note>
</listitem>

<listitem><para>Client security descriptors object can be created and get/set methods can be used to set security properties. The object then ca be configured on stub as follows:
<screen>
ClientSecurityDescriptor desc = new ClientSecurityDescriptor();

// set security properties on the above object using set/get object

//Set descriptor on Stub 
((Stub)port)._setProperty(Constants.CLIENT_DESCRIPTOR, desc);
</screen>
</para>
<note><para> This takes precedence over 1</para></note>
</listitem>

 </orderedlist>
</section> <!-- client sec desc -->

</section> <!-- common configuration -->



<section id="security-secdesc-file-config">
<title> Reading security descriptor files </title>

  <para>If security descriptor is configured to be read from a file, it is loaded as follows:
    <orderedlist>
      <listitem>
        <simpara>As a file if an absolute file path is specified.</simpara>
      </listitem>
      <listitem>
        <simpara>As a resource (can be included as part of jar file).</simpara>
      </listitem>
      <listitem>
        <simpara>As a file, assuming that the specified path is relative to the installation root, typically pointed to by environment variable <envar>GLOBUS_LOCATION</envar>.</simpara>
      </listitem>
    </orderedlist>
</para>
</section> <!-- file read -->

<section id="security-secdesc-schema">
<title> Security Descriptor Schemas </title>

<para> All security descriptor files need to comply with a defined schema and should be written within the defined namespace.
<table>
      <title>Security descriptor schema</title>
      <tgroup cols="3">
        <tbody>
          <row>
          <entry> <emphasis role="strong"> Descriptor </emphasis></entry>
          <entry> <emphasis role="strong"> Schema </emphasis></entry>
          <entry> <emphasis role="strong"> Namespace </emphasis></entry>
          <entry> <emphasis role="strong"> Root Element </emphasis></entry>
          </row>
          <row>
          <entry> Container security descriptor  </entry>
          <entry> <para><ulink url="&docpath;security/container_security_descriptor.xsd">Schema</ulink></para></entry>
          <entry> http://www.globus.org/security/descriptor/container </entry>
          <entry> containerSecurityConfig </entry>
          </row>
          <row>
          <entry> Service security descriptor  </entry>
          <entry> <para><ulink url="&docpath;security/service_security_descriptor.xsd">Schema</ulink></para></entry>
          <entry> http://www.globus.org/security/descriptor/service </entry>
          <entry> serviceSecurityConfig </entry>
          </row>
          <row>
          <entry> Resource security descriptor  </entry>
          <entry> <para><ulink url="&docpath;security/service_security_descriptor.xsd">Schema</ulink>, (Same schema as service)</para></entry>
          <entry> http://www.globus.org/security/descriptor/service </entry>
          <entry> serviceSecurityConfig </entry>
          </row>
          <row>
          <entry> Client security descriptor  </entry>
          <entry> <para><ulink url="&docpath;security/client_security_descriptor.xsd">Schema</ulink></para></entry>
          <entry> http://www.globus.org/security/descriptor/client </entry>
          <entry> clientSecurityConfig </entry>
          </row>
        </tbody>
     </tgroup>
</table>
</para>
</section> <!-- schemas -->

<section id="security-secdesc-server-descFile">
  <title>Common Configuration for server-side security descriptors </title>

  <para>The next few sections deal with writing server side security
  descriptor files&mdash;that is, container, service and resource
  descriptor files to set various properties. Only the properties that
  are common all these descriptor are discussed here. Other properties
  specific to each descriptor are discussed in following
  sections.</para>

  <para> When parameters are configured in multiple descriptors the
  order of precendence is resource, service and then
  container. </para>

  <section id="security-secdesc-configCred">
    <title>Configuring credentials</title>

    <para>The container and each service can each be configured with a
    separate set of credentials. The credentials can be set using
    either: a) the path to a proxy file, or b) the path to a
    certificate and key file. If the configured credential file is
    modified/updated at runtime, the credentials will be automatically
    reloaded. The credentials can be configured by adding one of the
    following blocks to the container or service security
    descriptor. </para>

    <para>Example for option (a):

<screen>&lt;serviceSecurityConfig xmlns=&quot;http://www.globus.org/descriptor/server&quot;&gt;
   ...
   &lt;proxy-file value=&quot;proxyFile&quot;/&gt;
   ...
&lt;/serviceSecurityConfig&gt;</screen>

</para>

    <para>Example for option (b):

    <screen>&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...
   &lt;credential&gt;
       &lt;cert-key-files&gt;
              &lt;key-file value=&quot;keyFile&quot;/&gt;
              &lt;cert-file value=&quot;certFile&quot;/&gt;
       &lt;/cert-key-files&gt;
   &lt;/credential&gt;
   ...
&lt;/serviceSecurityConfig&gt;</screen>

</para>

<note><para>The above examples show use of service security
descriptor. If setting in container security descriptor, set namespace
and outer element as shown in <xref
linkend="security-secdesc-schema"/>.</para></note>

 <para>Credentials can be configured at resource, service or container level and the framework will look for credentials in the following order:
  <orderedlist>
        <listitem>
          <simpara>Resource credentials </simpara>
        </listitem>
        <listitem>
          <simpara><glossterm baseform="service credentials">Service credentials</glossterm></simpara>
        </listitem>
        <listitem>
          <simpara>Container credentials </simpara>
        </listitem>
        <listitem>
          <simpara>Default credentials. If credentials are not configured using any of the above methods, then underlying CoG JGlobus library is used. This will attempt to load the  <glossterm>proxy certificate</glossterm> of the user that is running the container as described in <xref linkend="javacog-admin-configuring-proxy"/>.</simpara>
        </listitem>
      </orderedlist> 
</para>
</section> <!-- credentials -->

  <section id="security-secdesc-replayAttack">
    <title>Configuring replay attack prevention parameters</title>
    <para> For message level security one may also set the amount of time for which to track received messages for the purpose of preventing replay attacks. Messages outside of this window will be rejected automatically, whereas messages within this window are checked against recently received messages through the use of the message UUID.
    </para>
    <itemizedlist>
    <listitem><para> Parameter <emphasis>replay-attack-fileter</emphasis> can be set to true or false to enable or disable replay attack prevention framework. By default, this feature is enabled.

        <screen>&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...
       &lt;replay-attack-filter value=&quot;true&quot;/&gt;
   ...
&lt;/serviceSecurityConfig&gt;</screen></para>
     </listitem>

    <listitem><para> Parameter <emphasis>replay-attack-window</emphasis> can be set to number of minutes the replay window should be. By default it is 5 minutes.

        <screen>&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...
       &lt;replay-attack-window value=&quot;100&quot;/&gt;
   ...
&lt;/serviceSecurityConfig&gt;</screen></para>
     </listitem>
    </itemizedlist>

<note><para>The above examples show use of service security
descriptor. If setting in container security descriptor, set namespace
and outer element as shown in <xref
linkend="security-secdesc-schema"/>.</para></note>

  </section> <!-- replay attack -->

  <section id="security-secdesc-rejectLimProxy">
    <title>Reject Limited Proxy</title>
    <para> This parameter can be used to configure if clients that present limited proxies can be allowed to authenticate successfully. By default, limited proxes are accepted.</para>

        <screen>&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...
       &lt;reject-limited-proxy value=&quot;true&quot;/&gt;
   ...
&lt;/serviceSecurityConfig&gt;</screen>

<note><para>The above examples show use of service security
descriptor. If setting in container security descriptor, set namespace
and outer element as shown in <xref
linkend="security-secdesc-schema"/>.</para></note>

  </section> <!-- reject limited proxy -->

  <section id="security-secdesc-contextLifetime">
    <title>Context lifetime</title>
      <para>When <emphasis>GSI Secure Conversation</emphasis> is used, a security context is established and by default the life of the context is determined by the least lifetime of the chain of certificates used in establishing the context. The value of the lifetime can be altered to be lesser than the above value by setting the value for following parameter in milliseconds.</para>

        <screen>&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...
       &lt;context-lifetime value=&quot;1000&quot;/&gt;
   ...
&lt;/serviceSecurityConfig&gt;</screen>

<note><para>The above examples show use of service security
descriptor. If setting in container security descriptor, set namespace
and outer element as shown in <xref
linkend="security-secdesc-schema"/>.</para></note>

  </section> <!-- context lifetime -->

  
  <section id="security-secdesc-configAuthz">
    <title>Configuring authorization mechanisms</title>

    <para>The container and each service/resource can be configured
    with a chain of interceptor, where each interceptor is a Policy
    Decision Points (PDPs) or Policy Information Points (PIPs). The
    element <constant>authzChain</constant> can be used to configure
    it. 

    <itemizedlist>

    <listitem><para>Each chain can contain an optional list of
    Bootstrap PIPs, an optional list of PIPs and a list of PDPs (with
    atleast one PDP).</para></listitem>

    <listitem><para> Each interceptor name is scoped and the format is
    <emphasis>prefix:FQDN of the interceptor</emphasis>. For example,
    <emphasis>self:org.globus.wsrf.impl.security.authorization.SelfAuthorization</emphasis>. The
    prefix is used to allow multiple instances of the same intercepor
    to exist in the same PDP chain.</para>

    <para><emphasis>Example:</emphasis></para>

    <screen>
&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...
&lt;authzChain&gt;

   &lt;pips&gt;
	&lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
   &lt;/pips&gt;
   &lt;pdps&gt;
        &lt;interceptor name=&quot;foo1:org.foo.authzMechanism bar1:org.bar.barMechanism&quot;/&gt;
   &lt;/pdps&gt;

&lt;/authzChain&gt;
   ...
&lt;serviceSecurityConfig/&gt;</screen>

    </listitem>
    
    <listitem>
    <para>
    Bootstap PIPs are optional and by default, <emphasis>org.globus.wsrf.impl.security.authorization.X509BootstrapPIP</emphasis> is used by the framework. Any other PIPs listed with in the &lt;bootstrapPips&gt; element is appended to the default PIP. If the configuration should override (that is X5008BootstapPIP should not be used), the optional attribute <constant>overwrite</constant> can be set to true.
    </para>

<screen>
&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...

&lt;authzChain combiningAlg=&quot;org.globus.sample.SampleAlg&gt;
   &lt;bootstrapPips overwrite=&quot;true&quot;
      &lt;interceptor name=&quot;scope1:org.globus.sample.BootstrapPIP1&quot;/&gt;
&lt;/bootstrapPips&gt;
   &lt;pips&gt;
	&lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
   &lt;/pips&gt;
   &lt;pdps&gt;
	&lt;interceptor name=&quot;scope3:org.globus.sample.PDP1&quot;/&gt;
   &lt;/pdps&gt;
&lt;/authzChain&gt;
..
&lt;/serviceSecurityConfig&gt;
</screen>

<para>In the above case, X509BootstrapPIP will not be used adn the BoostrapPIP1 will be used.</para>

<screen>
&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...

&lt;authzChain combiningAlg=&quot;org.globus.sample.SampleAlg&gt;
   &lt;bootstrapPips&gt;
      &lt;interceptor name=&quot;scope1:org.globus.sample.BootstrapPIP1&quot;/&gt;
&lt;/bootstrapPips&gt;
   &lt;pips&gt;
	&lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
   &lt;/pips&gt;
   &lt;pdps&gt;
	&lt;interceptor name=&quot;scope3:org.globus.sample.PDP1&quot;/&gt;
   &lt;/pdps&gt;
&lt;/authzChain&gt;
..
&lt;/serviceSecurityConfig&gt;
</screen>

<para>In the above case, X509BootstrapPIP followed by BoostrapPIP1 will be used.</para>

    </listitem>

    <listitem><para>The authorization chain can be configured with a
    combining algorithm using the attribute
    <emphasis>combiningAlg</emphasis>. The value should be a FQDN of a
    class that implements
    <constant>org.globus.wsrf.security.authorization.AuthorizationEngineSpi</constant>. The
    attribute is optional and by default the
    <constant>org.globus.wsrf.impl.security.authorization.providers.PermitOverrideAlgorithm</constant>
    is used. </para>

    <para>Example:</para>
<screen>
&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
   ...

&lt;authzChain combiningAlg=&quot;org.globus.sample.SampleAlg&gt;
   &lt;pips&gt;
	&lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
   &lt;/pips&gt;
   &lt;pdps&gt;
	&lt;interceptor name=&quot;scope3:org.globus.sample.PDP1&quot;/&gt;
        &lt;interceptor name=&quot;scope4:org.globus.sample.PDP2&quot;/&gt;
   &lt;/pdps&gt;
&lt;/authzChain&gt;
..
&lt;/serviceSecurityConfig&gt;
</screen>

<para> In the above, the default <constant>X509BootstrapPIP</constant> will be used. Following that, the PIPs, <constant>PIP1</constant> will be invoked to collect attributes. Finally the <constant>SampleAlg</constant> combining algorithm is used with the configured PDPs (<constant>PDP1</constant> and <constant>PDP2</constant>) are run to determine the decision.</para>
    </listitem>

    <listitem><para> Each interceptor can specify a parameter value
    and the schema defines it as xsd:any to allow for any user defined
    parameters. The parser extracts the elements in &lt;parameter&gt;
    element and returns them as DOM Element. It is left up to the
    Interceptor to parse the Element. The DOM object created is placed
    in the ChainConfig object passed to the authorization engine as a
    parameter called &quot;parameterObject&quot;. The prefix will be
    the scope specified in the interceptor name.  </para> 

    <para>Since schema validation is done, a schema must be supplied for the
    user defined parameters. The schema location is loaded as a
    resource and hence can be included in some jar placed in
    GLOBUS_LOCATION lib directory.  </para>
    
    </listitem>

    <listitem>
    <para>
    The toolkit provides a parameter schema by default, that allows
    for a name/value pair, where the value is a string. Example :

    <screen>
&lt;containerSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/container&quot; 
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
  xsi:schemaLocation=&quot;http://www.globus.org/security/descriptor 
  name_value_type.xsd&quot;
  xmlns:param=&quot;http://www.globus.org/security/descriptor&quot;&gt;
   &lt;authzChain&gt;
     &lt;pdps&gt;
       &lt;interceptor name=&quot;gridmapAuthz:org.globus.wsrf.impl.security.GridMapAuthorization&quot;&gt;
                    &lt;parameter&gt;
                        &lt;param:nameValueParam&gt;
                            &lt;param:parameter name=&quot;gridmap-file&quot;
                                            value=&quot;/home/user1/grid-mapfile&quot;/&gt;
                        &lt;/param:nameValueParam&gt;
                    &lt;/parameter&gt;
           &lt;/interceptor&gt;
	&lt;/pdps&gt;
    &lt;/authzChain&gt;
&lt;/containerSecurityConfig&gt;
    
    </screen>
    </para>

    <para>When the above is parsed, a DOM Element is constructed with element &lt;param:nameValuParam&gt; and stored in the ChainConfig object as parameter with name &quot;gridmapAuthz:parameterObject&quot;. The GridMapAuthorization PDP, uses ObjectDeserializer to retrieve the name/value pairs.</para>
    </listitem>

    </itemizedlist> 
</para>

    <para> The following PDPs are a part of the toolkit and are configured as shown. The framework maps and plugs in the scoped name of the PDP at the time of authorization.
</para>
    <table>
      <title>Builtin PDPs</title>
      <tgroup cols="3">
        <tbody>
          <row>
            <entry>
             <emphasis role="strong">Default Descriptor Configuration</emphasis>
            </entry>
            <entry>
              <emphasis role="strong">Default Prefix</emphasis>
            </entry>
            <entry>   
              <emphasis role="strong">Reference</emphasis>
            </entry>
          </row>
          <row>
            <entry>
              <constant>acl</constant>
            </entry>
            <entry>
              <constant>aclAuthz</constant>
            </entry>
            <entry> <xref linkend="authzframe-pdp-AccessControlPDP"/> </entry>
          </row>
          <row>
            <entry>
              <constant>none</constant>
            </entry>
            <entry>
              <constant>noneAuthz</constant>
            </entry>
            <entry> <xref linkend="authzframe-pdp-NoAuthorization"/> </entry>
          </row>
          <row>
            <entry>
              <constant>self</constant>
            </entry>
            <entry>
              <constant>selfAuthz</constant>
            </entry>
            <entry>
                  <simpara><xref linkend="authzframe-pdp-selfAuthz"/></simpara>
            </entry>
          </row>
          <row>
            <entry>
              <constant>gridmap</constant>
            </entry>
            <entry>
              <constant>gridmapAuthz</constant>
            </entry>
            <entry>
                  <simpara><xref linkend="authzframe-pdp-GridMapAuthorization"/></simpara>
            </entry>
          </row>
          <row>
            <entry>
              <constant>identity</constant>
            </entry>
            <entry>
              <constant>idenAuthz</constant>
            </entry>
            <entry>
                  <simpara><xref linkend="authzframe-pdp-IdentityAuthorization"/></simpara>
            </entry>
          </row>
          <row>
            <entry>
              <constant>host</constant>
            </entry>
            <entry>
              <constant>hostAuthz</constant>
            </entry>
            <entry>
                  <simpara><xref linkend="authzframe-pdp-HostAuthz"/></simpara>
            </entry>
          </row>
          <row>
            <entry>
              <constant>samlCallout</constant>
            </entry>
            <entry>
              <constant>samlAuthz</constant>
            </entry>
            <entry>
                  <simpara><xref linkend="authzframe-pdp-SAMLAuthzCallout"/></simpara>
            </entry>
          </row>
          <row>
            <entry>
              <constant>userName</constant>
            </entry>
            <entry>
              <constant>userNameAuthz</constant>
            </entry>
            <entry>
                  <simpara><xref linkend="authzframe-pdp-userNameAuthz"/></simpara>
            </entry>
          </row>

          <row>
            <entry>
              <constant>samlAssertion</constant>
            </entry>
            <entry>
              <constant>samlAssertionAuthz</constant>
            </entry>
            <entry> <xref linkend="authzframe-pdp-samlAuthz-assertion"/> </entry>
          </row>
          <row>
            <entry>
              <constant>N.A</constant>
            </entry>
            <entry>
              <constant>N.A</constant>
            </entry>
            <entry> <xref linkend="authzframe-pdp-RPAuthorization"/> </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Other than these, any custom authorization scheme could be
 configured with its own configuration information. Refer to <xref linkend="security-secdesc-customAuthz"/>, for details on writing a custom
authorization mechanism.</para>
  </section>
  <section id="security-secdesc-customAuthz">
    <title>Writing a custom authorization mechanism</title>
    <para>The authorization handler can be configured to call out to a custom authorization
    class. The class must implement the interface <constant>org.globus.wsrf.security.PDP</constant>. </para>
    <para><emphasis>Example: </emphasis> 
  </para>
    <screen>package org.foobar;

import ....;

public class FooPDP implements PDP
{
    private Principal authorizedIdentity;


    public Decision canAccess(List subjectAttributeCollection,
                              List resorceAttributeCollection,
                              List actionAttributeCollection,
                              RequestAttributes requestAttributes,
                              MessageContext msgCtx) 
        throws AuthorizationException {
    }

    public Decision canAdminister(List subjectAttributeCollection,
                                  List resorceAttributeCollection,
                                  List actionAttributeCollection,
                                  RequestAttributes requestAttributes,
                                  MessageContext msgCtx) 
        throws AuthorizationException {
    }

}
</screen>
    <para>To use the above PDP one would configure a service security descriptor with the following authorization settings:</para>
    <screen>&lt;securityConfig xmlns=&quot;http://www.globus.org&quot;&gt;
   ...
   &lt;authz value=&quot;foo1:org.foobar.FooPDP&quot;/&gt;
   ...
&lt;securityConfig/&gt;</screen>
    <para>This security descriptor (identified as <filename>/.../foo-pdp-security-config.xml</filename> below) can then be used by a service. The association is created by adding a couple of parameters to the service&apos;s WSDD entry:</para>
    <screen>...
&lt;service name=&quot;MyDummyService&quot; 
             provider=&quot;Handler&quot; 
             style=&quot;document&quot;&gt;
   ...
   &lt;parameter name=&quot;securityDescriptor&quot; 
                     value=&quot;/.../foo-pdp-security-config.xml&quot;/&gt;
   &lt;parameter name=&quot;foo1-authorizedIdentity&quot; 
                     value=&quot;/DC=org/DC=doe/OU=People/CN=John D&quot;/&gt;
   ...
&lt;/service&gt;</screen>
    <para>Note that the parameter &lt;parameter&gt;foo1-authorizedIdentity&lt;/parameter&gt; in the above configures the identity the PDP uses  for authorizing incoming requests. The parameter name is derived by composing the prefix (&lt;parameter&gt;foo1&lt;/parameter&gt;) used when specifying the PDP in the security descriptor with the property  (&lt;parameter&gt;authorizedIdentity&lt;/parameter&gt;) used in the PDP code.</para>
  </section>
</section> <!-- server side common config -->

<section id="security-secdesc-container">
  <title>Container-only security configuration</title>

  <para>Other than the security properties that have been described in previous section, few more properties are exclusive to the container security descriptor.</para>

  <section id="security-secdesc-container-adminAuthz">
    <title>Administrator Authorization Chain</title>

    <para>Other than the container/service/resource authorization, a administrative level authorization chain can be configured using the &lt;adminAuthz&gt; element. The decision returned by this chain, overrides subsequent authorization decision. That is, if the administator's authorizaiton chain returns a deny, the rest of the configured authorization (at container/service/resource) is <emphasis>not</emphasis> evaluated and the operation is denied. If the the administattor's chain returns the permit, the rest of the configuration is evaluated to see if the operation is allowed. </para>

<para>The element has the same schema as described in <xref linkend="security-secdesc-configAuthz"/>, with the outer element called <constant>adminAuthz</constant> in palce of <constant>authzChain</constant>.</para>

    <para><emphasis>Example:</emphasis></para>

    <screen>
&lt;containerSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
   ...
&lt;adminAuthz&gt;

   &lt;pips&gt;
	&lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
   &lt;/pips&gt;
   &lt;pdps&gt;
        &lt;interceptor name=&quot;foo1:org.foo.authzMechanism bar1:org.bar.barMechanism&quot;/&gt;
   &lt;/pdps&gt;

&lt;/adminAuthz&gt;
   ...
&lt;containerSecurityConfig/&gt;</screen>

  </section>
   
  <section id="security-secdesc-container-defaultAuthz">
    <title> Default Authorization Chain</title>
    <para>This element is used to configure default properties for any
    interceptor configured in authorization chains. The schema for
    this is similar to the authorization chain specification as described in <xref linkend="security-secdesc-configAuthz"/> and
    allows for xsd:any as interceptor parameter.  </para>

<screen>
&lt;defaultAuthzParam&gt;
	&lt;interceptor name=&quot;scope1:org.globus.sample.SamplePDP&quot;/&gt;
                    &lt;parameter&gt;
                        &lt;param:nameValueParam&gt;
                            &lt;param:parameter name=&quot;policy-file&quot; 
                                            value=&quot;/home/user1/samplePDPConfig&quot;/&gt;
                        &lt;/param:nameValueParam&gt;
                    &lt;/parameter&gt;
	&lt;/interceptor&gt;
&lt;/defaultAuthzParam&gt;

</screen>

  </section>

  <section id="security-secdesc-container-context">
    <title>Context Timer Interval</title>
      <para>When <emphasis>GSI Secure Conversation</emphasis> is used, a security context is established and a worker thread cleans up expired contexts. This parameter sets the interval on the timer thread that collects expired contexts established when GSI Secure Conversation is used. The value is the number of seconds between each run and defaults to 10minutes.</para>

        <screen>&lt;containerSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
   ...
       &lt;context-timer-interval value=&quot;100000&quot;/&gt;
   ...
&lt;/containerSecurityConfig&gt;</screen>
</section> <!-- context-timer-interval -->

  <section id="security-secdesc-container-replay">
    <title>Replay Timer Interval</title>
      <para>This parameter sets the interval on the timer thread that collects expired message digest ids, stored to prevent replay attack in the case of Secure Message. The value is set in seconds and the default value is 1 minute.</para>

        <screen>&lt;containerSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
   ...
       &lt;replay-timer-interval value=&quot;100&quot;/&gt;
   ...
&lt;/containerSecurityConfig&gt;</screen>
</section> <!-- replay-timer-interval -->

  <section id="security-secdesc-container-trusted">
    <title>Trusted Certificates</title>
      <para>This parameter sets location of trusted certificates to be used. The value should be a comma separated list of locations.</para>

        <screen>&lt;containerSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
   ...
       &lt;trusted-certificates value=&quot;/home/user1/trustedCerts /home/user1/newCerts&quot;/&gt;
   ...
&lt;/containerSecurityConfig&gt;</screen>

<para> If this configuration is not set, the underlying CoG JGlobus library is used to pick up trusted certificates. The library attempts to load  the certificates as described in <xref linkend="javacog-admin-configuring-trusted-certs"/>.
</para>
</section> <!-- trsuted-certificates -->

</section> <!-- container only configuration -->

<section id="security-secdesc-service-config">
<title> Service Security Descriptor Configuration </title>

  <section id="security-secdesc-configAuth">

    <title>Configuring authentication methods</title>
    
    <para> The authentication method required for accessing a service can be configured in the descriptor using the <constant>&lt;auth-method&gt;</constant> element. A per method configuration can also be done as described in <xref linkend="security-secdesc-configPerMethod"/>.</para>

    <para>Currently, the following authentication methods are supported:</para>
    <table>
      <title>Authentication methods</title>
      <tgroup cols="3">
        <tbody>
        <row> 
        <entry><emphasis role="strong"> Authentication Method </emphasis></entry>
        <entry><emphasis role="strong"> Element </emphasis></entry>
        <entry><emphasis role="strong"> Options/Notes </emphasis></entry>
        </row>
          <row>
          <entry> No Authentication </entry>
            <entry>
              <constant>&lt;none/&gt;</constant>
            </entry>
            <entry>
              <para>This method <emphasis>cannot</emphasis> be specified with any
          other authentication method.</para>
            </entry>
          </row>
          <row>
          <entry> GSI Secure Message </entry>
            <entry>
              <constant>&lt;GSISecureMessage/&gt;</constant>
            </entry>
            <entry>
              <para>The <constant>&lt;protection-level&gt; </constant>sub element can
          be used to specify a protection level that must be
          applied to the message:
          <itemizedlist>
            <listitem><para>
              <constant>&lt;integrity/&gt;</constant>, indicates that the message must be integrity protected (signed).</para>
            </listitem>
            <listitem><para>
              <constant>&lt;privacy/&gt;</constant>, indicates that the message must be privacy protected (encrypted and signed).</para>
            </listitem>
          </itemizedlist>
</para>
            </entry>
          </row>
          <row>
             <entry> GSI Secure Conversation </entry>
            <entry>
              <constant>&lt;GSISecureConversation/&gt;</constant>
            </entry>
            <entry>
              <para>The <constant>&lt;protection-level&gt; </constant>sub element can
          be used to specify a protection level that must be
          applied to the message:
          <itemizedlist>
            <listitem><para>
              <constant>&lt;integrity/&gt;</constant>, indicates that the message must be integrity protected (signed).</para>
            </listitem>
            <listitem><para>
              <constant>&lt;privacy/&gt;</constant>, indicates that the message must be privacy protected (encrypted and signed).</para>
            </listitem>
          </itemizedlist>
</para>
            </entry>
          </row>
          <row>
          <entry> GSI Secure Transport Authentication</entry>
            <entry>
              <constant>&lt;GSITransport/&gt;</constant>
            </entry>
            <entry>
              <para>The <constant>&lt;protection-level&gt; </constant>sub element can
          be used to specify a protection level that must be
          applied to the message:
          <itemizedlist>
            <listitem><para>
              <constant>&lt;integrity/&gt;</constant>, indicates that the message must be integrity protected (signed).</para>
            </listitem>
            <listitem><para>
              <constant>&lt;privacy/&gt;</constant>, indicates that the message must be privacy protected (encrypted and signed).</para>
            </listitem>
          </itemizedlist>
</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para><emphasis>Notes:</emphasis></para>
    <itemizedlist>
      <listitem>
        <simpara>Multiple authentication methods can be specified under the <constant>&lt;auth-method&gt;</constant> element (except for the <constant>&lt;none/&gt;</constant> method, see above). As long as one of the specified authentication methods is used, access to the service is allowed.</simpara>
      </listitem>
      <listitem>
        <simpara>If multiple authentication methods are specified, they need to be in alphabetical order. That is the following order needs to be maintained: GSISecureConversation, GSISecureMessage, GSISecureTransport. This does not imply that all three need to be specified, but just indicates that the specified authentication mechanisms needs to comply with above order.</simpara>
      </listitem>
      <listitem>
        <simpara>If <emphasis>no</emphasis> <constant>&lt;protection-level&gt;</constant> sub element is specified, then all protection levels are available to clients. However, if the <constant>&lt;protection-level&gt;</constant> sub element <emphasis>is</emphasis> specified, then the service will only accept the protection levels listed under said element.</simpara>
      </listitem>
      <listitem>
        <simpara>The <constant>org.globus.wsrf.impl.security.authentication.SecurityPolicyHandler</constant> handler <emphasis>must</emphasis> be installed properly in order for this to work. This handler is installed by default.</simpara>
      </listitem>
      <listitem>
        <simpara>If a security descriptor is <emphasis>not</emphasis> specified, authentication method enforcement is <emphasis>not</emphasis> performed.</simpara>
      </listitem>
    </itemizedlist>

    <para><emphasis>Example:</emphasis></para>
    <screen>&lt;serviceSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;

   &lt;!-- default auth-method for any other method --&gt;
   &lt;auth-method&gt;
      &lt;GSISecureConversation/&gt;
   &lt;/auth-method&gt;
&lt;/securityConfig&gt;</screen>

  </section>


  <section id="security-secdesc-configRunas">
    <title>Configuring the run-as mode</title>

    <para>The <constant>&lt;run-as&gt;</constant> element is used to configure the
    JAAS run-as identity under which the service method will be
    executed. The run-as identity can be configured on a per method
    basis also as described in <xref linkend="security-secdesc-configPerMethod"/>. Currently, the following run-as identities are
    supported:</para>
    <table>
      <title>Run-as methods</title>
      <tgroup cols="2">
        <tbody>
        <row>
        <entry><emphasis role="strong">
        Element
        </emphasis></entry>
        <entry><emphasis role="strong">
        Functionality
        </emphasis></entry>
        </row>
          <row>
            <entry>
              <constant>&lt;run-as value=&quot;caller&quot;/&gt;</constant>
            </entry>
            <entry>
              <para>The service method will be run with the security identity
          of the client. The caller Subject will contain the following:</para>
              <itemizedlist>
                <listitem>
                  <simpara>If using <emphasis>GSI Secure Message</emphasis>: a GlobusPrincipal (the identity of the signer) is added to the principal set of the caller-identity Subject. Also, the signer&apos;s certificate chain is added to the public credentials set of the Subject object.</simpara>
                </listitem>
                <listitem>
                  <para>If using <emphasis>GSI Secure Conversation</emphasis>: a
            GlobusPrincipal (the identity of the initiator) is added
            to the principal set of the Subject.  <itemizedlist>
                      <listitem>
                        <simpara>If client authentication was performed, the client&apos;s certificate chain will be added to the public credentials set of the Subject object. </simpara>
                      </listitem>
                      <listitem>
                        <simpara>Also, if delegation was performed, the delegated credential is added to the private credential set of the Subject object. </simpara>
                      </listitem>
                    </itemizedlist></para>
                </listitem>
                <listitem>
                  <simpara>If grid map file authorization was performed, a UserNamePrincipal is added to the principal set of the Subject object.</simpara>
                </listitem>
              </itemizedlist>
            </entry>
          </row>

          <row>
            <entry>
              <constant>&lt;run-as value=&quot;service&quot;/&gt;</constant>
            </entry>
            <entry>The service method will be run with the security identity of the service itself (if the service has one, otherwise the container identity will be used).</entry>
          </row>
          <row>
            <entry>
              <constant>&lt;run-as value=&quot;resource&quot;/&gt;</constant>
            </entry>
            <entry>The service method will be run with the security identity of the resource. If no resource is specified or if the resource does not have a configured subject, credentials in this order of occurrence will be used: service credential, container credential.</entry>
          </row>
          <row>
            <entry>
              <constant>&lt;run-as value=&quot;system&quot;/&gt;</constant>
            </entry>
            <entry>The service method will be run with the security identity of the container.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para><emphasis>Notes:</emphasis> </para>
    <itemizedlist>
      <listitem>
        <simpara><emphasis>resource-identity</emphasis> is the default setting.</simpara>
      </listitem>
      <listitem>
        <simpara>The <constant>org.globus.wsrf.impl.security.authentication.SecurityPolicyHandler</constant> handler <emphasis>must</emphasis> be installed properly in order for this to work. It is installed by default.</simpara>
      </listitem>
      <listitem>
        <simpara>If the security descriptor is <emphasis>not</emphasis> specified, then the run-as identity is not set and there will be no JAAS subject associated with the execution of the operation. This means that any method calls that require credentials and that are invoked by the service method itself will fail.</simpara>
      </listitem>
    </itemizedlist>
    <para><emphasis>Example:</emphasis></para>
    <screen>&lt;servicesecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;

   &lt;!-- default run-as for any other method --&gt;
   &lt;run-as&gt; 
      &lt;service-identity/&gt;
   &lt;/run-as&gt;

&lt;/serviceSecurityConfig&gt;</screen>
  </section>

  <section id="security-secdesc-configPerMethod">
    <title>Configuring per method authentication and run-as</title>

    <para> A per method configuration can be used to define expected authentication method for the method and also a run-as configuration. The element <constant>methodAuthentication</constant> is used to list all the method configuration. For each method, element <constant>method</constant> with method name as attribute needs to be used. If a method does not have such a configuration, default configuration, described in the last two sections are used. </para>

<para> Example</para>
<screen>

&lt;serviceSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
 ...
   &lt;method name=&quot;findServiceData&quot;&gt;
      &lt;auth-method&gt;
         &lt;none/&gt;
      &lt;/auth-method&gt;
   &lt;/method&gt;

   &lt;method name=&quot;subtract&quot;&gt;
      &lt;run-as&gt;
         &lt;service-identity/&gt;
      &lt;/run-as&gt;
   &lt;/method&gt; 

   &lt;method name=&quot;destroy&quot;&gt;
      &lt;auth-method&gt;
         &lt;GSISecureMessage/&gt;
         &lt;GSISecureConversation&gt;
            &lt;protection-level&gt;
               &lt;integrity/&gt;
            &lt;/protection-level&gt;
         &lt;/GSISecureConversation&gt;
      &lt;/auth-method&gt;
   &lt;/method&gt;

   &lt;!-- default run-as for any other method --&gt;
   &lt;run-as&gt; 
      &lt;system-identity/&gt;
   &lt;/run-as&gt;

   &lt;!-- default auth-method for any other method --&gt;
   &lt;auth-method&gt;
      &lt;GSISecureConversation/&gt;
   &lt;/auth-method&gt;
...
&lt;/serviceSecurityConfig&gt;

</screen>

    <para>In the above example:</para>
    <itemizedlist>
      <listitem>
        <simpara>the <function>findServiceData()</function> operation does not require any authentication. Since no run-as per method is specified, default specification, system-identity is used.</simpara>
      </listitem>
      <listitem>
        <simpara>the <function>destroy()</function> operation requires either <emphasis>GSI Secure Message</emphasis> authentication with either level of protection or <emphasis>GSI Secure Conversation</emphasis> authentication with integrity protection. Default run-as is used.</simpara>
      </listitem>
      <listitem>
        <simpara>substract method does not have a specific authentication speicifed, so the default GSI Secure Conversation is used. But the operation is run with service identity. </simpara>
      </listitem>
      <listitem>
        <simpara>all other operations must be authenticated with <emphasis>GSI Secure Conversation</emphasis> with either level of protection.</simpara>
      </listitem>
    </itemizedlist>
  </section>
</section> <!-- server side descriptor -->


<section id="security-secdesc-client">
  <title>Client Security Descriptor Configuration </title>

  <section id="security-secdesc-client-cred">

  <title>Configuring credentials </title>

    <para>The client can be configured with credentials using the
    descriptor. The credentials can be set using either: a) the path
    to a proxy file, or b) the path to a certificate and key file. The
    credentials can be configured by adding one of the following
    blocks to the client security descriptor. </para>

    <para>Example for option (a):

<screen>&lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/descriptor/clent&quot;&gt;
   ...
   &lt;proxy-file value=&quot;proxyFile&quot;/&gt;
   ...
&lt;/clientSecurityConfig&gt;</screen>

</para>

    <para>Example for option (b):

    <screen>&lt;clientSecurityConfig 
            xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
   ...
   &lt;credential&gt;
       &lt;cert-key-files&gt;
            &lt;key-file value=&quot;keyFile&quot;/&gt;
            &lt;cert-file value=&quot;certFile&quot;/&gt;
       &lt;/cert-key-files&gt;
   &lt;/credential&gt;
   ...
&lt;/clientSecurityConfig&gt;</screen>

</para>

<para>If credentials are not configured using any of the above methods, then underlying CoG JGlobus library is used. This will attempt to load the  <glossterm>proxy certificate</glossterm> of the user that is running the container as described in <xref linkend="javacog-admin-configuring-proxy"/>.</para>

  </section> <!-- configuring credentials -->

  <section id="security-secdesc-client-authz">
  <title>Configuring authorization mechanism </title>
  <para> The &lt;authz&gt; element is used to determine the mechanism to use to authorize the server that is being contacted. Note that the security descriptor cannot be used to configure custom client authorization. Refer to <xref linkend="authzframe-developer-domain"/> for details. The following values are currently supported:
<informaltable>
  <tgroup cols="2">
  <tbody>
        <row>
        <entry><emphasis role="strong">
        Configuration
        </emphasis></entry>
        <entry><emphasis role="strong">
        Funcationality
        </emphasis></entry>
        </row>
    <row>
      <entry><constant>none</constant></entry>
      <entry>No authorization is done.</entry>
    </row>
    <row>
      <entry><constant>self</constant></entry>
      <entry>Self authorization is done, i.e the server should be running with the same credentials as the client.</entry>
    </row>      
    <row>
      <entry><constant>host</constant></entry>
      <entry>Host authorization is done, i.e the server should be running with credentials that have the host name it is running on embedded in it.</entry>
    </row>
    <row>
      <entry><constant>hostSelf</constant></entry>
      <entry>Host authorization is done (i.e the server should be running with credentials that have the host name it is running on embedded in it). If that fails, an attempt at self authorization (i.e the server should be runnign with same credentials as client) is made.</entry>
    </row>
    <row>
      <entry><emphasis>any other string</emphasis></entry>
      <entry>Identity authorization is done using the value as the identity, i.e the server should be running with identity specified as value. </entry>
    </row>
  </tbody>
  </tgroup>
  </informaltable>
The following sample configures self authorization:
<screen>
  &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
     ...
     &lt;authz value=&quot;self&quot;/&gt;
     ...
  &lt;/clientSecurityConfig&gt;
</screen>
</para>
</section>
<section id="security-secdesc-client-secConv">
  <title>Configuring GSI Secure Conversation </title>
  <para> The client can be configured to do GSI Secure Conversation using the element &lt;GSISecureConversation&gt;. The following subelements can be used to set various properties 
  <informaltable>
  <tgroup cols="2">
  <tbody>
    <row>
      <entry><emphasis role="strong">Element</emphasis></entry>
      <entry><emphasis role="strong">Functionality</emphasis></entry>
    </row>
    <row>
      <entry><constant>&lt;integrity&gt;</constant></entry>
      <entry>Sets protection level to signature.</entry>
    </row>
    <row>
      <entry><constant>&lt;privacy&gt;</constant></entry>
      <entry>Sets protection level to encryption (signature is also done).</entry>
    </row>      
    <row>
      <entry><constant>&lt;anonymous&gt;</constant></entry>
      <entry>Server is accessed as anonymous.</entry>
    </row>
    <row>
      <entry><constant>&lt;delegation value=&quot;</constant><emphasis>type of delegation</emphasis><constant>&quot;&gt;</constant></entry>
      <entry>Determines the type of delegation to be done. The value can be set to <constant>full</constant> or <constant>limited</constant>. If the <emphasis>delegation</emphasis> element is not used, no delegation is done. If delegation is enabled, some form of client authorization is required.</entry>
    </row>
    <row>
      <entry><constant>&lt;context-lifetime&gt;</constant></entry>
      <entry>Determines the lifetime of the context established. If not specified, the least lifetime of the chain of certificates used in establishing the context is used as context lifetime.</entry>
    </row>
  </tbody>
  </tgroup>
  </informaltable>  
The following sample sets GSI Secure Conversation with privacy and full delegation:
<screen>
  &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
     ...
     &lt;GSISecureConversation&gt;
         &lt;privacy/&gt;
         &lt;delegation value=&quot;full&quot;/&gt;
     &lt;/GSISecureConversation&gt;
     ...
  &lt;/clientSecurityConfig&gt;
</screen>
</para>
 </section> <!-- GSI Secure Conversation -->

<section id="security-secdesc-client-secMsg">
  <title>Configuring GSI Secure Message </title>
  <para> The client can be configured to do GSI Secure Message using the element &lt;GSISecureMessage&gt;. The following subelements can be used to set various properties: 
  <informaltable>
  <tgroup cols="2">
  <tbody>
    <row>
      <entry><emphasis role="strong">Element</emphasis></entry>
      <entry><emphasis role="strong">Functionality</emphasis></entry>
    </row>
    <row>
      <entry><constant>&lt;integrity&gt;</constant></entry>
      <entry>Sets protection level to signature </entry>
    </row>
    <row>
      <entry><constant>&lt;privacy&gt;</constant></entry>
      <entry>Sets protection level to encryption (signature is also done) </entry>
    </row>      
    <row>
      <entry><constant>&lt;peer-credential value=&quot;</constant><emphasis>path to file with credentials to encrypt with</emphasis><constant>&quot;&gt;</constant></entry>
      <entry>Sets the path to the file containing the credential to use if privacy protection is chosen.</entry>
    </row>
  </tbody>
  </tgroup>
  </informaltable>  

The following sample sets GSI Secure Message with integrity:
<screen>
  &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;

     ...
     &lt;GSISecureMessage&gt;
         &lt;integrity/&gt;
     &lt;/GSISecureMessage&gt;
     ...
  &lt;/clientSecurityConfig&gt;
</screen>
</para>
 </section> <!-- GSI Secure Message -->

<section id="security-secdesc-client-secTransport">
  <title>Configuring GSI Secure Transport </title>

  <para> The client can be configured to do GSI Secure Transport using the element &lt;GSISecureTransport&gt;. The following subelements can be used to set various properties 
  <informaltable>
  <tgroup cols="2">
  <tbody>
    <row>
      <entry><emphasis role="strong">Element</emphasis></entry>
      <entry><emphasis role="strong">Functionality</emphasis></entry>
    </row>
    <row>
      <entry><constant>&lt;integrity&gt;</constant></entry>
      <entry>Sets protection level to signature.</entry>
    </row>
    <row>
      <entry><constant>&lt;privacy&gt;</constant></entry>
      <entry>Sets protection level to encryption (signature is also done).</entry>
    </row>      
    <row>
      <entry><constant>&lt;anonymous&gt;</constant></entry>
      <entry>Server is accessed as anonymous.</entry>
    </row>
  </tbody>
  </tgroup>
  </informaltable>  
The following sample sets GSI Secure Transport with privacy and anonymous:
<screen>
  &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
     ...
     &lt;GSISecureTransport&gt;
         &lt;privacy/&gt;
         &lt;anonymous/&gt;
     &lt;/GSISecureTransport&gt;
     ...
  &lt;/clientSecurityConfig&gt;
</screen>
</para>

</section> <!-- GSI Secure Transport -->

<section id="security-secdesc-client-userName">
  <title>Configuring Username/Password </title>
  <para> Username/password can be used for authentication by the client. This is configured using &lt;username&gt; and &lt;passwordType&gt; element. The usernam element allows for a string to be configured and the password configuration consists of a password and a type string.</para>

<para>Example configuration:
<screen>

  &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;

  &lt;usernameType&gt;
     &lt;username value=&quot;tester1&quot;/&gt;
     &lt;passwordType&gt;
        &lt;password value=&quot;TY^*(Hyu&quot;/&gt;
        &lt;type value=&quot;someType&quot;/&gt;
     &lt;/passwordType&gt;
  &lt;/usernameType&gt;

  &lt;/clientSecurityConfig&gt;
</screen>
</para>
</section> <!-- username type -->

  <section id="security-secdesc-client-trustedCerts">
  <title>Configuring trusted credentials </title>
  <para> Client side trusted credentials are configured similar to container security descriptor as described in <xref linkend="security-secdesc-container-trusted"/>. The outer element and schema for client security descriptor as described in <xref linkend="security-secdesc-schema"/> should be used. </para>

<para> If this configuration is not set, the underlying CoG JGlobus library is used to pick up trusted certificates. The library attempts to load  the certificates as described in <xref linkend="javacog-admin-configuring-trusted-certs"/>.
</para>

  </section> <!-- trusted certificates -->


</section>

<section id="security-secdesc-descProgram">
  <title>Programmatic altering of security descriptors </title>
  <para>The security descriptor (container, security and resource) can be
    created and altered programmatically (as opposed to writing a
    security descriptor file). For the service and container
    descriptor, we recommend writing a security descriptor file so
    that the security properties are initialized at start up.</para>
  <table>
    <title>Descriptor classes</title>
    <tgroup cols="2">
      <tbody>
    <row>
      <entry><emphasis role="strong">Descriptor Type</emphasis></entry>
      <entry><emphasis role="strong">Java Class Representation</emphasis></entry>
    </row>
        <row>
          <entry>Container Security Descriptor</entry>
          <entry>
            <para>This is represented by <constant>org.globus.wsrf.impl.security.descriptor.ContainerSecurityDescriptor</constant>. </para>
            <para>If a container security descriptor file is configured as
          described in <xref linkend="security-secdesc-configDesc"/>, then an
          object is created and stored. To alter the values, use the
          API provided in
          <constant>org.globus.wsrf.impl.security.descriptor.ContainerSecurityConfig</constant>.</para>
          </entry>
        </row>
        <row>
          <entry>Service Security Descriptor</entry>
          <entry>
            <para>This is represented by
      <constant>org.globus.wsrf.impl.security.descriptor.ServiceSecurityDescriptor</constant>. </para>
            <para>If a service security descriptor file is configured as
            described in <xref linkend="security-secdesc-configDesc"/>, then an
            object is created and stored. To alter the values, use the
            API provided in
            <constant>org.globus.wsrf.impl.security.descriptor.ServiceSecurityConfig</constant>.</para>
          </entry>
        </row>
        <row>
          <entry>Resource Security Descriptor</entry>
          <entry>
            <para>This is represented by <constant>org.globus.wsrf.impl.security.descriptor.ResourceSecurityDescriptor</constant>. </para>
            <para>To initialize the descriptor, i.e. load credentials and gridmap, use
          the API in <constant>org.globus.wsrf.impl.security.descriptor.ResourceSecurityConfig</constant>.
          Refer to the description of resource security descriptors in <xref linkend="security-secdesc-resDesc"/> for more details.</para>
          </entry>
        </row>
        <row>
          <entry>Client Security Descriptor</entry>
          <entry>
            <para>This is represented by <constant>org.globus.wsrf.impl.security.descriptor.ClientSecurityDescriptor</constant>. </para>
            <para>To initialize the descriptor, use
          the API in <constant>org.globus.wsrf.impl.security.descriptor.ClientSecurityConfig</constant>.</para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </table>
</section>
<section id="security-secdesc-resDesc">
  <title>Resource security descriptors</title>
  <para>Resource level security can be set up using a resource security
descriptor.  A resource security descriptor overrides any service or container level
security settings. To make a resource secure, it needs to implement
<constant>org.globus.wsrf.impl.security.SecureResource</constant>.  This
interface has a method that returns an instance of
<constant>org.globus.wsrf.impl.security.descriptor.ResourceSecurityDescriptor</constant>. If
<constant>null</constant> is returned, it is assumed that no security is set
on the resource. </para>
  <para>The resource security descriptor is identical to the service
    security descriptor and exposes an API to set and get all properties
    that are described in <xref linkend="security-secdesc-server-descFile"/>. A 
    resource security descriptor object can also be created by reading settings from a descriptor file. The file
    needs to be written as described in <xref linkend="security-secdesc-server-descFile"/>.</para>
  <para><emphasis>Examples: </emphasis> 
  </para>
  <para>The following code snippet creates a resource descriptor object directly: 
  </para>
  <screen>ResourceSecurityDescriptor desc = new ResourceSecurityDescriptor();
desc.setRejectLimitedProxy(&quot;true&quot;);</screen>
  <para>The following code snippet creates a resource descriptor object
  from a file: </para>
  <screen>ResourceSecurityConfig config = new ResourceSecurityConfig(&quot;resDescFileName&quot;);
config.init();
ResourceSecurityDescriptor desc = config.getSecurityDescriptor();</screen>

<!-- FILLME 
  <para>There are two attributes of the security descriptor,
  <emphasis>credentials</emphasis> and <emphasis>gridmap</emphasis>, that can
  be specified as objects (<constant>javax.security.auth.Subject</constant> and
  <constant>org.globus.security.gridmap.GridMap</constant>, respectively) or as paths to
  credentials and the grid map file. Similarly, the <emphasis>service authorization chain</emphasis> object or a comma separated list of PDP
  names can be specified. In each of these cases, if the properties are
  configured as filenames or PDP names as the case may be, the helper API in
  <constant>org.globus.wsrf.impl.security.descriptor.ResourceSecurityConfig</constant>
  can be used to load the classes.  The credentials, grid map file and PDPs
  specified in the authorization chain are loaded if the property
  <constant>initialized</constant> in the descriptor is set to
  <constant>false</constant>.
  </para>
  <para>For example, the code snippet below  creates a descriptor that has a
    grid map file and an authorization chain. When
    <function>config.init()</function> is called, the grid map file is loaded and an
    instance of the service authorization chain class is created. The
    configuration information for the service
    authorization chain is by default picked up from the global deployment
    descriptor. To provide for other PDP configurations it needs to be
    set programmatically, as shown below.</para>
  <screen>ResourceSecurityDescriptor desc = new ResourceSecurityDescriptor();
desc.setGridMapFile(&quot;foo/bar/gridmap&quot;);
desc.setAuthz(&quot;customAuthz:org.globus.some.customAuthz foo1:org.foo.barAuthz&quot;);
ResourceSecurityConfig config = new ResourceSecurityConfig(desc);
config.init();</screen>
  <para>If the descriptor property changes, a reload can be forced by setting <constant>setInitialized</constant> to <constant>false</constant>:</para>
  <screen>desc.setInitialized(false); 
desc.setGridMapFile(&quot;foo/bar/newGridMap&quot;); 
config.init();</screen>
  <para>GridMap and Subject objects can also be set directly,
    i.e. without configuring files to be read:</para>
  <screen>desc.setInitialized(false);
GridMap map = new GridMap();
map.map(&quot;Some user DN&quot;, &quot;userid&quot;);
desc.setGridMap(map);</screen>
  <para id="programPDPConfig">Service Authorization can also be set directly
    by creating an object of  type <constant>org.globus.wsrf.impl.security.authorization.ServiceAuthorizationChain</constant>.
    The chain needs to be initialized with  one or more objects implementing the <constant>org.globus.wsrf.security.authorization.PDPConfig</constant> interface.
    The <constant>org.globus.wsrf.impl.security.descriptor.ResourceSecurityDescriptor</constant> class
    has an API to initialize a PDP using the PDPConfig class. The distribution
    has a few sample classes that implement the <constant>org.globus.wsrf.security.authorization.PDPConfig</constant> interface
    and are described below: 
  <itemizedlist>
      <listitem>
        <simpara><constant>org.globus.wsrf.impl.security.authorization.ContainerPDPConfig</constant>: Obtains configuration information from the global deployment descriptor.</simpara>
      </listitem>
      <listitem>
        <simpara><constant>org.globus.wsrf.impl.security.authorization.ServicePropertiesPDPConfig</constant>: Obtains configuration information from a service&apos;s deployment descriptor.</simpara>
      </listitem>
      <listitem>
        <simpara><constant>org.globus.wsrf.impl.security.authorization.ResourcePDPConfig</constant>: Obtains configuration information from a hashmap stored in memory.</simpara>
      </listitem>
    </itemizedlist>
</para>
  <para>Examples:</para>
  <para>This sample creates a authorization chain and sets it on the
resource security descriptor:</para>
  <screen>// Create a resource security descriptorResourceSecurityDescriptor
ResourceSecurityDescriptor desc = new ResourceSecurityDescriptor();
// Configure a chain of PDPsString
String authzChain = &quot;identityAuthz custom:org.something.CustomAuthz&quot;;
// Create configuration object that implements PDPConfig
ResourcePDPConfig config = new ResourcePDPConfig(authzChain);
// Set properties that are required by the PDPs on the configuration object.
// Property used by Identity authorization: scope, property name, property value
config.setProperty(&quot;idenAuthz&quot;, &quot;identity&quot;, &quot;O=this, OU=is expected, CN=identity&quot;);
// Property used by CustomAuthz: scope, property name, property value
config.setProperty(&quot;custom&quot;, &quot;someProp&quot;, &quot;foo&quot;);
desc.setAuthzChain(authzChain, config, &quot;Name of Chain&quot;, &quot;Some id&quot;);</screen>
-->
<para> FILLME: details on using the API </para>
</section>


<section id="security-secdesc-otherConfig">
  <title>Other configuration</title>

<section id="security-secdesc-other-defaultGridMap">
  <title>Configuring Default GridMap Files</title>
<para>The gridmap file is a common configuration in the toolkit and is typically configured within the <constant>GridmapPDP</constant> configuration. To specify a default value to be used across the toolkit, if not specified with in the <constant>GrimapPDP</constant> configuration, the <constant>defaultAuthz</constant> element in container security descriptor is used as described in <xref linkend="security-secdesc-container-defaultAuthz"/>.</para>

<para>The gridmap authorization can be specified with any prefix, but the default configuration uses &quot;gridmapAuthz&quot; as shown in the example below. </para>

<para>Example:
<screen>

&lt;containerSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/container&quot; 
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
   xsi:schemaLocation=&quot;http://www.globus.org/security/descriptor 
   name_value_type.xsd&quot;
   xmlns:param=&quot;http://www.globus.org/security/descriptor&quot;&gt;

   &lt;defaultAuthzParam&gt;
     &lt;interceptor name=&quot;gridmapAuthz:org.globus.wsrf.impl.security.GridMapAuthorization&quot;&gt;
                    &lt;parameter&gt;
                        &lt;param:nameValueParam&gt;
                            &lt;param:parameter name=&quot;gridmap-file&quot;
                                            value=&quot;/etc/grid-security/grid-mapfile&quot;/&gt;
                        &lt;/param:nameValueParam&gt;
                    &lt;/parameter&gt;
      &lt;/interceptor&gt;
   &lt;/defaultAuthzParam&gt;
&lt;/containerSecurityConfig&gt;

</screen>
</para>

<para>If the grid map file is updated at runtime, it will be reloaded.</para>

</section> <!-- default grid map file -->

</section> <!-- Other configuration -->