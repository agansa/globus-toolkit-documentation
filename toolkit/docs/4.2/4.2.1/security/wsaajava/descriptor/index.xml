<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book id="wsaajavaDescriptor" xreflabel="Java WS A&amp;A Security Descriptor Framework">
    <title>Java WS A&amp;A Security Descriptor Framework</title>
    <titleabbrev>Security Descriptor Framework</titleabbrev>
    <chapter id="wsaajava-secdesc-introduction">
        <title>Introduction</title>
        <para>Security descriptors contain various security properties like credentials, the
                <glossterm>gridmap file</glossterm> location, required authentication and
            authorization mechanisms and so on. There are four types of security descriptors in the
            code base for setting container, service, resource and client security properties: </para>
        <informaltable>
            <tgroup cols="2">
                <tbody>
                    <row>
                        <entry>
                            <emphasis role="strong">Descriptor Type</emphasis>
                        </entry>
                        <entry>
                            <emphasis role="strong">Functionality</emphasis>
                        </entry>
                    </row>
                    <row>
                        <entry>container security descriptor</entry>
                        <entry>determines the container level security requirement that needs to be
                            enforced. </entry>
                    </row>
                    <row>
                        <entry>service security descriptor</entry>
                        <entry>determines the service level security requirement that needs to be
                            enforced. </entry>
                    </row>
                    <row>
                        <entry>resource security descriptor</entry>
                        <entry>determines the resource level security requirement that needs to be
                            enforced. </entry>
                    </row>
                    <row>
                        <entry>client security descriptor</entry>
                        <entry>determines the security properties that need to be used for a
                            particular invocation. </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <para>The security descriptors (container, security and resource) can be created and altered
            programmatically (as opposed to writing a security descriptor file). For the service and
            container descriptor, we recommend writing a security descriptor file so that the
            security properties are initialized at start up. </para>
        <para>Service and container security descriptors can be configured as XML files in the
            global and service deployment descriptor as shown below. Resource security descriptors
            can only be created dynamically, either programmatically or from a descriptor file.
            Client security descriptor can be configured as a XML file and set as property on Stub. </para>
        <section id="wsaajava-secdesc-schema">
            <title>Security Descriptor Schemas</title>
            <para>All security descriptor files need to comply with a defined schema and should be
                written within the defined namespace. <table>
                    <title>Security descriptor schema</title>
                    <tgroup cols="3">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong">Descriptor </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Schema</emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Namespace</emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Root Element </emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Container security descriptor</entry>
                                <entry>
                                    <para>
                                        <ulink
                                            url="http://viewcvs.globus.org/viewcvs.cgi/wsrf/schema/core/security/descriptor/container_security_descriptor.xsd?view=annotate&amp;pathrev=globus_4_2_branch"
                                            >Schema </ulink>
                                    </para>
                                </entry>
                                <entry> http://www.globus.org/security/descriptor/container </entry>
                                <entry>containerSecurityConfig</entry>
                            </row>
                            <row>
                                <entry>Service security descriptor</entry>
                                <entry>
                                    <para>
                                        <ulink
                                            url="http://viewcvs.globus.org/viewcvs.cgi/wsrf/schema/core/security/descriptor/service_security_descriptor.xsd?view=annotate&amp;pathrev=globus_4_2_branch"
                                            >Schema </ulink>
                                    </para>
                                </entry>
                                <entry> http://www.globus.org/security/descriptor/service </entry>
                                <entry>serviceSecurityConfig</entry>
                            </row>
                            <row>
                                <entry>Resource security descriptor</entry>
                                <entry>
                                    <para><ulink
                                            url="http://viewcvs.globus.org/viewcvs.cgi/wsrf/schema/core/security/descriptor/service_security_descriptor.xsd?view=annotate&amp;pathrev=globus_4_2_branch"
                                            >Schema</ulink>, (Same schema as service) </para>
                                </entry>
                                <entry> http://www.globus.org/security/descriptor/service </entry>
                                <entry>serviceSecurityConfig</entry>
                            </row>
                            <row>
                                <entry>Client security descriptor</entry>
                                <entry>
                                    <para>
                                        <ulink
                                            url="http://viewcvs.globus.org/viewcvs.cgi/wsrf/schema/core/security/descriptor/client_security_descriptor.xsd?view=annotate&amp;pathrev=globus_4_2_branch"
                                            >Schema </ulink>
                                    </para>
                                </entry>
                                <entry> http://www.globus.org/security/descriptor/client </entry>
                                <entry>clientSecurityConfig</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table></para>
        </section>
        <!-- schemas -->
        <section id="wsaajava-secdesc-file-config">
            <title>Loading Security Descriptor Files</title>
            <para>If a security descriptor is configured to be read from a file, it is loaded as
                follows: <orderedlist>
                    <listitem>
                        <simpara>As a file, if an absolute file path is specified. </simpara>
                    </listitem>
                    <listitem>
                        <simpara>As a resource (can be included as part of jar file). </simpara>
                    </listitem>
                    <listitem>
                        <simpara>As a file, assuming that the specified path is relative to the
                            installation root, typically pointed to by the environment
                                variable<envar>GLOBUS_LOCATION</envar>. </simpara>
                    </listitem>
                </orderedlist></para>
            <para>If the security descriptor file is altered at runtime, it will <emphasis
                    role="strong">not </emphasis> be reloaded </para>
        </section>
        <!-- file read -->
        <section id="wsaajava-secdesc-precedence">
            <title>Security Descriptor Precedence</title>
            <para>If security properties are configured in multiple locations, then the following
                order of precedence is used <orderedlist>
                    <listitem>
                        <para>Resource security descriptor</para>
                    </listitem>
                    <listitem>
                        <para>Service security descritpor</para>
                    </listitem>
                    <listitem>
                        <para>Container security descriptor</para>
                    </listitem>
                </orderedlist></para>
        </section>
    </chapter>
    <!-- introduction -->
    <chapter>
        <title>Writing Server-side Security Descriptors</title>
        <para>There are three levels of security descriptors on the server-side: container, service
            and resource. The first section describes configuration common to all levels. The
            subsequent sections describe configuration specific to each level.</para>
        <section id="wsaajava-secdesc-serverSide-common">
            <title>Common Configuration for server-side security descriptors</title>
            <para>The next few sections deal with writing server-side security descriptor files,
                that is, container, service and resource descriptor files to set various properties.
                Only the properties that are common to all these descriptors are discussed here.
                Other properties specific to each descriptor are discussed in sections specific to
                the container/service or resource descriptor. </para>
            <para>When parameters are configured in multiple descriptors the order of predence as
                described in <olink targetptr="wsaajava-secdesc-precedence"/>
            </para>
            <section id="wsaajava-secdesc-configCred">
                <title>Credentials</title>
                <para>The container and each service can each be configured with a separate set of
                    credentials. The credentials can be set using either: a) the path to a proxy
                    file, or b) the path to a certificate and key file. If the configured credential
                    file is modified/updated at runtime, the credentials will be automatically
                    reloaded. The credentials can be configured by adding one of the following
                    blocks to the container or service security descriptor. </para>
                <para>Example for option (a):
                    <screen>&lt;serviceSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                    ...
                    &lt;proxy-file value=&quot;proxyFile&quot;/&gt;
                    ...
                    &lt;/serviceSecurityConfig&gt;</screen></para>
                <para>Example for option (b):
                    <screen>&lt;serviceSecurityConfig
                    xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                    ...
                    &lt;credential&gt;
                    &lt;cert-key-files&gt;
                    &lt;key-file value=&quot;keyFile&quot;/&gt;
                    &lt;cert-file value=&quot;certFile&quot;/&gt;
                    &lt;/cert-key-files&gt;
                    &lt;/credential&gt;
                    ...
                    &lt;/serviceSecurityConfig&gt;</screen></para>
                <note>
                    <para>The above examples show use in a service security descriptor. If setting
                        in the container security descriptor, set the namespace and outer element as
                        shown in<olink targetptr="wsaajava-secdesc-schema"/>. </para>
                </note>
                <para>Credentials can be configured at the resource, service or container levels and
                    the framework will look for credentials in the following order: <orderedlist>
                        <listitem>
                            <simpara>Resource credentials</simpara>
                        </listitem>
                        <listitem>
                            <simpara>
                                <glossterm baseform="service credentials">Service credentials
                                </glossterm>
                            </simpara>
                        </listitem>
                        <listitem>
                            <simpara>Container credentials</simpara>
                        </listitem>
                        <listitem>
                            <simpara>Default credentials. If credentials are not configured using
                                any of the above methods, then the underlying CoG JGlobus library is
                                used. This will attempt to load the <glossterm>proxy
                                certificate</glossterm> of the user that is running the container as
                                described in <olink targetdoc="javacogAdmin"
                                    targetptr="javacog-admin-configuring-proxy"/> . </simpara>
                        </listitem>
                    </orderedlist></para>
            </section>
            <!-- credentials -->
            <section id="wsaajava-secdesc-rejectLimProxy">
                <title>Reject Limited Proxy</title>
                <para>This parameter can be used to configure whether or not clients that present
                    limited proxies are allowed to authenticate successfully. By default, limited
                    proxies are accepted.</para>
                <screen>&lt;serviceSecurityConfig
                xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                ...
                &lt;reject-limited-proxy value=&quot;true&quot;/&gt;
                ...
                &lt;/serviceSecurityConfig&gt;</screen>
                <note>
                    <para>The above example shows use in a service security descriptor. If setting
                        in the container security descriptor, set the namespace and outer element as
                        shown in<olink targetptr="wsaajava-secdesc-schema"/>. </para>
                </note>
            </section>
            <!-- reject limited proxy -->
            <section id="wsaajava-secdesc-replayAttack">
                <title>Replay attack prevention</title>
                <para>For message-level security, one may also set the amount of time for which to
                    track received messages for the purpose of preventing replay attacks. Messages
                    outside of this window will be rejected automatically, whereas messages within
                    this window are checked against recently received messages through the use of
                    the message UUID. </para>
                <itemizedlist>
                    <listitem>
                        <para>Parameter <emphasis>replay-attack-filter</emphasis> can be set to true
                            or false to enable or disable replay attack prevention framework. By
                            default, this feature is enabled.
                            <screen>&lt;serviceSecurityConfig
                            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                            ...
                            &lt;replay-attack-filter value=&quot;true&quot;/&gt;
                            ...
                            &lt;/serviceSecurityConfig&gt;</screen></para>
                    </listitem>
                    <listitem>
                        <para>Parameter <emphasis>replay-attack-window</emphasis> can be set to the
                            number of minutes the replay window should be. By default it is 5
                            minutes.
                            <screen>&lt;serviceSecurityConfig
                            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                            ...
                            &lt;replay-attack-window value=&quot;100&quot;/&gt;
                            ...
                            &lt;/serviceSecurityConfig&gt;</screen></para>
                    </listitem>
                </itemizedlist>
                <note>
                    <para>The above examples show use in the service security descriptor. If setting
                        in the container security descriptor, set the namespace and outer element as
                        shown in<olink targetptr="wsaajava-secdesc-schema"/>. </para>
                </note>
            </section>
            <!-- replay attack -->
            <section id="wsaajava-secdesc-contextLifetime">
                <title>Context lifetime</title>
                <para>When <emphasis>GSI Secure Conversation</emphasis> is used, a security context
                    is established and, by default, the life of the context is determined by the
                    least lifetime of the chain of certificates used in establishing the context.
                    The value of the lifetime can be altered to be even less than the above value;
                    just set the value for the following parameter in milliseconds. </para>
                <screen>&lt;serviceSecurityConfig
                xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                ...
                &lt;context-lifetime value=&quot;1000&quot;/&gt;
                ...
                &lt;/serviceSecurityConfig&gt;</screen>
                <note>
                    <para>The above example shows use in a service security descriptor. If setting
                        in the container security descriptor, set the namespace and outer element as
                        shown in<olink targetptr="wsaajava-secdesc-schema"/>. </para>
                </note>
            </section>
            <!-- context lifetime -->
            <section id="wsaajava-secdesc-configAuthz">
                <title>Authorization</title>
                <para>The container and each service/resource can be configured with a chain of
                    interceptors, where each interceptor is a <olink targetdoc="wsaajavaPDP">Policy
                        Decision Point (PDP)</olink> or <olink targetdoc="wsaajavaPIP">Policy
                        Information Point (PIP)</olink>. The element <constant>authzChain</constant>
                    can be used to configure this. <itemizedlist>
                        <listitem>
                            <para>Each chain can contain an optional list of Bootstrap PIPs, an
                                optional list of PIPs and a list of PDPs (with at least one PDP).
                            </para>
                        </listitem>
                        <listitem>
                            <para>Each interceptor name is scoped and the format is
                                    <emphasis>prefix:FQDN of the interceptor</emphasis>. For
                                example, <emphasis>
                                    self:org.globus.wsrf.impl.security.authorization.SelfAuthorization
                                </emphasis> . The prefix is used to allow multiple instances of the
                                same interceptor to exist in the same PDP chain. </para>
                            <para>
                                <emphasis>Example:</emphasis>
                            </para>
                            <screen>
                            &lt;serviceSecurityConfig
                            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                            ...
                            &lt;authzChain&gt;

                            &lt;pips&gt;
                            &lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
                            &lt;/pips&gt;
                            &lt;pdps&gt;
                            &lt;interceptor name=&quot;foo1:org.foo.authzMechanism
                            bar1:org.bar.barMechanism&quot;/&gt;
                            &lt;/pdps&gt;

                            &lt;/authzChain&gt;
                            ...
                            &lt;serviceSecurityConfig/&gt;</screen>
                        </listitem>
                        <listitem>
                            <para>Bootstrap PIPs are optional and by default, <emphasis>
                                    org.globus.wsrf.impl.security.authorization.X509BootstrapPIP
                                </emphasis> is used by the framework. Any other PIPs listed within
                                the &lt;bootstrapPips&gt; element is appended to the default PIP. If
                                the configuration should override it (that is, X5008BootstapPIP
                                should not be used), the optional attribute
                                <constant>overwrite</constant> can be set to true. </para>
                            <screen>
                            &lt;serviceSecurityConfig
                            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                            ...

                            &lt;authzChain combiningAlg=&quot;org.globus.sample.SampleAlg&gt;
                            &lt;bootstrapPips overwrite=&quot;true&quot;
                            &lt;interceptor name=&quot;scope1:org.globus.sample.BootstrapPIP1&quot;/&gt;
                            &lt;/bootstrapPips&gt;
                            &lt;pips&gt;
                            &lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
                            &lt;/pips&gt;
                            &lt;pdps&gt;
                            &lt;interceptor name=&quot;scope3:org.globus.sample.PDP1&quot;/&gt;
                            &lt;/pdps&gt;
                            &lt;/authzChain&gt;
                            ..
                            &lt;/serviceSecurityConfig&gt;
                        </screen>
                            <para>In the above case, X509BootstrapPIP will not be used and the
                                BoostrapPIP1 will be used. </para>
                            <screen>
                            &lt;serviceSecurityConfig
                            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                            ...

                            &lt;authzChain combiningAlg=&quot;org.globus.sample.SampleAlg&gt;
                            &lt;bootstrapPips&gt;
                            &lt;interceptor name=&quot;scope1:org.globus.sample.BootstrapPIP1&quot;/&gt;
                            &lt;/bootstrapPips&gt;
                            &lt;pips&gt;
                            &lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
                            &lt;/pips&gt;
                            &lt;pdps&gt;
                            &lt;interceptor name=&quot;scope3:org.globus.sample.PDP1&quot;/&gt;
                            &lt;/pdps&gt;
                            &lt;/authzChain&gt;
                            ..
                            &lt;/serviceSecurityConfig&gt;
                        </screen>
                            <para>In the above example, X509BootstrapPIP followed by BoostrapPIP1
                                will be used. </para>
                        </listitem>
                        <listitem>
                            <para>The authorization chain can be configured with a combining
                                algorithm using the attribute <parameter>combiningAlg</parameter>.
                                The value should be a FQDN of a class that implements <constant>
                                    org.globus.wsrf.security.authorization.AuthorizationEngineSpi
                                </constant>. The attribute is optional and the default used is
                                    <constant>
                                    org.globus.wsrf.impl.security.authorization.providers.PermitOverrideAlgorithm
                                </constant>. </para>
                            <para>Example:</para>
                            <screen>
                            &lt;serviceSecurityConfig
                            xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                            ...

                            &lt;authzChain combiningAlg=&quot;org.globus.sample.SampleAlg&gt;
                            &lt;pips&gt;
                            &lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
                            &lt;/pips&gt;
                            &lt;pdps&gt;
                            &lt;interceptor name=&quot;scope3:org.globus.sample.PDP1&quot;/&gt;
                            &lt;interceptor name=&quot;scope4:org.globus.sample.PDP2&quot;/&gt;
                            &lt;/pdps&gt;
                            &lt;/authzChain&gt;
                            ..
                            &lt;/serviceSecurityConfig&gt;
                        </screen>
                            <para>In the above example, the default
                                <constant>X509BootstrapPIP</constant> will be used (fixme, i don't
                                see reference to bootstrap pip above). Following that,
                                    <constant>PIP1</constant> will be invoked to collect attributes.
                                Finally the <constant>SampleAlg</constant> combining algorithm with
                                the configured PDPs ( <constant>PDP1</constant>
                                and<constant>PDP2</constant>) are run to determine the decision.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Each interceptor can specify a parameter value and the schema
                                defines it as <constant>xsd:any</constant> to allow for any
                                user-defined parameters. The parser extracts the elements in the
                                    <constant>&lt;parameter&gt;</constant> element and returns them
                                as a DOM Element. It is left up to the interceptor to parse the
                                element. The DOM object created is placed in the
                                    <constant>ChainConfig</constant> object passed to the
                                authorization engine as a parameter called <parameter
                                    >parameterObject</parameter>. The prefix will be the scope
                                specified in the interceptor name. </para>
                            <para>Since schema validation is done, a schema must be supplied for the
                                user-defined parameters. The schema location is loaded as a resource
                                and hence can be included in some jar placed in the
                                    <envar>GLOBUS_LOCATION</envar> lib directory. </para>
                        </listitem>
                        <listitem>
                            <para>The toolkit provides a parameter schema by default that allows for
                                a name/value pair, where the value is a string. Example :
                                <screen>
                                &lt;containerSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;
                                xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
                                xsi:schemaLocation=&quot;http://www.globus.org/security/descriptor
                                name_value_type.xsd&quot;
                                xmlns:param=&quot;http://www.globus.org/security/descriptor&quot;&gt;
                                &lt;authzChain&gt;
                                &lt;pdps&gt;
                                &lt;interceptor name=&quot;gridmapAuthz:org.globus.wsrf.impl.security.GridMapPDP&quot;&gt;
                                &lt;parameter&gt;
                                &lt;param:nameValueParam&gt;
                                &lt;param:parameter name=&quot;gridmap-file&quot;
                                value=&quot;/home/user1/grid-mapfile&quot;/&gt;
                                &lt;/param:nameValueParam&gt;
                                &lt;/parameter&gt;
                                &lt;/interceptor&gt;
                                &lt;/pdps&gt;
                                &lt;/authzChain&gt;
                                &lt;/containerSecurityConfig&gt;

                            </screen></para>
                            <para>When the above is parsed, a DOM Element is constructed with
                                element <constant>&lt;param:nameValuParam&gt;</constant> and stored
                                in the <constant>ChainConfig</constant> object as parameter with
                                name <parameter>gridmapAuthz:parameterObject</parameter>. The
                                GridMap PDP uses <constant>ObjectDeserializer</constant> to retrieve
                                the name/value pairs. </para>
                        </listitem>
                    </itemizedlist></para>
                <para>All PDPs and PIPs shipped with the toolkit are provided here: <olink
                        targetdoc="wsaajavaPIP"/> and<olink targetdoc="wsaajavaPDP"/>. </para>
                <para>The following PDPs are included with the toolkit and are configured using
                    short tags. The framework maps and plugs in the scoped name of the PDP at the
                    time of authorization. </para>
                <table>
                    <title>Builtin PDPs</title>
                    <tgroup cols="3">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong">Default Descriptor Configuration
                                    </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Default Prefix </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Reference</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>acl</constant>
                                </entry>
                                <entry>
                                    <constant>aclAuthz</constant>
                                </entry>
                                <entry>
                                    <olink targetdoc="wsaajavaPDP"
                                        targetptr="wsaajava-pdp-AccessControlPDP"/>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>none</constant>
                                </entry>
                                <entry>
                                    <constant>noneAuthz</constant>
                                </entry>
                                <entry>
                                    <olink targetdoc="wsaajavaPDP"
                                        targetptr="wsaajava-pdp-NoAuthorization"/>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>self</constant>
                                </entry>
                                <entry>
                                    <constant>selfAuthz</constant>
                                </entry>
                                <entry>
                                    <simpara>
                                        <olink targetdoc="wsaajavaPDP"
                                            targetptr="wsaajava-pdp-selfAuthz"/>
                                    </simpara>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>gridmap</constant>
                                </entry>
                                <entry>
                                    <constant>gridmapAuthz</constant>
                                </entry>
                                <entry>
                                    <simpara>
                                        <olink targetdoc="wsaajavaPDP"
                                            targetptr="wsaajava-pdp-GridMapAuthorization"/>
                                    </simpara>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>identity</constant>
                                </entry>
                                <entry>
                                    <constant>idenAuthz</constant>
                                </entry>
                                <entry>
                                    <simpara>
                                        <olink targetdoc="wsaajavaPDP"
                                            targetptr="wsaajava-pdp-IdentityAuthorization"/>
                                    </simpara>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>host</constant>
                                </entry>
                                <entry>
                                    <constant>hostAuthz</constant>
                                </entry>
                                <entry>
                                    <simpara>
                                        <olink targetdoc="wsaajavaPDP"
                                            targetptr="wsaajava-pdp-HostAuthz"/>
                                    </simpara>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>samlCallout</constant>
                                </entry>
                                <entry>
                                    <constant>samlAuthz</constant>
                                </entry>
                                <entry>
                                    <simpara>
                                        <olink targetdoc="wsaajavaPDP"
                                            targetptr="wsaajava-pdp-SAMLAuthzCallout"/>
                                    </simpara>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>userName</constant>
                                </entry>
                                <entry>
                                    <constant>userNameAuthz</constant>
                                </entry>
                                <entry>
                                    <simpara>
                                        <olink targetdoc="wsaajavaPDP"
                                            targetptr="wsaajava-pdp-userNameAuthz"/>
                                    </simpara>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>samlAssertion</constant>
                                </entry>
                                <entry>
                                    <constant>samlAssertionAuthz</constant>
                                </entry>
                                <entry>
                                    <olink targetdoc="wsaajavaPDP"
                                        targetptr="wsaajava-pdp-samlAuthz-assertion"/>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <para>Other than these, any custom authorization scheme could be configured with its
                    own configuration information. Refer to <olink targetdoc="wsaajavaDescriptor"
                        targetptr="wsaajava-domain-serverAuthz-custom"/> for details on writing a
                    custom authorization mechanism. </para>
            </section>
            <section id="wsaajava-domain-serverAuthz-custom">
                <title>Writing a custom authorization mechanism</title>
                <para>The authorization handler can be configured to call out to a custom PIP or
                    PDP. The custom PDP class must implement the interface
                        <constant>org.globus.wsrf.security.PDP</constant> and the custom PIP class
                    must implement the interface<constant>org.globus.wsrf.security.PDP</constant>. </para>
                <para>
                    <emphasis>Example PIP:</emphasis>
                </para>
                <screen>package org.foobar;

                import ....;

                public class FooPIP implements PIP
                {

                public String CURRENT_TIME = "org.foobar.current.time";

                public void collectAttributes(Subject peerSubject,
                MessageContext context,
                QName operation) throws AttributeException {

                // collect attributes, say attributes from certificate
                extension
                // store in message context with some property.
                // Example here stores current time.
                messageContext.setProperty(FooPIP.CURRENT_TIME,
                Calendar.getInstance());
                }

                public void initialize(PDPConfig config,
                String name,
                String id)
                throws InitializeException {

                /* Read the initialization information
                */

                }

                public void close() throws CloseException {
                this. authorizedIdentity = null;
                }
                }
            </screen>
                <para>To use the above PIP one would configure a service security descriptor with
                    the following authorization settings: </para>
                <screen>&lt;securityConfig xmlns=&quot;http://www.globus.org&quot;&gt;
                ...
                &lt;authz value=&quot;foo1:org.foobar.FooPIP&quot;/&gt;
                ...
                &lt;securityConfig/&gt;</screen>
                <para>
                    <emphasis>Example PDP:</emphasis>
                </para>
                <screen>package org.foobar;

                import ....;

                public class FooPDP implements PDP
                {
                private Principal authorizedIdentity;

                /* Not used by the current code */
                public String[] getPolicyNames() {
                return new String[0];
                }

                /* Not used by the current code */
                public Node getPolicy(Node query)
                throws InvalidPolicyException {
                return null;
                }

                /* Not used by the current code */
                public Node setPolicy(Node policy)
                throws InvalidPolicyException {
                return null;
                }

                public boolean isPermitted(Subject peerSubject,
                MessageContext context,
                QName operation)
                throws AuthorizationException {

                // The parameters set by FooPIP can be accessed here.
                Calendar currentTime =
                (Calendar)context.getProperty(FooPIP.CURRENT_TIME);

                if (peerSubject == null) {
                return false;
                }

                Set peerPrincipals = peerSubject.getPrincipals();

                if ((peerPrincipals == null) ||
                peerPrincipals.isEmpty()) {
                return false;
                }

                /* Check if the peer identity and the authorized
                * identity match
                */

                return peerPrincipals.contains(this.authorizedIdentity);
                }

                public void initialize(PDPConfig config,
                String name,
                String id)
                throws InitializeException {

                /* Read the initialization information from the service
                * specific WSDD parameter &lt;name&gt;-authorizedIdentity
                */

                this. authorizedIdentity =
                new GlobusPrincipal((String) config.getProperty(
                name, &quot;authorizedIdentity&quot;));
                }

                public void close() throws CloseException {
                this. authorizedIdentity = null;
                }
                }
            </screen>
                <para>To use the above PDP one would configure a service security descriptor with
                    the following authorization settings: </para>
                <screen>&lt;securityConfig xmlns=&quot;http://www.globus.org&quot;&gt;
                ...
                &lt;authz value=&quot;foo1:org.foobar.FooPDP&quot;/&gt;
                ...
                &lt;securityConfig/&gt;</screen>
                <para>This security descriptor (identified as <filename
                        >/.../foo-pdp-security-config.xml </filename> below) can then be used by a
                    service. The association is created by adding a couple of parameters to the
                    service&apos;s WSDD entry: </para>
                <screen>...
                &lt;service name=&quot;MyDummyService&quot;
                provider=&quot;Handler&quot;
                style=&quot;document&quot;&gt;
                ...
                &lt;parameter name=&quot;securityDescriptor&quot;
                value=&quot;/.../foo-pdp-security-config.xml&quot;/&gt;
                &lt;parameter name=&quot;foo1-authorizedIdentity&quot;
                value=&quot;/DC=org/DC=doe/OU=People/CN=John D&quot;/&gt;
                ...
                &lt;/service&gt;</screen>
                <para>Note that the parameter <parameter>foo1-authorizedIdentity</parameter> in the
                    above configures the identity the PDP uses for authorizing incoming requests.
                    The parameter name is derived by composing the prefix (<parameter
                    >foo1</parameter>) used when specifying the PDP in the security descriptor with
                    the property (<parameter> authorizedIdentity</parameter>) used in the PDP code.
                </para>
            </section>
        </section>
        <section id="wsaajava-secdesc-container-descriptor">
            <title>Writing Container Security Descriptors</title>
            <para>The container security descriptor controls security parameters at the container
                level and can be overriden by security descriptors at the service and resource
                level. </para>
            <para>To set the container security descriptor, see <olink
                    targetptr="wsaajava-secdesc-configDesc-container"/>
            </para>
            <para>You can use the following common configuration options (links are from the above
                    <olink targetptr="wsaajava-secdesc-serverSide-common"/> section): <itemizedlist>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-configCred"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-configAuthz"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-rejectLimProxy"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-contextLifetime"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-replayAttack"/></para>
                    </listitem>
                </itemizedlist></para>
            <para>Configuration options are also available specific to the container security
                descriptor: <itemizedlist>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-container-trusted"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-container-adminAuthz"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-container-defaultAuthz"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-container-context"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-container-replay"/></para>
                    </listitem>
                </itemizedlist></para>
            <section id="wsaajava-secdesc-configDesc-container">
                <title>Configuring Container Security Descriptor</title>
                <para>This section describes configuration of the container security descriptor. </para>
                <orderedlist>
                    <listitem>
                        <para>The container security descriptor can be configured in the
                                <emphasis>&lt;globalConfiguration&gt;</emphasis> section of the Java
                            WS Core deployment descriptor. That file is in <filename
                                >wsrf/java/core/source/deploy-server.wsdd </filename> if editing the
                            source, prior to deploying, or <filename>
                                $GLOBUS_LOCATION/etc/globus_wsrf_core/server-config.wsdd </filename>
                            in a binary install. </para>
                        <screen>
                        &lt;globalConfiguration&gt;
                        ...
                        &lt;parameter name=&quot;containerSecDesc&quot;
                        value=&quot;/path/to/container/descrptor/file.xml&quot;&gt;
                        ...
                        &lt;globalConfiguration&gt;
                        ...
                    </screen>
                    </listitem>
                    <listitem>
                        <para>The descriptor file name can also be specified as a parameter when the
                            Java WS Core continer is started up. The option is <command
                                >-containerSecDesc
                                &quot;/path/to/container/descriptor/file.xml&quot;</command>
                        </para>
                        <note>
                            <para>This setting takes precendence over 1</para>
                        </note>
                    </listitem>
                    <listitem>
                        <para>The descriptor can also be represented by <constant>
                                org.globus.wsrf.impl.security.descriptor.ContainerSecurityDescriptor
                            </constant> . </para>
                        <para>If a container security descriptor file is configured as described
                                in<olink targetptr="wsaajava-secdesc-configDesc-container"/> [fixme
                            wrong link], then an object is created and stored. To alter the values,
                            use the API provided in <constant>
                                org.globus.wsrf.impl.security.descriptor.ContainerSecurityConfig
                            </constant>. </para>
                        <para>This is useful to configure containers that are started up for
                            notifications. An instance of
                            <constant>ContainerSecurityDescriptor</constant> object can be set as
                            the property
                            <constant>org.globus.wsrf.container.CONTAINER_DESCRIPTOR</constant>.
                        </para>
                    </listitem>
                </orderedlist>
            </section>
            <!-- container sec desc -->
            <section id="wsaajava-secdesc-container-trusted">
                <title>Trusted Certificates</title>
                <para>This parameter sets the location of trusted certificates to be used. The value
                    should be a comma-separated list of locations. </para>
                <screen>&lt;containerSecurityConfig
                    xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
                    ...
                    &lt;trusted-certificates value=&quot;/home/user1/trustedCerts
                    /home/user1/newCerts&quot;/&gt;
                    ...
                    &lt;/containerSecurityConfig&gt;</screen>
                <para>If this configuration is not set, the underlying CoG JGlobus library is used
                    to pick up trusted certificates. The library attempts to load the certificates
                    as described in <olink targetdoc="javacogAdmin"
                        targetptr="javacog-admin-configuring-trusted-certs"/> . </para>
            </section>
            <!-- trsuted-certificates -->
            <section id="wsaajava-secdesc-container-adminAuthz">
                <title>Administrator Authorization Chain</title>
                <para>Other than the container/service/resource authorization, an
                    administrative-level authorization chain can be configured using the
                        <constant>&lt;adminAuthz&gt;</constant> element. The decision returned by
                    this chain overrides subsequent authorization decisions. That is, if the
                    administrator's authorization chain returns a deny, the rest of the configured
                    authorization (at the container/service/resource level) is
                    <emphasis>not</emphasis> evaluated and the operation is denied. If the
                    administrator's chain returns the permit, then the rest of the configuration is
                    evaluated to see if the operation is allowed. </para>
                <para>The element has the same schema as described in<olink
                        targetptr="wsaajava-secdesc-configAuthz"/>, with the outer element called
                        <constant>adminAuthz</constant> in place of <constant>authzChain</constant>. </para>
                <para>
                    <emphasis>Example:</emphasis>
                </para>
                <screen>
                &lt;containerSecurityConfig
                xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
                ...
                &lt;adminAuthz&gt;

                &lt;pips&gt;
                &lt;interceptor name=&quot;scope2:org.globus.sample.PIP1&quot;/&gt;
                &lt;/pips&gt;
                &lt;pdps&gt;
                &lt;interceptor name=&quot;foo1:org.foo.authzMechanism
                bar1:org.bar.barMechanism&quot;/&gt;
                &lt;/pdps&gt;

                &lt;/adminAuthz&gt;
                ...
                &lt;containerSecurityConfig/&gt;</screen>
            </section>
            <section id="wsaajava-secdesc-container-defaultAuthz">
                <title>Default Authorization Chain</title>
                <para>This element is used to configure default properties for any interceptor
                    configured in authorization chains. The schema for this is similar to the
                    authorization chain specification as described in <olink
                        targetptr="wsaajava-secdesc-configAuthz"/> and allows for <parameter
                    >xsd:any</parameter> as the interceptor parameter. </para>
                <screen>
                &lt;defaultAuthzParam&gt;
                &lt;interceptor name=&quot;scope1:org.globus.sample.SamplePDP&quot;/&gt;
                &lt;parameter&gt;
                &lt;param:nameValueParam&gt;
                &lt;param:parameter name=&quot;policy-file&quot;
                value=&quot;/home/user1/samplePDPConfig&quot;/&gt;
                &lt;/param:nameValueParam&gt;
                &lt;/parameter&gt;
                &lt;/interceptor&gt;
                &lt;/defaultAuthzParam&gt;

            </screen>
            </section>
            <section id="wsaajava-secdesc-container-context">
                <title>Context Timer Interval</title>
                <para>When <emphasis>GSI Secure Conversation</emphasis> is used, a security context
                    is established and a worker thread cleans up expired contexts. This parameter
                    sets the interval on the timer thread that collects expired contexts established
                    when GSI Secure Conversation is used. The value is the number of seconds between
                    each run and defaults to 10 minutes. </para>
                <screen>&lt;containerSecurityConfig
                xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
                ...
                &lt;context-timer-interval value=&quot;100000&quot;/&gt;
                ...
                &lt;/containerSecurityConfig&gt;</screen>
            </section>
            <!-- context-timer-interval -->
            <section id="wsaajava-secdesc-container-replay">
                <title>Replay Timer Interval</title>
                <para>This parameter sets the interval on the timer thread that collects expired
                    message digest ids, stored to prevent replay attack in the case of Secure
                    Message. The value is set in seconds and the default value is 1 minute. </para>
                <screen>&lt;containerSecurityConfig
                xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;&gt;
                ...
                &lt;replay-timer-interval value=&quot;100&quot;/&gt;
                ...
                &lt;/containerSecurityConfig&gt;</screen>
            </section>
            <!-- replay-timer-interval -->
        </section>
        <section id="wsaajava-secdesc-service-descriptor">
            <title>Writing Service Security Descriptors</title>
            <para>All security properties of a service can be configured using a descriptor file.</para>
            <para>To set the container security descriptor, see <olink
                    targetptr="wsaajava-secdesc-configDesc-service"/>
            </para>
            <para>You can use the following common configuration options (links are from the above
                    <olink targetptr="wsaajava-secdesc-serverSide-common"/> section): <itemizedlist>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-configCred"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-configAuthz"/> - In addition to the
                            authorization mechanisms shipped, you can write custom authorization
                            mechanism for a service as described in <olink
                                targetptr="wsaajava-domain-serverAuthz-custom"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-rejectLimProxy"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-contextLifetime"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-replayAttack"/></para>
                    </listitem>
                </itemizedlist></para>
            <para>Configuration options are also available specific to the container security
                descriptor: <itemizedlist>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-service-configAuth"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-service-configRunas"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-service-configPerMethod"/></para>
                    </listitem>
                </itemizedlist></para>
            <section id="wsaajava-secdesc-configDesc-service">
                <title>Configuring Service Security Descriptor</title>
                <orderedlist>
                    <listitem>
                        <para>The service security descriptor can be configured in the service's
                            deployment descriptor section as a parameter. The parameter is a
                            name/value that provides the path to the security descriptor file.
                            <screen>
                            &lt;service name=&quot;MyDummyService&quot;
                            provider=&quot;Handler&quot;
                            style=&quot;document&quot;&gt;
                            ...
                            &lt;parameter name=&quot;securityDescriptor&quot;
                            value=&quot;org/globus/wsrf/impl/security/descriptor/security-config.xml&quot;/&gt;
                            ...
                            &lt;/service&gt;</screen></para>
                    </listitem>
                    <listitem>
                        <para>A <constant>
                                org.globus.wsrf.impl.security.descriptor.ServiceSecurityDescriptor
                            </constant> object can be created and initialized in the service's
                            contructor.
                            <screen>
                            public class MyDummyService {
                            public MyDummyService() throws Exception {

                            ServiceSecurityDescriptor serviceDesc =
                            new ServiceSecurityDescriptor();

                            // set security properties on the above object
                            using get/set methods
                            // in the API

                            ServiceSecurityHelper
                            .setSecurityDescriptor(&quot;DummyServiceName&quot;
                            serviceDesc);
                            }
                            }
                        </screen></para>
                        <note>
                            <para>This method takes precedence over 1</para>
                        </note>
                    </listitem>
                    <listitem>
                        <para>A ServiceSecurityDescriptor object can be created similar to above,
                            but initialized from a file and set in the constructor.
                            <screen>
                            public class MyDummyService {

                            public MyDummyService() throws Exception {

                            ServiceSecurityDescriptor serviceDesc =
                            new ServiceSecurityDescriptor(&quot;/path/to/security/file&quot;);

                            ServiceSecurityHelper
                            .setSecurityDescriptor(&quot;DummyServiceName&quot;
                            serviceDesc);
                            }
                            }
                        </screen></para>
                        <note>
                            <para>This method takes precedence over 1</para>
                        </note>
                    </listitem>
                </orderedlist>
                <para>Programmatic creation and altering of a service security descriptor is not
                    discussed in detail here. Refer to [fixme - lost link<olink
                        targetptr="wsaajava-secdesc-serverSide-configDesc-program"/> ]for some
                    details on using the API to modify a descriptor. </para>
            </section>
            <section id="wsaajava-secdesc-service-configAuth">
                <title>Authentication methods</title>
                <para>This section describes configuring policy on the authentication mechanism
                    required by your service. This specifies the security policy that determines the
                    authentication methods clients should use for contacting your service. </para>
                <para>The authentication method required for accessing a service can be configured
                    in the descriptor using the <constant>&lt;auth-method&gt;</constant> element. A
                    per method configuration can also be done as described in<olink
                        targetptr="wsaajava-secdesc-service-configPerMethod"/>. </para>
                <para>Currently, the following authentication methods are supported: </para>
                <table>
                    <title>Authentication methods</title>
                    <tgroup cols="3">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong">Authentication Method </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Element</emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Options/Notes</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>No Authentication</entry>
                                <entry>
                                    <constant>&lt;none/&gt;</constant>
                                </entry>
                                <entry>
                                    <para>This method <emphasis>cannot</emphasis> be specified with
                                        any other authentication method. </para>
                                </entry>
                            </row>
                            <row>
                                <entry>GSI Secure Message</entry>
                                <entry>
                                    <constant> &lt;GSISecureMessage/&gt;</constant>
                                </entry>
                                <entry>
                                    <para>The <constant> &lt;protection-level&gt;
                                        </constant> sub element can be used to specify a protection
                                        level that must be applied to the message: <itemizedlist>
                                            <listitem>
                                                <para>
                                                  <constant> &lt;integrity/&gt;</constant> ,
                                                  indicates that the message must be
                                                  integrity-protected (signed). </para>
                                            </listitem>
                                            <listitem>
                                                <para>
                                                  <constant> &lt;privacy/&gt;</constant> ,
                                                  indicates that the message must be
                                                  privacy-protected (encrypted and signed).
                                                </para>
                                            </listitem>
                                        </itemizedlist></para>
                                </entry>
                            </row>
                            <row>
                                <entry>GSI Secure Conversation</entry>
                                <entry>
                                    <constant> &lt;GSISecureConversation/&gt;</constant>
                                </entry>
                                <entry>
                                    <para>The <constant> &lt;protection-level&gt;
                                        </constant> sub element can be used to specify a protection
                                        level that must be applied to the message: <itemizedlist>
                                            <listitem>
                                                <para>
                                                  <constant> &lt;integrity/&gt;</constant> ,
                                                  indicates that the message must be
                                                  integrity-protected (signed). </para>
                                            </listitem>
                                            <listitem>
                                                <para>
                                                  <constant> &lt;privacy/&gt;</constant> ,
                                                  indicates that the message must be
                                                  privacy-protected (encrypted and signed).
                                                </para>
                                            </listitem>
                                        </itemizedlist></para>
                                </entry>
                            </row>
                            <row>
                                <entry>GSI Secure Transport Authentication</entry>
                                <entry>
                                    <constant> &lt;GSITransport/&gt;</constant>
                                </entry>
                                <entry>
                                    <para>The <constant> &lt;protection-level&gt;
                                        </constant> sub element can be used to specify a protection
                                        level that must be applied to the message: <itemizedlist>
                                            <listitem>
                                                <para>
                                                  <constant> &lt;integrity/&gt;</constant> ,
                                                  indicates that the message must be
                                                  integrity-protected (signed). </para>
                                            </listitem>
                                            <listitem>
                                                <para>
                                                  <constant> &lt;privacy/&gt;</constant> ,
                                                  indicates that the message must be
                                                  privacy-protected (encrypted and signed).
                                                </para>
                                            </listitem>
                                        </itemizedlist></para>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <para>
                    <emphasis>Notes:</emphasis>
                </para>
                <itemizedlist>
                    <listitem>
                        <simpara>Multiple authentication methods can be specified under the
                                <constant>&lt;auth-method&gt;</constant> element (except for the
                                <constant>&lt;none/&gt;</constant> method, see above). As long as
                            one of the specified authentication methods is used, access to the
                            service is allowed. </simpara>
                    </listitem>
                    <listitem>
                        <simpara>If multiple authentication methods are specified, they need to be
                            in alphabetical order. That is, the following order needs to be
                            maintained: 1) GSISecureConversation, 2) GSISecureMessage, 3)
                            GSISecureTransport. This does not imply that all three need to be
                            specified, but that the specified authentication mechanisms need to
                            comply with the above order. </simpara>
                    </listitem>
                    <listitem>
                        <simpara>If <emphasis>no</emphasis>
                            <constant>&lt;protection-level&gt;</constant> sub-element is specified,
                            then all protection levels are available to clients. However, if the
                                <constant>&lt;protection-level&gt;</constant> sub-element
                                <emphasis>is</emphasis> specified, then the service will only accept
                            the protection levels listed under said element. </simpara>
                    </listitem>
                    <listitem>
                        <simpara>The <constant>
                                org.globus.wsrf.impl.security.authentication.SecurityPolicyHandler
                            </constant> handler <emphasis>must</emphasis> be installed properly in
                            order for this to work. This handler is installed by default. </simpara>
                    </listitem>
                    <listitem>
                        <simpara>If a security descriptor is <emphasis>not</emphasis> specified,
                            authentication method enforcement is <emphasis>not</emphasis> performed.
                        </simpara>
                    </listitem>
                </itemizedlist>
                <para>
                    <emphasis>Example:</emphasis>
                </para>
                <screen>&lt;serviceSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;

                &lt;!-- default auth-method for any other method --&gt;
                &lt;auth-method&gt;
                &lt;GSISecureConversation/&gt;
                &lt;/auth-method&gt;
                &lt;/securityConfig&gt;</screen>
            </section>
            <!-- service sec desc authN -->
            <section id="wsaajava-secdesc-service-configRunas">
                <title>Run-as mode</title>
                <para>This section describes the credentials your service should use for the
                    operation being invoked. This is important if remote secure operations are being
                    invoked from your service, since it determines what credentials are used for
                    such an access. </para>
                <para>The <constant>&lt;run-as&gt;</constant> element is used to configure the JAAS
                    run-as identity under which the service method will be executed. The run-as
                    identity can be configured on a per method basis also as described in<olink
                        targetptr="wsaajava-secdesc-service-configPerMethod"/>. Currently, the
                    following run-as identities are supported: </para>
                <table>
                    <title>Run-as methods</title>
                    <tgroup cols="2">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong">Element</emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong">Functionality</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;run-as value=&quot;caller&quot;/&gt;</constant>
                                </entry>
                                <entry>
                                    <para>The service method will be run with the security identity
                                        of the client. The caller Subject will contain the
                                        following: </para>
                                    <itemizedlist>
                                        <listitem>
                                            <simpara>If using<emphasis>GSI Secure
                                                Message</emphasis>: a GlobusPrincipal (the identity
                                                of the signer) is added to the principal set of the
                                                caller-identity Subject. Also, the signer&apos;s
                                                certificate chain is added to the public credentials
                                                set of the Subject object. </simpara>
                                        </listitem>
                                        <listitem>
                                            <para>If using<emphasis>GSI Secure
                                                Conversation</emphasis>: a GlobusPrincipal (the
                                                identity of the initiator) is added to the principal
                                                set of the Subject. <itemizedlist>
                                                  <listitem>
                                                  <simpara>If client authentication was
                                                  performed, the client&apos;s certificate
                                                  chain will be added to the public
                                                  credentials set of the Subject object.
                                                  </simpara>
                                                  </listitem>
                                                  <listitem>
                                                  <simpara>Also, if delegation was performed,
                                                  the delegated credential is added to the
                                                  private credential set of the Subject
                                                  object. </simpara>
                                                  </listitem>
                                                </itemizedlist></para>
                                        </listitem>
                                        <listitem>
                                            <simpara>If grid map file authorization was performed, a
                                                UserNamePrincipal is added to the principal set of
                                                the Subject object. </simpara>
                                        </listitem>
                                    </itemizedlist>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;run-as value=&quot;service&quot;/&gt;</constant>
                                </entry>
                                <entry>The service method will be run with the security identity of
                                    the service itself (if the service has one, otherwise the
                                    container identity will be used). </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;run-as value=&quot;resource&quot;/&gt;</constant>
                                </entry>
                                <entry>The service method will be run with the security identity of
                                    the resource. If no resource is specified or if the resource
                                    does not have a configured subject, credentials in this order of
                                    occurrence will be used: service credential, container
                                    credential. </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;run-as value=&quot;system&quot;/&gt;</constant>
                                </entry>
                                <entry>The service method will be run with the security identity of
                                    the container. </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <para>
                    <emphasis>Notes:</emphasis>
                </para>
                <itemizedlist>
                    <listitem>
                        <simpara>
                            <emphasis>resource-identity</emphasis> is the default setting.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>The <constant>
                                org.globus.wsrf.impl.security.authentication.SecurityPolicyHandler
                            </constant> handler <emphasis>must</emphasis> be installed properly in
                            order for this to work. It is installed by default. </simpara>
                    </listitem>
                    <listitem>
                        <simpara>If the security descriptor is <emphasis>not</emphasis> specified,
                            then the run-as identity is not set and there will be no JAAS subject
                            associated with the execution of the operation. This means that any
                            method calls that require credentials and that are invoked by the
                            service method itself will fail. </simpara>
                    </listitem>
                </itemizedlist>
                <para>
                    <emphasis>Example:</emphasis>
                </para>
                <screen>&lt;servicesecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;

                &lt;!-- default run-as for any other method --&gt;
                &lt;run-as&gt;
                &lt;service-identity/&gt;
                &lt;/run-as&gt;

                &lt;/serviceSecurityConfig&gt;</screen>
            </section>
            <!-- service sec desc run-as -->
            <section id="wsaajava-secdesc-service-configPerMethod">
                <title>Authentication and run-as per-method</title>
                <para>This section describes configuring the authentication and run-as mechanism per
                    method, rather than for the whole service. </para>
                <para>A per-method configuration can be used to define expected authentication
                    methods for the method and also a run-as configuration. The element
                        <constant>methodAuthentication</constant> is used to list all the method
                    configuration. For each method, element <constant>method</constant> with method
                    name as attribute needs to be used. The method name attribute can either be the
                    local name of the method or a string representation of the QName of the method.
                    If the QName is used, the toString() representation from the<code>
                        javax.xml.namespace.QName.toString()</code>, should be used. For
                        example,<code>{http://foo.bar}methodName</code>. If a method does not have
                    such a configuration, the default configuration, as described in the last two
                    sections, is used. </para>
                <para>Example</para>
                <screen>

                &lt;serviceSecurityConfig
                xmlns=&quot;http://www.globus.org/security/descriptor/service&quot;&gt;
                ...
                &lt;method name=&quot;findServiceData&quot;&gt;
                &lt;auth-method&gt;
                &lt;none/&gt;
                &lt;/auth-method&gt;
                &lt;/method&gt;

                &lt;method name=&quot;{http://foo.bar}subtract&quot;&gt;
                &lt;run-as&gt;
                &lt;service-identity/&gt;
                &lt;/run-as&gt;
                &lt;/method&gt;

                &lt;method name=&quot;destroy&quot;&gt;
                &lt;auth-method&gt;
                &lt;GSISecureMessage/&gt;
                &lt;GSISecureConversation&gt;
                &lt;protection-level&gt;
                &lt;integrity/&gt;
                &lt;/protection-level&gt;
                &lt;/GSISecureConversation&gt;
                &lt;/auth-method&gt;
                &lt;/method&gt;

                &lt;!-- default run-as for any other method --&gt;
                &lt;run-as&gt;
                &lt;system-identity/&gt;
                &lt;/run-as&gt;

                &lt;!-- default auth-method for any other method --&gt;
                &lt;auth-method&gt;
                &lt;GSISecureConversation/&gt;
                &lt;/auth-method&gt;
                ...
                &lt;/serviceSecurityConfig&gt;

            </screen>
                <para>In the above example:</para>
                <itemizedlist>
                    <listitem>
                        <simpara>the <function>findServiceData()</function> operation does not
                            require any authentication. Since no run-as per method is specified, the
                            default specification, <emphasis>system-identity</emphasis>, is used.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara>the <function>destroy()</function> operation requires either
                                <emphasis>GSI Secure Message </emphasis> authentication with either
                            level of protection or <emphasis>GSI Secure Conversation </emphasis>
                            authentication with integrity protection. Default run-as is used.
                        </simpara>
                    </listitem>
                    <listitem>
                        <simpara><function>substract</function> method does not have a specific
                            authentication specified, so the default <emphasis>GSI Secure
                                Conversation </emphasis> is used. But the operation is run with
                                <emphasis>service identity</emphasis>. </simpara>
                    </listitem>
                    <listitem>
                        <simpara>all other operations must be authenticated with <emphasis>GSI
                                Secure Conversation </emphasis> with either level of protection.
                        </simpara>
                    </listitem>
                </itemizedlist>
            </section>
            <!--- authN and run-as per method -->
        </section>
        <section id="wsaajava-secdesc-resource-descriptor">
            <title>Writing Resource Security Descriptor</title>
            <para>To set the container security descriptor, see <olink
                    targetptr="wsaajava-secdesc-configDesc-resource"/></para>
            <note>
                <para>The common configuration options for server-side security descriptors are not
                    implemented in the same way as those for container or service security
                    descriptors.</para>
            </note>
            <para>The following configuration options are available for the resource security
                descriptor: <itemizedlist>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-resource-default-gridmap"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-resource-credentials"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesc-resource-authz"/></para>
                    </listitem>
                    <listitem>
                        <para><olink targetptr="wsaajava-secdesec-resource-initialize"/></para>
                    </listitem>
                </itemizedlist></para>
            <section id="wsaajava-secdesc-configDesc-resource">
                <title>Configuring Resource Security Descriptor</title>
                <para>Secure resources must implement the
                        <constant>org.globus.wsrf.security.SecureResource</constant> interface. </para>
                <orderedlist>
                    <listitem>
                        <para>A <constant>ResourceSecurityDescriptor</constant> object can be
                            created and initialized in the resource's constructor. The object should
                            be returned as a part of the <constant>getSecurityDescriptor</constant>
                            method:<screen>

                            public MyDummyResource implements SecureResource
                            {

                            private ResourceSecurityDescriptor desc = null;

                            public MyDummyResource() throws Exception {

                            this.desc = new ResourceSecurityDescriptor();

                            // set security properties on the above object
                            using get/set methods
                            // in the API
                            }

                            public ResourceSecurityDescriptor
                            getSecurityDescriptor() {
                            return this.desc;
                            }
                            }
                        </screen></para>
                    </listitem>
                    <listitem>
                        <para>A <constant>ResourceSecurityDescriptor</constant> object can be
                            created similar to above, but initialized from a file and set in the
                            constructor:
                            <screen>
                            public MyDummyResource implements SecureResource
                            {

                            private ResourceSecurityDescriptor desc = null;

                            this.desc = new ResourceSecurityDescriptor(&quot;/path/to/security/file&quot;);
                            this.desc.initialize();
                            }

                            public ResourceSecurityDescriptor
                            getSecurityDescriptor() {
                            return this.desc;
                            }
                            }
                        </screen></para>
                    </listitem>
                </orderedlist>
                <para>Resource level security can be set up using a resource security descriptor.
                    The configuration properties and schema are identical to the service security
                    descriptor. A resource security descriptor overrides any service or container
                    level security settings. To make a resource secure, it needs to implement
                        <constant> org.globus.wsrf.impl.security.SecureResource</constant>. This
                    interface has a method that returns an instance of <constant>
                        org.globus.wsrf.impl.security.descriptor.ResourceSecurityDescriptor
                    </constant>. If <constant>null</constant> is returned, it is assumed that no
                    security is set on the resource. </para>
                <para>A <constant>ResourceSecurityDescriptor</constant> object can be created by
                    reading settings from a descriptor file. The file needs to be written as
                    described in <olink targetptr="wsaajava-secdesc-serverSide-common"/>. Refer to
                        <olink targetptr="wsaajava-secdesc-configDesc-resource"/> for information on
                    configuring resource security descriptors. </para>
                <para>The <constant>ResourceSecurityDescriptor</constant> object also exposes an API
                    to set and get all properties that are described in <olink
                        targetptr="wsaajava-secdesc-serverSide-common"/>. The descriptor can be set
                    up programmatically using the API. </para>
                <para>
                    <emphasis>Example:</emphasis>
                </para>
                <para>The following code snippet creates a resource descriptor object directly: </para>
                <screen>ResourceSecurityDescriptor desc = new
                ResourceSecurityDescriptor();
                desc.setRejectLimitedProxy(&quot;true&quot;);
            </screen>
            </section>
            <section id="wsaajava-secdesc-resource-default-gridmap">
                <title>Default GridMap</title>
                <para>To set default gridmap:</para>
                <screen>
                GridMap gridmap = new GridMap();
                // set GridMap mappings
                desc.setDefaultGridMap(gridmap);
            </screen>
            </section>
            <section id="wsaajava-secdesc-resource-credentials">
                <title>Credentials</title>
                <para>To set credentials:</para>
                <screen>
                import javax.security.auth.Subject;

                Subject subject = new Subject;
                // set public/private credentials on subject object
                desc.setSubject(subject);
            </screen>
            </section>
            <section id="wsaajava-secdesc-resource-authz">
                <title>Authorization chain</title>
                <para>To set up an authorization chain:</para>
                <screen>
                String[] pdpChain = new String[2];
                pdpChain[0] = "prefix1:some.PDP";
                pdpChain[1] = "prefix2:some.other.PDP";

                // Similar API for PIPs and Bootstrap PIP
                String[] pips = new String[1];
                pips[0] = "pip1:some.PIP";

                ResourcePropertiesChainConfig config = new
                ResourcePropertiesChainConfig();
                config.setProperty("prefix1", "property1", value1);

                AuthorizationEngine engine =
                AuthzUtil.getAuthzEngine("Chain name", pips, pdpChain,
                config);
                desc.setAuthzEngine(engine);
            </screen>
            </section>
            <section id="wsaajava-secdesec-resource-initialize">
                <title>Initializing descriptor</title>
                <para>To force initializing of a resource security descriptor: </para>
                <screen>
                desc.setInitialized(false);
                desc.initialize();
            </screen>
            </section>
            <!-- resource sec desc -->
        </section>
    </chapter>
    <chapter id="wsaajava-secdesc-clientSide">
        <title>Writing Client Security Descriptors</title>
        <section id="wsaajava-secdesc-configDesc-client">
            <title>Configuring Client Security Descriptors</title>
            <orderedlist>
                <listitem>
                    <para>Client security descriptors from a file can be configured directly on the
                        stub as follows:
                        <screen>
                            // Client security descriptor file
                            String CLIENT_DESC =
                            &quot;org/globus/wsrf/samples/counter/client/client-security-config.xml&quot;;
                            //Set descriptor on Stub
                            ((Stub)port)._setProperty(Constants.CLIENT_DESCRIPTOR_FILE,
                            CLIENT_DESC);
                        </screen></para>
                </listitem>
                <listitem>
                    <para>A client security descriptor object can be constructed from a file and
                        configured directly on the stub as follows:
                        <screen>
                            // Client security descriptor file
                            String CLIENT_DESC = &quot;org/globus/wsrf/samples/counter/client/client-security-config.xml&quot;;
                            ClientSecurityDescriptor desc = new
                            ClientSecurityDescriptor(CLIENT_DESC);
                            //Set descriptor on Stub
                            ((Stub)port)._setProperty(Constants.CLIENT_DESCRIPTOR,
                            desc);
                        </screen></para>
                    <note>
                        <para>This takes precedence over 1</para>
                    </note>
                </listitem>
                <listitem>
                    <para>A client security descriptors object can be created and get/set methods
                        can be used to set security properties. The object can then be configured on
                        the stub as follows:
                        <screen>
                            ClientSecurityDescriptor desc = new
                            ClientSecurityDescriptor();

                            // set security properties on the above object
                            using set/get object

                            //Set descriptor on Stub
                            ((Stub)port)._setProperty(Constants.CLIENT_DESCRIPTOR,
                            desc);
                        </screen></para>
                    <para>To initialize the descriptor, use the API in <constant>
                            org.globus.wsrf.impl.security.descriptor.ClientSecurityConfig
                        </constant> . </para>
                    <note>
                        <para>This takes precedence over 1</para>
                    </note>
                </listitem>
            </orderedlist>
        </section>
        <!-- client sec desc -->
        <section id="wsaajava-secdesc-client-cred">
            <title>Credentials</title>
            <para>The client can be configured with credentials using the descriptor. The
                credentials can be set using either: a) the path to a proxy file, or b) the path to
                a certificate and key file. The credentials can be configured by adding one of the
                following blocks to the client security descriptor. </para>
            <para>Example for option (a):
                <screen>&lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
                    ...
                    &lt;proxy-file value=&quot;proxyFile&quot;/&gt;
                    ...
                    &lt;/clientSecurityConfig&gt;</screen></para>
            <para>Example for option (b):
                <screen>&lt;clientSecurityConfig
                    xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
                    ...
                    &lt;credential&gt;
                    &lt;cert-key-files&gt;
                    &lt;key-file value=&quot;keyFile&quot;/&gt;
                    &lt;cert-file value=&quot;certFile&quot;/&gt;
                    &lt;/cert-key-files&gt;
                    &lt;/credential&gt;
                    ...
                    &lt;/clientSecurityConfig&gt;</screen></para>
            <para>If credentials are not configured using any of the above methods, then the
                underlying CoG JGlobus library is used. This will attempt to load the
                    <glossterm>proxy certificate </glossterm> of the user that is running the
                container as described in<olink targetdoc="javacogAdmin"
                    targetptr="javacog-admin-configuring-proxy"/>. </para>
        </section>
        <!-- configuring credentials -->
        <section id="wsaajava-secdesc-client-authz">
            <title>Authorization policy</title>
            <para>The <constant>&lt;authz&gt;</constant> element is used to determine the mechanism
                to use to authorize the server that is being contacted. Note that the security
                descriptor cannot be used to configure custom client authorization. Refer to <olink
                    targetdoc="wsaajavaDeveloper" targetptr="wsaajava-authzframe-domain"/> for
                details. The following values are currently supported: <informaltable>
                    <tgroup cols="2">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong"> Configuration </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong"> Funcationality </emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>none</constant>
                                </entry>
                                <entry>No authorization is done.</entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>self</constant>
                                </entry>
                                <entry>Self authorization is done, i.e the server should be running
                                    with the same credentials as the client. </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>host</constant>
                                </entry>
                                <entry>Host authorization is done, i.e the server should be running
                                    with credentials that have the host name it is running on
                                    embedded in it. </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>hostSelf</constant>
                                </entry>
                                <entry>Host authorization is done (i.e the server should be running
                                    with credentials that have the host name it is running on
                                    embedded in it). If that fails, an attempt at self authorization
                                    (i.e the server should be runnign with same credentials as
                                    client) is made. </entry>
                            </row>
                            <row>
                                <entry>
                                    <emphasis>any other string </emphasis>
                                </entry>
                                <entry>Identity authorization is done using the value as the
                                    identity, i.e the server should be running with identity
                                    specified as value. </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable> The following sample configures self authorization:
                <screen>
                    &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
                    ...
                    &lt;authz value=&quot;self&quot;/&gt;
                    ...
                    &lt;/clientSecurityConfig&gt;
                </screen></para>
        </section>
        <section id="wsaajava-secdesc-client-secConv">
            <title>GSI Secure Conversation</title>
            <para>The client can be configured to do GSI Secure Conversation using the element
                    <constant>&lt;GSISecureConversation&gt;</constant>. The following subelements
                can be used to set various properties <informaltable>
                    <tgroup cols="2">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong">Element </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong"> Functionality </emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;integrity&gt;</constant>
                                </entry>
                                <entry>Sets protection level to signature. </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;privacy&gt;</constant>
                                </entry>
                                <entry>Sets protection level to encryption (signature is also done).
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;anonymous&gt;</constant>
                                </entry>
                                <entry>Server is accessed as anonymous. </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;delegation value=&quot;</constant>
                                    <emphasis>type of delegation </emphasis>
                                    <constant>&quot;&gt;</constant>
                                </entry>
                                <entry>Determines the type of delegation to be done. The value can
                                    be set to <constant>full</constant>
                                    or<constant>limited</constant>. If the
                                    <emphasis>delegation</emphasis> element is not used, no
                                    delegation is done. If delegation is enabled, some form of
                                    client authorization is required. </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;context-lifetime&gt;</constant>
                                </entry>
                                <entry>Determines the lifetime of the context established. If not
                                    specified, the least lifetime of the chain of certificates used
                                    in establishing the context is used as the context lifetime.
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable> The following sample sets GSI Secure Conversation with privacy and
                full delegation:
                <screen>
                    &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
                    ...
                    &lt;GSISecureConversation&gt;
                    &lt;privacy/&gt;
                    &lt;delegation value=&quot;full&quot;/&gt;
                    &lt;/GSISecureConversation&gt;
                    ...
                    &lt;/clientSecurityConfig&gt;
                </screen></para>
        </section>
        <!-- GSI Secure Conversation -->
        <section id="wsaajava-secdesc-client-secMsg">
            <title>GSI Secure Message</title>
            <para>The client can be configured to do GSI Secure Message using the element
                    <constant>&lt;GSISecureMessage&gt;</constant>. The following subelements can be
                used to set various properties: <informaltable>
                    <tgroup cols="2">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong">Element </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong"> Functionality </emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;integrity&gt;</constant>
                                </entry>
                                <entry>Sets protection level to signature </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;privacy&gt;</constant>
                                </entry>
                                <entry>Sets protection level to encryption (signature is also done)
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;peer-credential value=&quot;</constant>
                                    <emphasis>path to file with credentials to encrypt with
                                    </emphasis>
                                    <constant>&quot;&gt;</constant>
                                </entry>
                                <entry>Sets the path to the file containing the credential to use if
                                    privacy protection is chosen. </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable> The following sample sets GSI Secure Message with integrity:
                <screen>
                    &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;

                    ...
                    &lt;GSISecureMessage&gt;
                    &lt;integrity/&gt;
                    &lt;/GSISecureMessage&gt;
                    ...
                    &lt;/clientSecurityConfig&gt;
                </screen></para>
        </section>
        <!-- GSI Secure Message -->
        <section id="wsaajava-secdesc-client-secTransport">
            <title>GSI Secure Transport</title>
            <para>The client can be configured to do GSI Secure Transport using the element
                    <constant>&lt;GSISecureTransport&gt;</constant>. The following subelements can
                be used to set various properties <informaltable>
                    <tgroup cols="2">
                        <tbody>
                            <row>
                                <entry>
                                    <emphasis role="strong">Element </emphasis>
                                </entry>
                                <entry>
                                    <emphasis role="strong"> Functionality </emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;integrity&gt;</constant>
                                </entry>
                                <entry>Sets protection level to signature. </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;privacy&gt;</constant>
                                </entry>
                                <entry>Sets protection level to encryption (signature is also done).
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <constant>&lt;anonymous&gt;</constant>
                                </entry>
                                <entry>Server is accessed as anonymous. </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable> The following sample sets GSI Secure Transport with privacy and
                anonymous:
                <screen>
                    &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;
                    ...
                    &lt;GSISecureTransport&gt;
                    &lt;privacy/&gt;
                    &lt;anonymous/&gt;
                    &lt;/GSISecureTransport&gt;
                    ...
                    &lt;/clientSecurityConfig&gt;
                </screen></para>
        </section>
        <!-- GSI Secure Transport -->
        <section id="wsaajava-secdesc-client-userName">
            <title>Username/Password</title>
            <para>Username/password can be used for authentication by the client. This is configured
                using the following elements:</para>
            <itemizedlist>
                <listitem>
                    <para><constant>&lt;username&gt;</constant> - allows for a string to be
                        configured</para>
                </listitem>
                <listitem>
                    <para><constant>&lt;passwordType&gt;</constant> - consists of a password and a
                        type string. </para>
                </listitem>
            </itemizedlist>
            <para>Example configuration:
                <screen>

                    &lt;clientSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/client&quot;&gt;

                    &lt;usernameType&gt;
                    &lt;username value=&quot;tester1&quot;/&gt;
                    &lt;passwordType&gt;
                    &lt;password value=&quot;TY^*(Hyu&quot;/&gt;
                    &lt;type value=&quot;someType&quot;/&gt;
                    &lt;/passwordType&gt;
                    &lt;/usernameType&gt;

                    &lt;/clientSecurityConfig&gt;
                </screen></para>
        </section>
        <!-- username type -->
        <section id="wsaajava-secdesc-client-trustedCerts">
            <title>Trusted credentials</title>
            <para>Client-side trusted credentials are configured similar to the container security
                descriptor as described in<olink targetptr="wsaajava-secdesc-container-trusted"/>.
                The outer element and schema for client security descriptors should be used as
                described in <olink targetptr="wsaajava-secdesc-schema"/>. </para>
            <para>If this configuration is not set, the underlying CoG JGlobus library is used to
                pick up trusted certificates. The library attempts to load the certificates as
                described in <olink targetdoc="javacogAdmin"
                    targetptr="javacog-admin-configuring-trusted-certs"/> . </para>
        </section>
        <!-- trusted certificates -->
    </chapter>
    <chapter id="wsaajava-secdesc-otherConfig">
        <title>Other configuration</title>
        <section id="wsaajava-secdesc-other-defaultGridMap">
            <title>Configuring Default GridMap File</title>
            <para>The gridmap file is a common configuration in the toolkit and is typically
                configured within the <constant>GridmapPDP</constant> configuration. To specify a
                default value to be used across the toolkit, if not specified with in the
                    <constant>GrimapPDP</constant> configuration, the
                <constant>defaultAuthz</constant> element in container security descriptor is used
                as described in <olink targetptr="wsaajava-secdesc-container-defaultAuthz"/>. </para>
            <para>The gridmap authorization can be specified with any prefix, but the default
                configuration uses &quot;gridmapAuthz&quot; as shown in the example below. </para>
            <para>Example:
                <screen>

                    &lt;containerSecurityConfig xmlns=&quot;http://www.globus.org/security/descriptor/container&quot;
                    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
                    xsi:schemaLocation=&quot;http://www.globus.org/security/descriptor
                    name_value_type.xsd&quot;
                    xmlns:param=&quot;http://www.globus.org/security/descriptor&quot;&gt;

                    &lt;defaultAuthzParam&gt;
                    &lt;interceptor name=&quot;gridmapAuthz:org.globus.wsrf.impl.security.GridMapPDP&quot;&gt;
                    &lt;parameter&gt;
                    &lt;param:nameValueParam&gt;
                    &lt;param:parameter name=&quot;gridmap-file&quot;
                    value=&quot;/etc/grid-security/grid-mapfile&quot;/&gt;
                    &lt;/param:nameValueParam&gt;
                    &lt;/parameter&gt;
                    &lt;/interceptor&gt;
                    &lt;/defaultAuthzParam&gt;
                    &lt;/containerSecurityConfig&gt;

                </screen></para>
            <para>If the gridmap file is updated at runtime, it will be reloaded. </para>
        </section>
        <!-- default grid map file -->
    </chapter>
    <!-- Other configuration -->
    <glossary role="auto" id="glossary-wsaajavaDescriptor">
        <!--
        <remark>some terms not in the docs but wanted in glossary:
        <glossterm>scheduler</glossterm>
        </remark>
        -->
        <glossdiv>
            <title>A</title>
            <glossentry>
                <glossterm>Dummy term</glossterm>
                <glossdef>
                    <para>This is a dummy entry for the automatic glossary database. Do not edit.
                    </para>
                </glossdef></glossentry>
        </glossdiv>
    </glossary>
</book>
