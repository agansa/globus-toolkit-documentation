<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

  <chapter id="gridshib-configuring" xreflabel="Configuring GridShib">
    <title>Configuring GridShib</title>
    <para>
      GridShib provides the <varname>GridShibPDP</varname> interceptor, and configuring GridShib involves placing this PDP into the authorization interceptor chain of the container or service you wish to protect. For details of configuring security interceptors, see the <olink targetdoc="wsaajava" targetptr="wsaajava-secdesc">Java WS Security Descriptor Framework documentation</olink>, specifically the <olink targetdoc="wsaajava" targetptr="wsaajava-secdesc-configAuthz">Configuring authorization mechanisms section</olink>.
    </para>


    <section id="gridshib-configuring-server-config">
      <title>GridShib Configuration Options</title>
      <para>
	GridShib supports the following configuration options. These
	should appear as <varname>parameter</varname> elements for the
	<varname>interceptor</varname> element as shown in the
	following example. The <literal>Used by</literal> column shows
	what specific <olink targetdoc="gridshibDev"
	targetptr="gridshib-developer-archdes">low-level
	interceptors</olink> utilize each configuration option; if you
	are using the high-level GridShibPDP option, you may safely
	ignore this column.
      </para>

      <para>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Variable</entry>
		<entry>Required</entry>
		<entry>Usage</entry>
		<entry>Used by</entry>
	      </row>
	    </thead>
	    <tbody>

	      <row id="metadataPath">
		<entry>metadataPath</entry>
		<entry>Yes</entry>
		<entry>Specify the path to the <link linkend="gridshib-configuring-metadata-directory">metadata directory</link>. This directory contains any number of trusted entity mapping files.</entry>
		<entry><para><simplelist>
		  <member>SAMLQueryPIPImpl</member>
		  <member>SAMLAssertionPushPIPImpl</member>
		</simplelist></para></entry>
	      </row>

	      <row id="enableBlacklisting">
		<entry>enableBlacklisting</entry>
		<entry>No</entry>
		<entry>Enables <link linkend="gridshib-configuring-ip-addr-blacklisting">blacklisting</link>. Should be <literal>true</literal> or <literal>false</literal>.</entry>
		<entry><para><simplelist>
		  <member>SAMLBlacklistPDPImpl</member>
		</simplelist></para></entry>
	      </row>

	      <row id="blacklistIPAddressFile">
		<entry>blacklistIPAddressFile</entry>
		<entry>No</entry>
		<entry>Path to file containing <link
		linkend="gridshib-configuring-ip-addr-blacklisting">blacklisted
		IP addresses</link>.</entry>
		<entry><para><simplelist>
		  <member>SAMLBlacklistPDPImpl</member>
		</simplelist></para></entry>
	      </row>

	      <row id="gridshibAuthzPolicyFile">
		<entry>gridshibAuthzPolicyFile</entry>
		<entry>Yes</entry>
		<entry><para>Path to <link
		  linkend="gridshib-configuring-authz-policy">authorization
		  policy file</link>. This files contains an access
		  control list used for attribute based
		  authorization. If one attribute obtained from the
		  IdP is in this file, the authorization module
		  returns a <literal>PERMIT</literal> decision.
		  </para>
		  <para>If this file can not be read or found, the
		  authorization module will throw an exception (always
		  resulting in a DENY decision).</para>
		</entry>
		<entry><para><simplelist>
		  <member>GridShibPullPDPImpl</member>
		  <member>SAMLAttributePDPImpl</member>
		  <member>SAMLMapPIPImpl</member>
		</simplelist></para></entry>
	       </row>

	       <row id="samlMapPolicy">
		 <entry>samlMapPolicy</entry>
		 <entry>No</entry>
		 <entry><para>This lists the path to a username
		 mappings file used for attribute based
		 authorization. If this is not configured, the
		 SAMLMapPIP will use the file in the shibAuthzAttrFile
		 configuration. This configuration will let you keep
		 access policy and username mappings separate if you
		 so desire. It also allows the SAMLMapPIP to be used
		 on its in conjunction with other PDP
		 implementations.</para>
		 <para>See <link linkend="username-mappings">Username
		 mappings</link></para>
		 </entry>
		 <entry><para><simplelist>
		   <member>SAMLMapPIPImpl</member>
		 </simplelist></para></entry>
	       </row>

	       <row id="requireAttributeMapping">
		 <entry>requireAttributeMapping</entry>
		 <entry>No</entry>
		 <entry>
		   <para>This triggers GridShib to require at least
		   one username mapping for a successful
		   authorization. It is <literal>False</literal> by
		   default.</para>
		   <para>See <link
		   linkend="username-mappings">Username
		   mappings</link></para>
		 </entry>
		 <entry><para><simplelist>
		   <member>GridShibPullPDPImpl</member>
		   <member>GridShibPushPullPDPImpl</member>
		 </simplelist></para></entry>
	       </row>

	       <row>
		 <entry>trustedSAMLAuthoritiesFile</entry>
		 <entry></entry>
		 <entry>XXX (note: this config parameter will be removed in a later version of GridShib for GT)</entry>
		 <entry>(AttributeAcceptancePIPImpl)</entry>
	       </row>
	       <row>
		 <entry>gridshibAuthzPolicyFile</entry>
		 <entry></entry>
		 <entry>XXX</entry>
		 <entry>GridShibPullPDPImpl, SAMLAttributePDPImpl, SAMLMapPIPImpl</entry>
	       </row>
	       <row>
		 <entry>gridshibAuthzMapFile</entry>
		 <entry></entry>
		 <entry>XXX</entry>
		 <entry>SAMLMapPIPImpl</entry>
	       </row>
	       <row>
		 <entry>gridshibPDPPolicy</entry>
		 <entry></entry>
		 <entry>XXX</entry>
		 <entry>GridShibPullPDPImpl, SAMLAttributePDPImpl, SAMLMapPIPImpl</entry>
	       </row>
	       <row>
		 <entry>defaultGridmap</entry>
		 <entry></entry>
		 <entry>XXX</entry>
		 <entry>BasePDP, GridShibPushPDPImpl, GridShibPullPDPImpl</entry>
	       </row>
	       <row>
		 <entry>respectMDAttributes</entry>
		 <entry></entry>
		 <entry>XXX</entry>
		 <entry>GridShibPullPDPImpl, GridShibPushPullPDPImpl</entry>
	       </row>
	       <row>
		 <entry>gridSPEntityID</entry>
		 <entry></entry>
		 <entry>XXX</entry>
		 <entry>SAMLQueryPIPImpl</entry>
	       </row>
	     </tbody>
	   </tgroup>
	 </informaltable>
       </para>

       <para>
	 <example>
	   <title>Example GridShib Container Configuration (XXX This needs to be verified)</title>
	   <screen>
<![CDATA[
<containerSecurityConfig xmlns="http://www.globus.org/security/descriptor/container" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://www.globus.org/security/descriptor 
  name_value_type.xsd"
  xmlns:param="http://www.globus.org/security/descriptor">
  <authzChain>
    <pdps>
      <interceptor name="gridshib:org.globus.gridshib.GridShibPDP">
	<parameter>
	  <param:nameValueParam>
	    <param:parameter name="metadataPath" 
			     value="/etc/grid-security/metadata"/>
	  </param:nameValueParam>
	</parameter>
	<parameter>
	  <param:nameValueParam>
	    <param:parameter name="enableBlacklisting"
			     value="true"/>
	  </param:nameValueParam>
	</parameter>
	<parameter>
	  <param:nameValueParam>
	    <param:parameter name="blacklistIPAddressesFile"
			     value="/etc/grid-security/blacklists/blacklist-ip-addresses.txt"/>
	  </param:nameValueParam>
	</parameter>
	<parameter>
	  <param:nameValueParam>
	    <param:parameter name="consultDefaultGridmap"
			     value="false"/>
	  </param:nameValueParam>
	</parameter>
	<parameter>
	  <param:nameValueParam>
	    <param:parameter name="gridshibAuthzPolicyFile"
			     value="/etc/grid-security/policy/core-authz-policy.xml"/>
	  </param:nameValueParam>
	</parameter>
      </interceptor>
    </pdps>
  </authzChain>
</containerSecurityConfig>
	     ]]>
	   </screen>
	 </example>
       </para>
     </section>

     <section id="gridshib-configuring-pull-mode">
       <title>Configuring Pull Mode</title>
       <para>
	 XXX Some introductory text here. Discourage people from using
	 this.
       </para>
      <para>
	 In general, there are two ways to configure the query module
	 with attribute authority information to use for the query: a)
	 provide the module with specific information via the <link
	 linkend="defaultIDPEntityID">defaultIDPEntityID</link>
	 configuration (which limits you to one, hardcoded AA) or b)
	 use the <link linkend="metadataPath">metadataPath</link>
	 configuration to configure an array of AAs from SAML
	 metadata.
       </para>

       <para>
	<informaltable>
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Variable</entry>
		<entry>Required</entry>
		<entry>Usage</entry>
		<entry>Used by</entry>
	      </row>
	    </thead>
	    <tbody>
	       
	      <!-- Start options related to PULL mode -->

	      <row id="enableAttributeQuery">
		<entry>enableAttributeQuery</entry>
		<entry>No</entry>
		<entry>This option enables attribute query or pull
		mode. Should be <literal>true</literal> or
		<literal>false</literal>.</entry>
		<entry><para><simplelist>
		  <member>SAMLQueryPIPImpl</member>
		</simplelist></para></entry>
	      </row>

	      <row id="defaultIDPEntityID">
		<entry>defaultIDPEntityID</entry>
		<entry>No</entry>
		<entry>This option is related to Pull mode and is
		used for two (related) purposes:
		<orderedlist>
		  <listitem><para> It is included in the attribute
		  query as the value of the NameQualifier attribute
		  of the <literal>NameIdentifer</literal> element of
		  the SAML <literal>AttributeQuery</literal> element.
		  </para></listitem>
		  <listitem><para> If the response returned from the
		  Shib AA contains an assertion, the issuer attribute
		  of the SAML <literal>Assertion</literal> element
		  must be equal to this value in order for the
		  assertion to be considered valid.
		  </para></listitem>
		</orderedlist>
		<para>Note: This configuration can not be used at the same time as the metadata-dir configuration. XXX See conflict-handling-note.</para>>
		</entry>
		<entry><para><simplelist>
		  <member>SAMLQueryPIPImpl</member>
		</simplelist></para></entry>
	      </row>
	      
	      <row id="cacheAttributes">
		<entry>cacheAttributes</entry>
		<entry>No</entry>
		<entry>A value of <literal>true</literal> directs the
		PDP to <link
		linkend="gridshib-configuring-attribute-caching">cache
		received attributes</link> and consult these
		attributes on subsequent operation invocations by the
		same client.</entry>
		<entry><para><simplelist>
		  <member>SAMLQueryPIPImpl</member>
		  <member>SAMLMapPIPImpl</member>
		  <member>GridShibPullPDPImpl</member>
		</simplelist></para></entry>
	      </row>
	      
	    </tbody>
	  </tgroup>
	</informaltable>
       </para>

 
     </section>
     <section id="gridshib-configuring-metadata-directory">
       <title>The Metadata Directory</title>
       <para>The metadata directory currently contains one or more
       trusted entity mapping files, which contain information about
       trusted attribute authorities.  Each line of this file contains
       an entityID followed by a DN, separated by one or more
       whitespace characters.  If the DN contains whitespace, it must
       be quoted.  (A URI must not contain whitespace characters, so
       it need not be quoted.) (XXX Names of files? XXX)</para>
       <para>The suggested path for this directory is <filename>/etc/grid-security/metadata/</filename>.</para>
       <para>
	 <example>
	   <title>Example Trusted Authorities Entity Map File</title>
	   <screen>
# GridShib CA:
https://test-sp.ncsa.uiuc.edu/shibboleth "CN=GridShib CA,O=Certificate Authority,DC=computer,DC=ncsa,DC=uiuc,DC=edu"

# Community Test Account:
https://gridshib.example.org/idp "CN=AAA Testbed Community User,O=National Center for Supercomputing Applications,C=US"
	   </screen>
	 </example>
       </para>
     </section>
     <section id="gridshib-configuring-authz-policy">
       <title>The Authorization Policy File</title>

       <section id="gridshib-configuring-authz-policy-file-syntax">
	 <title>Simple attribute ACL policy syntax</title>

	 <para>The attribute policy must conform to the simple policy schema, found
	 here in the source tree (element: AttributePolicy):
	 <filename>interceptors/java/source/policy/compact/gridshib_policy/gridshib_policy_port_type.wsdl</filename>
	 </para>
	 <para>The form is a list of entries:
	 <screen>&lt;AttributePolicy&gt;
	 [&lt;entry&gt; 0 -&gt; unbounded ]
	 &lt;listOfAttributes&gt; 1 -&gt; unbounded
	 &lt;saml:Attribute&gt; 1 -&gt; unbounded
	 [&lt;listOfUsernames&gt; 0 -&gt; unbounded ]
	 [&lt;username&gt; 0 -&gt; unbounded ]
	 [&lt;/entry&gt;]
	 &lt;/AttributePolicy&gt;</screen>
	 </para>
	 <para>The outer element <constant>&lt;AttributePolicy&gt;</constant>
	 and its entry format is in
	 a custom namespace, the attributes contained in
	 <constant>&lt;listOfAttributes&gt;</constant> are
	 SAML
	 <constant>&lt;Attribute&gt;</constant> elements.  The schemas
	 used in Shibboleth slightly alter the SAML attribute definition -- this
	 policy does NOT use attributes with that altered namespace, it uses
	 regular SAML attributes.</para>
	 
	 <para id="attr-acl-file-examples">
	   <emphasis>Examples:</emphasis>
	   <orderedlist>
	     <listitem id="attr-acl-file-example-one-attribute"><para>This example shows
	     a policy with one valid attribute, any client without this attribute
	     will be denied (unless DN based authorization is being used).
	     <screen>&lt;AttributePolicy
	     xmlns="http://gridshib.globus.org/namespaces/2005/08/policy"
	     xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"&gt;
	     &lt;entry&gt;
	     &lt;listOfAttributes&gt;
	     &lt;saml:Attribute AttributeName="urn:mace:dir:attribute-def:eduPersonAffiliation"
	     AttributeNamespace="urn:mace:shibboleth:1.0:attributeNamespace:uri"&gt;
	     &lt;saml:AttributeValue&gt;member&lt;/saml:AttributeValue&gt;
	     &lt;/saml:Attribute&gt;
	     &lt;/listOfAttributes&gt;
	     &lt;/entry&gt;
	     &lt;/AttributePolicy&gt;</screen>
	     </para></listitem>
	     
	     <listitem id="attr-acl-file-example-multi"><para>An attribute with multiple
	     values can be entered in the policy, see 
	     <link linkend="attr-acl-mutltiple-attributes">this explanation</link>
	     for how this is treated in the authorization processing.
	     <screen>&lt;AttributePolicy
	     xmlns="http://gridshib.globus.org/namespaces/2005/08/policy"
	     xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"&gt;
	     &lt;entry&gt;
	     &lt;listOfAttributes&gt;
	     &lt;saml:Attribute AttributeName="urn:mace:dir:attribute-def:eduPersonAffiliation"
	     AttributeNamespace="urn:mace:shibboleth:1.0:attributeNamespace:uri"&gt;
	     &lt;saml:AttributeValue&gt;faculty&lt;/saml:AttributeValue&gt;
	     &lt;saml:AttributeValue&gt;employee&lt;/saml:AttributeValue&gt;
	     &lt;/saml:Attribute&gt;
	     &lt;/listOfAttributes&gt;
	     &lt;/entry&gt;
	     &lt;/AttributePolicy&gt;</screen>
	     </para></listitem>
	     
	     <listitem id="attr-acl-file-example-empty-policy"><para>To signal an 
	     empty policy, you may not erase all information in the file, you must 
	     use an empty list. Otherwise, a parsing exception will be thrown --
	     while this results in a <constant>DENY</constant> decision anyhow,
	     there is a slight difference: because the parsing exception is
	     triggereds <emphasis>before</emphasis> a DN ACL check, if you have an
	     empty file you can not use DN based authorization.  If this file is
	     empty (or missing or unreadable), the authorization decisions will be
	     <constant>DENY</constant> no matter what.  Instead, use an empty list.
	   </para>
	   <para>Example:
	   <screen>&lt;AttributePolicy
	   xmlns="http://gridshib.globus.org/namespaces/2005/08/policy"
	   xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"&gt;
	   &lt;/AttributePolicy&gt;</screen>
	   </para>
	   <para>Of course, this is an odd configuration: if you want identity
	   based authorization only, gridmap authorization is
	   recommended instead.  This would only be for temporary attribute based 
	   authorization disabling.</para>
	     </listitem>
	   </orderedlist>
	 </para> <!-- end attribute file syntax example list -->
       </section>

       <section id="gridshib-configuring-authz-policy-file-semantics">
	 <title>Simple attribute ACL authorization semantics</title>
	 <para>The file pointed to by the <link
	 linkend="gridshibAuthzPolicyFile">gridshibAuthzPolicyFile</link>
	 WSDD parameter contains a list of SAML attributes that direct a
	 <constant>PERMIT</constant> decision if the caller's identity
	 has one of the attributes associated with it.</para>
	 <para>For example, if we:
	 <itemizedlist>
	   <listitem><para>include <constant>eduPersonAffiliation:member</constant>
	   in this policy file (see the
	   <link linkend="attr-acl-example">example</link> in the
	   syntax section),</para></listitem>
	   <listitem><para>and the client invokes an operation configured with
	   Shibboleth based authorization,</para></listitem>
	   <listitem><para>and the attribute query to the Shibboleth AA
	   results in an assertion with this attribute,</para></listitem>
	 </itemizedlist>
	 then the client is allowed to invoke the operation.</para>
	 <!-- TODO: include link to XACML policies -->
	 
	 <para>There are several things to note about how the attributes
	 in the ACL are matched to attributes coming over the wire from
	 the AA:
	 <orderedlist>
	   
	   <listitem id="attr-acl-normalization">
	     
	     <simpara>The attributes returned from the Shibboleth AA are
	     not regular SAML attributes, the
	     <constant>urn:mace:shibboleth:1.0</constant> namespace is
	     used for the <constant>&lt;AttributeValueType&gt;</constant>
	     element instead of the normal SAML namespace
	     <constant>urn:oasis:names:tc:SAML:1.0:assertion</constant>.
	     </simpara>
	     
	     <simpara>In the authorization module, the received attributes are
	     normalized to the SAML assertion namespace for user convenience.  The
	     policy looks nicer and the Shibboleth developers are moving towards
	     removing the Shibboleth namespace, so this ensures forward 
	     compatibility of the policy file.</simpara>
	     
	     <para>In the next example, the first attribute is equivalent to
	     the second attribute for authorization purposes:
	     <screen id="attr-acl-example">&lt;!-- xmlns="urn:oasis:names:tc:SAML:1.0:assertion" --&gt;

	     &lt;!-- This can be in the policy: --&gt;

	     &lt;Attribute AttributeName="urn:mace:dir:attribute-def:eduPersonAffiliation"
	     AttributeNamespace="urn:mace:shibboleth:1.0:attributeNamespace:uri"&gt;
	     &lt;AttributeValue&gt;member&lt;/AttributeValue&gt;
	     &lt;/Attribute&gt;

	     &lt;!-- And will match this from the request/response: --&gt;

	     &lt;Attribute AttributeName="urn:mace:dir:attribute-def:eduPersonPrincipalName"
	     AttributeNamespace="urn:mace:shibboleth:1.0:attributeNamespace:uri"
	     xmlns:typens="urn:mace:shibboleth:1.0"&gt;
	     &lt;AttributeValue xsi:type="typens:AttributeValueType"&gt;member&lt;/AttributeValue&gt;
	     &lt;/Attribute&gt;</screen>
	     </para>
	   </listitem>
	   
	   <listitem id="attr-acl-mutltiple-attributes">
	     <simpara>Multi-valued attributes in the policy do not signal
	     that the attribute from the AA must have each value, only
	     that one must be present.</simpara>
	     <simpara>Consider the <link
	     linkend="attr-acl-file-example-multi">multi-valued policy
	     entry</link> example in the syntax section below, if an
	     attribute from the AA was
	     <constant>eduPersonAffiliation:faculty</constant> only, the
	     authorization decision would return a
	     <constant>PERMIT</constant> decision.  A logical OR is
	     performed: even though both
	     <constant>eduPersonAffiliation:faculty</constant> and
	     <constant>eduPersonAffiliation:employee</constant> are in
	     the policy, a
	     <constant>eduPersonAffiliation:faculty</constant> attribute
	     from the AA is sufficient to authorize the
	     operation</simpara>
	     <simpara>Likewise for the reverse case.  If a multi-valued
	     attribute is returned from the Shibboleth AA, only one of
	     the values needs to match an entry in the policy in order
	     for authorization to evalute to
	     <constant>PERMIT</constant>.</simpara>
	   </listitem>
	   
	   <listitem id="attr-acl-string">
	     <simpara>Currently only <constant>xsd:string</constant> is supported
	     for the content of an <constant>&lt;AttributeValue&gt;</constant>
	     element.</simpara>        
	   </listitem>
	   
	 </orderedlist>
	 </para>
       </section>
       <section id="username-mappings">
	 <title>Username mappings</title>
	 <para>
	   A list of attributes can have system accounts associated with it
	   that will allow clients bearing the attributes access to the
	   accounts, just like a grid-mapfile can map DNs to system accounts.
	 </para>
	 <para>
	   If the <constant>&lt;listOfUsernames&gt;</constant> element is
	   present, the SAMLMapPIP will add the usernames to the client's
	   information for the life of the operation invocation.
	 </para>
	 <para>
	   Example:
	   <screen>&lt;AttributePolicy
	   xmlns="http://gridshib.globus.org/namespaces/2005/08/policy"
	   xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"&gt;
	   &lt;entry&gt;
	   &lt;listOfAttributes&gt;
	   &lt;saml:Attribute AttributeName="urn:mace:dir:attribute-def:eduPersonAffiliation"
	   AttributeNamespace="urn:mace:shibboleth:1.0:attributeNamespace:uri"&gt;
	   &lt;saml:AttributeValue&gt;faculty&lt;/saml:AttributeValue&gt;
	   &lt;/saml:Attribute&gt;
	   &lt;/listOfAttributes&gt;
	   &lt;listOfUsernames&gt;
	   &lt;username&gt;manager&lt;/username&gt;
	   &lt;/listOfUsernames&gt;
	   &lt;/entry&gt;
	   &lt;entry&gt;
	   &lt;listOfAttributes&gt;
	   &lt;saml:Attribute AttributeName="urn:mace:dir:attribute-def:eduPersonAffiliation"
	   AttributeNamespace="urn:mace:shibboleth:1.0:attributeNamespace:uri"&gt;
	   &lt;saml:AttributeValue&gt;member&lt;/saml:AttributeValue&gt;
	   &lt;/saml:Attribute&gt;
	   &lt;/listOfAttributes&gt;
	   &lt;listOfUsernames&gt;
	   &lt;username&gt;john&lt;/username&gt;
	   &lt;username&gt;lily&lt;/username&gt;
	   &lt;/listOfUsernames&gt;
	   &lt;/entry&gt;
	   &lt;/AttributePolicy&gt;</screen>
	 </para>
	 <para>
	   <emphasis>NOTE</emphasis>: An attribute may map to multiple usernames
	   (as seen in the second example above), multiple attributes may
	   map to multiple usernames, or one attribute may map to one username
	   only (as seen in the first example above).  As with the grid-mapfile,
	   if multiple usernames are present a service such as GRAM can decide
	   for itself
	   which is appropriate (in GRAM's case, this is accomplished by the
	   client supplied &lt;localUserId&gt; RSL element present in the
	   <ulink url="http://www-unix.globus.org/toolkit/docs/4.0/execution/wsgram/schemas/gram_job_description.html#element_job">&lt;job&gt;
	   RSL element</ulink>).
	 </para>
	 <para>
	   The username mappings are retrieved by a service using the same exact code that the
	   gridmap aware service should:
	   <screen>String[] usernames = SecurityManager.getManager().getLocalUsernames();</screen>
	   Thus, this can be used to replace the grid-mapfile's username
	   mapping aspect.
	 </para>
	 <para>
	   The SAMLMapPIP uses the ACL file set by the <link
	   linkend="gridshibAuthzPolicyFile">gridshibAuthzPolicyFile
	   </link> configuration.  But if the optional <xref
	   linkend="samlMapPolicy"/> configuration is present, it will
	   use that instead.  Thus username mapping information can be
	   separated from authorization policy if you so desire.  It
	   also allows the SAMLMapPIP to be used on its in conjunction
	   with other PDP implementations.
	 </para>
	 <para>
	   If the optional <link
	   linkend="requireAttributeMapping">requireAttributeMapping</link>
	   configuration is present, the ShibbolethPDP will require
	   that the caller has at least one username mapping in order
	   for authorization to succeed.
	 </para>
	 <para>
	   <emphasis>NOTE</emphasis>: If using username mappings with GRAM, you
	   must make sure the sudoers policy is correct.  The typical GRAM
	   entry in the sudoers policy looks like so:
	   <screen>globus ALL=(billy) NOPASSWD: /globuslocation/libexec/globus-gridmap-and-execute -g /etc/grid-security/grid-mapfile /globuslocation/libexec/globus-job-manager-script.pl *</screen>

	   The call to "globus-gridmap-and-execute -g /path/to/grid-mapfile"
	   should be removed from the line (or a separate copy of the line
	   added that excludes this).  When GRAM detects that gridmap
	   authorization is not being used it omits these arguments.  Thus,
	   the original sudo policy would fail unless the arguments were
	   removed.  This is a working entry:
	   <screen>globus ALL=(billy) NOPASSWD: /globuslocation/libexec/globus-job-manager-script.pl *</screen>
	 </para>
	 <para>
	   For more information about GRAM and sudo, see the
	   <ulink url="http://www.globus.org/toolkit/docs/4.0/execution/wsgram/admin-index.html#s-wsgram-admin-configsudo">Configuring Sudo</ulink>
	   section of the GRAM documentation.
	 </para>
       </section>
     </section>

     <section id="gridshib-configuring-ip-addr-blacklisting">
       <title>IP Address Blacklist File</title>
       <para>
	 The IP address blacklist file contains a list of IP addresses, one per line, which should be denied access.
       </para>
       <para>
	 <example>
	   <title>Example Blacklisted IP Address Files</title>
	   <screen>
	     # Blacklist of IP addresses
	     #
	     # This file contains a list of IP addresses, one per line.
	     111.111.111.111
	   </screen>
	 </example>
       </para>
     </section>

     <section id="gridshib-configuring-attribute-caching">
       <title>Attribute Caching</title>
       <para>
	 The PDP can optionally store received attributes from call to
	 call, which allows many operations to be performed by the
	 same client without the need for a remote callout to an
	 attribute authority for each operation invocation (only the
	 first).
       </para>
       <note><para>This feature is turned OFF by default</para></note>
       <para>
	 The attributes themselves are stored, not the authorization
	 decision. If caching is enabled, the attributes are stored
	 until the same expiration time as the SAML time conditions on
	 the attribute assertion dictate.
       </para>
       <note><para>Attributes are only relevant within the scope of
       the PDP. For example, a PDP instance "P1" authorizing
       invocations on a service "S1" would not see any attributes
       stored by a PDP instance "P2" protecting service
       "S2".</para></note>
       <para>
	 The steps of authorization algorithm with caching can be
	 viewed here. XXX
       </para>
       <para>
	 To enable caching, set the relevant configuration parameter
	 to "true": cacheAttr
       </para>
       <para>
	 Performance
	 <itemizedlist>
	   <listitem><para> We compared caching performance to
	   non-caching performance of the GridShib authorization
	   module with a localhost IdP using around 20 invocations
	   with each type (it was not an exhaustive or automated
	   study).  </para></listitem>
	   <listitem><para> An authorization decision including SAML
	   attribute exchange to the localhost IdP averaged 110ms. An
	   authorization decision based on a cached attribute averaged
	   7-10ms. For reference, if a decision is based on DN only
	   (bypassing attribute processing altogether), the average is
	   close to 4ms.  </para></listitem>
	   <listitem><para> Statistical rigor aside, this shows that
	   using attribute caching in subsequent operation invocations
	   results in an order of magnitude time savings over the
	   first operation invocation (and this comparison is not even
	   including any additional latency in the first operation
	   that would be incurred by using a non-localhost IdP).
	   </para></listitem>
	 </itemizedlist>
       </para>
       <para>
	 Caveat: in a forthcoming version, when multiple Attribute
	 Authorities in the SAML2 metadata may be queried based on an
	 SAML authentication assertion in the caller's proxy
	 certificate, the contacted Attribute Authority must be
	 considered as part of the cache lookup key. We have not fully
	 considered our strategy on combining attributes in the cache
	 from an AA formerly used by the caller when the same caller
	 invokes the service pointing to a new AA (probably a rare
	 event anyhow). Policy on this will likely be configurable by
	 the administrator.
       </para>
     </section>

     
</chapter>
