<?xml version='1.0' encoding='UTF-8'?>
<title>GT4 WS AA Developer&apos;s Guide</title>
<titleabbrev>Developer&apos;s Guide</titleabbrev>
<section id="s-authzframe-developer-introduction">
  <title>Introduction</title>
  <para>The authorization framework enforces  the configured authorization
policy on the service and client side.  The framework allows 
developers to configure a chain of authorization mechanisms either
programatically or declaratively using security descriptors. It also
allows for plugging in new authorization schemes (in addition to using
those that are provided with the framework.) Moreover the framework
allows for this configuration to be done at resource, service or
container level, each taking precedence in the order specified and
scoped as the name suggests.</para>
</section>
<section id="s-authzframe-developer-archdes">
  <title>Architecture and design overview</title>
  <section>
    <title>Server-side authorization</title>
    <para>The authorization framework on the server side consists of an engine that evaluates a chain of configured authorization schemes, also known as Policy Decisin Points(PDPs) to determine if the client making the invocation can access the resource/service. The chain can also be configured with Policy Information Points(PIPs), which can used to glean information that would be useful in the decision making process. </para>
    <para>The authorization engine is invoked as a part of handler chain, immediately after authentication of the invocation (<function>java:org.globus.wsrf.impl.security.authorization.AuthorizationHandler</function>. Authorization is done only if the call is secure and is authenticated successfully. The toolkit contains a set of PDPs that implement some authorization schemes or callout to some authorization service.  But custom PDPs and PIPs can be written and plugged in as a part of the chain.</para>
    <para>Any PDP has to implement the interface <function>org.globus.wsrf.security.authorization.PDP</function> and contain the logic to return a permit or deny based on  information such as subject DN, service being access and the operation being performed. To manage configuration information, each PDP can be bootstrapped with an object implementing <function>org.globus.wsrf.security.authorization.PDPConfig</function> interface. The interface has get and set methods which can be used to retrieve and set scoped parameters for the PDP. </para>
    <para>PIPs have to implement the interface <function>org.globus.wsrf.security.authorization.PIP</function> with the functionality to collect attributes from the invocation context that are relevant to making the authorization decision.</para>
    <para>A chain if PDPs and PIPs, with relevant configuration information can be configured at resource,  service or container level. If no chain is specified at resource level, service level one is used, if not container level configuration is used.The engine evaluates each PDP and PIP in the order specified and a permit-override mechanism is used to render a decision, that is even if one PDP returns a  permit, the decision rendered is permit. If all PDPs return a deny, an fault is thrown.</para>
  </section>
  <section>
    <title>Client-side authorization</title>
    <para>The client side authorization is done as a part of the handler that does authentication. GSI Secure Message authentication does client-side authorization only after the operation is completed. The other two authentication schemes supported, GSI Secure Conversation and GSI Transport authorize the server prior to the operation. The toolkit supports self, gridmap, host and identity authorization on the client side. The authorization to be used is set programatically on the Stub and the handler enforces it.</para>
  </section>
</section>
<section id="s-authzframe-developer-pubinterfaces">
  <title>Public interface</title>
  <para>The semantics and syntax of the APIs and WSDL for the component, along with
  descriptions of domain-specific structured interface data, can be found in
  the <ulink url="../WS_AA_Authz_Public_Interfaces.html">public interface guide</ulink>.</para>
</section>
<section id="s-authzframe-developer-scenarios">
  <title>Usage scenarios</title>
  <para>Configuring authorization information can be done using
a programmatic interface and is described in detail in these two
sections of the <ulink url="./../security_descriptor.html">Security Descriptor</ulink>
document: a) <ulink url="./../security_descriptor.html#descProgram"> Programmatic altering of descriptors</ulink> and b) <ulink url="./../security_descriptor.html#resDesc">Resource Security Descriptor</ulink>.</para>
  <para>If the authorization framework is set on either the service or
container level and is using one of the schemes that are distributed
with the toolkit, it is recommended that declarative configuration
using security descriptor files be used.</para>
</section>
<section id="s-authzframe-developer-tutorials">
  <title>Tutorials</title>
  <para>There are no tutorials available at this time</para>
</section>
<section id="s-authzframe-developer-features">
  <title>Feature summary</title>
&WS_AA_Authz_Feature_Summary_Frag;
</section>
<section id="s-authzframe-developer-platforms">
  <title>Tested platforms</title>
&WS_AA_Authz_Platform_Summary_Frag;
</section>
<section id="s-authzframe-developer-compatibility">
  <title>Backward compatibility summary</title>
&WS_AA_Authz_Compatibility_Summary_Frag;
</section>
<section id="s-authzframe-developer-dependencies">
  <title>Technology dependencies</title>
&WS_AA_Authz_Dependencies_Summary_Frag;
</section>
<section id="s-authzframe-developer-security_considerations">
  <title>Security considerations </title>
&WS_AA_Authz_Security_Considerations_Frag;
  <section>
    <title>Client side authorization</title>
    <para>Client authorization of the server is done after the completion of the operation when GSI Secure Message authentication is used. If you require client authorization to be done prior, use GSI Secure Conversation or GSI Transport security.</para>
  </section>
</section>
<section id="s-authzframe-developer-debugging">
  <title>Debugging</title>
  <para>Log output from the   authorization framework is a useful tool for debugging
  issues. Logging in   the code is based on  the <ulink url="http://jakarta.apache.org/commons/logging/">Jakarta Commons Logging</ulink> API and is described in more detail <ulink url="../../../common/javawscore/developer/index.html#debugging">here</ulink>. As
  described in above section, configuration files need to be edited to
  enable logging at different levels. For example, to see all logging
  for server side authorization, the following lines need to be added to container logging configuration file. To see client-side authorization framework logging, the same line  needs to  be added to <emphasis>$GLOBUS_LOCATION/log4j.properties</emphasis>.<screen>log4j.category.org.globus.wsrf.impl.security.authorization=DEBUG </screen></para>
  <para>The authorization module uses <ulink url="http://www-unix.globus.org/cog/java/">Java CoG Kit</ulink> for some of the functionality. To turn on logging for that functionality, the following can be added to the relevant logging file, depending on whether it is the client or the server side logging.<screen>log4j.category.org.globus.gsi.jaas=DEBUG
log4j.category.org.globus.gsi.gssapi=DEBUG
log4j.category.org.globus.security.gridmap=DEBUG</screen></para>
</section>
<section id="s-authzframe-developer-troubleshooting">
  <title>Troubleshooting</title>
  <para>[help for common problems developers may experience]</para>
</section>
<section id="s-authzframe-developer-relateddocs">
  <title>Related Documentation</title>
  <para>[could link to pdfs and whitepapers about protocols, etc re: the component]</para>
</section>
