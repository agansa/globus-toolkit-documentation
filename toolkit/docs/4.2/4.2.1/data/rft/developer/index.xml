<?xml version='1.0' encoding='UTF-8'?>

<title>GT &shortversion; Reliable File Transfer (RFT) Service: Developer's Guide</title>
<titleabbrev>Developer's Guide</titleabbrev> 


<section id="rft-developer-introduction"><title>Introduction</title>
<para>RFT Service implementation
  in GT &shortversion; uses
  standard SOAP messages over HTTP to submit and manage a set of 3rd
  party GridFTP transfers and to delete files using GridFTP. The user
  creates a RFT resource by submitting a list of URL pairs of&nbsp; files
  that need to be transferred/deleted&nbsp; to RFT Factory service. The
  user also specifies the time to live for the resource the user is
  creating to a GT &shortversion; container in which RFT is deployed and configured.
  The resource is created after the user is properly authorized and
  authenticated. RFT service implementation exposes operations to control
  and manage the transfers (the resource). The operations exposed by both
  RFT factory and RFT service are briefly described below. The resource
  the user created also exposes the state of the transfer as a resource
  property to which the user can either subscribe for changes or poll for
  the changes in state periodically using standard command line clients.</para>
</section>


<section id="rft-developer-beforeyoubegin">
  <title>Before you begin</title>
  <section id="rft-developer-features"><title>Feature summary</title>
    &RFT_Feature_Summary_Frag;
  </section>
  
  <section id="rft-developer-platforms"><title>Tested platforms</title>
    &RFT_Platform_Summary_Frag;
  </section>
  
  <section id="rft-developer-compatibility"><title>Backward compatibility summary</title>
    &RFT_Compatibility_Summary_Frag;
  </section>
  
  <section id="rft-developer-dependencies"><title>Technology dependencies</title>
    &RFT_Dependencies_Summary_Frag;
  </section>
  
  <section id="rft-developer-security_considerations"><title>Security considerations </title>
    &RFT_Security_Considerations_Frag;
  </section>
  </section>
<section id="rft-developer-archdes"><title>Architecture and design overview</title><para>
A design doc can be found <ulink url="Protocol_overview.doc">here</ulink>.</para>
</section>

<section id="rft-developer-pubinterfaces"><title>Public Interface</title>
<section id="rft-developer-apis"><title>Semantics and syntax of APIs</title>
&RFT_Interface_API_Frag;
</section>

  <section id="rft-developer-wsdl"><title>Semantics and syntax of the WSDL</title>
&RFT_Interface_WSDL_Frag;
</section>

  <section id="rft-developer-cmd"><title>Command-line tools</title>
    <para>Please see the <xref linkend="rft-commandline"/>.</para>
  </section>
  
  <section id="rft-developer-guis"><title>Overview of Graphical User Interface</title>
    &RFT_Interface_GUI_Frag;
  </section>
  
  <section id="rft-developer-domain"><title>Semantics and syntax of domain-specific interface</title>
    &RFT_Interface_Domain_Frag;
  </section>
  
  <section id="rft-developer-config"><title>Configuration interface</title>
    &RFT_Interface_Config_Frag;
  </section>
  
  <section id="rft-developer-env"><title>Environment variable interface</title>
    &RFT_Interface_Env_Frag;
  </section>
  
</section>

<section id="rft-developer-scenarios"><title>Usage scenarios</title>
&scenario1;
  &scenario2;
</section>

<section id="rft-developer-tutorials"><title>Tutorials</title>
<para>There are no tutorials available at this point.</para>
</section>

<section id="rft-developer-debugging"><title>Debugging</title>
<para> A standard way to debug RFT is to make the container print out more verbose error messages. You can do this with the following steps: </para>
<para>
Edit $GLOBUS_LOCATION/container-log4j.properties and add following line to it: 
<computeroutput> log4j.category.org.globus.transfer=DEBUG</computeroutput>. For more verbosity add <computeroutput> log4j.category.org.globus.ftp=DEBUG </computeroutput>, which will print out Gridftp messages too.
</para>

</section>

<section id="rft-developer-troubleshooting"><title>Troubleshooting</title>
  
<section><title>Database configuration</title><para>Database configuration is the most complicated and important part of RFT setup. You can find more instructions on troubleshooting in <xref linkend="rft-admin-troubleshooting"/>.</para></section>
  &RFT_Recovery_Frag;
</section>

<section id="rft-developer-relateddocs"><title>Related Documentation</title>
 <itemizedlist>
   <listitem><simpara><ulink
 url="http://www-unix.mcs.anl.gov/%7Ekeahey/DBGS/DBGS_files/dbgs_papers/allcock.pdf">Lessons
    learned producing an OGSI compliant Reliable File Transfer Service</ulink> (pdf)</simpara></listitem>
   <listitem><simpara>   <ulink
 url="http://www.doc.ic.ac.uk/%7Esjn5/GGF/GGF11/BGBS-Allcock.pdf">Reliable
       Data Transport: A Critical Service for the Grid</ulink> (pdf)
 </simpara></listitem>
 </itemizedlist>
</section>




