<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="gram4-audit-logging">
  <title>Audit Logging</title>
  <section id="gram4-audit-logging-overview">
    <title>Overview</title>
    <!--
    <para>
	  For an introduction and overview about audit logging look
      <ulink url="http://www.globus.org/solutions/">here</ulink>. Audit logging in GRAM4 is
	  done 3 times in a job's lifecycle: When the processing starts, when the job is submitted
	  to the local resource manager and when it's fully processed or when it fails.
    </para>
-->
    <para> GRAM4 includes mechanisms to provide access to audit and accounting information
      associated with jobs that GRAM4 submits to a local resource manager (LRM) such as PBS, LSF, or
      Condor.</para>
    <note>
      <para>Remember, GRAM is not a local resource manager but rather a protocol engine for
        communicating with a range of different local resource managers using a standard message
        format.</para>
    </note>
    <para>In some scenarios, it is desirable to get general information about the usage of the
      underlying LRM, such as:</para>
    <itemizedlist>
      <listitem>
        <para>What kinds of jobs were submitted via GRAM?</para>
      </listitem>
      <listitem>
        <para>How long did the processing of a job take?</para>
      </listitem>
      <listitem>
        <para>How many jobs were submitted by user X?</para>
      </listitem>
    </itemizedlist>
    <para> The following three use cases give a better overview of the meaning and purpose of
      auditing and accounting:</para>
    <orderedlist>
      <listitem>
        <para>
          <emphasis role="bold">Group Access</emphasis>. A grid resource provider allows a remote
          service (e.g., a gateway or portal) to submit jobs on behalf of multiple users. The grid
          resource provider only obtains information about the identity of the remote submitting
          service and thus does not know the identity of the users for which the grid jobs are
          submitted. This group access is allowed under the condition that the remote service stores
          audit information so that, if and when needed, the grid resource provider can request and
          obtain information to track a specific job back to an individual user. </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Query Job Accounting</emphasis>. A client that submits a job needs
          to be able to obtain, after the job has completed, information about the resources
          consumed by that job. In portal and gateway environments where many users submit many jobs
          against a single allocation, this per-job accounting information is needed soon after the
          job completes so that client-side accounting can be updated. Accounting information is
          sensitive and thus should only be released to authorized parties. </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Auditing</emphasis>. In a distributed multi-site environment, it can
          be necessary to investigate various forms of suspected intrusion and abuse. In such cases,
          we may need to access an audit trail of the actions performed by a service. When accessing
          this audit trail, it will frequently be important to be able to relate specific actions to
          the user. </para>
      </listitem>
    </orderedlist>
    <para>Audit logging in GRAM4 is done 3 times in a job's lifecycle: </para>
    <para>
      <orderedlist>
        <listitem>
          <para>when the processing starts,</para>
        </listitem>
        <listitem>
          <para>when the job is submitted to the local resource manager (LRM), and</para>
        </listitem>
        <listitem>
          <para>when it is fully processed or when it fails.</para>
        </listitem>
      </orderedlist>
    </para>
  </section>
  <section>
    <title>Audit and Accounting Records</title>
    <para> While audit and accounting records may be generated and stored by different entities in
      different contexts, we make the following assumptions in this chapter:</para>
    <!-- 
          <itemizedlist> 
              <listitem><para>Audit records are generated by the GRAM service itself and 
           accounting records by the LRM to which the GRAM service submits jobs. </para></listitem>
           
           <listitem><para>Audit records are stored in a DBMS indexed by a Grid Job Identifier (GJID), while 
           accounting records are maintained by the LRM indexed by a local job identifier (JID).</para></listitem>
           
           <listitem><para>Audit records contain the data described below; accounting records may contain 
             all information about the duration and the resource-usage of a job. </para></listitem>
          </itemizedlist>
         -->
    <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>&nbsp;</entry>
            <entry>Audit Records</entry>
            <entry>Accounting Records</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Generated by:</entry>
            <entry>GRAM service</entry>
            <entry>LRM to which the GRAM service submits jobs</entry>
          </row>
          <row>
            <entry>Stored in:</entry>
            <entry>Database, indexed by GJID</entry>
            <entry>LRM, indexed by JID</entry>
          </row>
          <row>
            <entry>Data that is stored:</entry>
            <entry>See list below.</entry>
            <entry>May include all information about the duration and resource-usage of a
            job</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para> The audit record of each job contains the following data:</para>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="strong">job_grid_id</emphasis>: String representation of the resource EPR
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">local_job_id</emphasis>: Job/process id generated by the scheduler
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">subject_name</emphasis>: Distinguished name (DN) of the user
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">username</emphasis>: Local username </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">idempotence_id</emphasis>: Job id generated on the client-side
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">creation_time</emphasis>: Date when the job resource is created
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">queued_time</emphasis>: Date when the job is submitted to the
          scheduler </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">stage_in_grid_id</emphasis>: String representation of the
          stageIn-EPR (RFT) </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">stage_out_grid_id</emphasis>: String representation of the
          stageOut-EPR (RFT) </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">clean_up_grid_id</emphasis>: String representation of the
          cleanUp-EPR (RFT) </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">globus_toolkit_version</emphasis>: Version of the server-side GT
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">resource_manager_type</emphasis>: Type of the resource manager
          (Fork, Condor, ...) </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">job_description</emphasis>: Complete job description document
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">success_flag</emphasis>: Flag that shows whether the job failed or
          finished successfully </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">finished_flag</emphasis>: Flag that shows whether the job is
          already fully processed or still in progress </para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Converting EPR to GRAM Service GJID</title>
    <para> The GRAM4 service returns an EPR that is used to control the job. However, the EPR is an
      XML document and cannot effectively be used as a primary key for a database table. Therefore,
      the job's EPR needs to be converted to an acceptable GJID format. </para>
    <para> A utility class, <computeroutput>org.globus.exec.utils.audit.AuditUtil</computeroutput>,
      is available to both the GRAM service before storing the audit record and the
      GRAM client before getting audit information from the audit database. </para>
  </section>
  <section>
    <title>Accessing Audit and Accounting Information</title>
    <para> To connect the two sets of records, both audit and accounting, we require that GRAM
      records the JID in each audit record that it generates. It is then straightforward for an
      audit service to respond to requests such as &quot;Give me the charge of the job with JID
      x&quot; by: <orderedlist>
        <listitem>
          <para>first selecting matching record(s) from the audit table, </para>
        </listitem>
        <listitem>
          <para>then using the local JID(s) to join to the accounting table of the LRM and access
            relevant accounting record(s).</para>
        </listitem>
      </orderedlist></para>
    <para> We propose a Web Service interface for accessing audit and accounting information. <ulink
        url="http://www.globus.org/toolkit/docs/4.0/techpreview/ogsadai/">OGSA-DAI</ulink> is a WSRF
      service that can create a single virtual database from two or more remote databases. In the
      future, other per-job information such as job performance data could be stored using the GJID
      or local JID as an index, and then made available in the same virtual database.</para>
  </section>
  <section>
    <title>For More Information</title>
    <para>The rest of this chapter focuses on how to configure GRAM4 to enable Audit-Logging. A case
      study for TeraGrid can be read <ulink
        url="http://www.teragridforum.org/mediawiki/index.php?title=GRAM4_Audit"> here</ulink>,
      which also includes more information about how to use this data to get accounting information
      of a job, query the audit database for information via a Web Services interface, etc. </para>
  </section>
  <section id="gram4-audit-logging-config">
    <title>Configuring GRAM4 To Enable Audit Logging</title>
    <para>Audit logging is turned off by default. To turn on Audit Logging, follow these steps:</para>
    <section>
      <title>Configure Log4J</title>
      <para>Uncomment the lines 3-6 of the Log4j configuration in <computeroutput
          >$GLOBUS_LOCATION/etc/globus_wsrf_gram/log4j.properties</computeroutput>
          to enable audit logging (as seen in the following example): </para>
      <screen># WS-GRAM audit logging database appender. Configuration of the database is in
# $GLOBUS_LOCATION/etc/globus_wsrf_gram/jndi-config.xml
log4j.category.org.globus.exec.service.audit.db=DEBUG, auditDB
log4j.additivity.org.globus.exec.service.audit.db=false
log4j.appender.auditDB=org.globus.exec.utils.audit.AuditDatabaseAppender
log4j.appender.auditDB.layout=org.apache.log4j.PatternLayout</screen>
    </section>
    <section>
      <title>Create the Audit Database</title>
      <para> Audit records are stored in a database which must be set up once. Currently we provide
        schemas for <itemizedlist>
          <listitem>
            <para> MySQL (<computeroutput
                >$GLOBUS_LOCATION/share/globus_wsrf_gram/gram_audit_schema_mysql.sql</computeroutput>)
            </para>
          </listitem>
          <listitem>
            <para> PostgreSQL (<computeroutput
                >$GLOBUS_LOCATION/share/globus_wsrf_gram/gram_audit_schema_postgres-8.0.sql</computeroutput>)
            </para>
          </listitem>
        </itemizedlist></para>
      <section>
        <title>If You Are Using MySQL</title>
        <para>The following describes how to set up the database for audit records in MySQL:</para>
        <orderedlist>
          <listitem>
            <para>Create a database inside of MySQL</para>
          </listitem>
          <listitem>
            <para> Grant necessary privileges to the account that will be used to upload the audit
              records in the audit. Typically the "globus" account. </para>
          </listitem>
          <listitem>
            <para>Use the schema to create the table</para>
          </listitem>
        </orderedlist>
        <screen>host:~ feller$ mysql -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 5.0.37 MySQL Community Server (GPL)

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; create database auditDatabase;
Query OK, 1 row affected (0.09 sec)
 
mysql&gt; GRANT ALL ON auditDatabase.* to globus@localhost identified by "foo";
Query OK, 0 rows affected (0.32 sec)

mysql&gt; exit
Bye
host:~ feller$ mysql -u globus -p auditDatabase &lt; ${GLOBUS_LOCATION}/share/globus_wsrf_gram/gram_audit_schema_mysql.sql 
Enter password: 
host:~ feller$</screen>
      </section>
      <section>
        <title>If You Are Using PostgreSQL</title>
        <para>The following describes how to set up the database for audit records in PostgreSQL:</para>
        <orderedlist>
          <listitem>
            <para>Create a database inside of PostgreSQL</para>
          </listitem>
          <listitem>
            <para> Grant necessary privileges to the account that will be used to upload the audit
              records in the audit. Typically the "globus" account. </para>
          </listitem>
          <listitem>
            <para>Use the schema to create the table:</para>
          </listitem>
        </orderedlist>
        <screen>
# Connect as postgres admin
create database gt4audit\g
create user gt4auditload with encrypted password '&lt;password1&gt;'\g
create user gt4auditview with encrypted password '&lt;password2&gt;'\g
\c gt4audit
\i gram_audit_schema_postgres-8.0.sql
grant insert on gram_audit_table to gt4auditload\g
grant select on gram_audit_table to gt4auditview\g
\q 
              </screen>
        <para>You must also update <filename>pg_hba.conf</filename> to allow connections from
          container host (<filename>pg_hba.conf</filename> configures client authentication and is
          stored in the database cluster's data directory):</para>
        <screen>
hostssl   gt4audit  gt4auditload   &lt;containerhostip&gt; 255.255.255.255 md5
host      gt4audit  gt4auditload   &lt;containerhostip&gt; 255.255.255.255 md5
hostssl   gt4audit  gt4auditview   &lt;containerhostip&gt; 255.255.255.255 md5
host      gt4audit  gt4auditview   &lt;containerhostip&gt; 255.255.255.255 md5
                </screen>
      </section>
    </section>
    <section>
      <title>Configure the Database in JNDI</title>
      <para>Modify the database access values in
      <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_gram/jndi-config.xml</computeroutput>.
      The parameters factory, maxIdle and maxWait should not be changed unless you
      know what you're doing. The parameter maxActive is by default set to the same
      value as the parameter runQueueThreadCount in the same file. If you change
      this parameter also adapt maxActive.
      </para>
      
      <section><title>If You Are Using MySQL</title>
      <screen>&lt;resource name="auditDatabase" type="javax.sql.DataSource"&gt;
    &lt;resourceParams&gt;
        ....
        &lt;parameter&gt;
            &lt;name>driverClassName&lt;/name&gt;
            &lt;value>com.mysql.jdbc.Driver&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name>url&lt;/name&gt;
            &lt;value>jdbc:mysql://host:port/auditDatabase&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name>username&lt;/name&gt;
            &lt;value>user to access the database&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name>password&lt;/name&gt;
            &lt;value>password to access the database&lt;/value&gt;
        &lt;/parameter>
    &lt;/resourceParams>
 &lt;/resource></screen>
       </section>
       
       <section><title>If You Are Using PostgreSQL</title>
       <screen>&lt;resource name="auditDatabase" type="javax.sql.DataSource"&gt;
    &lt;resourceParams&gt;
        ....
        &lt;parameter&gt;
            &lt;name>driverClassName&lt;/name&gt;
            &lt;value>org.postgresql.Driver&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name>url&lt;/name&gt;
            &lt;value>jdbc:postgresql://host:port/auditDatabase&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name>username&lt;/name&gt;
            &lt;value>user to access the database&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
            &lt;name>password&lt;/name&gt;
            &lt;value>password to access the database&lt;/value&gt;
        &lt;/parameter>
    &lt;/resourceParams>
 &lt;/resource></screen>
       </section>
    </section>
  </section>
</chapter>
