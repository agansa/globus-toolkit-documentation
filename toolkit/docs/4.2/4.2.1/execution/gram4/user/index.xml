<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % xinclude SYSTEM "../../../xinclude.mod" >
%xinclude;

]>
<book id="gram4User">
<title>GT <replaceable role="entity">version</replaceable> GRAM4: User's Guide</title>
<titleabbrev>User's Guide</titleabbrev>

<bookinfo><abstract>
<title>Introduction</title>
<para>
  GRAM services provide secure job submission to many types of
  <glossterm baseform="job scheduler">job schedulers</glossterm> 
  for users who have the right to access a job hosting resource in a Grid
  environment.  The existence of a <olink targetptr="gram4-user-proxygen">valid proxy</olink>
  is in fact required for job submission.  All GRAM job submission options are
  supported transparently through the embedded request document input. In fact,
  the job startup is done by submitting a client-side provided <glossterm>job description</glossterm>
  to the GRAM services. This submission can be made by end-users with the 
    GRAM <olink targetdoc="gram4User" targetptr="gram4-cmd">command-line tools</olink>.
</para>
</abstract></bookinfo>

<chapter id="gram4-user-usagescenarios"><title>Using GRAM4</title>
    
    <section id="gram4-user-proxygen"><title>Generating a valid proxy</title>
    <para>In order to generate a valid proxy file, use the 
        <olink targetdoc="prewsaaUser" targetptr="grid-proxy-init"/>
    tool available under <computeroutput>$GLOBUS_LOCATION/bin</computeroutput>:
    <screen>
    % bin/grid-proxy-init
    Your identity: /O=Grid/OU=GlobusTest/OU=simpleCA.mymachine/OU=mymachine/CN=John Doe
    Enter GRID pass phrase for this identity:
    Creating proxy ................................. Done
    Your proxy is valid until: Tue Oct 26 01:33:42 2004
    </screen>
    </para>
    </section>

    <section id="gram4-user-delegating">
    <title>Delegating credentials</title>
    <para>
        There are three different uses of delegated credentials: 
        <orderedlist>
          <listitem><simpara>for use by the
            <glossterm baseform="Managed Executable Job Service">MEJS</glossterm>
             to create a remote user proxy
          </simpara></listitem>
          <listitem><simpara>for use by the MEJS to contact RFT</simpara></listitem>
          <listitem><simpara>for use by RFT to contact the GridFTP servers.  The
            EPRs to each of these are specified in three job description elements --
            they are jobCredentialEndpoint, stagingCredentialEndpoint, and
            transferCredentialEndpoint respectively.  Please <olink targetdoc="gram4PI" targetptr="gram4-job-descriptions-schema">Job Description
            Schema Reference</olink> and
            <ulink url="../schemas/rft_types.html">RFT
            transfer request schema</ulink> documentation for more details about these
            elements.
          </simpara></listitem>
        </orderedlist>
    </para>

    <para>
    The <computeroutput>globusrun-ws</computeroutput> client can either delegate
    these credentials automatically for a particular job, or it can reuse
    pre-delegated credentials (see next paragraph) through the use of command-line
    arguments for specifying the credentials' EPR files.  Please see the
    <olink targetdoc="gram4User" targetptr="gram4-cmd"/> for details on these command-line arguments.
    </para>

    <para>It is possible to use delegation 
    <olink targetdoc="delegationUser" targetptr="delegation-cmd"/> to obtain and refresh delegated credentials in order to use them
        when submitting jobs to GRAM4. This, for instance, enables the submission of
    many jobs using a shared set of delegated credentials.  This can significantly
    decrease the number of remote calls for a set of jobs, thus improving
    performance.
    </para>
    </section>
    
    <section id="gram4-user-defaultscheduler">
        <title>Local resource managers of a GRAM4 installation</title>
    <para>
      A GRAM4 instance can interface to more than one local resource manager (LRM), as
      shown in the previous section. A user can explicitly specify what LRM should be
      used for a job. But in a larger Grid it might be confusing for users to remember
      which LRM's are available on which machines.</para>
   <para>That's why GRAM4 configures a default local resource manager, which is used
      for job submission if the client didn't explicitly specify one.</para>
   
   <section id="gram4-user-finding-availablescheduler">
       <title>Finding available local resource managers</title>
       <para>You can check the resource property
       <computeroutput>availableLocalResourceManagers</computeroutput>
       of a GRAM4 factory service to get that information. Replace host and port in
       the below example to query against other containers:</para>
       <screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}availableLocalResourceManagers</screen>
       <para>The result on that machine is (formatted for better readability) shows
       that the local resource managers Fork, Multi, Condor and PBS are available:</para>
       <screen>&lt;ns1:availableLocalResourceManagers 
      xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
  &lt;ns1:localResourceManager&gt;Fork&lt;/ns1:localResourceManager&gt;
  &lt;ns1:localResourceManager&gt;Multi&lt;/ns1:localResourceManager&gt;
  &lt;ns1:localResourceManager&gt;Condor&lt;/ns1:localResourceManager&gt;
  &lt;ns1:localResourceManager&gt;PBS&lt;/ns1:localResourceManager&gt;
&lt;/ns1:availableLocalResourceManagers&gt;</screen>
   </section>

   <section id="gram4-user-using-finding-defaultscheduler">
       <title>Finding the default local resource manager</title>
       <para>You can check the resource property
       <computeroutput>defaultLocalResourceManagers</computeroutput>
       of a GRAM4 factory service to get that information. Replace host and port in
       the below example to query against other containers:</para>
       <screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}localResourceManager</screen>
       <para>The result on that machine shows that PBS is the default local
       resource managers:</para>
       <screen>&lt;ns1:localResourceManager xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
    PBS
&lt;/ns1:localResourceManager&gt;</screen>
   </section>
         
   <section id="gram4-user-using-defaultscheduler">
       <title>Submitting to the default local resource manager</title>
       <para>If you want to submit a job to the default local resource manager all
          you have to do is to just not specify any local resource manager in your
          submission.</para>
       <para>Example: the following job will be submitted to the default local
          resource manager:</para>
       <screen>globusrun-ws -submit \
  -F osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  -c /bin/date</screen>
       <para>Or with a job description that contains a factoryEndpoint:</para>
       <screen>&lt;job xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
    &lt;factoryEndpoint&gt;
      &lt;wsa:Address&gt;
          https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService
      &lt;/wsa:Address&gt;
    &lt;/factoryEndpoint&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
&lt;/job&gt;</screen>
    <para>Submit that job (assuming the description is stored in the file job.xml:</para>
    <screen>globusrun-ws -submit -f job.xml</screen>
    <para><emphasis>Note:</emphasis> You don't have to add a ReferenceParameters
       element to the factoryEndpoint element, just the address.
    </para>
   </section>

   <section id="gram4-user-using-nondefaultscheduler">
       <title>Submitting to a non-default local resource manager</title>
       <para>If you want to submit a job to a non-default local resource manager
          you'll have to specify the local resource manager in your
          submission. Using the default C-client globusrun-ws, there are two ways
          to specify a local resource manager:</para>
       <itemizedlist>
          <listitem><simpara>as command-line argument of globusrun-ws
            (<computeroutput>-Ft &lt;lrm&gt;</computeroutput>)</simpara></listitem>
          <listitem><simpara>in the factoryEndpoint element in the job description</simpara></listitem>
       </itemizedlist>
       <para>Example: the following job will be submitted to Condor:</para>
       <screen>globusrun-ws -submit \
  -F osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  -Ft Condor \
  -c /bin/date</screen>
       <para>Or with a job description that contains a factoryEndpoint:</para>
       <screen>&lt;job xmlns:wsa="http://www.w3.org/2005/08/addressing"
    xmlns:gram="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
    &lt;factoryEndpoint&gt;
      &lt;wsa:Address&gt;
          https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService
      &lt;/wsa:Address&gt;
      &lt;wsa:ReferenceParameters&gt;
        &lt;gram:ResourceID&gt;Condor&lt;/gram:ResourceID&gt;
      &lt;/wsa:ReferenceParameters&gt;
    &lt;/factoryEndpoint&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
&lt;/job&gt;</screen>
    <para>Submit that job (assuming the description is stored in the file job.xml:</para>
    <screen>globusrun-ws -submit -f job.xml</screen>
    <para><emphasis>Note:</emphasis>This time you do have to add a ReferenceParameters
       element with the ResourceID element to the factoryEndpoint element.
    </para>
   </section>

   <section id="gram4-user-using-multischeduler">
       <title>Submitting a job to the Multi resource manager</title>
       <para>When you submit a multi-job you never have to specify the local
          resource manager. The fact that it's a multi-job is detected on the
          server-side and the right "local resource manager" Multi is
          used automatically.</para>
   </section>
  
  </section>

</chapter>


<chapter id="gram4-user-usagescenarios-jdd">
<title>Submitting Jobs Specified in JDD</title>
    <!-- updating title to be more descriptive in the top-level user's guide -->
    <section id="gram4-user-simplejob-jdd">
    <title>Submitting a simple job</title>
    <para>
      Use the <computeroutput>globusrun-ws</computeroutput> program to submit a
      simple job without writing a job description document.  Use the -c argument,
      a job description will be generated assuming the first arg is the executable
      and the remaining are arguments.  For example:
    </para>

    <screen>
       % globusrun-ws -submit -c /bin/touch touched_it
       Submitting job...Done.
       Job ID: uuid:4a92c06c-b371-11d9-9601-0002a5ad41e5
       Termination time: 04/23/2005 20:58 GMT
       Current job state: Active
       Current job state: CleanUp
       Current job state: Done
       Destroying job...Done.
    </screen>

    <para>Confirm that the job worked by verifying the file was touched:</para>
    <screen>
       % ls -l ~/touched_it 
       -rw-r--r--  1 smartin globdev 0 Apr 22 15:59 /home/smartin/touched_it

       % date
       Fri Apr 22 15:59:20 CDT 2005
    </screen>

    <para>
      Note: you did not tell globusrun-ws where to run your job, so the default
      of localhost was used.
    </para>
    </section> 
  <!-- gram4-user-simplejob -->

    <section id="gram4-user-jobwithcontact-jdd">
    <title>Submitting a job with the contact string</title>
    <para>
      Use globusrun-ws to submit the same touch job, but this time specify the 
      contact string.
    </para>

    <screen>
       % globusrun-ws -submit -F https://lucky0.mcs.anl.gov:8443/wsrf/services/ManagedJobFactoryService -c /bin/touch touched_it
       Submitting job...Done.
       Job ID: uuid:3050ad64-b375-11d9-be11-0002a5ad41e5
       Termination time: 04/23/2005 21:26 GMT
       Current job state: Active
       Current job state: CleanUp
       Current job state: Done
       Destroying job...Done.
    </screen>

    <para>
      Try the same job to a remote host.  Type globusrun-ws -help to learn the
      details about the contact string.
    </para>
    </section>
    <!-- gram4-user-jobwithcontact -->

    <section id="gram4-user-specifyingsimplejob-jdd">
    <title>Submitting a job with the job description</title>

    <para>The specification of a job to submit is to be written by the user in a 
      job description XML file. 
    </para>
    <para>Here is an example of a simple job description:</para>
    <screen>
    &lt;job&gt;
        &lt;executable&gt;/bin/echo&lt;/executable&gt;
        &lt;argument&gt;this is an example_string &lt;/argument&gt;
        &lt;argument&gt;Globus was here&lt;/argument&gt;
        &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
        &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;/job&gt;
    </screen>

    <para>
      Tell globusrun-ws to read the job description from a file, using the -f
      argument:
    </para>

    <screen>
    % bin/globusrun-ws -submit -f test_super_simple.xml
    Submitting job...Done.
    Job ID: uuid:c51fe35a-4fa3-11d9-9cfc-000874404099
    Termination time: 12/17/2004 20:47 GMT
    Current job state: Active
    Current job state: CleanUp
    Current job state: Done
    Destroying job...Done.
    </screen>
    <para>

    Note the usage of the substitution variable <computeroutput>${GLOBUS_USER_HOME}</computeroutput> 
    which resolves to the user home directory.</para>
    <para>
    Here is an example with more job description parameters:</para>
    <screen>
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;job&gt;
        &lt;executable&gt;/bin/echo&lt;/executable&gt;
        &lt;directory&gt;/tmp&lt;/directory&gt;
        &lt;argument&gt;12&lt;/argument&gt;
        &lt;argument&gt;abc&lt;/argument&gt;
        &lt;argument&gt;34&lt;/argument&gt;
        &lt;argument&gt;this is an example_string &lt;/argument&gt;
        &lt;argument&gt;Globus was here&lt;/argument&gt;
        &lt;environment&gt;
            &lt;name&gt;PI&lt;/name&gt;
            &lt;value&gt;3.141&lt;/value&gt;
        &lt;/environment&gt;
        &lt;stdin&gt;/dev/null&lt;/stdin&gt;
        &lt;stdout&gt;stdout&lt;/stdout&gt;
        &lt;stderr&gt;stderr&lt;/stderr&gt;
        &lt;count&gt;2&lt;/count&gt;
    &lt;/job&gt;
    </screen>

    <para>Note that in this example, a <computeroutput>&lt;directory&gt;</computeroutput> element specifies the current directory for the execution 
      of the command on the execution machine to be <computeroutput>/tmp</computeroutput>, and the standard output is 
      specified as the relative path <computeroutput>stdout</computeroutput>. The output is therefore written to <computeroutput>/tmp/stdout</computeroutput>: 
    </para>
    <screen>
    % cat /tmp/stdout
    12 abc 34 this is an example_string  Globus was here
    </screen>
    </section>


    <section id="gram4-user-specifyingstaging-jdd">
    <title>Specifying file staging in the job description</title>
    <para>In order to do file staging one must add specific elements to the job description and delegate credentials appropriately (see
    <olink targetdoc="gram4User" targetptr="gram4-user-delegating"/>). The 
        file transfer directives follow the <ulink url="../schemas/rft_types.html">RFT
    syntax</ulink>, which allows only for third-party transfers.  Each file transfer
    must therefore specify a source URL and a destination URL.  URLs are specified
    as GridFTP URLs (for remote files) or as file URLs (for files local to the
    service--these are converted internally to full GridFTP URLs by the service).
    </para>
    <para>
    For instance, in the case of staging a file <emphasis>in</emphasis>, the source
    URL would be a GridFTP URL (for instance
    <computeroutput>gsiftp://job.submitting.host:2811/tmp/mySourceFile
    </computeroutput>) resolving to a source document accessible on the file system
    of the job submission machine (for instance <computeroutput>/tmp/mySourceFile
    </computeroutput>). At run-time the Reliable File Transfer service used by the
    MEJS on the remote machine would reliably fetch the remote file using the
    GridFTP protocol and write it to the specified local file (for instance 
    <computeroutput>file:///${GLOBUS_USER_HOME}/my_transfered_file</computeroutput>,
    which resolves to  <computeroutput>~/my_transfered_file</computeroutput>). Here
    is how the stage-in directive would look like:

    <screen>&lt;fileStageIn&gt;
    &lt;transfer&gt;
        &lt;sourceUrl&gt;gsiftp://job.submitting.host:2811/tmp/mySourceFile&lt;/sourceUrl&gt;
        &lt;destinationUrl&gt;file:///${GLOBUS_USER_HOME}/my_transfered_file&lt;/destinationUrl&gt;
    &lt;/transfer&gt;
&lt;/fileStageIn&gt;</screen> 
    </para>
    <para><emphasis>Note:</emphasis> additional RFT-defined quality of service requirements can be specified 
          for each transfer. See the RFT documentation for more information.
    </para>
    <para>
    Here is an example job description with file stage-in and stage-out:</para>

    <screen>
    &lt;job&gt;
        &lt;executable&gt;my_echo&lt;/executable&gt;
        &lt;directory&gt;${GLOBUS_USER_HOME}&lt;/directory&gt;
        &lt;argument&gt;Hello&lt;/argument&gt;
        &lt;argument&gt;World!&lt;/argument&gt;
        &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
        &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
        &lt;fileStageIn&gt;
            &lt;transfer&gt;
                &lt;sourceUrl&gt;gsiftp://job.submitting.host:2811/bin/echo&lt;/sourceUrl&gt;
                &lt;destinationUrl&gt;file:///${GLOBUS_USER_HOME}/my_echo&lt;/destinationUrl&gt;
            &lt;/transfer&gt;
        &lt;/fileStageIn&gt;
        &lt;fileStageOut&gt;
            &lt;transfer&gt;
                &lt;sourceUrl&gt;file:///${GLOBUS_USER_HOME}/stdout&lt;/sourceUrl&gt;
                &lt;destinationUrl&gt;gsiftp://job.submitting.host:2811/tmp/stdout&lt;/destinationUrl&gt;
            &lt;/transfer&gt;
        &lt;/fileStageOut&gt;
        &lt;fileCleanUp&gt;
            &lt;deletion&gt;
                &lt;file&gt;file:///${GLOBUS_USER_HOME}/my_echo&lt;/file&gt;
            &lt;/deletion&gt;
        &lt;/fileCleanUp&gt;
    &lt;/job&gt;
    </screen>

    <para>Note that the job description XML does not need to include a reference to the schema 
      that describes its syntax. As a matter of fact it is possible to omit the namespace 
      in the GRAM job description XML elements as well. The submission of this job to the GRAM services causes the following sequence 
      of actions:
    </para>
    <orderedlist>
    <listitem><simpara> The <computeroutput>/bin/echo</computeroutput> executable is transfered from the submission machine 
        to the GRAM host file system. The destination location is the HOME directory of the 
        user on behalf of whom the job is executed by the GRAM services 
        (see <computeroutput>&lt;fileStageIn&gt;</computeroutput>).</simpara></listitem>
    <listitem><simpara> The transfered executable is used to print a test string  
         (see <computeroutput>&lt;executable&gt;</computeroutput>, <computeroutput>&lt;directory&gt;</computeroutput> and 
          the <computeroutput>&lt;argument&gt;</computeroutput> elements) on the standard output, which is 
          redirected to a local file (see <computeroutput>&lt;stdout&gt;</computeroutput>).</simpara></listitem>
    <listitem><simpara> The standard output file is transfered to the submission machine 
         (see <computeroutput>&lt;fileStageOut&gt;</computeroutput>).</simpara></listitem>
    <listitem><simpara> The file that was initially transfered during the stage-in phase is removed 
         from the file system of the GRAM installation (see <computeroutput>&lt;fileCleanup&gt;</computeroutput>).</simpara></listitem>
    </orderedlist>
    </section>

    <section id="gram4-user-specifyingextensions-jdd">
    <title>Specifying and handling custom job description extensions.</title>
    <para>
    Basic support is provided for specifying custom extensions to the job
    description. There are plans to improve the usability of this feature, but at
    this time it involves a bit of work.
    </para>
    <para>
    Specifying the actual custom elements in the job description is trivial. Simply add any elements that you need between the beginning and ending
    <computeroutput>extensions</computeroutput> tags at the bottom of the job
    description as in the following basic example:
    <screen>
    &lt;job&gt;
        &lt;executable&gt;/home/user1/myapp&lt;/executable&gt;
        &lt;extensions&gt;
            &lt;myData&gt;
                &lt;flag1&gt;on&lt;/flag1&gt;
                &lt;flag2&gt;off&lt;/flag2&gt;
            &lt;/myData&gt;
        &lt;/extensions&gt;
    &lt;/job&gt;
    </screen>
    </para>
    <para>
    To handle this data, you will have to alter the appropriate Perl scheduler
    script (i.e. $GLOBUS_LOCATION/lib/perl/Globus/GRAM/JobManager/fork.pm for the
    Fork scheduler, etc...) to parse the data returned from the
    <computeroutput>$description->extensions()</computeroutput> sub.
    </para>
    </section>

    <section id="gram4-user-jobidsub-jdd">
    <title>Per-job customization with job ID substitution variable.</title>
    <para>
    To allow for customization of values, such as paths, on a per-job basis; a
    job description substitution variable named "GLOBUS_JOB_ID" can be used.
    </para>
    <para>
    For example:
    </para>
    <para>
    <screen>
    &lt;job&gt;
        &lt;executable&gt;/bin/date&lt;/executable&gt;
        &lt;stdout&gt;/tmp/stdout.${GLOBUS_JOB_ID}&lt;/stdout&gt;
        &lt;stderr&gt;/tmp/stderr.${GLOBUS_JOB_ID}&lt;/stderr&gt;
        &lt;fileStageOut&gt;
            &lt;transfer&gt;
                &lt;sourceUrl&gt;file:///tmp/stdout.${GLOBUS_JOB_ID}&lt;/sourceUrl&gt;
                &lt;destinationUrl&gt;gsiftp://mymachine.mydomain.com/out.${GLOBUS_JOB_ID}&lt;/destinationUrl&gt;
            &lt;/transfer&gt;
        &lt;/fileStageOut&gt;
    &lt;/job&gt;
    </screen>
    </para>
    </section>

    <section id="gram4-user-specifyingmultijob-jdd">
    <title>Specifying and submitting a multijob</title>
    <para>The job description XML schema allows for specification of a <emphasis>multijob</emphasis>
      i.e. a job that is itself composed of several executable jobs, which we 
      will refer to as <emphasis>subjobs</emphasis> 
      (<emphasis>note:</emphasis> subjobs cannot be multijobs, so the structure is not recursive).
      This is useful for instance in order to bundle a group of jobs together and submit 
      them as a whole to a remote GRAM installation.</para>
    <para>
    Note that no relationship can be specified between the subjobs of a multijob.
    The subjobs are submitted to job factory services 
    in their order of appearance in the multijob description.</para>
    <para>
        Within a <ulink url="../schemas/gram_job_description.html#element_multiJob">multijob description</ulink>, 
    each subjob description must come along with an endpoint for the factory to submit the subjob to. This 
    enables the at-once submission of several jobs to different hosts.
    The factory to which the multijob is submitted acts as an intermediary tier 
    between the client and the eventual executable job factories. </para>
    <para>
    Here is an example of a multijob description:</para>

    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;multiJob xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
    &lt;factoryEndpoint&gt;
       &lt;wsa:Address&gt;
          https://localhost:8443/wsrf/services/ManagedJobFactoryService
      &lt;/wsa:Address&gt;
    &lt;/factoryEndpoint&gt;
    &lt;directory&gt;${GLOBUS_LOCATION}&lt;/directory&gt;
    &lt;count&gt;1&lt;/count&gt;

    &lt;job&gt;
       &lt;factoryEndpoint&gt;
         &lt;wsa:Address&gt;https://localhost:8443/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
       &lt;/factoryEndpoint&gt;
       &lt;executable&gt;/bin/date&lt;/executable&gt;
       &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout.p1&lt;/stdout&gt;
       &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr.p1&lt;/stderr&gt;
       &lt;count&gt;2&lt;/count&gt;
    &lt;/job&gt;

    &lt;job&gt;
       &lt;factoryEndpoint&gt;
         &lt;wsa:Address&gt;https://localhost:8443/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
       &lt;/factoryEndpoint&gt;
       &lt;executable&gt;/bin/echo&lt;/executable&gt;
       &lt;argument&gt;Hello World!&lt;/argument&gt;        
       &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout.p2&lt;/stdout&gt;
       &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr.p2&lt;/stderr&gt;
       &lt;count&gt;1&lt;/count&gt;
    &lt;/job&gt;

&lt;/multiJob&gt;</screen>

<!--
    <para><emphasis>Notes:</emphasis>
    </para>
    <itemizedlist>
    <listitem><simpara>The <computeroutput>&lt;ResourceID&gt;</computeroutput> element within the <computeroutput>&lt;factoryEndpoint&gt;</computeroutput>
    WS-Addressing endpoint structures must be qualified with the appropriate GRAM namespace.</simpara></listitem>
    <listitem><simpara>Apart from the <computeroutput>factoryEndpoint</computeroutput> element, all elements at the enclosing multijob level 
    act as defaults for the subjob parameters, in this example <computeroutput>&lt;directory&gt;</computeroutput> and <computeroutput>&lt;count&gt;</computeroutput>.</simpara></listitem>
    <listitem><simpara>The default <computeroutput>&lt;count&gt;</computeroutput> value is overridden in the subjob descriptions.</simpara></listitem>
    </itemizedlist>
-->
    <para>
    In order to submit a multijob description, use a job submission <olink targetdoc="gram4User" targetptr="gram4-cmd"/>.
    For instance, submitting the multijob description above using <computeroutput>globusrun-ws</computeroutput>, we obtain:</para>

    <screen>
    % bin/globusrun-ws -submit -f test_multi.xml
    Delegating user credentials...Done.
    Submitting job...Done.
    Job ID: uuid:bd9cd634-4fc0-11d9-9ee1-000874404099
    Termination time: 12/18/2004 00:15 GMT
    Current job state: Active
    Current job state: CleanUp
    Current job state: Done
    Destroying job...Done.
    Cleaning up any delegated credentials...Done.
    </screen>

    <para>
      A multijob resource is created by the factory and exposes a set of 
      WSRF resource properties different than the resource properties of 
      an executable job. The state machine of a multijob is also different 
      since the multijob represents the <emphasis>overall</emphasis> execution of all the 
      executable jobs it is composed of.
    </para>
    </section>
    
</chapter>

<chapter id="gram4-user-variables">
<title>Job Description Variables</title>
<para>
  Job description variables are special strings in a job description that are
  replaced by the GRAM service with values that the client-side does not
  <emphasis>a priori</emphasis> know.</para>
<para>The set of variables is fixed in the gram service implementation. This is 
  different from previous implementations of
  <glossterm baseform="Resource Specification Language">RSL</glossterm>
  substitutions in GT2 and GT3, where a user could define a new variable for
  use inside a job description document. This was done to preserve the
  simplicity of the job description
  XML schema (relatively to the GT3.2 RSL schema), which does not require a 
  specialized XML parser to serialize a job description document.</para>
<para>
  Valid variables and their description:</para>
<informaltable><tgroup cols="2">
    <tbody>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_USER_HOME
            </emphasis></para></entry>
            <entry><para>The path to the home directory for the
            local account/user</para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_USER_NAME
            </emphasis></para></entry>
            <entry><para>The local account the job is running under</para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_JOB_ID
            </emphasis></para></entry>
            <entry><para>UUID of the job, created on the server-side</para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_SCRATCH_DIR
            </emphasis></para></entry>
            <entry><para>An alternative directory where a file system is
            shared with the compute nodes that a user might want to use.
            Typically it will provide more space than the users default
            HOME dir. This directory's value may contain ${GLOBUS_USER_HOME},
            which will be replaced with value of that substitution.
            </para></entry>
        </row>
        <row>
            <entry><para><emphasis role="strong">GLOBUS_LOCATION
            </emphasis></para></entry>
            <entry><para>Path to the Globus Toolkit installation</para></entry>
        </row>
    </tbody>
</tgroup></informaltable>

<para>Variable substitutions may not occur in all job description attributes.
Their use is restricted to those which contain arbitrary string data and which
may be used to access the local resource associated with a job. The list of
attributes which may contain variables is:</para>
<itemizedlist>
    <listitem><simpara>executable</simpara></listitem>
    <listitem><simpara>directory</simpara></listitem>
    <listitem><simpara>argument</simpara></listitem>
    <listitem><simpara>environment</simpara></listitem>
    <listitem><simpara>stdin</simpara></listitem>
    <listitem><simpara>stdout</simpara></listitem>
    <listitem><simpara>stderr</simpara></listitem>
    <listitem><simpara>libraryPath</simpara></listitem>
    <listitem><simpara>fileStageIn</simpara></listitem>
    <listitem><simpara>fileStageOut</simpara></listitem>
    <listitem><simpara>fileCleanUp</simpara></listitem>
</itemizedlist>
</chapter>

<chapter id="gram4-user-lifetime">
<title>Job lifetime</title>
<para>For a general introduction see section <olink targetdoc="executionKey"
targetptr="execution-approach-lifetime">Job Lifetime</olink> in the GRAM4
approach.</para>

<section id="gram4-user-general">
<title>Server-side resource properties that impact job lifetime</title>
<para>There are 2 resource properties (RP's) of GRAM4’s factory service
that have impact on lifetime of job resources:</para>
<informaltable><tgroup cols="2">
  <tbody>
    <row>
      <entry><para><emphasis role="strong">maxJobLifetime</emphasis>
      </para></entry>
      <entry><para>Max lifetime a client can specify in the initial
      job submission and in subsequent setTerminationTime calls.
      Default value is 1 year.
      A negative value means that there is no limit.</para></entry>
    </row>
    <row>
      <entry><para><emphasis role="strong">jobTTLAfterProcessing
      </emphasis></para></entry>
      <entry><para>Amount of time a job resource keeps on existing
      after the job has been fully processed and is in a final
      state Done, Failed, UserTerminateDone, UserTerminateFailed,
      and the client did not specify a job lifetime.
      Default value is 24h.
      A negative value means that the job resource does not
      expire.</para></entry>
    </row>
  </tbody>
</tgroup></informaltable>
<para>Values are specified in seconds. A client can query the RP's to find out
their values like explained in the following examples.</para>

<para>Getting the value of the RP maxLifetime:</para>
<screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}maxJobLifetime
</screen>

<para>The result (in this case 1 year) is:</para>
<screen>&lt;ns1:maxJobLifetime xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
      31536000
&lt;/ns1:maxJobLifetime&gt;</screen>

<para>Getting the value of the RP jobTTLAfterProcessing:</para>
<screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}jobTTLAfterProcessing
</screen>
<para>The result (in this case 24h) is:</para>
<screen>&lt;ns1:jobTTLAfterProcessing xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
      86400
&lt;/ns1:jobTTLAfterProcessing&gt;</screen>
</section>

<section id="gram4-user-lifetime-scenarios">
<title>Scenarios for clients</title>
<para>This section explains how the above parameters impact a client and what
the actual lifetime of a job is, when a user does not specify a lifetime at all
or when he/she specifies a lifetime for a job.</para>
<section id="gram4-user-lifetime-scenario1">
<title>A client does not specify lifetime in submission</title>
<para>The job does not expire until it is fully processed. After that the
lifetime will be set to (now + jobTTLAfterProcessing). By this it is
guaranteed that a job runs to completion (including fileStageOut and
fileCleanUp) and a client has the ability to query the status of a job for
a while before it will be removed.</para>
<para>The default C-client globusrun-ws by default does not set a lifetime</para> 
</section>

<section id="gram4-user-lifetime-scenario2">
<title>The client specifies a lifetime in submission</title>
<para>The job will definitely be terminated when the lifetime expires regardless
of the status of the job. A client can however extend the lifetime before the
lifetime expires (restricted by maxJobLifetime if set > -1 by the admin).
If a client specifies a termination time in the past or a termination time that
exceeds maxJobLifetime an UnableToSetTerminationTimeFault is thrown by
MJFS.createManagedJob()</para>
<para>Using the C-client globusrun-ws you can set a lifetime for a job in 2 ways.
The first example shows how to set a relative lifetime, i.e. the job will expire
in 48h from now:</para>
<screen>globusrun-ws -submit -term "+48:00" -b -o job.epr -f myJob.xml</screen>
<para> The second example should how to set an absolute lifetime. The job
will expire at the given date:</para>
<screen>globusrun-ws -submit -term "10/23/2007 12:00" -b -o job.epr -f myJob.xml</screen>
<para>In both example the job had been submitted in batch mode, which makes sense
for longer running jobs. For more information about globusrun-ws and other
command-line parameters, see [FIXME: add link]</para>

</section>
 
<section id="gram4-user-lifetime-scenario3">
<title>A client calls setTerminationTime()</title>
<para>In case a requested new termination time conflicts with the maxJobLifetime
setting provided by an admin a TerminationTimeRejectedException is thrown.</para>
</section>

</section>
</chapter>

<chapter id="gram4-user-submissionid">
<title>Client-Side Generated Submission ID</title>
    <para>
      A submission ID may be used in the GRAM protocol for reliability in the face
      of message faults or other transient errors in order to ensure that at most
      one instance of a job is executed, i.e. to prevent accidental duplication of
      jobs under rare circumstances with client retry on failure. By default, the
      <glossterm>globusrun-ws</glossterm> program will generate a submission ID
      (<glossterm baseform="Universally Unique Identifier">uuid</glossterm>).  One can override
      this behavior by supplying a submission ID as a command line argument.
    </para>
    <para>
      If a user is unsure whether a job was submitted successfully, he
      should resubmit using the same ID as was used for the previous attempt.
      If the job had already been accepted by the container in the first submission
      no new job is started but the Endpoint Reference of the first job is returned
      back to the client.
    </para>
</chapter>

<chapter id="gram4-user-jobholdandrelease">
<title>Job hold and release</title>
<para>
    It is possible to specify in a job description that the job be 
    put on hold when it reaches a chosen state (see <olink targetdoc="executionKey"
    targetptr="execution-approach">GRAM Approach</olink>
    documentation for more information about the executable 
    job state machine, and see the<ulink url="../schemas/mj_types.html#element_holdState"> job
    description XML schema documentation</ulink> for information about how to specify a held
    state).
    This is useful for instance when a GRAM client wishes to directly 
    access output files written by the job (as opposed to waiting for 
    the stage-out step to transfer files from the job host). The client would  
    request that the file cleanup process be held until released, 
    giving the client an opportunity to fetch all remaining/buffered 
    data after the job completes but <emphasis>before</emphasis> the output files are 
    deleted. </para>
    <para>
    This is used by <computeroutput>globusrun-ws</computeroutput> in order to ensure client-side 
    streaming of remote files in batch mode.
    </para>
    <para>Valid hold states are:</para>
    <itemizedlist>
      <listitem><simpara>StageIn</simpara></listitem>
      <listitem><simpara>StageOut</simpara></listitem>
      <listitem><simpara>CleanUp</simpara></listitem>
      <listitem><simpara>Pending</simpara></listitem>
    </itemizedlist>
    
    <section><title>Example job submission with globusrun-ws</title>
    <para>Job description (later referred to by job.xml):</para>
    <screen>&lt;job&gt;
    &lt;holdState&gt;CleanUp&lt;/holdState&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;fileCleanUp&gt;
        &lt;deletion&gt;
            &lt;file&gt;gsiftp://osg-test1.unl.edu:2811/${GLOBUS_USER_HOME}/stdout&lt;/file&gt;
        &lt;/deletion&gt;
        &lt;deletion&gt;
            &lt;file&gt;gsiftp://osg-test1.unl.edu:2811/${GLOBUS_USER_HOME}/stderr&lt;/file&gt;
        &lt;/deletion&gt;
    &lt;/fileCleanUp&gt;
&lt;/job&gt;
    </screen>

    <para>Submitting the job in batch mode:</para>
    <screen>[martin@osg-test1 tmp]$ globusrun-ws -submit -S -f /tmp/jobWithCleanup.xml -b -o epr
Delegating user credentials...Done.
Submitting job...Done.
Job ID: uuid:837941d4-1085-11dd-b401-0013d4c3b957
Termination time: 04/22/3008 16:02 GMT
[martin@osg-test1 tmp]$</screen>

    <para>Checking for status:</para>
    <screen>[martin@osg-test1 tmp]$ globusrun-ws -status -j epr
Current job state: CleanUp-Hold
[martin@osg-test1 tmp]$</screen>
    <para>Releasing the job:</para>
    <screen>globusrun-ws -release -j job.epr</screen>

    <para>Checking for status after the release:</para>    
    <screen>[martin@osg-test1 tmp]$ globusrun-ws -status -j epr
Current job state: Done</screen>
    <para>Releasing the job:</para>
    <screen>globusrun-ws -release -j job.epr</screen>

    <para>Removing the job:</para>    
    <screen>[martin@osg-test1 ~]$ globusrun-ws -kill -j  epr
Requesting original job description...Done.
Destroying job...Done.</screen>

</section>
</chapter>

<chapter id="gram4-user-jobandprocessrendezvous">
<title>Job and process rendezvous</title>
<para>GRAM4 services implement a <ulink url="../../wsrendezvous/">WS Rendezvous</ulink>
    mechanism to perform synchronization between job processes in a multiprocess job and 
    between subjobs in a multijob. The job application can in fact register binary information, for 
    instance process information or subjob information, and get notified when 
    all the other processes or subjobs have registered their own information.
    This is for instance useful for parallel jobs which need to rendezvous 
    at a "barrier" before proceeding with computations, in the case when no 
    native application API is available to help do the rendezvous.</para>
</chapter>


<chapter id="gram4-user-extensions">
<title>Job Description Extensions</title>
<para>
To allow adding features to GRAM4 while avoiding breaking compatibility
between versions, an extensibility point was included in the job description
schema. This appears as the <computeroutput>&lt;extensions&gt;</computeroutput>
element at the bottom of a job description document. Starting with version 4.2.0
of the Globus Toolkit, GRAM4 will support both a number of specific extenions
as well as generic constructs that can be used for passing custom values to the
resource manager/scheduler adapter Perl modules.
</para>
    <section id="gram4-user-extensions-specific">
    <title>Supported Extensions</title>
    <para>
    The following are specific supported extensions to the GRAM4 job
    description schema. They do not require any modification of the resource
    manager/scheduler adapter Perl modules.
    </para>
        <section id="gram4-user-extensions-specific-multiauthzsubject">
        <title>Multijob Authorization Subject</title>
        <para>
        The <computeroutput>multiAuthzSubject</computeroutput> extension is used
        to specify the credential subject/DN to be used by the multijob being
        created for authorizing the subjob factory service. If specified, all
        subjob factory services must be using the same credential. This is
        meant to address the case where a set of test containers is deployed
        which are all running under a single user's proxy credentials as opposed
        to individual host credentials.
        </para>

        <para>
        For example, if the subjob factory services are using a credential with
        the subject "/DC=org/DC=doegrids/OU=People/CN=John Doh 123456", the
        subjob should be submitted as follows:
        </para>

        <para>
        <screen>
&lt;multiJob&gt;
    ...
    &lt;job&gt;
        ...
    &lt;/job&gt;
    &lt;job&gt;
        ...
    &lt;/job&gt;
    &lt;extensions&gt;
        &lt;multiAuthzSubject&gt;/DC=org/DC=doegrids/OU=People/CN=John Doh 123456&lt;/multiAuthzSubject&gt;
    &lt;/extensions&gt;
&lt;/multiJob&gt;
        </screen>
        </para>
        </section>

        <section id="gram4-user-extensions-specific-nodes">
        <title>PBS Node Selection Parameters</title>
        <para>
        Node selection constraints in PBS can be specified in two ways,
        generally using a construct intended to eventually apply to all resource
        managers which support node selection, or explicitly by sepcifiying a
        simple string element. The former will be more portable, but the later
        will appeal to those familiar with specifying node constraints for PBS
        jobs.
        </para>

        <para>
        To specify PBS node selection constraints explicitly, one can simply
        constuct a single, simple string extension element named
        <computeroutput>nodes</computeroutput> with a value that conforms to the
        <computeroutput>#PBS -l nodes=...</computeroutput> PBS job description
        directive. The Globus::GRAM::ExtensionsHandler module will make this
        available to the PBS adapter script by invoking
        <computeroutput>$description->{nodes}</computeroutput>.  The updated PBS
        adapter package checks for this value and will create a directive in the
        PBS job description using this value.
        </para>

        <para>
        To use the generic construct for specifying node selection constraints,
        use the
        <computeroutput>resourceAllocationGroup</computeroutput> element:
        </para>

        <para>
        <screen>
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;!-- Optionally select hosts by type and number... --&gt;
        &lt;hostType&gt;...&lt;/hostType&gt;
        &lt;hostCount&gt;...&lt;/hostCount&gt;

        &lt;!-- *OR* by host names --&gt;

        &lt;hostName&gt;...&lt;/hostName&gt;
        &lt;hostName&gt;...&lt;/hostName&gt;
        . . .


        &lt;!-- With a total CPU count for this group... --&gt;
        &lt;cpuCount&gt;...&lt;/cpuCount&gt;

        &lt;!-- *OR* an explicit number of CPUs per node... --&gt;
        &lt;cpusPerNode&gt;...&lt;/cpusPerNode&gt;
        . . .


        &lt;!-- And a total process count for this group... --&gt;
        &lt;processCount&gt;...&lt;/processCount&gt;

        &lt;!-- *OR* an explicit number of processes per node... --&gt;
        &lt;processesPerNode&gt;...&lt;/processesPerNode&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;
        </screen>
        </para>

        <para>
        Extension elements specified according to the above pseudo-schema will
        be converted to an appropriate <computeroutput>nodes</computeroutput>
        parameter which will be treated as if an explicit
        <computeroutput>nodes</computeroutput> extension element were specified.
        Multiple <computeroutput>resourceAllocationGroup</computeroutput>
        elements may be specified.  This will simply append the constraints to
        the <computeroutput>nodes</computeroutput> paramater with a '+'
        separator.  Note that one cannot specify both hostType/hostCount and
        hostName elements.  Similarly, one cannot specify both processCount and
        processesPerNode elements.
        </para>

        <para>
        Here are some examples of using
        <computeroutput>resourceAllocationGroup</computeroutput>:
        </para>

        <para>
        <screen>
&lt;!-- #PBS -l nodes=1:ppn=10 --&gt;
&lt;!-- 10 processes --&gt;
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;processCount&gt;10&lt;/processCount&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;

&lt;!-- #PBS -l nodes=activemural:ppn=10+5:ia64-compute:ppn=2 --&gt;
&lt;!-- 1 process (process default) --&gt;
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostType&gt;activemural&lt;/hostType&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
    &lt;/resourceAllocationGroup&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostType&gt;ia64-compute&lt;/hostType&gt;
        &lt;hostCount&gt;5&lt;/hostCount&gt;
        &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;

&lt;!-- #PBS -l nodes=vis001:ppn=5+vis002:ppn=5+comp014:ppn=2+comp015:ppn=2 --&gt;
&lt;!-- 15 total processes --&gt;
&lt;extensions&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostName&gt;vis001&lt;/hostName&gt;
        &lt;hostName&gt;vis002&lt;/hostName&gt;
        &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;processesPerHost&gt;5&lt;/processesPerHost&gt;
    &lt;/resourceAllocationGroup&gt;
    &lt;resourceAllocationGroup&gt;
        &lt;hostName&gt;comp014&lt;/hostName&gt;
        &lt;hostName&gt;comp015&lt;/hostName&gt;
        &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
        &lt;processCount&gt;5&lt;/processCount&gt;
    &lt;/resourceAllocationGroup&gt;
&lt;/extensions&gt;
        </screen>
        </para>
        </section>
    </section>

    <section id="gram4-user-extensions-constructs">
    <title>Additional Extension Constructs</title>
    <para>
    The following are general constructs that are supported by the
    ExtensionsHandler.pm Perl module. Although no modifications to
    ExtensionsHandler.pm are required, you will need to edit the appropriate
    resource manager/scheduler adapter Perl module as neccessary to affect
    the submission of jobs to the local resource manager/batch scheduler.
    </para>

    <para>
    The GRAM4 job description schema includes a section for extending the job
    description with custom elements.  To make sense of this in the resource
    manager adapter Perl scripts, a Perl module named
    Globus::GRAM::ExtensionsHandler is provided to turn these custom elements
    into paramters that the adapter scripts can understand.
    </para>

    <para>
    It should be noted that although non-GRAM XML elements only are allowed 
    in the <computeroutput>&lt;extensions&gt;</computeroutput> element of the
    job description, the extensions handler makes no distinction based on
    namespace.  Thus, <computeroutput>&lt;foo:myparam&gt;</computeroutput> and 
    <computeroutput>&lt;bar:myparam&gt;</computeroutput> will both be treated as
    just <computeroutput>&lt;myparam&gt;</computeroutput>.
    </para>

    <para>
    Familiarity with the adapter scripts is assumed in the following
    subsections.
    </para>

        <section id="gram4-user-extensions-constructs-simple">
        <title>Simple String Parameters</title>
        <para>
        Simple string extension elements are converted into single-element
        arrays with the name of the unqualified tag name of the extension
        element as the array's key name in the Perl job description hash. Simple
        string extension elements can be considered a special case of the string
        array construct in the next section.
        </para>

        <para>
        For example, adding the following element to the
        <computeroutput>&lt;extensions&gt;</computeroutput> element of the job
        description:
        </para>

        <para>
        <screen>
&lt;extensions&gt;
    &lt;myparam&gt;yahoo!&lt;/myparam&gt;
&lt;/extensions&gt;
        </screen>
        </para>

        <para>
        will cause the <computeroutput>$description->myparam()</computeroutput>
        to return the following value:
        </para>

        <para>
        <screen>
            'yahoo!'
        </screen>
        </para>
        </section>

        <section id="gram4-user-extensions-constructs-array">
        <title>String Array Parameters</title>
        <para>
        String arrays are a simple iteration of the simple string element construct.
        If you specify more than one simple string element in the job description, these
        will be assembled into a multi-element array with the unqualified tag name of
        the extension elements as the array's key name in the Perl job description hash.
        </para>

        <para>
        For example:
        </para>

        <para>
        <screen>
&lt;extensions&gt;
    &lt;myparams&gt;Hello&lt;/myparams&gt;
    &lt;myparams&gt;World!&lt;/myparams&gt;
&lt;/extensions&gt;
        </screen>
        </para>

        <para>
        will cause the <computeroutput>$description->myparams()</computeroutput> to
        return the following value:
        </para>

        <para>
        <screen>
            [ 'Hello', 'World!' ]
        </screen>
        </para>
        </section>

        <section id="gram4-user-extensions-constructs-namevalue">
        <title>Name/Value Parameters</title>
        <para>
        Name/value extension elements can be thought of as string arrays with an XML
        attribute 'name'.  This will cause the creation of a two-dimensional array with
        the unqualified extension element tag name as the name of the array in the
        Perl job description hash.
        </para>

        <para>
        For example:
        </para>

        <para>
        <screen>
&lt;extensions&gt;
    &lt;myvars name="pi"&gt;3.14159&lt;/myvars&gt;
    &lt;myvars name="mole"&gt;6.022 x 10^23&lt;/myvars&gt;
&lt;/extensions&gt;
        </screen>
        </para>

        <para>
        will cause the <computeroutput>$description->myvars()</computeroutput> to
        return the following value:
        </para>

        <para>
        <screen>
[ [ 'pi', '3.14159'], ['mole', '6.022 x 10^23'] ]
        </screen>
        </para>
        </section>
    </section>

    <section id="gram4-user-extensions-adaptersupport">
    <title>Supporting custom extensions in the Perl adapter modules.</title>
    <para>
    See the System Administrator's Guide section on
    <olink targetdoc="gram4Admin" targetptr="gram4-configuring"/> for information on how to
    customize the resource manager/scheduler adapter Perl modules
    </para>
    </section>
</chapter>

<chapter id="gram4-user-softenv">
    <title>Specifying SoftEnv keys in the job description</title>

   
  <para>
    For a short introduction to SoftEnv please have a look at the
    <olink targetdoc="gram4Admin" targetptr="gram4-softenv">SoftEnv
      chapter</olink>.
  </para>
  <para>
    If SoftEnv is enabled on the server-side, nothing needs to be added to a job
    description to set up the environment which is specified in the
    <computeroutput>.soft</computeroutput> file in the remote home directory of
    the user before the job is submitted to the scheduler.</para>
   
  <para>If a different software
    environment should be used than the one specified in the remote
    <computeroutput>.soft</computeroutput> file, the user must provide 
    SoftEnv parameters in the extensions element of the job
    description. </para>
    
  <para>The schema of the extension element for software selection
    in the job description is as follows:
  </para>
  <screen>&lt;element name="softenv" type="xsd:string"&gt;</screen>
  <para>  
    For example, to add the SoftEnv commands <command>@teragrid-basic</command>,
    <command>+intel-compilers</command>, <command>+atlas</command>, and <command>+tgcp</command> to the job process'
    environment, the user would specify the following <computeroutput>&lt;extensions&gt;</computeroutput> element
    in the job description:
  </para>
  <screen>&lt;extensions&gt;
  &lt;softenv&gt;@teragrid-basic&lt;/softenv&gt;
  &lt;softenv&gt;+intel-compilers&lt;/softenv&gt;
  &lt;softenv&gt;+atlas&lt;/softenv&gt;
  &lt;softenv&gt;+tgcp&lt;/softenv&gt;
&lt;/extensions&gt;</screen>
  <para>
    So far there is no way for a user to learn from the remote service
    itself whether or not SoftEnv support is enabled. Currently, the only way to check this is to submit a job 
    with <computeroutput>/bin/env</computeroutput> as the executable and watch the results.
  </para>
  
  <para>The following table describes what happens in various scenarios if SoftEnv is disabled or enabled on the server side:</para>
  
  <informaltable>
    <tgroup cols="3">
      <thead>
        <row>
          <entry>&nbsp;</entry>
          <entry>Disabled on server side</entry>
          <entry>Enabled on server side</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><para><emphasis role="strong">User provides no SoftEnv extensions:</emphasis></para></entry>
          <entry>
            <para>No SoftEnv environment is configured before job submission, even
            if the user has a <computeroutput>.soft</computeroutput> file in their
              remote home directory.</para>
          </entry>
          <entry>
            <para>If the user has a <computeroutput>.soft</computeroutput> file (and no
            <computeroutput>.nosoft</computeroutput> file) in their remote home directory,
            then the environment defined in the <computeroutput>.soft</computeroutput>
              file will be configured before job submission.</para>
            <para>If the user has a <computeroutput>.nosoft</computeroutput> file in their remote
            home directory, no environment will be prepared.
          </para></entry>
        </row>
        
        <row>
          <entry><para><emphasis role="strong">User provides valid SoftEnv extensions:</emphasis></para></entry>
          <entry>
            <para>
              If SoftEnv is not installed on the server then no environment
              will be configured
            </para>
            <para>
              If SoftEnv is installed, the environment the user specifies in the <computeroutput>&lt;extensions&gt;</computeroutput>
              elements overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              The environment will be configured as specified by the user in the 
              <computeroutput>&lt;extensions&gt;</computeroutput> elements before job submission.
            </para>     
          </entry>
          <entry>
            <para>
              The specified environment overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or a 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              The environment will be configured as specified by the user in the 
              <computeroutput>&lt;extensions&gt;</computeroutput> elements before job submission.
            </para>
          </entry>
        </row>
  
        <row>
          <entry><para><emphasis role="strong">User provides invalid SoftEnv extensions:</emphasis></para></entry>
          <entry>
            <para>
              If SoftEnv is not installed on the server, then no environment
              will be configured.
            </para>
            <para>
              If SoftEnv is installed, the environment the user specifies in the <computeroutput>&lt;extensions&gt;</computeroutput>
              elements overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or a 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              Only the valid keys in the SoftEnv <computeroutput>&lt;extensions&gt;</computeroutput> elements will be configured.
              If no valid key is found, no environment will be configured.
              SoftEnv warnings are logged to the stdout of the job.
            </para>
          </entry>
          <entry>
            <para>
              The specified environment overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or a 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              Only the valid keys in the SoftEnv <computeroutput>&lt;extensions&gt;</computeroutput> elements will be configured.
              If no valid key is found, no environment will be configured.
              SoftEnv warnings are logged to stdout of the job.
            </para>
          </entry>
        </row>
        
        <row>
          <entry>&nbsp;</entry>
          <entry>
            <para>
              In general, jobs do not fail if they have SoftEnv extensions in their description and SoftEnv is disabled (or not even installed) 
              on the server side. But they will fail if they rely on environments being set up before job submission.
            </para>
          </entry>
          <entry>
            &nbsp;
          </entry>
        </row>
      </tbody>
    </tgroup>
    </informaltable>
  
<note>
  <para>In the current implementation, it is not possible to call executables
    directly whose paths are defined in SoftEnv without specifiying the
    complete path to the executable.
  </para>

  <para>
    For example, if a database query must
    be executed using the
    <command>mysql</command> command and <command>mysql</command> is not in the default path, then the direct use of
    mysql as an executable in the jobs description document will fail, even if
    the use of SoftEnv is configured. The <command>mysql</command> command must be written to a
    script which is in the default path. </para>
    
  <para>Thus a job submission with the
    following job description document will fail:
  </para>
  <screen>
&lt;job&gt;
  ...
  &lt;executable&gt;mysql&lt;/executable&gt;
  ...
&lt;/job&gt;
  </screen>
  <para>
    But when the command is embedded inside a shell script which is
    specified as the executable in the job description document, it will work:
  </para>
  <screen>
#!/bin/sh
  ...
  mysql ...
    ...
  </screen>
</note>
  
<note>
  <para>The use of invalid SoftEnv keys in the extension part of the job
    description document does not generate errors.
  </para>
</note>
  
  <!--
  <section>
    <title>Open Questions</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>
            What about the packages  for Condor and PBS on
            <ulink url="http://www.globus.org/toolkit/downloads/development/">
            http://www.globus.org/toolkit/downloads/development/</ulink>?
          </para>
        </listitem>
        <listitem>   
          <para>
            Is the extension package globus_gram_job_manager_scripts-0.3
            now part of a the software or must it be downloaded separately?
          </para>
        </listitem>
        <listitem>
          <para>Provide link to SoftEnv?</para>
        </listitem>
        <listitem>
          <para>
            What about the predefined softenv key in the JNDI configuration?
            Is it already there? I can't find it in JNDI.
            (<ulink url="http://bugzilla.mcs.anl.gov/globus/show_bug.cgi?id=4207">
            http://bugzilla.mcs.anl.gov/globus/show_bug.cgi?id=4207</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>  
            I can't see that the mappings added to the
            idempotenceIdMap are removed at any time. Should we add this in
            the remove()-method of the MEJR?
          </para>
        </listitem>
      </itemizedlist>
    </para>
   </section>
   -->
 
</chapter>
    
    
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Interface_Commandline_Frag.xml"/>

<!-- n/a 
<chapter id="gram4-user-gui">
<title>Graphical user interfaces</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Interface_GUI_Frag.xml"/>
</chapter>
    -->

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Troubleshooting_Frag.xml"/>

<chapter id="gram4-user-knownproblems"><title>Known Problems in GRAM4</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Known_Problems_Frag.xml"/>
</chapter>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Usage_Statistics_Frag.xml"/>

    <glossary role="auto" id="glossary-gram4User">
        <!-- 
        <remark>some terms not in the docs but wanted in glossary: 
        <glossterm>scheduler</glossterm>
        </remark>
        -->
        <glossdiv><title>A</title>
            <glossentry>
                <glossterm>Dummy term</glossterm>
                <glossdef>
                    <para>This is a dummy entry for the automatic glossary database. Do not edit.</para>
                </glossdef>
            </glossentry>
        </glossdiv>
    </glossary>
</book>