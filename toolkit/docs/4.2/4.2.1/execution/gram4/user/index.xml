<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % xinclude SYSTEM "../../../xinclude.mod" >
%xinclude;

]>
<book id="gram4User">
<title>GT <replaceable role="entity">version</replaceable> GRAM4: User's Guide</title>
<titleabbrev>User's Guide</titleabbrev>

<bookinfo><abstract>
<title>Introduction</title>
<para>
  GRAM services provide secure job submission to many types of
  <glossterm baseform="job scheduler">job schedulers</glossterm> 
  for users who have the right to access a job hosting resource in a Grid
  environment.  The existence of a <olink targetptr="gram4-user-proxygen">valid proxy</olink>
  is in fact required for job submission.  All GRAM job submission options are
  supported transparently through the embedded request document input. In fact,
  the job startup is done by submitting a client-side provided <glossterm>job description</glossterm>
  to the GRAM services. This submission can be made by end-users with the 
    GRAM <olink targetdoc="gram4User" targetptr="gram4-cmd">command-line tools</olink>.
</para>
</abstract></bookinfo>

<chapter id="gram4-user-usagescenarios"><title>Using GRAM4</title>
    
    <section id="gram4-user-proxygen"><title>Generating a valid proxy</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>preparing</secondary><tertiary>generate valid proxy</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>preparing</secondary><tertiary>generate valid proxy</tertiary></indexterm>
    <para>In order to generate a valid proxy file, use the 
        <olink targetdoc="gsicUser" targetptr="grid-proxy-init"/>
    tool available under <computeroutput>$GLOBUS_LOCATION/bin</computeroutput>:
    <screen>
    % bin/grid-proxy-init
    Your identity: /O=Grid/OU=GlobusTest/OU=simpleCA.mymachine/OU=mymachine/CN=John Doe
    Enter GRID pass phrase for this identity:
    Creating proxy ................................. Done
    Your proxy is valid until: Tue Oct 26 01:33:42 2004
    </screen>
    </para>
    </section>

    <section id="gram4-user-delegating">
    <title>Delegating credentials</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>preparing</secondary><tertiary>delegating credentials</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>preparing</secondary><tertiary>delegating credentials</tertiary></indexterm>
    <para>
        There are three different uses of delegated credentials: 
        <orderedlist>
          <listitem><simpara>for use by the
            <glossterm baseform="Managed Executable Job Service">MEJS</glossterm>
             to create a remote user proxy
          </simpara></listitem>
          <listitem><simpara>for use by the MEJS to contact RFT</simpara></listitem>
          <listitem><simpara>for use by RFT to contact the GridFTP servers.  The
            EPRs to each of these are specified in three job description elements --
            they are jobCredentialEndpoint, stagingCredentialEndpoint, and
            transferCredentialEndpoint respectively.  Please <ulink url="../schemas/gram_job_description.html">Job Description
            Schema Reference</ulink> and
            <ulink url="../schemas/rft_types.html">RFT
            transfer request schema</ulink> documentation for more details about these
            elements.
          </simpara></listitem>
        </orderedlist>
    </para>

    <para>
    The <computeroutput>globusrun-ws</computeroutput> client can either delegate
    these credentials automatically for a particular job, or it can reuse
    pre-delegated credentials (see next paragraph) through the use of command-line
    arguments for specifying the credentials' EPR files.  Please see the
    <olink targetdoc="gram4User" targetptr="gram4-cmd"/> for details on these command-line arguments.
    </para>

    <para>It is possible to use delegation 
    <olink targetdoc="delegationUser" targetptr="delegation-cmd"/> to obtain and refresh delegated credentials in order to use them
        when submitting jobs to GRAM4. This, for instance, enables the submission of
    many jobs using a shared set of delegated credentials.  This can significantly
    decrease the number of remote calls for a set of jobs, thus improving
    performance.
    </para>
    </section>
    
    <section id="gram4-user-scheduler">
        <title>Local resource managers interfaced by a GRAM4 installation</title>
      
    <para>
      A GRAM4 instance can interface to more than one local resource manager (LRM), as
      shown in the previous section. A user can explicitly specify what LRM should be
      used for a job. But in a larger Grid it might be confusing for users to remember
      which LRM's are available on which machines.</para>
   <para>That's why GRAM4 configures a default local resource manager, which is used
      for job submission if the client didn't explicitly specify one.</para>
   
   <section id="gram4-user-finding-availablescheduler">
       <title>Finding available local resource managers</title>
     <indexterm type="gram4"><primary>jobs</primary><secondary>preparing</secondary><tertiary>finding available LRMs</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>preparing</secondary><tertiary>finding available LRMs</tertiary></indexterm>
       <para>You can check the resource property
       <computeroutput>availableLocalResourceManagers</computeroutput>
       of a GRAM4 factory service to get that information. Replace host and port in
       the below example to query against other containers:</para>
       <screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}availableLocalResourceManagers</screen>
       <para>The result on that machine is (formatted for better readability) shows
       that the local resource managers Fork, Multi, Condor and PBS are available:</para>
       <screen>&lt;ns1:availableLocalResourceManagers 
      xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
  &lt;ns1:localResourceManager&gt;Fork&lt;/ns1:localResourceManager&gt;
  &lt;ns1:localResourceManager&gt;Multi&lt;/ns1:localResourceManager&gt;
  &lt;ns1:localResourceManager&gt;Condor&lt;/ns1:localResourceManager&gt;
  &lt;ns1:localResourceManager&gt;PBS&lt;/ns1:localResourceManager&gt;
&lt;/ns1:availableLocalResourceManagers&gt;</screen>
    <para>A more typical result in a production environment is probably Fork, Multi
    and just one additional LRM like Condor, PBS or LSF.</para>
   </section>

   <section id="gram4-user-finding-defaultscheduler">
       <title>Finding the default local resource manager</title>
     <indexterm type="gram4"><primary>jobs</primary><secondary>preparing</secondary><tertiary>finding default LRM</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>preparing</secondary><tertiary>finding default LRM</tertiary></indexterm>
       <para>You can check the resource property
       <computeroutput>defaultLocalResourceManagers</computeroutput>
       of a GRAM4 factory service to get that information. Replace host and port in
       the below example to query against other containers:</para>
       <screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}localResourceManager</screen>
       <para>The result on that machine shows that PBS is the default local
       resource managers:</para>
       <screen>&lt;ns1:localResourceManager xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
    PBS
&lt;/ns1:localResourceManager&gt;</screen>
   </section>
  
  </section>

</chapter>

<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../GRAM4_Job_Desc.xml"/>


<chapter id="gram4-user-usagescenarios-jdd">
<title>Submitting jobs</title>
    
    <section id="gram4-user-simplejob-interactive-jdd">
    <title>Simple interactive job</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>simple interactive</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>simple interactive</tertiary></indexterm>
    <para>
      Use the <computeroutput>globusrun-ws</computeroutput> program to submit a
      simple job without writing a job description document.  Use the -c argument,
      a job description will be generated assuming the first arg is the executable
      and the remaining are arguments. For example:
    </para>

    <screen>% globusrun-ws -submit -c /bin/touch touched_it
Submitting job...Done.
Job ID: uuid:4a92c06c-b371-11d9-9601-0002a5ad41e5
Termination time: 04/23/2005 20:58 GMT
Current job state: Active
Current job state: CleanUp
Current job state: Done
Destroying job...Done.</screen>

    <para>
      Confirm on the server-side that the job worked by verifying the file
      was touched:</para>
    <screen>% ls -l ~/touched_it 
-rw-r--r--  1 smartin globdev 0 Apr 22 15:59 /home/smartin/touched_it

% date
Fri Apr 22 15:59:20 CDT 2005</screen>

    <para>
      Note: You did not tell globusrun-ws where to run your job, so the default
      of localhost was used.
    </para>
    <para>
      Also note, that globusrun-ws destroyed the job after it was fully
      processed.
    </para>
    <para>
      We call this kind of job interactive, because globusrun-ws does not return
      after submission. It subscribes for status update notifications of the job
      and informs the user about a status change as soon as it changes.
      Once it gets the information the the job has been fully processed it destroys
      the job, which means that internal state belonging to the job is cleaned up
      on the server-side.
    </para>
    </section> 

    <section id="gram4-user-simplejob-batch-jdd">
    <title>Simple batch job</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>simple batch</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>simple batch</tertiary></indexterm>
    <para>
      Now we submit the same job in batch mode. The option
      <computeroutput>-b</computeroutput> tells globusrun-ws to submit in batch mode,
      and <computeroutput>-o</computeroutput> causes that a reference (also named
      EndpointReference) of the is stored in the file
      <computeroutput>myJob.epr</computeroutput>, which is used later to check for
      job status and to terminate the job.
    </para>
    <screen>% globusrun-ws -submit -b -o myJob.epr -c /bin/touch touched_it
globusrun-ws -submit -b -o myJob.epr -c /bin/date
Submitting job...Done.
Job ID: uuid:5ad25b06-22f7-11dd-8482-0013d4c3b957
Termination time: 05/16/3008 03:22 GMT</screen>
    <para>
      globusrun-ws returns as soon as the job has been submitted. No status
      information is printed. The user has to do additional calls to check the
      status of the job. See section <olink targetptr="gram4-user-query">
      Get information about jobs</olink> how to do that.
    </para>
    <para>
      The user should also demand job termination when the job is done,
      to clean up internal state belonging to the job on the server-side.
      See section <olink targetptr="gram4-user-terminate-batch">Jobs in 
      batch mode</olink> in the <olink targetptr="gram4-user-terminate-batch">
      Terminating jobs</olink> section how to do that.
    </para>
    <para>
      Again the job had been submitted to localhost
    </para>
    </section>

    <section id="gram4-user-jobwithcontact-jdd">
    <title>Using a contact string</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using contact string</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using contact string</tertiary></indexterm>
    <para>
      Use globusrun-ws to submit the same touch job, but this time tell globusrun-ws
      to run the job on another machine (lucky0.mcs.anl.gov:8443). A GT4 server
      with GRAM4 installed must run on that machine and listen on port 8443.
    </para>
    <screen>% globusrun-ws -submit \
   -F https://lucky0.mcs.anl.gov:8443/wsrf/services/ManagedJobFactoryService \
   -c /bin/touch touched_it
Submitting job...Done.
Job ID: uuid:3050ad64-b375-11d9-be11-0002a5ad41e5
Termination time: 04/23/2005 21:26 GMT
Current job state: Active
Current job state: CleanUp
Current job state: Done
Destroying job...Done.</screen>
    <para>
      Type globusrun-ws -help to learn the details about the contact string.
    </para>
    </section>

    <section id="gram4-user-streaming-jdd">
    <title>Streaming output</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>request streaming output</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>request streaming output</tertiary></indexterm>
    <para>
      A user can request that the output of the program is sent back directly to
      the client as soon as it's available. This is useful if a user does not
      want to do additional file staging for a quick job. To enable this, specify 
      the <computeroutput>-s</computeroutput> option.
    </para>
    <screen>[martin@osg-test1 ~]$ globusrun-ws -submit \
    -F https://lucky0.mcs.anl.gov:8443/wsrf/services/ManagedJobFactoryService \
    -s -c /bin/echo hello world!
Delegating user credentials...Done.
Submitting job...Done.
Job ID: uuid:1731f602-22fe-11dd-879c-0013d4c3b957
Termination time: 05/16/3008 04:10 GMT
Current job state: Active
Current job state: CleanUp-Hold
hello world!
Current job state: CleanUp
Current job state: Done
Destroying job...Done.
Cleaning up any delegated credentials...Done.</screen>
    <para>
      Note that a GridFTP server must be running on the remote machine (lucky0)
      to enable streaming.
    </para>
    </section>

    <section id="gram4-user-specifyingsimplejob-jdd">
    <title>Using a job description</title>
<indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using a job description</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using a job description</tertiary></indexterm>
    <para>The specification of a job to submit is to be written by the user in a 
      job description XML file. 
    </para>
    <para>Here is an example of a simple job description:</para>
    <screen>
    &lt;job&gt;
        &lt;executable&gt;/bin/echo&lt;/executable&gt;
        &lt;argument&gt;this is an example_string &lt;/argument&gt;
        &lt;argument&gt;Globus was here&lt;/argument&gt;
        &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
        &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;/job&gt;
    </screen>

    <para>
      Tell globusrun-ws to read the job description from a file, using the -f
      argument:
    </para>

    <screen>% bin/globusrun-ws -submit -f simple.xml
    Submitting job...Done.
    Job ID: uuid:c51fe35a-4fa3-11d9-9cfc-000874404099
    Termination time: 12/17/2004 20:47 GMT
    Current job state: Active
    Current job state: CleanUp
    Current job state: Done
    Destroying job...Done.
    </screen>
    <para>

    Note the usage of the substitution variable <computeroutput>${GLOBUS_USER_HOME}</computeroutput> 
    which resolves to the user home directory.</para>
    <para>
    Here is an example with more job description parameters:</para>
    <screen>
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;job&gt;
        &lt;executable&gt;/bin/echo&lt;/executable&gt;
        &lt;directory&gt;/tmp&lt;/directory&gt;
        &lt;argument&gt;12&lt;/argument&gt;
        &lt;argument&gt;abc&lt;/argument&gt;
        &lt;argument&gt;34&lt;/argument&gt;
        &lt;argument&gt;this is an example_string &lt;/argument&gt;
        &lt;argument&gt;Globus was here&lt;/argument&gt;
        &lt;environment&gt;
            &lt;name&gt;PI&lt;/name&gt;
            &lt;value&gt;3.141&lt;/value&gt;
        &lt;/environment&gt;
        &lt;stdin&gt;/dev/null&lt;/stdin&gt;
        &lt;stdout&gt;stdout&lt;/stdout&gt;
        &lt;stderr&gt;stderr&lt;/stderr&gt;
        &lt;count&gt;2&lt;/count&gt;
    &lt;/job&gt;
    </screen>

    <para>Note that in this example, a <computeroutput>&lt;directory&gt;</computeroutput> element specifies the current directory for the execution 
      of the command on the execution machine to be <computeroutput>/tmp</computeroutput>, and the standard output is 
      specified as the relative path <computeroutput>stdout</computeroutput>. The output is therefore written to <computeroutput>/tmp/stdout</computeroutput>: 
    </para>
    <screen>% cat /tmp/stdout
    12 abc 34 this is an example_string  Globus was here
    </screen>
    </section>

    <section id="gram4-user-specifyingcontact-jdd">
    <title>Using a contact string in the job description</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using a job description with contact string</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using a job description with contact string</tertiary></indexterm>
    <para>Instead of specifying the contact string on the command-line, you
      can also put it in the job description: 
    </para>
    <screen>&lt;job xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
    &lt;factoryEndpoint&gt;
      &lt;wsa:Address&gt;
          https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService
      &lt;/wsa:Address&gt;
    &lt;/factoryEndpoint&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
&lt;/job&gt;</screen>
    <para>
      Submit the job with the following command (assuming the above description
      has been stored in the file job.xml):
    </para>
    <screen>% bin/globusrun-ws -submit -f job.xml</screen>
    <note><simpara>
       This time you don't have to specify the -F option.
    </simpara></note>
    </section>

    <section id="gram4-user-lrm">
    <title>Specifying a local resource manager</title>
     
    <para>
      Note that at this point you didn't specify any local resource manager
      related information. If a user does not specify anything then the job is
      run by the default local resource manager, that is defined on the server-side.
      If an admin e.g. configured Condor as default local resource manager, then
      the jobs submitted so far will be managed by Condor on the server-side.
    </para>
    <para>
      Check the section <olink targetptr="gram4-user-scheduler">Local resource
      managers interfaced by a GRAM4 installation</olink> to find out which local
      resource managers are available in a GRAM4 installation and which one is
      configured as the default.
    </para>
    
    <section id="gram4-user-using-defaultscheduler">
    <title>Submitting to the default local resource manager</title>
       <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>specifying LRM, default</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>specifying LRM, default</tertiary></indexterm>
    <para>
      As said, if you want to submit a job to the default local resource
      manager, all you have to do is to just NOT specify any local resource
      manager in your submission, neither in the job description, 
      nor on the command-line. The above examples show how to do it.
    </para>
    </section>

    <section id="gram4-user-using-nondefaultscheduler">
    <title>Submitting to a non-default local resource manager</title>
       <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>specifying LRM, non-default</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>specifying LRM, non-default</tertiary></indexterm>
    <para>
      If you want to submit a job to a non-default local resource manager,
      or if you just want to be explicit in what you specify, you'll have to
      specify the local resource manager in your submission. Using globusrun-ws,
      there are two ways to specify a local resource manager:
    </para>
    <itemizedlist>
      <listitem><simpara>as command-line argument of globusrun-ws
        (<computeroutput>-Ft &lt;lrm&gt;</computeroutput>)</simpara></listitem>
      <listitem><simpara>in the factoryEndpoint element in the job description</simpara></listitem>
    </itemizedlist>
    <para>
      Example: the following job will be submitted to Condor:
    </para>
    <screen>globusrun-ws -submit \
  -F osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  -Ft Condor \
  -c /bin/date</screen>
    <para>
      Or with a job description that contains a factoryEndpoint:
    </para>
    <screen>&lt;job xmlns:wsa="http://www.w3.org/2005/08/addressing"
    xmlns:gram="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
    &lt;factoryEndpoint&gt;
      &lt;wsa:Address&gt;
          https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService
      &lt;/wsa:Address&gt;
      &lt;wsa:ReferenceParameters&gt;
        &lt;gram:ResourceID&gt;Condor&lt;/gram:ResourceID&gt;
      &lt;/wsa:ReferenceParameters&gt;
    &lt;/factoryEndpoint&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
&lt;/job&gt;</screen>
    <para>
      Submit that job (assuming the description is stored in the file myJob.xml):
    </para>
    <screen>globusrun-ws -submit -f myJob.xml</screen>
    </section>
    
    </section>
       
    <section id="gram4-user-specifyingstaging-jdd">
    <title>Job with staging</title>
       <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>with staging</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>with staging</tertiary></indexterm>
    <para>In order to do file staging one must add specific elements to the job description and delegate credentials appropriately (see
    <olink targetdoc="gram4User" targetptr="gram4-user-delegating"/>). The 
        file transfer directives follow the <ulink url="../schemas/rft_types.html">RFT
    syntax</ulink>, which allows only for third-party transfers.  Each file transfer
    must therefore specify a source URL and a destination URL.  URLs are specified
    as GridFTP URLs (for remote files) or as file URLs (for files local to the
    service--these are converted internally to full GridFTP URLs by the service).
    </para>
    <para>
    For instance, in the case of staging a file <emphasis>in</emphasis>, the source
    URL would be a GridFTP URL (for instance
    <computeroutput>gsiftp://job.submitting.host:2811/tmp/mySourceFile
    </computeroutput>) resolving to a source document accessible on the file system
    of the job submission machine (for instance <computeroutput>/tmp/mySourceFile
    </computeroutput>). At run-time the Reliable File Transfer service used by the
    MEJS on the remote machine would reliably fetch the remote file using the
    GridFTP protocol and write it to the specified local file (for instance 
    <computeroutput>file:///${GLOBUS_USER_HOME}/my_transfered_file</computeroutput>,
    which resolves to  <computeroutput>~/my_transfered_file</computeroutput>). Here
    is how the stage-in directive would look like:

    <screen>&lt;fileStageIn&gt;
    &lt;transfer&gt;
        &lt;sourceUrl&gt;gsiftp://job.submitting.host:2811/tmp/mySourceFile&lt;/sourceUrl&gt;
        &lt;destinationUrl&gt;file:///${GLOBUS_USER_HOME}/my_transfered_file&lt;/destinationUrl&gt;
    &lt;/transfer&gt;
&lt;/fileStageIn&gt;</screen> 
    </para>
    <para><emphasis>Note:</emphasis> additional RFT-defined quality of service requirements can be specified 
          for each transfer. See the RFT documentation for more information.
    </para>
    <para>
    Here is an example job description with file stage-in and stage-out:</para>

    <screen>&lt;job&gt;
    &lt;executable&gt;my_echo&lt;/executable&gt;
    &lt;directory&gt;${GLOBUS_USER_HOME}&lt;/directory&gt;
    &lt;argument&gt;Hello&lt;/argument&gt;
    &lt;argument&gt;World!&lt;/argument&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;fileStageIn&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;gsiftp://job.submitting.host:2811/bin/echo&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;file:///${GLOBUS_USER_HOME}/my_echo&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageIn&gt;
    &lt;fileStageOut&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;file:///${GLOBUS_USER_HOME}/stdout&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;gsiftp://job.submitting.host:2811/tmp/stdout&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageOut&gt;
    &lt;fileCleanUp&gt;
        &lt;deletion&gt;
            &lt;file&gt;file:///${GLOBUS_USER_HOME}/my_echo&lt;/file&gt;
        &lt;/deletion&gt;
    &lt;/fileCleanUp&gt;
&lt;/job&gt;</screen>

    <para>Note that the job description XML does not need to include a reference to the schema 
      that describes its syntax. As a matter of fact it is possible to omit the namespace 
      in the GRAM job description XML elements as well. The submission of this job to the GRAM services causes the following sequence 
      of actions:
    </para>
    <orderedlist>
    <listitem><simpara> The <computeroutput>/bin/echo</computeroutput> executable is transfered from the submission machine 
        to the GRAM host file system. The destination location is the HOME directory of the 
        user on behalf of whom the job is executed by the GRAM services 
        (see <computeroutput>&lt;fileStageIn&gt;</computeroutput>).</simpara></listitem>
    <listitem><simpara> The transfered executable is used to print a test string  
         (see <computeroutput>&lt;executable&gt;</computeroutput>, <computeroutput>&lt;directory&gt;</computeroutput> and 
          the <computeroutput>&lt;argument&gt;</computeroutput> elements) on the standard output, which is 
          redirected to a local file (see <computeroutput>&lt;stdout&gt;</computeroutput>).</simpara></listitem>
    <listitem><simpara> The standard output file is transfered to the submission machine 
         (see <computeroutput>&lt;fileStageOut&gt;</computeroutput>).</simpara></listitem>
    <listitem><simpara> The file that was initially transfered during the stage-in phase is removed 
         from the file system of the GRAM installation (see <computeroutput>&lt;fileCleanup&gt;</computeroutput>).</simpara></listitem>
    </orderedlist>
    </section>

    <section id="gram4-user-specifying-localuserid">
    <title>Specifying a local user id in the job description</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>with job description, specifying local user</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>with job description, specifying local user</tertiary></indexterm>
    <para>If a user has more than one user account on a server and the
        distinguished name (DN) of the user's certificate is mapped to all these
        user accounts, a user can specify which local account should be used by
        GRAM4 for the job submission. By default the first local user account that
        is defined is used for job submission. If this is not the one that should
        be used the user must explicitly specify the account to be used.
        The following dummy job description shows how to do this:
    </para>
    <screen>&lt;job&gt;
    &lt;localUserId&gt;stu&lt;/localUserId&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
&lt;/job&gt;</screen>
    </section>

    <section id="gram4-user-jobidsub-jdd">
    <title>Using substitution variables</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using substitution variables</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using substitution variables</tertiary></indexterm>
    <para>
    To allow for customization of values, such as paths, on a per-job basis; a
    job description substitution variable named "GLOBUS_JOB_ID" can be used.
    </para>
    <para>
    For example:
    </para>
    <screen>&lt;job&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
    &lt;stdout&gt;/tmp/stdout.${GLOBUS_JOB_ID}&lt;/stdout&gt;
    &lt;stderr&gt;/tmp/stderr.${GLOBUS_JOB_ID}&lt;/stderr&gt;
    &lt;fileStageOut&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;file:///tmp/stdout.${GLOBUS_JOB_ID}&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;gsiftp://mymachine.mydomain.com/out.${GLOBUS_JOB_ID}&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageOut&gt;
&lt;/job&gt;</screen>
    <para>
    More information about substitution variables can found
    <olink targetdoc="gram4User" targetptr="gram4-jobdescription-variables">
    here</olink>.
    </para>
    </section>

    <section id="gram4-user-specifyingextensions-jdd">
    <title>Using custom job description extensions</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using custom job description extensions</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>using custom job description extensions</tertiary></indexterm>
    <para>
    Basic support is provided for specifying custom extensions to the job
    description. There are plans to improve the usability of this feature, but at
    this time it involves a bit of work.
    </para>
    <para>
    Specifying the actual custom elements in the job description is trivial. Simply add any elements that you need between the beginning and ending
    <computeroutput>extensions</computeroutput> tags at the bottom of the job
    description as in the following basic example:
    <screen>
    &lt;job&gt;
        &lt;executable&gt;/home/user1/myapp&lt;/executable&gt;
        &lt;extensions&gt;
            &lt;myData&gt;
                &lt;flag1&gt;on&lt;/flag1&gt;
                &lt;flag2&gt;off&lt;/flag2&gt;
            &lt;/myData&gt;
        &lt;/extensions&gt;
    &lt;/job&gt;
    </screen>
    </para>
    <para>
    To handle this data, you will have to alter the appropriate Perl scheduler
    script (i.e. $GLOBUS_LOCATION/lib/perl/Globus/GRAM/JobManager/fork.pm for the
    Fork scheduler, etc...) to parse the data returned from the
    <computeroutput>$description->extensions()</computeroutput> sub.
    </para>
    <para>
    For more information about extensions see the
    <olink targetdoc="gram4User" targetptr="gram4-jobdescription-extensions">Extensions</olink>
    section.
    </para>
    </section>

    <section id="gram4-user-specifyingmultijob-jdd">
    <title>Multi-Job</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>multijob</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>multijob</tertiary></indexterm>
    <para>The job description XML schema allows for specification of a <emphasis>multijob</emphasis>
      i.e. a job that is itself composed of several executable jobs, which we 
      will refer to as <emphasis>subjobs</emphasis> 
      (<emphasis>note:</emphasis> subjobs cannot be multijobs, so the structure is not recursive).
      This is useful for instance in order to bundle a group of jobs together and submit 
      them as a whole to a remote GRAM installation.</para>
    <para>
    Note that no relationship can be specified between the subjobs of a multijob.
    The subjobs are submitted to job factory services 
    in their order of appearance in the multijob description.</para>
    <para>
      Within a <ulink url="../schemas/gram_job_description.html#element_multiJob">multijob description</ulink>, 
      each subjob description must come along with an endpoint for the factory to submit the subjob to. This 
      enables the at-once submission of several jobs to different hosts.
      The factory to which the multijob is submitted acts as an intermediary tier 
      between the client and the eventual executable job factories.
    </para>
    <para>
      Here is an example of a multijob description:
    </para>

    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;multiJob xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
    &lt;factoryEndpoint&gt;
       &lt;wsa:Address&gt;
          https://localhost:8443/wsrf/services/ManagedJobFactoryService
      &lt;/wsa:Address&gt;
    &lt;/factoryEndpoint&gt;
    &lt;directory&gt;${GLOBUS_LOCATION}&lt;/directory&gt;
    &lt;count&gt;1&lt;/count&gt;

    &lt;job&gt;
       &lt;factoryEndpoint&gt;
         &lt;wsa:Address&gt;https://localhost:8443/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
       &lt;/factoryEndpoint&gt;
       &lt;executable&gt;/bin/date&lt;/executable&gt;
       &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout.p1&lt;/stdout&gt;
       &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr.p1&lt;/stderr&gt;
       &lt;count&gt;2&lt;/count&gt;
    &lt;/job&gt;

    &lt;job&gt;
       &lt;factoryEndpoint&gt;
         &lt;wsa:Address&gt;https://localhost:8443/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
       &lt;/factoryEndpoint&gt;
       &lt;executable&gt;/bin/echo&lt;/executable&gt;
       &lt;argument&gt;Hello World!&lt;/argument&gt;        
       &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout.p2&lt;/stdout&gt;
       &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr.p2&lt;/stderr&gt;
       &lt;count&gt;1&lt;/count&gt;
    &lt;/job&gt;
&lt;/multiJob&gt;</screen>

<!--
    <para><emphasis>Notes:</emphasis>
    </para>
    <itemizedlist>
    <listitem><simpara>The <computeroutput>&lt;ResourceID&gt;</computeroutput> element within the <computeroutput>&lt;factoryEndpoint&gt;</computeroutput>
    WS-Addressing endpoint structures must be qualified with the appropriate GRAM namespace.</simpara></listitem>
    <listitem><simpara>Apart from the <computeroutput>factoryEndpoint</computeroutput> element, all elements at the enclosing multijob level 
    act as defaults for the subjob parameters, in this example <computeroutput>&lt;directory&gt;</computeroutput> and <computeroutput>&lt;count&gt;</computeroutput>.</simpara></listitem>
    <listitem><simpara>The default <computeroutput>&lt;count&gt;</computeroutput> value is overridden in the subjob descriptions.</simpara></listitem>
    </itemizedlist>
-->
    <para>
      Submit the multi-job with the following command:
    </para>

    <screen>% bin/globusrun-ws -submit -f test_multi.xml
    Delegating user credentials...Done.
    Submitting job...Done.
    Job ID: uuid:bd9cd634-4fc0-11d9-9ee1-000874404099
    Termination time: 12/18/2004 00:15 GMT
    Current job state: Active
    Current job state: CleanUp
    Current job state: Done
    Destroying job...Done.
    Cleaning up any delegated credentials...Done.</screen>

    <note><simpara>
      When you submit a multi-job you don't have to specify the local
      resource manager, you can do so though. The fact that it's a multi-job is
      detected on the server-side and the right "local resource manager"
      Multi is used automatically.
    </simpara></note>
    
    <note><simpara>
      In this multi-job description the sub-jobs are submitted
      to the default local resource manager. If you want them to be submitted to
      a non-default local resource manager you'll have to specify that in an
      additional ReferenceParameters element in the factoryEndpoint element of
      each sub-job. See <olink targetptr="gram4-user-using-nondefaultscheduler">here</olink> for
      more information about this.
    </simpara></note>

    <para>
      A multijob resource is created by the factory and exposes a set of 
      WSRF resource properties different than the resource properties of 
      an executable job. The state machine of a multijob is also different 
      since the multijob represents the <emphasis>overall</emphasis> execution
      of all the executable jobs it is composed of.
    </para>
    </section>

    <section id="s-wsgram-user-runningMPIjobs"><title>Submitting MPI Jobs</title>
      <indexterm type="gram4"><primary>jobs</primary><secondary>submitting</secondary><tertiary>MPIJob</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submitting</secondary><tertiary>MPIJob</tertiary></indexterm>
        <para>
      This <ulink url="http://www.gac-grid.org/project-documents/deliverables/wp1/Run_MPI_Jobs_on_Grid-D_1_4.pdf">document from DGrid</ulink> describes how to submit MPI batch jobs to compute clusters using GRAM4.
        </para>
    </section>
    
</chapter>

<chapter id="gram4-user-query">
<title>Getting information about jobs</title>

<section id="gram4-user-query-single">
<title>Resource properties of a job</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>querying</secondary><tertiary>resource properties</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>querying</secondary><tertiary>resource properties</tertiary></indexterm>
<para>
  A job submitted to GRAM4 has a set of resource properties that contain information
  about the job a user might be interested in, like
  <itemizedlist>
    <listitem><simpara>status of the remote job</simpara></listitem>
    <listitem><simpara>local user id the job is run under</simpara></listitem>
    <listitem><simpara>exit code of the executable after it finished</simpara></listitem>
    <listitem><simpara>information about errors</simpara></listitem>
    <listitem><simpara>...</simpara></listitem>
  </itemizedlist>
</para>
<para>
  The following links give a complete list of all available resource properties of
  <olink targetdoc="gram4Developer" targetptr="gram4-rps-mejpt">executable
  jobs</olink> and <olink targetdoc="gram4Developer"
  targetptr="gram4-rps-mmjpt">multi jobs</olink>.
</para>
<para>
  The rest of this section assumes that a job had been submitted in batch mode,
  and that the EPR of the job is available in the file
  <computeroutput>myJob.epr</computeroutput>.
</para>
<para>
  To check for status of the job, use globusrun-ws:
</para>
<screen>[martin@osg-test1 ~]$ globusrun-ws -status -j myJob.epr 
Current job state: Active</screen>
<para>
  If a job failed, globusrun-ws will print an error that indicates what
  happened:
</para>
<screen>[martin@osg-test1 ~]$ globusrun-ws -status -j myJob.epr 
Current job state: Failed
globusrun-ws: Job failed: Invalid executable path "/bin/sleeeeep".</screen>
<para>
  More general-purpose programs exist that are not limited to resource properties
  of job resources and that let you get information about the other resource
  properties:
  <itemizedlist>
    <listitem><simpara><emphasis role="strong">wsrf-get-resource-property</emphasis>:
      Get a single resource property</simpara>
    </listitem>
    <listitem><simpara><emphasis role="strong">wsrf-get-resource-properties</emphasis>:
      Get a list of resource properties</simpara>
    </listitem>
    <listitem><simpara><emphasis role="strong">wsrf-query</emphasis>:
      Query the resource property document</simpara>
    </listitem>
  </itemizedlist>
  The following examples show how to use these commands to get information
  about an executable job.
</para>
<para>
  Use wsrf-get-property to get the state of the job (resource property
  <computeroutput>state</computeroutput>):
</para>
<screen>[martin@osg-test1 ~]$ wsrf-get-property -e myJob.epr \
  {http://www.globus.org/namespaces/2008/03/gram/job/types}state

&lt;ns1:state xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job/types"&gt;
  Done
&lt;/ns1:state&gt;
</screen>
<para>
  Get the values of the two resource properties
  <computeroutput>localUserId</computeroutput> and
  <computeroutput>localJobId</computeroutput> in one request:
</para>
<screen>[martin@osg-test1 ~]$ wsrf-get-properties -e myJob.epr \
  {http://www.globus.org/namespaces/2008/03/gram/job/types}localUserId \
  {http://www.globus.org/namespaces/2008/03/gram/job/exec}localJobId
  
&lt;ns1:localUserId xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job/types"&gt;
  feller
&lt;/ns1:localUserId&gt;
&lt;ns2:localJobId xmlns:ns2="http://www.globus.org/namespaces/2008/03/gram/job/exec"&gt;
  51370.osg-test1.unl.edu
&lt;/ns2:localJobId&gt;
</screen>
<para>
  Get the whole resource property document of a job:
</para>
<screen>[martin@osg-test1 ~]$ wsrf-query -e myJob.epr "/*"

&lt;ns0:managedJobResourceProperties
   xmlns:ns0="http://www.globus.org/namespaces/2008/03/gram/job"
   xmlns:ns04="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:ns05="http://www.w3.org/2001/XMLSchema"
   xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job/exec"
   xmlns:ns10="http://www.globus.org/namespaces/2008/03/gram/job/description"
   xmlns:ns11="http://www.w3.org/2005/08/addressing"
   xmlns:ns14="http://docs.oasis-open.org/wsn/b-2"
   xmlns:ns2="http://www.globus.org/namespaces/2008/03/gram/job/types"
   xmlns:ns6="http://docs.oasis-open.org/wsrf/rl-2"
   xmlns:ns8="http://www.globus.org/namespaces/2008/04/rendezvous"&gt;
  &lt;ns1:localJobId&gt;51370.osg-test1.unl.edu&lt;/ns1:localJobId&gt;
  &lt;ns2:exitCode&gt;0&lt;/ns2:exitCode&gt;
  &lt;ns3:localUserId xmlns:ns3="http://www.globus.org/namespaces/2008/03/gram/job/types"&gt;
     feller
  &lt;/ns3:localUserId&gt;
  &lt;ns4:userSubject xmlns:ns4="http://www.globus.org/namespaces/2008/03/gram/job/types"&gt;
     /DC=org/DC=doegrids/OU=People/CN=John Doe 807394
  &lt;/ns4:userSubject&gt;
  &lt;ns5:holding xmlns:ns5="http://www.globus.org/namespaces/2008/03/gram/job/types"&gt;
     false
  &lt;/ns5:holding&gt;
  &lt;ns6:TerminationTime&gt;3008-05-15T21:12:56.067Z&lt;/ns6:TerminationTime&gt;
  &lt;ns7:state xmlns:ns7="http://www.globus.org/namespaces/2008/03/gram/job/types"&gt;
     Active
  &lt;/ns7:state&gt;
  &lt;ns8:Capacity&gt;1&lt;/ns8:Capacity&gt;
  &lt;ns9:CurrentTime xmlns:ns9="http://docs.oasis-open.org/wsrf/rl-2"&gt;
     2008-05-15T21:17:03.849Z
  &lt;/ns9:CurrentTime&gt;
  &lt;ns10:serviceLevelAgreement&gt;
    &lt;ns10:job&gt;
      &lt;ns10:factoryEndpoint&gt;
        &lt;ns11:Address&gt;
           https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService
        &lt;/ns11:Address&gt;
        &lt;ns12:ReferenceParameters xmlns:ns12="http://www.w3.org/2005/08/addressing"&gt;
          &lt;ns5:ResourceID ns04:type="ns05:string"
             xmlns:ns5="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
             PBS
          &lt;/ns5:ResourceID&gt;
        &lt;/ns12:ReferenceParameters&gt;
      &lt;/ns10:factoryEndpoint&gt;
      &lt;ns10:executable&gt;/bin/sleep&lt;/ns10:executable&gt;
      &lt;ns10:directory&gt;/home/john&lt;/ns10:directory&gt;
      &lt;ns10:argument xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:type="xsd:string"&gt;
         600
      &lt;/ns10:argument&gt;
      &lt;ns10:stdout&gt;/dev/null&lt;/ns10:stdout&gt;
      &lt;ns10:stderr&gt;/dev/null&lt;/ns10:stderr&gt;
      &lt;ns10:count&gt;1&lt;/ns10:count&gt;
    &lt;/ns10:job&gt;
  &lt;/ns10:serviceLevelAgreement&gt;
  &lt;ns13:RendezvousCompleted
     xmlns:ns13="http://www.globus.org/namespaces/2008/04/rendezvous"&gt;
     false
  &lt;/ns13:RendezvousCompleted&gt;
  &lt;ns14:FixedTopicSet&gt;false&lt;/ns14:FixedTopicSet&gt;
  &lt;ns16:TopicSet Dialect="http://docs.oasis-open.org/wsn/t-1/TopicExpression/Simple"
     xmlns:ns15="http://www.globus.org/namespaces/2008/04/rendezvous" 
     xmlns:ns16="http://docs.oasis-open.org/wsn/b-2"&gt;
     ns15:RendezvousCompleted
  &lt;/ns16:TopicSet&gt;
  &lt;ns18:TopicSet Dialect="http://docs.oasis-open.org/wsn/t-1/TopicExpression/Simple"
     xmlns:ns17="http://www.globus.org/namespaces/2008/03/gram/job" 
     xmlns:ns18="http://docs.oasis-open.org/wsn/b-2"&gt;
     ns17:stateChangeInformation
  &lt;/ns18:TopicSet&gt;
  &lt;ns19:TopicExpressionDialect xmlns:ns19="http://docs.oasis-open.org/wsn/b-2"&gt;
     http://docs.oasis-open.org/wsn/t-1/TopicExpression/Simple
  &lt;/ns19:TopicExpressionDialect&gt;
&lt;/ns0:managedJobResourceProperties&gt;
</screen>
<para>
  The output might not be so nicely formated like in the above examples.
</para>
<para>
  For more information about these commands check the
  <olink targetdoc="javawscoreUser">Java WS Core's User's Guide</olink>.
</para>

</section>

<section id="gram4-user-query-multiple">
<title>List of all jobs in a GRAM4 instance</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>querying</secondary><tertiary>all jobs in a GRAM4 instance</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>querying</secondary><tertiary>all jobs in a GRAM4 instance</tertiary></indexterm>
<para>
  There is currently no way to get a list of all jobs managed by a GRAM4 instance
  or to get a list of all jobs of a particular user managed by GRAM4. A user or
  client has to keep track of all jobs it submitted if this is of interest.
</para>
<para>
  However, if audit logging is configured in GRAM4 (see <olink
  targetdoc="gram4Admin" targetptr="gram4-audit-logging">Audit Logging</olink>
  in the <olink targetdoc="gram4Admin">System Administrator's Guide</olink>),
  a user could request a list of all jobs could be requested from an administrator.
  But this information is probably by default not available on the fly.
</para>
</section>

</chapter>

<chapter id="gram4-user-terminate">
<title>Terminating jobs</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>terminating</secondary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>terminating</secondary></indexterm>
<para>
  Terminating a job using globusrun-ws means interrupting job processing
  and destroying all job-related data on the server-side, including delegated
  credentials if globusrun-ws did the delegation itself.
</para>
<para>
  If the job is still running and not already fully processed, termination
  will cause the job to go through a series cleanup steps in GRAM4 before
  the job-related data is destroyed.
  The cleanup steps being performed depend on the job and the state it is in.  
  In general this includes cancellation of a running job at the local resource
  manager and running fileCleanUp if so specified in the job description.
  Termination at the local resource manager however will only be performed if
  the job did not already finished executing.
  This also applies to fileCleanUp: If no fileCleanUp is specified in the job
  description or if the job already passed fileCleanUp when the termination
  request comes in, then this step is skipped.
</para>
<para>
  Depending on load in GRAM4 performing these cleanup steps may take
  a while.
</para>

<section id="gram4-user-terminate-batch">
<title>Jobs in batch mode</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>terminating</secondary><tertiary>batch mode</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>terminating</secondary><tertiary>batch mode</tertiary></indexterm>
<para>
  The following shows how to terminate a job that had been submitted in batch
  mode, assuming the EPR of the job is stored in the file myJob.epr:
</para>
<screen>[martin@osg-test1 ~]$ globusrun-ws -kill -j myJob.epr 
Current job state: Active
Current job state: UserTerminateDone
Requesting original job description...Done.
Destroying job...Done.</screen>
</section>

<section id="gram4-user-terminate-interactive">
<title>Jobs in interactive mode</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>terminating</secondary><tertiary>interactive mode</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>terminating</secondary><tertiary>interactive mode</tertiary></indexterm>
<para>
  If globusrun-ws is run in interactive mode
  <computeroutput>Ctrl-C</computeroutput> will cause job termination.
</para>
<screen>[martin@osg-test1 ~]$ globusrun-ws -submit -c /bin/sleep 30
Submitting job...Done.
Job ID: uuid:56b15176-22d4-11dd-8bdd-0013d4c3b957
Termination time: 05/15/3008 23:12 GMT
Current job state: Active
Canceling...Current job state: UserTerminateDone
Canceled.
Destroying job...Done.</screen>
<para>
  Repetitive <computeroutput>Ctrl-C</computeroutput> cause globusrun-ws
  to return and not wait for success of termination.
</para>
</section>  

</chapter>


<chapter id="gram4-user-lifetime">
<title>Job lifetime</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>lifetime</secondary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>lifetime</secondary></indexterm>
<para>For a general introduction see section <olink targetdoc="executionKey"
targetptr="execution-approach-lifetime">Job Lifetime</olink> in the GRAM4
approach.</para>
<para>Jobs submitted to WS-GRAM have a lifetime. If the lifetime of a ManagedJob
resource expires the job will be terminated and finally the job resource will be
destroyed and the job's persistence data will removed.
</para>
<para>For executable jobs the user-relevant steps in termination are:
<itemizedlist>
  <listitem><simpara>
    Cancellation of the job at the local resource manager if it's still running.
  </simpara></listitem>
  <listitem><simpara>
    Performing fileCleanUp if specified in the job description and the
    job did not already pass this step.
  </simpara></listitem>
 </itemizedlist>
  If a multi job expires all sub-jobs will be terminated.
</para>

<section id="gram4-user-general">
<title>Server-side settings that impact job lifetime</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>lifetime</secondary><tertiary>server-side settings</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>lifetime</secondary><tertiary>server-side settings</tertiary></indexterm>
<para>There are 2 resource properties (RP's) of GRAM4’s factory service
that have impact on lifetime of job resources:</para>
<informaltable><tgroup cols="2">
  <tbody>
    <row>
      <entry><para><emphasis role="strong">maxJobLifetime</emphasis>
      </para></entry>
      <entry><para>Max lifetime a client can specify in the initial
      job submission and in subsequent setTerminationTime calls.
      Default value is 1 year.
      A negative value means that there is no limit.</para></entry>
    </row>
    <row>
      <entry><para><emphasis role="strong">jobTTLAfterProcessing
      </emphasis></para></entry>
      <entry><para>Amount of time a job resource keeps on existing
      after the job has been fully processed and is in a final
      state Done, Failed, UserTerminateDone, UserTerminateFailed,
      and the client did not specify a job lifetime.
      Default value is 24h.
      A negative value means that the job resource does not
      expire.</para></entry>
    </row>
  </tbody>
</tgroup></informaltable>
<para>Values are specified in seconds. A client can query the RP's to find out
their values like explained in the following examples.</para>

<para>Getting the value of the RP maxLifetime:</para>
<screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}maxJobLifetime
</screen>

<para>The result (in this case 1 year) is:</para>
<screen>&lt;ns1:maxJobLifetime xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
      31536000
&lt;/ns1:maxJobLifetime&gt;</screen>

<para>Getting the value of the RP jobTTLAfterProcessing:</para>
<screen>[martin@osg-test1 ~]$ globus-wsrf-get-property \
  -s https://osg-test1.unl.edu:8443/wsrf/services/ManagedJobFactoryService \
  {http://www.globus.org/namespaces/2008/03/gram/job}jobTTLAfterProcessing
</screen>
<para>The result (in this case 24h) is:</para>
<screen>&lt;ns1:jobTTLAfterProcessing xmlns:ns1="http://www.globus.org/namespaces/2008/03/gram/job"&gt;
      86400
&lt;/ns1:jobTTLAfterProcessing&gt;</screen>
</section>

<section id="gram4-user-lifetime-scenarios">
<title>Client-side information</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>lifetime</secondary><tertiary>client-side settings</tertiary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>lifetime</secondary><tertiary>client-side settings</tertiary></indexterm>
<para>This section explains how the above parameters impact a client and what
the actual lifetime of a job is, when a user does not specify a lifetime at all
or when he/she specifies a lifetime for a job.</para>
<section id="gram4-user-lifetime-scenario1">
<title>Specifying no lifetime in submission</title>
<para>The job does not expire until it is fully processed. After that the
lifetime will be set to (now + jobTTLAfterProcessing). By this it is
guaranteed that a job runs to completion (including fileStageOut and
fileCleanUp) and a client has the ability to query the status of a job for
a while before it will be removed.</para>
<para>The default C-client globusrun-ws by default does not set a lifetime</para> 
</section>

<section id="gram4-user-lifetime-scenario2">
<title>Specifying a lifetime in submission</title>
<para>The job will definitely be terminated when the lifetime expires regardless
of the status of the job. A client can however extend the lifetime before the
lifetime expires (restricted by maxJobLifetime if set > -1 by the admin).
If a client specifies a termination time in the past or a termination time that
exceeds maxJobLifetime an UnableToSetTerminationTimeFault is thrown by
MJFS.createManagedJob()</para>
<para>Using the C-client globusrun-ws you can set a lifetime for a job in 2 ways.
The first example shows how to set a relative lifetime, i.e. the job will expire
in 48h from now:</para>
<screen>globusrun-ws -submit -term "+48:00" -b -o myJob.epr -f myJob.xml</screen>
<para> The second example shows how to set an absolute lifetime. The job
will expire at the given date:</para>
<screen>globusrun-ws -submit -term "10/23/2008 12:00" -b -o myJob.epr -f myJob.xml</screen>
<para>In both example the job had been submitted in batch mode, which makes sense
for longer running jobs. For more information about globusrun-ws see
<olink targetdoc="gram4User" targetptr="gram4-cmd">here</olink>.</para>
</section>
 
<section id="gram4-user-lifetime-scenario3">
<title>Setting a new lifetime on an existing job</title>
<para>In case a requested new termination time conflicts with the maxJobLifetime
setting provided by an admin a TerminationTimeRejectedException is thrown. The
following example shows how to set a new termination time of a job resource (assuming
that the Endpoint Reference (EPR) of the job is stored in the file
<computeroutput>myJob.epr</computeroutput>). The new lifetime is provided in
seconds (604800 in this example [one week]):</para>
<screen>[martin@osg-test1 ~]$ wsrf-set-termination-time -e myJob.epr 604800</screen>
<para>The output could be something like this:</para>
<screen>requested: Tue May 13 09:27:15 CDT 2008
scheduled: Tue May 13 09:27:15 CDT 2008</screen>
</section>

</section>
</chapter>

<chapter id="gram4-user-jobholdandrelease">
<title>Job hold and release</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>hold and release</secondary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>hold and release</secondary></indexterm>
<para>
    It is possible to specify in a job description that the job be 
    put on hold when it reaches a chosen state (see <olink targetdoc="executionKey"
    targetptr="execution-approach">GRAM Approach</olink>
    documentation for more information about the executable 
    job state machine, and see the<ulink url="../schemas/mj_types.html#element_holdState"> job
    description XML schema documentation</ulink> for information about how to specify a held
    state).
    This is useful for instance when a GRAM client wishes to directly 
    access output files written by the job (as opposed to waiting for 
    the stage-out step to transfer files from the job host). The client would  
    request that the file cleanup process be held until released, 
    giving the client an opportunity to fetch all remaining/buffered 
    data after the job completes but <emphasis>before</emphasis> the output files are 
    deleted. </para>
    <para>
    This is used by <computeroutput>globusrun-ws</computeroutput> in order to ensure client-side 
    streaming of remote files in batch mode.
    </para>
    <para>Valid hold states are:</para>
    <itemizedlist>
      <listitem><simpara>StageIn</simpara></listitem>
      <listitem><simpara>StageOut</simpara></listitem>
      <listitem><simpara>CleanUp</simpara></listitem>
      <listitem><simpara>Pending</simpara></listitem>
    </itemizedlist>
    
    <para>The following job description (later referred to by job.xml) shows
      how to specify a hold state in the job description:
    </para>
    <screen>&lt;job&gt;
    &lt;holdState&gt;CleanUp&lt;/holdState&gt;
    &lt;executable&gt;/bin/date&lt;/executable&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;fileCleanUp&gt;
        &lt;deletion&gt;
            &lt;file&gt;gsiftp://osg-test1.unl.edu:2811/${GLOBUS_USER_HOME}/stdout&lt;/file&gt;
        &lt;/deletion&gt;
        &lt;deletion&gt;
            &lt;file&gt;gsiftp://osg-test1.unl.edu:2811/${GLOBUS_USER_HOME}/stderr&lt;/file&gt;
        &lt;/deletion&gt;
    &lt;/fileCleanUp&gt;
&lt;/job&gt;
    </screen>

    <para>Submitting the job in batch mode:</para>
    <screen>[martin@osg-test1 tmp]$ globusrun-ws -submit -S -f myJob.xml -b -o myJob.epr
Delegating user credentials...Done.
Submitting job...Done.
Job ID: uuid:837941d4-1085-11dd-b401-0013d4c3b957
Termination time: 04/22/3008 16:02 GMT
[martin@osg-test1 tmp]$</screen>

    <para>Checking for status:</para>
    <screen>[martin@osg-test1 tmp]$ globusrun-ws -status -j myJob.epr
Current job state: CleanUp-Hold
[martin@osg-test1 tmp]$</screen>
    <para>Releasing the job:</para>
    <screen>globusrun-ws -release -j myJob.epr</screen>

    <para>Checking for status after the release:</para>    
    <screen>[martin@osg-test1 tmp]$ globusrun-ws -status -j myJob.epr
Current job state: Done</screen>

    <para>Removing the job:</para>    
    <screen>[martin@osg-test1 ~]$ globusrun-ws -kill -j myJob.epr
Requesting original job description...Done.
Destroying job...Done.</screen>

</chapter>

<chapter id="gram4-user-submissionid">
<title>Client-Side Generated Submission ID</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>submission ID</secondary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>submission ID</secondary></indexterm>
    <para>
      A submission ID may be used in the GRAM protocol for reliability in the face
      of message faults or other transient errors in order to ensure that at most
      one instance of a job is executed, i.e. to prevent accidental duplication of
      jobs under rare circumstances with client retry on failure. By default, the
      <glossterm>globusrun-ws</glossterm> program will generate a submission ID
      (<glossterm baseform="Universally Unique Identifier">uuid</glossterm>).
      One can override this behavior by supplying a submission ID as a command
      line argument.
    </para>
    <para>
      If a user is unsure whether a job was submitted successfully, he
      should resubmit using the same ID as was used for the previous attempt.
      If the job had already been accepted by the container in the first submission
      no new job is started but the Endpoint Reference of the first job is returned
      back to the client.
    </para>
    <para>
      Note that the client-generated submission ID is <emphasis>not</emphasis> the
      ID GRAM4 uses for the job on the server-side. GRAM4 internally generates it's
      own UUID for the job to circumvent the risk of potentially problematic
      client-side submission IDs. 
    </para>
    <para>
      The client-generated submission ID shows up in all server-side logs
      (container-log, CEDPS-Troubleshooting admin log, records in the audit
      database) and is linked with the server-side job UUID.
      This enables debugging in situations where the user only knows about the
      client-side generated submission ID.
    </para>
</chapter>

<chapter id="gram4-user-softenv">
    <title>Specifying SoftEnv keys in the job description</title>
<indexterm type="gram4"><primary>jobs</primary><secondary>SoftEnv keys</secondary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>SoftEnv keys</secondary></indexterm>
     <para>
    For a short introduction to SoftEnv please have a look at the
    <olink targetdoc="gram4Admin" targetptr="gram4-softenv">SoftEnv
      chapter</olink>.
  </para>
  <para>
    If SoftEnv is enabled on the server-side, nothing needs to be added to a job
    description to set up the environment which is specified in the
    <computeroutput>.soft</computeroutput> file in the remote home directory of
    the user before the job is submitted to the scheduler.</para>
   
  <para>If a different software
    environment should be used than the one specified in the remote
    <computeroutput>.soft</computeroutput> file, the user must provide 
    SoftEnv parameters in the extensions element of the job
    description. </para>
    
  <para>The schema of the extension element for software selection
    in the job description is as follows:
  </para>
  <screen>&lt;element name="softenv" type="xsd:string"&gt;</screen>
  <para>  
    For example, to add the SoftEnv commands <command>@teragrid-basic</command>,
    <command>+intel-compilers</command>, <command>+atlas</command>, and <command>+tgcp</command> to the job process'
    environment, the user would specify the following <computeroutput>&lt;extensions&gt;</computeroutput> element
    in the job description:
  </para>
  <screen>&lt;extensions&gt;
  &lt;softenv&gt;@teragrid-basic&lt;/softenv&gt;
  &lt;softenv&gt;+intel-compilers&lt;/softenv&gt;
  &lt;softenv&gt;+atlas&lt;/softenv&gt;
  &lt;softenv&gt;+tgcp&lt;/softenv&gt;
&lt;/extensions&gt;</screen>
  <para>
    So far there is no way for a user to learn from the remote service
    itself whether or not SoftEnv support is enabled. Currently, the only way to check this is to submit a job 
    with <computeroutput>/bin/env</computeroutput> as the executable and watch the results.
  </para>
  
  <para>The following table describes what happens in various scenarios if SoftEnv is disabled or enabled on the server side:</para>
  
  <informaltable>
    <tgroup cols="3">
      <thead>
        <row>
          <entry>&nbsp;</entry>
          <entry>Disabled on server side</entry>
          <entry>Enabled on server side</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><para><emphasis role="strong">User provides no SoftEnv extensions:</emphasis></para></entry>
          <entry>
            <para>No SoftEnv environment is configured before job submission, even
            if the user has a <computeroutput>.soft</computeroutput> file in their
              remote home directory.</para>
          </entry>
          <entry>
            <para>If the user has a <computeroutput>.soft</computeroutput> file (and no
            <computeroutput>.nosoft</computeroutput> file) in their remote home directory,
            then the environment defined in the <computeroutput>.soft</computeroutput>
              file will be configured before job submission.</para>
            <para>If the user has a <computeroutput>.nosoft</computeroutput> file in their remote
            home directory, no environment will be prepared.
          </para></entry>
        </row>
        
        <row>
          <entry><para><emphasis role="strong">User provides valid SoftEnv extensions:</emphasis></para></entry>
          <entry>
            <para>
              If SoftEnv is not installed on the server then no environment
              will be configured
            </para>
            <para>
              If SoftEnv is installed, the environment the user specifies in the <computeroutput>&lt;extensions&gt;</computeroutput>
              elements overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              The environment will be configured as specified by the user in the 
              <computeroutput>&lt;extensions&gt;</computeroutput> elements before job submission.
            </para>     
          </entry>
          <entry>
            <para>
              The specified environment overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or a 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              The environment will be configured as specified by the user in the 
              <computeroutput>&lt;extensions&gt;</computeroutput> elements before job submission.
            </para>
          </entry>
        </row>
  
        <row>
          <entry><para><emphasis role="strong">User provides invalid SoftEnv extensions:</emphasis></para></entry>
          <entry>
            <para>
              If SoftEnv is not installed on the server, then no environment
              will be configured.
            </para>
            <para>
              If SoftEnv is installed, the environment the user specifies in the <computeroutput>&lt;extensions&gt;</computeroutput>
              elements overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or a 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              Only the valid keys in the SoftEnv <computeroutput>&lt;extensions&gt;</computeroutput> elements will be configured.
              If no valid key is found, no environment will be configured.
              SoftEnv warnings are logged to the stdout of the job.
            </para>
          </entry>
          <entry>
            <para>
              The specified environment overwrites any SoftEnv configuration the user
              specifies in a <computeroutput>.soft</computeroutput> or a 
              <computeroutput>.nosoft</computeroutput> file in their remote home directory.
              Only the valid keys in the SoftEnv <computeroutput>&lt;extensions&gt;</computeroutput> elements will be configured.
              If no valid key is found, no environment will be configured.
              SoftEnv warnings are logged to stdout of the job.
            </para>
          </entry>
        </row>
        
        <row>
          <entry>&nbsp;</entry>
          <entry>
            <para>
              In general, jobs do not fail if they have SoftEnv extensions in their description and SoftEnv is disabled (or not even installed) 
              on the server side. But they will fail if they rely on environments being set up before job submission.
            </para>
          </entry>
          <entry>
            &nbsp;
          </entry>
        </row>
      </tbody>
    </tgroup>
    </informaltable>
  
<note>
  <para>In the current implementation, it is not possible to call executables
    directly whose paths are defined in SoftEnv without specifiying the
    complete path to the executable.
  </para>

  <para>
    For example, if a database query must
    be executed using the
    <command>mysql</command> command and <command>mysql</command> is not in the default path, then the direct use of
    mysql as an executable in the jobs description document will fail, even if
    the use of SoftEnv is configured. The <command>mysql</command> command must be written to a
    script which is in the default path. </para>
    
  <para>Thus a job submission with the
    following job description document will fail:
  </para>
  <screen>
&lt;job&gt;
  ...
  &lt;executable&gt;mysql&lt;/executable&gt;
  ...
&lt;/job&gt;
  </screen>
  <para>
    But when the command is embedded inside a shell script which is
    specified as the executable in the job description document, it will work:
  </para>
  <screen>
#!/bin/sh
  ...
  mysql ...
    ...
  </screen>
</note>
  
<note>
  <para>The use of invalid SoftEnv keys in the extension part of the job
    description document does not generate errors.
  </para>
</note>
  
  <!--
  <section>
    <title>Open Questions</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>
            What about the packages  for Condor and PBS on
            <ulink url="http://www.globus.org/toolkit/downloads/development/">
            http://www.globus.org/toolkit/downloads/development/</ulink>?
          </para>
        </listitem>
        <listitem>   
          <para>
            Is the extension package globus_gram_job_manager_scripts-0.3
            now part of a the software or must it be downloaded separately?
          </para>
        </listitem>
        <listitem>
          <para>Provide link to SoftEnv?</para>
        </listitem>
        <listitem>
          <para>
            What about the predefined softenv key in the JNDI configuration?
            Is it already there? I can't find it in JNDI.
            (<ulink url="http://bugzilla.mcs.anl.gov/globus/show_bug.cgi?id=4207">
            http://bugzilla.mcs.anl.gov/globus/show_bug.cgi?id=4207</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>  
            I can't see that the mappings added to the
            idempotenceIdMap are removed at any time. Should we add this in
            the remove()-method of the MEJR?
          </para>
        </listitem>
      </itemizedlist>
    </para>
   </section>
   -->
 
</chapter>

<chapter id="gram4-user-jobandprocessrendezvous">
<title>Job and process rendezvous</title>
  <indexterm type="gram4"><primary>jobs</primary><secondary>rendezvous</secondary></indexterm>
        <indexterm type="gram4-howto"><primary>jobs</primary><secondary>rendezvous</secondary></indexterm>
<para>GRAM4 services implement a <ulink url="../../wsrendezvous/">WS Rendezvous</ulink>
    mechanism to perform synchronization between job processes in a multiprocess job and 
    between subjobs in a multijob. The job application can in fact register binary information, for 
    instance process information or subjob information, and get notified when 
    all the other processes or subjobs have registered their own information.
    This is for instance useful for parallel jobs which need to rendezvous 
    at a "barrier" before proceeding with computations, in the case when no 
    native application API is available to help do the rendezvous.</para>
</chapter>
    
    
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Interface_Commandline_Frag.xml"/>

<!-- n/a 
<chapter id="gram4-user-gui">
<title>Graphical user interfaces</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Interface_GUI_Frag.xml"/>
</chapter>
    -->

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Troubleshooting_Frag.xml"/>

<chapter id="gram4-user-knownproblems"><title>Known Problems in GRAM4</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Known_Problems_Frag.xml"/>
</chapter>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GRAM4_Usage_Statistics_Frag.xml"/>

    <glossary role="auto" id="glossary-gram4User">
        <!-- 
        <remark>some terms not in the docs but wanted in glossary: 
        <glossterm>scheduler</glossterm>
        </remark>
        -->
        <glossdiv><title>A</title>
            <glossentry>
                <glossterm>Dummy term</glossterm>
                <glossdef>
                    <para>This is a dummy entry for the automatic glossary database. Do not edit.</para>
                </glossdef>
            </glossentry>
        </glossdiv>
    </glossary>
    <index type="gram4">
    <title>Index</title>
</index>
</book>
