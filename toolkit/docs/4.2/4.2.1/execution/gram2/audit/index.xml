<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<article id="gram2Audit"><title>Audit Logging in GRAM2</title>
   <section id="gram2-audit-logging-overview"><title>Overview</title>

      <para>
      GRAM2 includes mechanisms to provide access to audit and
        accounting information associated with jobs that GRAM2 submits to a local
      resource manager (LRM) such as PBS, LSF, or Condor.</para>
     
     <note> <para>Remember, GRAM is not a local resource manager but rather a protocol engine for
      communicating with a range of different local resource managers using a
      standard message format.</para></note>
     
      <para>In some scenarios, it is desirable to get general information about the usage of the
      underlying LRM, such as:</para>
      <itemizedlist>
         <listitem><para>What kinds of jobs were submitted via GRAM?</para></listitem>
         <listitem><para>How long did the processing of a job take?</para></listitem>
         <listitem><para>How many jobs were submitted by user X?</para></listitem>
      </itemizedlist>
     <para> The following three use cases give a better overview of the meaning and
      purpose of auditing and accounting:</para>
      <orderedlist>
         <listitem><para>
           <emphasis role="bold">Group Access</emphasis>.
           A grid resource provider allows a remote service (e.g.,
           a gateway or portal) to submit jobs on behalf of multiple users. The
           grid resource provider only obtains information about the identity of
           the remote submitting service and thus does not know the identity of
           the users for which the grid jobs are submitted. This group access is
           allowed under the condition that the remote service stores audit
           information so that, if and when needed, the grid resource provider
           can request and obtain information to track a specific job back to an
           individual user.
         </para></listitem>
         <listitem><para>
           <emphasis role="bold">Query Job Accounting</emphasis>.
           A client that submits a job needs to be able to
           obtain, after the job has completed, information about the resources
           consumed by that job. In portal and gateway environments where many
           users submit many jobs against a single allocation, this per-job
           accounting information is needed soon after the job completes so that
           client-side accounting can be updated. Accounting information is
           sensitive and thus should only be released to authorized parties.
         </para></listitem>
         <listitem><para>
           <emphasis role="bold">Auditing</emphasis>.
           In a distributed multi-site environment, it can be
           necessary to investigate various forms of suspected intrusion and
           abuse. In such cases, we may need to access an audit trail of the
           actions performed by a service. When accessing this audit trail, it
           will frequently be important to be able to relate specific actions
           to the user.
         </para></listitem>
      </orderedlist>

     <para>The audit record of a job is stored at the end of the processing cycle of a job - either when it is completely
     processed or failed.</para>
</section>
       <section><title>Audit and Accounting Records</title>
         
    <para>
           While audit and accounting records may be generated and stored by
           different entities in different contexts, we make the following assumptions in this chapter:</para>

         <informaltable>
           <tgroup cols="3">
             <thead>
               <row>
                 <entry>&nbsp;</entry>
                 <entry>Audit Records</entry>
                 <entry>Accounting Records</entry>
                 </row>
               </thead>
             <tbody>
               <row>
                 <entry>Generated by:</entry>
                 <entry>GRAM service</entry>
                 <entry>LRM to which the GRAM service submits jobs</entry>
               </row>
               <row>
                 <entry>Stored in:</entry>
                 <entry>Database, indexed by GJID</entry>
                 <entry>LRM, indexed by JID</entry>
               </row>
               <row>
                 <entry>Data that is stored:</entry>
                 <entry>See list below.</entry>
                 <entry>May include all information about the duration and resource-usage of a job</entry>
               </row>
             </tbody>
           </tgroup>
           </informaltable>
      <para>
        The audit record of each job contains the following data:</para>
      <itemizedlist>
        <listitem><para>
          <emphasis role="strong">job_grid_id</emphasis>:
          String representation of the resource EPR
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">local_job_id</emphasis>:
          Job/process id generated by the scheduler
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">subject_name</emphasis>:
          Distinguished name (DN) of the user
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">username</emphasis>:
          Local username
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">idempotence_id</emphasis>:
          Job id generated on the client-side
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">creation_time</emphasis>:
          Date when the job resource is created
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">queued_time</emphasis>:
          Date when the job is submitted to the scheduler
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">stage_in_grid_id</emphasis>:
          String representation of the stageIn-EPR (RFT)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">stage_out_grid_id</emphasis>:
          String representation of the stageOut-EPR (RFT)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">clean_up_grid_id</emphasis>:
          String representation of the cleanUp-EPR (RFT)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">globus_toolkit_version</emphasis>:
          Version of the server-side GT
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">resource_manager_type</emphasis>:
          Type of the resource manager (Fork, Condor, ...)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">job_description</emphasis>:
          Complete job description document
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">success_flag</emphasis>:
          Flag that shows whether the job failed or finished successfully
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">finished_flag</emphasis>:
          Flag that shows whether the job is already fully processed or
          still in progress
        </para></listitem>
      </itemizedlist>
       </section>
     
     <section id="gram2-audit-logging-gjid"><title>GJID</title>
      <para>  
        The GRAM2 service returns a "job contact" that is used to control the job. The job contact, by default, is already 
        in an acceptable GJID format; therefore, the GRAM2 client and service do not need to convert it in any way.
      </para>
     </section>
     
<section><title>Accessing Audit and Accounting Information</title>
      <para>
        To connect the two sets of records, both audit and accounting,
        we require that GRAM records the JID in each audit record that it
        generates. It is then straightforward for an audit service to respond
        to requests such as &quot;Give me the charge of the job with JID x&quot;  by:
          
         <orderedlist> 
           <listitem><para>first selecting matching record(s) from the audit table, </para></listitem>
           <listitem><para>then using the local JID(s) to join to the accounting table of the LRM and access relevant accounting record(s).</para></listitem></orderedlist>
      </para>
      <para>
        We propose a Web Service interface for accessing audit and accounting
          information.  <ulink url="http://www.globus.org/toolkit/docs/4.0/techpreview/ogsadai/">OGSA-DAI</ulink> 
          is a WSRF service that can create a single
        virtual database from two or more remote databases. 
        In the future, other per-job information such as job performance data
        could be stored using the GJID or local JID as an index, and then made
        available in the same virtual database.</para>
</section>

<section><title>For More Information</title>       
  <para>The rest of this chapter focuses on how to configure GRAM2 to enable
        Audit Logging. A case study for TeraGrid can be read
        <ulink url="http://www.teragridforum.org/mediawiki/index.php?title=GRAM4_Audit">
            here</ulink>, which also includes more information about how to use this data to get accounting
           information of a job, query the audit database for information
           via a Web Services interface, etc.
      </para>
</section>

<section id="gram2-audit-logging-funct"><title>Functionality</title>
  <para>Audit logging in GRAM2 is realized in the following way:</para>
  <orderedlist>
  <listitem><para>The job manager writes a file to disk for each job. This file contains the audit record. 
    The format of an audit record file that is logged to the database is a comma-separated list of double-quoted strings.</para></listitem>
  
  <listitem><para>The audit records are not inserted into the GRAM audit database directly. The job manager will, 
    at final job termination (FAILED or DONE state), write a record to a unique file in a directory specified by a configuration file. 
    These audit files must be uploaded by a program which can be called manually or be run periodically as a cron job. 
    The program is a perl script and is located in <filename>${GLOBUS_LOCATION}/libexec/globus-gram-audit</filename> and 
    creates audit records in the configured database from the user audit files. Once the record is uploaded, the program will 
    remove the audit file.</para></listitem>
  </orderedlist>
  <para>Here's an example on how a crontab entry must look like in order to run the script every 15 minutes:</para>
  
  <screen>0,15,30,45 * * * * ${GLOBUS_LOCATION}/libexec/globus-gram-audit</screen>
  
  <para>The script gets the necessary parameters to connect to the database from the configuration file 
    <filename>${GLOBUS_LOCATION}/etc/globus-job-manager-audit.conf</filename>, which is described below.</para>
  
  <para>You may notice that this method is different than that used for GRAM4. GRAM4 writes audit records directly to the audit database.  
    This is done because only a single account (the container account) may be given access to the DB.  
  The container account is already trusted, so this is reasonable for GRAM4.</para>  
  
  <para>In GRAM2, the Job Manager process writes the audit records.  However, this process runs under the user's account; opening up access to the 
    audit database for each user is <emphasis>not</emphasis> acceptable.</para>   
  
  <para>Therefore, the Job Manager writes the audit record to a file.  Then a single database upload program, running under the same GRAM4 
    container account (e.g. globus), can first verify that the owner of the GRAM2 audit file and the username field in the audit record match.  
  This prevents users from interfering with other users' audit records.</para>
</section>

  <section id="gram2-audit-logging-config"><title>Configuration to enable audit logging</title>
    <para>Audit logging is turned off by default. To turn on Audit Logging, follow these steps:</para>
    
    <section><title>Configure Audit Record Directory</title>
      <para>Add the following line to <filename>$GLOBUS_LOCATION/etc/globus-job-manager.conf</filename>:</para>
     <screen> -audit-directory &lt;your desired audit record directory&gt;</screen>
    </section>
    
    <section><title>Create Audit Record Directory</title>
      <para>Create the audit record directory specified in the above configuration file with the following permissions:</para>
      <screen>rws-wsrwx</screen>
    </section>
    
    <section><title>Database configuration</title>
      
      <para>Edit <filename>$GLOBUS_LOCATION/etc/globus-job-manager-audit.conf</filename> to include the correct database connection parameters. For example::</para>
      <screen>DRIVERCLASS:com.mysql.jdbc.Driver
USERNAME:john
PASSWORD:foo
URL:jdbc:mysql://myhost/auditDatabase
AUDITVERSION:1</screen>
     <para>
      We support 3 database systems: MySQL, PostgreSQL, Derby.
      The following table gives an overview which values must be used for
      the parameters url and driverClassName in the above JNDI configuration
      for the various db systems. Derby is configured as the default DB system.
      <informaltable>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>DB system</entry>
            <entry>driverClassName</entry>
            <entry>url</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>MySQL</entry>
            <entry>com.mysql.jdbc.Driver</entry>
            <entry>jdbc:mysql://HOST[:PORT]/auditDatabase</entry>
          </row>
          <row>
            <entry>PostgreSQL</entry>
            <entry>org.postgresql.Driver</entry>
            <entry>jdbc:mysql://HOST[:PORT]/auditDatabase</entry>
          </row>
          <row>
            <entry>Derby</entry>
            <entry>org.apache.derby.jdbc.EmbeddedDriver</entry>
            <entry>jdbc:derby:directory:PATH_TO_GLOBUS_LOCATION/var/gram/auditDatabase</entry>
          </row>
        </tbody>
      </tgroup>
      </informaltable>
      </para>
      <para>
         Don't change the parameter AUDITVERSION for now. In future releases we'll
         support more than one version.
      </para>
     
    </section>
    
    <section><title>Creating the Audit Database</title>
         <para>
           Audit records are stored in a database which must be set up once.
         </para>
      
         <section><title>MySQL</title>
          <para>
            The following describes how to set up the audit database in MySQL:
          </para>
          <orderedlist>
            <listitem>
              <para>Create a database inside of MySQL</para>
            </listitem>
            <listitem>
              <para>
                Grant necessary privileges to the account that will be used
                to upload the audit records in the audit. Typically the "globus"
                account.
              </para>
            </listitem>
            <listitem>
              <para>Use the schema to create the table</para>
            </listitem>
          </orderedlist>
          <screen>host:~ feller$ mysql -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 5.0.37 MySQL Community Server (GPL)

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; create database auditDatabase;
Query OK, 1 row affected (0.09 sec)
 
mysql&gt; GRANT ALL ON auditDatabase.* to globus@localhost identified by "foo";
Query OK, 0 rows affected (0.32 sec)

mysql&gt; exit
Bye
host:~ feller$ mysql -u globus -p auditDatabase &lt; ${GLOBUS_LOCATION}/share/globus_wsrf_gram/gram_audit_schema_mysql.sql 
Enter password: 
host:~ feller$</screen>
        </section>
      
        <section><title>PostgreSQL</title>
          <para>
            The following describes how to set up the audit database in PostgreSQL:
          </para>
          <orderedlist>
            <listitem>
              <para>Create a database inside of PostgreSQL</para>
            </listitem>
            <listitem>
              <para>
                Grant necessary privileges to the account that will be used
                to upload the audit records in the audit. Typically the "globus"
                account.
              </para>
            </listitem>
            <listitem>
              <para>Use the schema to create the table:</para>
            </listitem>
          </orderedlist>
          <screen># Connect as postgres admin
create database gt4audit\g
create user gt4auditload with encrypted password '&lt;password1&gt;'\g
create user gt4auditview with encrypted password '&lt;password2&gt;'\g
\c gt4audit
\i gram_audit_schema_postgres-8.0.sql
grant insert on gram_audit_table to gt4auditload\g
grant select on gram_audit_table to gt4auditview\g
\q</screen>
          <para>
            You must also update <filename>pg_hba.conf</filename> to allow
            connections from container host (<filename>pg_hba.conf</filename>
            configures client authentication and is
            stored in the database cluster's data directory):
          </para>
          <screen>hostssl   gt4audit  gt4auditload   &lt;containerhostip&gt; 255.255.255.255 md5
host      gt4audit  gt4auditload   &lt;containerhostip&gt; 255.255.255.255 md5
hostssl   gt4audit  gt4auditview   &lt;containerhostip&gt; 255.255.255.255 md5
host      gt4audit  gt4auditview   &lt;containerhostip&gt; 255.255.255.255 md5</screen>
        </section>

        <section><title>Derby</title>
          <para>
            During GT installation the Derby audit database is already
            created. It's location is
            <computeroutput>${GLOBUS_LOCATION}/var/gram/auditDatabase</computeroutput>.
            If you ever have to create it manually, make sure that this directory does
            not exist and then call
            <computeroutput>${GLOBUS_LOCATION}/setup/globus/setup-gram-service-database</computeroutput>.
            The user and password information can be found in
            <computeroutput>${GLOBUS_LOCATION}/share/globus_wsrf_gram/gram_audit_v1_schema_derby.sql</computeroutput>.
          </para>
        </section>

      </section>
    
  </section>
</article>