<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<book id="infoKey">
  <title>Key Concepts for Information Services</title>
  <titleabbrev>Key Concepts</titleabbrev>

  <bookinfo id="info-key-overview">
    <abstract>
      <title>Overview</title>

      <para>
        <emphasis>Note:</emphasis> If you have not done so already, we recommend reading the <olink
          targetdoc="key">GT4 Primer</olink> before continuing. Also keep in mind that in this
        documentation, the concepts of MDS are written for the latest version, <emphasis>WS
        MDS</emphasis> (also known as <emphasis>WS MDS</emphasis>). The GT <replaceable role="entity"
          >version</replaceable> release has deprecated the Pre-WS component,
        <emphasis>MDS2</emphasis>.</para>
      <para>The <emphasis>Monitoring and Discovery System (MDS)</emphasis> is a suite of web
        services to monitor and discover resources and services on Grids. This system allows users
        to discover what resources are considered part of a <emphasis>Virtual Organization
        (VO)</emphasis> and to monitor those resources. MDS services provide query and subscription
        interfaces to arbitrarily detailed resource data and a trigger interface that can be
        configured to take action when pre-configured trouble conditions are met. The services
        included in WS MDS acquire their information through an extensible interface which can be used
        to:</para>
      <para>
        <itemizedlist>
          <listitem>
            <simpara> query WSRF services for resource property information,</simpara>
          </listitem>
          <listitem>
            <simpara> execute a program to acquire data, or </simpara>
          </listitem>
          <listitem>
            <simpara>interface with third-party monitoring systems.</simpara>
          </listitem>
        </itemizedlist>
      </para>
      <para>Grid computing resources and services can advertise a large amount of data for many
        different use cases. WS MDS was specifically designed to address the needs of a Grid
        monitoring system &ndash; one that publishes data that is available to multiple people
        at multiple sites. As such, it is not an event handling system, like NetLogger, or a cluster
        monitor on its own, but can interface to more detailed monitoring systems and archives, and
        can publish summary data using standard interfaces. </para>
    </abstract>
  </bookinfo>

  <chapter id="info-key-mds4-services">
    <title> WS MDS Aggregator Services</title>
    <para>WS MDS includes two WSRF-based services: an <emphasis>
        <olink targetdoc="index">Index Service</olink>
      </emphasis>, which collects data from various sources and provides a query/subscription
      interface to that data, and a <emphasis>
        <olink targetdoc="trigger">Trigger Service</olink>
      </emphasis>, which collects data from various sources and can be configured to take action
      based on that data. An <emphasis>Archive Service</emphasis>, which will provide access to
      historic data, is planned for a future release. </para>
    <section>
      <title>Index Service</title>
      <para>The Index Service is a registry similar to UDDI, but much more flexible. Indexes collect
        information and publish that information as <emphasis>resource properties</emphasis>.
        Clients use the standard WSRF resource property query and subscription/notification
        interfaces to retrieve information from an Index. Indexes can register to each other in a
        hierarchical fashion in order to aggregate data at several levels. Indexes are
        &ldquo;self-cleaning&rdquo;; each Index entry has a lifetime and will be removed
        from the Index if it is not refreshed before it expires.</para>
      <para>Each Globus container that has WS MDS installed will automatically have a default Index
        Service instance. By default, any GRAM, RFT, or CAS service running in that container will
        register itself to the container&rsquo;s default Index Service.</para>
    </section>
    <section>
      <title>Trigger Service</title>
      <para>The Trigger Service collects information and compares that data against a set of
        conditions defined in a configuration file. When a condition is met, or triggered, an action
        takes place, such as emailing a system administrator when the disk space on a server reaches
        a threshold. </para>
    </section>
  </chapter>

  <chapter id="info-key-mds4-interfaces">
    <title> WS MDS Information Interfaces and Providers</title>
    <para>In addition to the services described above, WS MDS includes several additional software
      components, including an <emphasis>
        <olink targetdoc="aggregator">Aggregator Framework</olink>
      </emphasis>, which provides a unified mechanism used by the Index and Trigger services to
      collect data.</para>


    <section id="info-key-aggregator">
      <title>Aggregator Framework</title>
      <para>The Aggregator Framework is a software framework used to build services that collect and
        aggregate data. Services (such as the Index and Trigger services) built on the Aggregator
        Framework are sometimes called <emphasis>aggregator services</emphasis>, and have the
        following in common:</para>
      <itemizedlist>
        <listitem>
          <simpara> They collect information via <glossterm baseform="aggregator source">Aggregator
              Sources</glossterm>. An Aggregator Source is a Java class that implements an interface
            (defined as part of the Aggregator Framework) to collect XML-formatted data.</simpara>
        </listitem>
        <listitem>
          <simpara>They use a common configuration mechanism to maintain information about which
            Aggregator Source to use and its associated parameters (which generally specify what
            data to get, and from where). The Aggregator Framework WSDL defines an [aggregating
            service group entry type] that holds both configuration information and data.
            Administrative client programs use standard [WSRF Service Group registration mechanisms]
            to register these service group entries to the <glossterm baseform="aggregator services"
              >aggregator service</glossterm>.</simpara>
        </listitem>
        <listitem>
          <simpara>They are self-cleaning &ndash; each registration has a lifetime; if a
            registration expires without being refreshed, it and its associated data are removed
            from the server.</simpara>
        </listitem>
      </itemizedlist>
      <section>
        <title>Aggregator Sources</title>
        <para>WS MDS includes the following three Aggregator Sources: </para>
        <itemizedlist>
          <listitem>
            <simpara>the <emphasis>Query Aggregator Source</emphasis>, which polls a WSRF service
              for resource property information, </simpara>
          </listitem>
          <listitem>
            <simpara>the <emphasis>Subscription Aggregator Source</emphasis>, which collect data
              from a WSRF service via WSRF subscription/notification, </simpara>
          </listitem>
          <listitem>
            <simpara>the <glossterm baseform="execution aggregator source">Execution Aggregator
                Source</glossterm>, which executes an administrator-supplied program to collect
              information.</simpara>
          </listitem>
        </itemizedlist>
        <para>Note: The query and subscription sources are most useful with web-service-based
          resources, whereas the execution source is useful for non-web-service-based resources.</para>
        <para>[graphic with flow of info?]</para>
        <para>Note: All aggregator sources listed in this table are in the
          org.globus.mds.aggregator.impl package, so for example the aggregator source listed as
          QueryAggregatorSource is actually org.globus.mds.aggregator.impl.QueryAggregatorSource.</para>

        <section>
          <title>Query Source</title>

          <para>The query source collects information from a registered resource by using
            WS-Resource Properties polling mechanisms:</para>
          <itemizedlist>
            <listitem>
              <para>GetResourcePropertyPollType: requests a single Resource Property from the Grid
                resource.</para>
            </listitem>
            <listitem>
              <para>GetMultipleResourcePropertiesPollType: requests multiple Resource Properties
                from the Grid resource.</para>
            </listitem>
            <listitem>
              <para>QueryResourcePropertiesPollType: requests a query be executed against the
                Resource Property Set of the Grid resource. </para>
            </listitem>
          </itemizedlist>
          <para>The query source will attempt to detect when the data source EPR is local to the
            current container instance, and if so, set the connection properties to use local
            transport.</para>

          <para>Polls are made periodically, with both the period and target Resource Properties
            specified in the registration message.</para>
           <!-- FIXME: Real world example (story not tutorial) - and when would somebody use this?-->
        </section>
        <section>
          <title>Subscription Source</title>

          <para>The subscription source gathers resource property values from the registered
            resource using WS-Notification subscriptions. Data is delivered when property values
            change, rather than periodically.</para>

          <para>The subscription source will attempt to detect when the data source EPR is local to
            the current container instance, and, if so, set the connection properties to use local
            transport.</para>

          <!--  [FIXME: Real world example (story not tutorial)]-->
        </section>
        <section>
          <title>Execution Source</title>

          <para>The execution source provides a way to aggregate data (arbitrary XML information)
            about a registered resource using an arbitrary local executable (such as an external
            script). The executable will be passed registration information as parameters and is
            expected to output the gathered data.</para>

          <para>A basic example of the use of this API is described in the [ping test example] for
            the aggregator execution source.</para>

          <para>The execution aggregation source will periodically execute an identified executable.
            The identity of the executable and the frequency with which it is to run are specified
            in the registration message.</para>

          <para>Details of the interface between the execution source and local executables are in
            <olink targetdoc="aggregatorSources" targetptr="aggregator-sources-execution">Configuring Execution Aggregator Source</olink>.</para>

          <!-- [FIXME: Real world example (story not tutorial) ]  -->
        </section>
      </section>
    </section>

    <section id="info-key-info-providers">
      <title> Information Providers</title>
      <para>Depending on the implementation, an Aggregator Source may use an external software
        component (for example, the Execution Aggregator Source uses an executable program), or a
        WSRF service may use an external component to create and update its resource properties
        (which may then be registered to an Index or other aggregator service, using the Query or
        Subscription Aggregator Source). We refer to this set of components as <emphasis>Information
          Providers</emphasis>.</para>
      <para> Currently, WS MDS includes the following sources of information: </para>
      <itemizedlist>
        <listitem>
          <para><emphasis>Hawkeye Information Provider</emphasis>: An Information Provider that
            gathers <glossterm>Hawkeye</glossterm> data about Condor pool resources using the XML
            mapping of the GLUE schema and reports it to a GRAM4 service, which publishes it as
            resource properties. This information includes: <itemizedlist>
              <listitem>
                <simpara> basic host data (name, ID)</simpara>
              </listitem>
              <listitem>
                <simpara>processor information</simpara>
              </listitem>
              <listitem>
                <simpara>memory size</simpara>
              </listitem>
              <listitem>
                <simpara>OS name and version</simpara>
              </listitem>
              <listitem>
                <simpara>file system data</simpara>
              </listitem>
              <listitem>
                <simpara>processor load data</simpara>
              </listitem>
              <listitem>
                <simpara>other basic Condor host data. </simpara>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para><emphasis>Ganglia Information Provider</emphasis>: An Information Provider that
            gathers cluster data from resources running <glossterm>Ganglia</glossterm> using the XML
            mapping of the GLUE schema and reports it to a GRAM4 service, which publishes it as
            resource properties. This information includes: <itemizedlist>
              <listitem>
                <simpara> basic host data (name, ID)</simpara>
              </listitem>
              <listitem>
                <simpara> memory size</simpara>
              </listitem>
              <listitem>
                <simpara> OS name and version</simpara>
              </listitem>
              <listitem>
                <simpara> file system data</simpara>
              </listitem>
              <listitem>
                <simpara> processor load data</simpara>
              </listitem>
              <listitem>
                <simpara> other basic cluster data. </simpara>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para><emphasis>GRAM4</emphasis>: The job submission service component of GT4. This WSRF
            service publishes information about the local scheduler, including: <itemizedlist>
              <listitem>
                <simpara> queue information</simpara>
              </listitem>
              <listitem>
                <simpara> number of CPUs available and free</simpara>
              </listitem>
              <listitem>
                <simpara> job count information</simpara>
              </listitem>
              <listitem>
                <simpara>some memory statistics. </simpara>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <para><emphasis>Reliable File Transfer Service (RFT)</emphasis>: The file transfer service
            component of GT4. This WSRF service publishes: <itemizedlist>
              <listitem>
                <simpara> status data of the server</simpara>
              </listitem>
              <listitem>
                <simpara> transfer status for a file or set of files</simpara>
              </listitem>
              <listitem>
                <simpara> number of active transfers</simpara>
              </listitem>
              <listitem>
                <simpara> some status information about the resource running the service. </simpara>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
        <listitem>
          <simpara><emphasis>Community Authorization Service (CAS)</emphasis> This WSRF services
            publishes information identifying the VO that it serves.</simpara>
        </listitem>
        <listitem>
          <simpara>Any other WSRF service that publishes resource properties. Note: In addition to
            any other resource properties, GT4 services publish a basic
              <computeroutput>ServiceMetaDataInfo</computeroutput> element that includes start time,
            version, and service type name.</simpara>
        </listitem>
      </itemizedlist>
    </section>

    <section id="info-key-webmds">
      <title> WebMDS user interface</title>
      <para>WebMDS is a web-based interface to WSRF resource property information that is available
        as a user-friendly front-end to the Index Service. WebMDS uses standard resource property
        requests to query resource property data and displays the results in various formats.</para>

      <figure id="webmds_table">
        <title>Table view in WebMDS</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="webmds_table.jpg" format="JPEG" align="center"/>
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Detail view in WebMDS</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="webmds_detail.jpg" format="JPEG" align="center"/>
          </imageobject>
        </mediaobject>
      </figure>

    </section>
  </chapter>
  <chapter id="info-key-typical-deployment">
    <title> Putting it all together</title>

    <para>A typical deployment of WS MDS will enable a project to: </para>

    <itemizedlist>
      <listitem>
        <simpara>discover needed data from services in order to make job submission or replica
          selection decisions; </simpara>
      </listitem>
      <listitem>
        <simpara>evaluate the status of Grid services for a project testbed; </simpara>
      </listitem>
      <listitem>
        <simpara>be notified when disks are full or other error conditions happen; </simpara>
      </listitem>
      <listitem>
        <simpara> visualize the state of services. </simpara>
      </listitem>
    </itemizedlist>

    <para>MDS should be deployed in a distributed fashion. Some components should be deployed
      central to a VO, while others should be deployed on individual resources.</para>

    <para>In order to deploy a project or VO-wide WS MDS setup, we recommend the following steps. </para>

    <para><emphasis>Note:</emphasis> The services deployed do <emphasis>not</emphasis> need to be
      run on the same host or be at the same location.</para>

    <orderedlist>
      <listitem>
        <simpara>For clusters (or Condor pools), make sure that Ganglia (or Hawkeye) is configured
          and running properly to view cluster information in the Index Service. Please see <ulink
            url="gluerp.html">Cluster Monitoring Information and the GLUE Resource Property</ulink>
          for more information. Once properly deployed, you can view the scheduler and cluster
          information, whose format is defined by XML schema definitions, located at
            <computeroutput>$GLOBUS_LOCATION/share/schema/mds/usefulrp/batchproviders.xsd</computeroutput>
          and
        <computeroutput>$GLOBUS_LOCATION/share/schema/mds/usefulrp/ce.xsd</computeroutput>.</simpara>
      </listitem>

      <listitem>
        <para>Set up the Index Service: <orderedlist>
            <listitem>
              <simpara>If you want to set up a site-wide Index Service with all services and
                resources for the project at that site registered to it, including those provided by
                Ganglia or Hawkeye, please refer to <olink targetdoc="indexAdmin"/>.</simpara>
            </listitem>

            <listitem>
              <simpara> If you want to deploy an Index Service to act as the centralized data source
                for the VO to collect information about all of the resources in the VO, please see
                  <ulink url="deployment_overview.html">Deploying WS MDS in a Virtual
                Organization</ulink>.</simpara>
            </listitem>
          </orderedlist>
        </para>
      </listitem>
      <listitem>
        <simpara> Install the WebMDS release to view the contents of a central Index Service in a
          web browser (please see <olink targetdoc="webmdsAdmin"/> for more information).</simpara>
      </listitem>
      <listitem>
        <simpara>Deploy a Trigger Service notification script to alert interested parties about
          changes in the status of the VO (please see <olink targetdoc="triggerAdmin"/>).</simpara>
      </listitem>
    </orderedlist>

  </chapter>
  <glossary role="auto" id="glossary-infoKey">
    <!-- 
    <remark>some terms not in the docs but wanted in glossary: 
    <glossterm>scheduler</glossterm>
    </remark>
    -->
    <glossdiv>
      <title>A</title>
      <glossentry>
        <glossterm>Dummy term</glossterm>
        <glossdef>
          <para>This is a dummy entry for the automatic glossary database. Do not edit.</para>
        </glossdef>
      </glossentry>
    </glossdiv>
  </glossary>
</book>
