<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="trigger-howto-basic">
        <chapterinfo>
            <date>June 2008</date>
        </chapterinfo>
        <title>Trigger Service - Easy HowTo </title>
  <indexterm type="trigger"><primary>tutorial</primary><secondary>basic</secondary></indexterm>
  <indexterm type="trigger-howto"><primary>tutorial</primary><secondary>basic</secondary></indexterm>
  <section id="trigger-howto-basic-purpose"><title>Purpose</title>
  <para>The purpose of this Easy HowTo is to introduce the GT4/WS MDS component known as the Trigger, 
      as well as to provide an example of setting one up successfully.  The current GT <replaceable role="entity">version</replaceable> documentation provides a basic reference and will be updated as features are added, 
    but for those of you who would like to get a simple trigger working without going through all of the documentation, this document is for you.</para>
    
    <para>We will be creating a simple trigger from scratch, and setting it up completely. To get the basic idea of how this is done, we will only use elements available in the default 
      GT4 installation to show you how to use triggers.</para>
  </section>
  <section id="trigger-howto-basic-prereq"><title>Prerequisites</title>
  <itemizedlist>
    <listitem><para>Globus Toolkit installation</para></listitem>
    <listitem><para>Some basic familiarity with <ulink url="http://www.w3.org/TR/xpath">XML Path Language (XPath).</ulink></para></listitem>
    <listitem><para>You must have a valid X.509 user certificate</para></listitem>
  </itemizedlist>
  </section>
  
  <section id="trigger-howto-basic-intro"><title>Introduction</title>
  
  <para>The Trigger Service collects information and then performs actions based on that information.  The Trigger Service works like this:</para>
<orderedlist>
<listitem>Administrators use a configuration file to specify the names and locations of <command>trigger actions</command>, programs that can be executed by the Trigger Service as a result of trigger conditions being met.</listitem>
<listitem>Users (or administrators, depending on authorization policy) use a programmatic interface to specify what information will be collected by the Trigger Service.  This interface is the Aggregator Framework, the same configuration interface used by the Index Service</listitem>
<listitem>Users use a programmatic interface to define <command>triggers</command>.  A trigger includes (among other things) an XPath query string and the name of one of the trigger actions defined in step 1.</listitem>
<listitem>The Trigger Service periodically collects data (based on the configuration specified in step 2) and, for each trigger specified in step 3, evaluates the XPath query associated with the trigger and then executes the trigger's action if the query returns true.</listitem>
</orderedlist>
    <para>In this example, we will configure the Trigger Service to monitor the Default Index Service running in the same Globus container, and then set up a trigger that will add an entry to a log file any time the number of Index Service registrations is less than 1.
This is not necessarily a practical example of how you would use a trigger, but it's simple enough to 
      give you a basic idea of how to set one up. So let's get started!</para>
      </section>
      
  <section id="trigger-howto-basic-tutorial"><title>Trigger Tutorial</title>
  <section id="trigger-howto-basic-prelim"><title>Preliminaries:  Set Up Your Environment</title>
    <para>First things first -- in order to run most Globus commands, you must have your environment set up correctly and have a valid proxy certificate.  To set up your environment, first set the GLOBUS_LOCATION environment variable to the directory in which Globus is installed.  To finish setting up your environment, run:</para>
<screen>
. $GLOBUS_LOCATION/etc/globus-user-env.sh
</screen>
<para>if you're a Bourne shell user, or</para>
<screen>
source $GLOBUS_LOCATION/etc/globus-user-env.csh
</screen>
<para>if you're a C shell user.  Finally, generate a proxy certificate with:</para>
<screen>
$GLOBUS_LOCATION/bin/grid-proxy-init -verify -debug
</screen>
  </section>
    <section id="trigger-howto-basic-config-actions"><title>Configure Trigger Action Programs</title> 
      <para>Next, we will specify what commands can be used in Trigger Service triggers.  The Trigger Service comes with some simple action scripts in the <command>$GLOBUS_LOCATION/libexec/trigger</command> directory; we will edit the
<command>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/jndi-config.xml</command> file to enable them:</para>
      <screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;jndiConfig xmlns="http://wsrf.globus.org/jndi/config"&gt;
    &lt;global&gt;
       &lt;resource name="configuration"
                 type="org.globus.mds.aggregator.impl.AggregatorConfiguration"&gt;
            ...
       &lt;/resource&gt;
      
       &lt;resource name="triggerConfiguration"
                 type="org.globus.mds.trigger.impl.TriggerConfiguration"&gt;
          &lt;resourceParams&gt;
             &lt;parameter&gt;
                 ...
             &lt;/parameter&gt;
             &lt;parameter&gt;
	        &lt;name&gt;<emphasis role="strong">executableMappings</emphasis>&lt;/name&gt;
	        &lt;value&gt;<emphasis> role="strong">trigger-action-default=trigger-action-default.sh, trigger-action-input-default=trigger-action-input-default.sh</emphasis>&lt;/value&gt;
	     &lt;/parameter&gt;
	  &lt;/resourceParams&gt;
       &lt;/resource&gt;  
                    
    &lt;/global&gt;
    
    &lt;service name="TriggerRegistrationService"&gt;
          ...
    &lt;/service&gt;
       ...

&lt;/jndiConfig&gt;
      </screen>
<para>This jndi-config.xml file defines an <command>executableMappings</command> parameter.  The format of the executableMappings parameter is a sequence of name=value strings, separated by commas.
The left hand side of each name/value pair is the name that users will specify in trigger definitions; the right hand side is the path name (relative to the $GLOBUS_LOCATION/libexec/trigger directory) of the program to execute.  In this example, we
define two trigger actions: "trigger-action-default" maps to $GLOBUS_LOCATION/libexec/trigger/trigger-action-default.sh, and "trigger-action-input-default" maps to $GLOBUS_LOCATION/libexec/trigger-action-input-default.sh.  These action scripts are distributed as part of the Globus distribution.  The version of $GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/jndi-config.xml distributed with Globus has these mappings defined in a commented-out section; in order to continue with this example, you must uncomment them.</para>
<para>Before you continue, you'll need to restart your Globus container to make the
changes to
jndi-config.xml take effect.  If you normally use <command>/etc/init.d/gt4container</command>, then you can type "/etc/init.d/gt4container restart", or you can kill the running Globus container (if there is one) and run <command>$GLOBUS_LOCATION/etc/globus-start-container-detached</command> by hand.  If you have a production container running and want to test the trigger service with a different instance on another port, you can run "globus-start-container-detached -p NNNN" to cause the new container to listen on port NNNN.</para>
</section>
    <section id="trigger-howto-basic-registration"><title>Configure the Trigger Service to Collect Information</title>
      <para>The next thing we will do is configure the trigger service to collect some information (we will later configure the trigger service to periodically run a query on that information and, based on the results of the query, take some action).  In this example, we will configure the trigger service to collect infoformation by querying the Default Index Service running in the same Globus container for the entire contents of its index.</para>
<para>The Trigger Service uses the <olink targetdoc="aggregator">Aggregator Framework</olink> to configure its sources of information.  Aggregator sources are configured through a service interface; we will create a
file specifying configuration parameters and then run the <command><olink targetptr="mds-servicegroup-add">mds-servicegroup-add</olink></command> command to read that configuration file and register the configuration information with the Trigger Service.  We will start with the example trigger registration file included with Globus distributions in <command>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</command></para>
<screen>
  &lt;DefaultServiceGroupEPR&gt;
    &lt;wsa:Address&gt;<emphasis role="strong">https://localhost:8443/wsrf/services/TriggerRegistrationService</emphasis>&lt;/wsa:Address&gt;
  &lt;/DefaultServiceGroupEPR&gt;
  &lt;ServiceGroupRegistrationParameters
      xmlns="http://mds.globus.org/servicegroup/client"
      xmlns:wsa="http://www.w3.org/2005/08/addressing"
      xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    &lt;RegistrantEPR
        xmlns:wsa="http://www.w3.org/2005/08/addressing"&gt;
      &lt;wsa:Address&gt;<emphasis role="strong">https://localhost:8443/wsrf/services/DefaultIndexService</emphasis>&lt;/wsa:Address&gt;
    &lt;/RegistrantEPR&gt;
    &lt;RefreshIntervalSecs&gt;600&lt;/RefreshIntervalSecs&gt;
    &lt;Content xsi:type="agg:AggregatorContent"
             xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;agg:GetResourcePropertyPollType 
             xmlns:wssg="http://docs.oasis-open.org/wsrf/sg-2"&gt;
          &lt;agg:PollIntervalMillis&gt;30000&lt;/agg:PollIntervalMillis&gt;
          &lt;agg:ResourcePropertyName&gt;wssg:Entry&lt;/agg:ResourcePropertyName&gt;
        &lt;/agg:GetResourcePropertyPollType&gt;
      &lt;/agg:AggregatorConfig&gt;
      &lt;agg:AggregatorData /&gt;
    &lt;/Content&gt;
  &lt;/ServiceGroupRegistrationParameters&gt;
&lt;/ServiceGroupRegistrations&gt;
</screen>
<para>For this example, the only items in the registration file that you
might need to edit are the <command>DefaultServiceGroupEPR</command> (the
address of your trigger registration service) and the <command>RegistrantEPR</command> (the address of the resource you want to monitor; in this case, your Default Index Service).  If these look correct (i.e., the host names and port numbers correspond to
the Globus container you just started),
then you do not need
to edit this file at all.</para>
<warning>In general, it's a bad idea to use loopback addresses like "localhost" or "127.0.0.1" in MDS configuration files (because if you configure a remote host to poll "localhost" for information, the remote host will poll itself, not the host that the mds-servicegroup-add command was run from).  We can get away with it here because all the
addresses we're using are local, but in real life, it's better to use non-local IP addresses or fully-qualified domain names</warning>
    </section>

<section id="trigger-howto-basic-define-triggers"><title>Define Triggers</title>
      <para>Now, we're going to define a trigger that checks how many Entries are being registered by the Index Service and then takes actions based on the results.  But first, let's check how many Entries are being registered by the Index Service. Type the following command in one line (substituting your hostname and port if appropriate):</para>
      <screen>$GLOBUS_LOCATION/bin/wsrf-query -s https://127.0.0.1:8443/wsrf/services/DefaultIndexService 'count(//*[local-name()="Entry"])'</screen>
      <para>On our setup we get: <emphasis>3</emphasis>.</para>
    </section>
    
    <section><title>Create Trigger Registration</title>
    
<para>The registration step is necessary to connect the information source with the Trigger Registration Service (an aggregator service). We configured this above.  
  This step provides access to the information source data so that the trigger can then make this information available and act on it accordingly.</para>
    <para>Once the configurations have been properly set, it's easy to register them with the Trigger Registration Service.</para>
      <para>We will create the trigger registration by running <emphasis><olink targetdoc="aggregatorPI" targetptr="mds-servicegroup-add"/></emphasis> 
      to perform the registrations specified in the configuration file (that we configured above).</para>
    <para>Run the following command:</para>
    <screen>$GLOBUS_LOCATION/bin/mds-servicegroup-add $GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</screen>
    
<important><para>Be sure the above command is on one line.</para></important>

<para>If everything went well, you should get something like:</para>
    <screen>Processing configuration file...
INFO: Processed 1 registration entries
INFO: Successfully registered https://127.0.0.1:8444/wsrf/services/DefaultIndexService \
to servicegroup at https://127.0.0.1:8444/wsrf/services/TriggerRegistrationService
    </screen>
    </section>
    
  <section><title>Create Trigger</title>
    <para>Now that we have created a trigger registration, and we have a service that will be monitored, we're ready to create the actual trigger whose parameters will 
      indicate what information we will be evaluating against any incoming data.  It will also specify and execute the action script that we've created.  
      All trigger creation and management is performed via clients.</para>
    <para>In this HowTo, we will be using the command-line clients that are provided with your installation.  
      (There is also a web interface, but setting that up will be discussed in an upcoming HowTo).  The web interface is easier to use and more visually appealing than the command-line clients!)</para>
    <orderedlist numeration="loweralpha">
      <listitem>
        <para>We must configure the [command-line] clients according to your individual setup:</para>
        <screen>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/client-config-settings</screen>
        <para>This file should already be included in your install. It basically looks like this:</para>
        <screen>DefaultServiceAddress: https://127.0.0.1:8444/wsrf/services/</screen>
        <para>The most important item to edit is the first line.  Be sure that the host service address corresponds to your deployed container.  
          When you start the container a list of service addresses will indicate what you should be using for this parameter.</para>
      </listitem>
      <listitem>
        <para>Now we create the trigger</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-create https://127.0.0.1:8444/wsrf/services/DefaultIndexService</screen>
        <para>The client should produce output similar to the following:</para>
        <screen>
WS MDS Trigger Creation Client
  ----------------------------
  
  **     Service URL: https://127.0.0.1:8444/wsrf/services/DefaultIndexService
  
  Checking current monitored services (Trigger Registrations)...
  OK
  --&gt; Trigger has been created.
</screen>
      </listitem>
      <listitem>
        <para>Test the trigger creation by typing the following command:</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-view</screen>
        <para>This command should produce output similar to the following:</para>
        <screen>
          WS MDS Trigger View Client
          ------------------------
          
          Monitored Services (Trigger Registrations)
          
          1) /wsrf/services/DefaultIndexService
          
          TriggerID:      955e9d90-61d0-11dc-897d-dc2058e0ce31
          TRIGGER NAME:   Default Trigger Name
          MATCHING RULE:  count(//*[local-name()='Entry'])&lt;1
          ACTION SCRIPT:  trigger-action-default.sh
          TRIGGER STATUS: disabled
          
        </screen>
        <para>This output tells us that there is one trigger registration (with the DefaultIndexService) and that the trigger we have just created is called "Default Trigger Name", 
          we see the EPR Resource Key which we will refer to as the "Trigger ID" and this TriggerID is required for editing the trigger, we see a Matching Rule 
          (which is an XPath query against the monitored service, or the DefaultIndexService), we see the name of the trigger action script (located in 
          <filename>$GLOBUS_LOCATION/libexec/trigger/</filename>), and we see that the trigger is DISABLED.  This means that the trigger will not fire, nor will it try to evaluate any data.  
          Basically, this is an inactive trigger.</para>
      </listitem>
      <listitem>
        <para>In order to make things happen you must enable the trigger.  This is done with the <computeroutput>mds-trigger-edit</computeroutput> command.  The syntax is: </para>
        <screen>mds-trigger-edit [TriggerID] [Parameter="Value"]</screen>
        <para>(For a list of possible parameters, see the "Trigger Service Resource Properties" section of the Public Interface Guide)</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-edit 955e9d90-61d0-11dc-897d-dc2058e0ce31 TriggerName="NewName"</screen>
        <para>This will output something similar to:</para>
        <screen>
WS MDS Trigger Edit Client
------------------------

Note: currently, only one parameter may be edited at a time.
** Edit Query: TriggerName=NewName

Trigger Parameter: TriggerName
Trigger Parameter Value: NewName

Setting TriggerName to NewName...
Done.
        </screen>
        <para>Changing the name of the trigger is completely up to you.  It's not really important except if you're managing tons of triggers.  
          But let's enable this trigger.  By enabling/activating the trigger, we turn it "on", meaning that it will take the Matching Rule and evaluate
          this against incoming aggregator data from our monitored service (the Default Index Service).</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-edit 955e9d90-61d0-11dc-897d-dc2058e0ce31 TriggerStatus="enabled"</screen>
        <para>When this trigger is "enabled", we now have an active trigger that is actively evaluating data.  You may notice this in the service container screen 
          if you're in "debug" mode (You can allow "debug" information by uncommenting: <computeroutput>log4j.category.org.globus.mds.trigger=DEBUG</computeroutput>  
          in your <computeroutput>$GLOBUS_LOCATION/container-log4j.properties</computeroutput> file).  But our trigger will not fire since the Matching Rule evaluates to false.  
          There is more than one entry in the Default Index Service, so when we use our Matching Rule, a false evaluation will not allow the trigger to fire.  
          So let's change our Matching Rule so that the trigger will evaluate to "true", thus firing the trigger.</para>
        <screen>$GLOBUS_LOCATION/bin/mds-trigger-edit 955e9d90-61d0-11dc-897d-dc2058e0ce31 MatchingRule="count(//*[local-name()='Entry'])&gt;1"</screen>
        <para>Typing <computeroutput>$GLOBUS_LOCATION/bin/mds-trigger-view</computeroutput> will basically summarize what we've done:</para>
        <screen>
Monitored Services (Trigger Registrations)

1) /wsrf/services/DefaultIndexService

TriggerID:      955e9d90-61d0-11dc-897d-dc2058e0ce31
TRIGGER NAME:   New Name
MATCHING RULE:  count(//*[local-name()='Entry'])>1
ACTION SCRIPT:  trigger-action-default.sh
TRIGGER STATUS: enabled
</screen>
      </listitem>
    </orderedlist>
    
<para>To view more details about this particular trigger, type: <screen>$GLOBUS_LOCATION/bin/mds-trigger-view 955e9d90-61d0-11dc-897d-dc2058e0ce31</screen></para>
<para>Syntax: mds-trigger-view [TriggerID]</para>
    <screen>
WS MDS Trigger View Client
 ------------------------

----Detailed Trigger Information----------------------------

MONITORED SERVICE:  https://127.0.0.1:8444/wsrf/services/DefaultIndexService
TriggerID:          955e9d90-61d0-11dc-897d-dc2058e0ce31
TRIGGER NAME:       New Name

MATCHING RULE:      count(//*[local-name()='Entry'])>1
ACTION SCRIPT:      trigger-action-default.sh
TRIGGER STATUS:     enabled

ENABLE BOOLEAN:                         true
ACTION SCRIPT INPUT FULL ORIGINAL:      true
ACTION SCRIPT INPUT XPATH QUERY RESULT: true

MINIMUM FIRING INTERVAL: 20
MINIMUM MATCH TIME:      30

START TIME:            N/A
END TIME:              N/A

INVALIDITY START TIME: N/A
INVALIDITY END TIME:   N/A

----Non-editable stats--------------------------------------
RULE LAST CHECKED AT: N/A
CONDITION TRUE SINCE: N/A
ACTION FIRED AT:      N/A
------------------------------------------------------------

</screen>
<para>Now after a minute or so, you will notice that the trigger has fired successfully.  You can verify this by checking the contents of the log file we created in our action script from above:</para>
      <screen>more $GLOBUS_LOCATION/trigger_service_base_action_log</screen>
      <para>This should look similar to the following</para>
      <screen>
Trigger Service Entry: Sun Jun 17 14:45:26 CDT 2007
Trigger Service Entry: Sun Jun 17 14:45:56 CDT 2007
Trigger Service Entry: Sun Jun 17 14:46:26 CDT 2007
Trigger Service Entry: Sun Jun 17 14:46:56 CDT 2007
      </screen>
      <para>There is a 30 second interval that we specified in our aggregator configuration file above.  This should probably be lengthened eventually so that you don't have the triggers going off so often.</para>

  </section>
 
      <section id="trigger-howto-basic-congrats"> <title>Congratulations!</title>

<para>You have now successfully setup, configured, registered, created, edited and tested a trigger from scratch!</para>
<para><emphasis>Next Steps:</emphasis> Check out the documentation and create more triggers to perform actions more relevant to your own objectives. 
  Experiment with the XPath queries to expand the possibilities of what you can use them for. If you have questions, feel free to [contact us]!</para>
  <para>Please keep in mind that this is in a highly developmental stage, so there may be errors, or unpredictable behavior.  Feel free to let us know what works, 
    what doesn't, and your general experiences with the trigger service.</para>
      </section>
  
  <section><title>Troubleshooting</title>
<para>For MDS Trigger troubleshooting information, see <olink targetdoc="triggerUser" targetptr="trigger-troubleshooting"/>.</para>
  </section>
</section>
 </chapter>
