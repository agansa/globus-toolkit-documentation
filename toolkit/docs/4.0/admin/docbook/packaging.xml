<appendix id="packaging"><title>Packaging details</title>
<section><title>The makefile</title>
<para>
You do not have to build every subcomponent of this release.  The
makefile specifies subtargets for different functional subpieces.
See the component map at <ulink url=
"http://www.globus.org/toolkit/docs/4.0/GT4Facts/index.html">
GT4 Facts</ulink> for more details.
</para>

<itemizedlist><title>Makefile targets</title>
<listitem><simpara>i18n: Internationalization libraries
</simpara></listitem>
<listitem><simpara>prewsgram: Pre-webservices GRAM
</simpara></listitem>
<listitem><simpara>gridftp: GridFTP
</simpara></listitem>
<listitem><simpara>prewsmds: OpenLDAP-based MDS2 [source installers only]
</simpara></listitem>
<listitem><simpara>prews: Pre-WS GRAM, MDS2, and GridFTP
</simpara></listitem>
<listitem><simpara>wsjava: Java WS Core
</simpara></listitem>
<listitem><simpara>wsc: C WS core
</simpara></listitem>
<listitem><simpara>wsmds: MDS4
</simpara></listitem>
<listitem><simpara>wsdel: Delegation Service
</simpara></listitem>
<listitem><simpara>wsrft: Reliable File Transfer service
</simpara></listitem>
<listitem><simpara>wsgram: GRAM4
</simpara></listitem>
<listitem><simpara>wscas: Community Authorization Service
</simpara></listitem>
<listitem><simpara>wstests: Tests for java webservices
</simpara></listitem>
<listitem><simpara>wsctests: Tests for C webservices
</simpara></listitem>
<listitem><simpara>prews-test: Tests for pre-webservices components
</simpara></listitem>
<listitem><simpara>rls: Replica Location Service
</simpara></listitem>
</itemizedlist>

<para>
Note that all of these targets require the "install" target also.
So, for instance, to build GridFTP alone, you would run:

<screen>
$ ./configure --prefix=/path/to/install
$ make gridftp install
</screen>
</para>
</section>

<section><title>The Grid Packaging Toolkit</title>
<para>
The Globus Toolkit is packaged using the Grid Packaging Toolkit (GPT).
The GPT provides a way for us to version packages and express dependencies
between packages.  The Makefile for the installer is automatically
generated based on the GPT dependencies expressed in CVS.  GPT versions
also allow us to release update packages for small subsets of our code.
For more information on the GPT, you may see its
<ulink url="http://gridpackagingtools.com/book/latest-stable/index.html">
website</ulink>.
</para>
</section>

<section><title>Picking a flavor for a source installation</title>
<para>
If you're building on a platform that is not auto-detected by the configure
script, you will be prompted to specify a flavor for the <option>--with-flavor=</option> option.  Typically "gcc32dbg" will work as a flavor to build 32-bit
binaries using gcc.  If you want to force a 64bit build, "gcc64dbg" should work.</para>
<para>
Some platforms have better support from their native compilers, so you can use "vendorcc32dbg" to build using the native cc.  Similarly, "vendorcc64dbg" will force a 64bit build instead.
</para>
</section>

<section><title>Using globus-makefile-header with a binary distribution</title>
<para>
We use a package called "globus_core" to detect the compiler and platform settings of the computer that the Toolkit is installed on.  This package is excluded from binary distributions, because the compiler settings on your machine are likely to be different from those used on the machine that built the binaries.
</para>
<para>
If you need to install a source update into a binary installation, globus_core will automatically be built for you.  If you're building something using "globus-makefile-header", though, you will need to install globus_core yourself.  Install it with the following command:
<screen>
$ $GLOBUS_LOCATION/sbin/gpt-build -nosrc &lt;flavor&gt;
</screen>
Where <replaceable>flavor</replaceable> is the flavor you're passing to globus-makefile-header.
</para>
</section>


</appendix>
