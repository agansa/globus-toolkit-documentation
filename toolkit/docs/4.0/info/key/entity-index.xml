<book>
  <?dbhtml dir="info/key"  filename="entity-index.html" ?>  
<title>Information Services (MDS) : Key Concepts</title>

<chapter id="c-index-key">
<title>Information Services (MDS) : Key Concepts</title>
<titleabbrev>Key Concepts</titleabbrev>

<section><title>Overview</title>

<para> <emphasis>Note:</emphasis> If you have not done so already, we recommend reading
  the <ulink url="../../key/index.html">GT4
  Primer</ulink> before continuing. Also keep in mind that in this documentation,
  the concepts of MDS are written for the latest version, <emphasis>WS
  MDS</emphasis> (also known
  as <emphasis>MDS4</emphasis>). The GT4 release includes the Pre-WS component, <emphasis>MDS2</emphasis>, for legacy purposes
  only - it will be deprecated at some future time as experience is gained with
the WS implementation (for information about MDS2, click <ulink url="http://www-fp.globus.org/mds/mds2/">here</ulink>.) </para>
<para>The <emphasis>Monitoring and Discovery System (MDS)</emphasis> is a suite of web services
  to monitor and discover resources and services on Grids. This system allows
  users to discover what resources are considered part of a <emphasis>Virtual
  Organization (VO)</emphasis> and to monitor those resources. MDS services provide
  query and subscription interfaces to arbitrarily detailed resource data and
  a trigger interface that can be configured to take action when pre-configured
  trouble conditions are met. The services included in the WS MDS implementation
  (<emphasis>MDS4</emphasis>), provided with
  the Globus Toolkit 4, acquire their information through an extensible interface
  which can be used to:</para>
<itemizedlist>
  <listitem><simpara> query WSRF services for resource property information,</simpara></listitem>
  <listitem><simpara> execute a program
          to acquire data, or </simpara></listitem>
  <listitem><simpara>interface with third-party monitoring systems.</simpara></listitem>
</itemizedlist>
<para>Grid computing resources and services can advertise a large amount of data
  for many different use cases.  MDS4 was specifically designed to address
  the needs of a Grid monitoring system &ndash; one that publishes data that
  is available to multiple people at multiple sites. As such, it is not an
  event handling system, like NetLogger, or a cluster monitor on its own, but
  can interface to more detailed monitoring systems and archives, and can publish
  summary data using standard interfaces.
</para>
</section>

<section><title> MDS4 Services</title>
<para>MDS4 includes two WSRF-based services: an <emphasis><ulink url="../index/">Index Service</ulink></emphasis>, which collects data
  from various sources and provides a query/subscription interface to that data,
  and a <emphasis><ulink url="../trigger/">Trigger Service</ulink></emphasis>, which collects data from various sources and can be
  configured to take action based on that data. An <emphasis>Archive
  Service</emphasis>, which will
  provide access to historic data, is planned for a future release.
</para>
<para>The Index Service is a registry similar to UDDI, but much more flexible. Indexes
  collect information and publish that information as <emphasis>resource
  properties</emphasis>. Clients
  use the standard WSRF resource property query and subscription/notification
  interfaces to retrieve information from an Index. Indexes can register to each
  other in a hierarchical fashion in order to aggregate data at several levels.
  Indexes are &ldquo;self-cleaning&rdquo;; each Index entry has a lifetime and
  will be removed from the Index if it is not refreshed before it expires.</para>
<para>Each Globus container that has MDS4 installed will automatically have a default
  Index Service instance. By default, any GRAM, RFT, or CAS service running in
  that container will register itself to the container&rsquo;s default Index
  Service.</para>
<para>The Trigger Service collects information and compares that data against a
  set of conditions defined in a configuration file. When a condition is met,
  or triggered, an action takes place, such as emailing a system administrator
  when the disk space on a server reaches a threshold.    </para>
</section>

<section><title> MDS4 Information Interfaces and Providers</title>
<para>In addition to the services described above, MDS4 includes several additional
  software components, including an <emphasis><ulink url="../aggregator/">Aggregator Framework</ulink></emphasis>, which provides a unified
  mechanism used by the Index and Trigger services to collect data.</para>
</section>

<section><title>Aggregator Framework</title>
<para>The Aggregator Framework is a software framework used to build services that
  collect and aggregate data. Services (such as the Index and Trigger services)
  built on the Aggregator Framework are sometimes called <emphasis>aggregator
  services</emphasis>,
and have the following in common:</para>
<itemizedlist>
  <listitem><simpara> They collect information via <emphasis>Aggregator Sources</emphasis>. An Aggregator Source
      is a Java class that implements an interface (defined as part of the Aggregator
      Framework) to collect XML-formatted data.</simpara></listitem>
  <listitem><simpara>They use a common configuration mechanism to maintain information about
      which Aggregator Source to use and its associated parameters (which
    generally specify what data to get, and from where). The Aggregator Framework
    WSDL defines an [aggregating service group entry type] that holds both configuration
    information and data. Administrative client programs use standard [WSRF Service
    Group registration mechanisms] to register these service group entries to
    the aggregator service.</simpara></listitem>
  <listitem><simpara>They are self-cleaning &ndash; each registration has a lifetime; if a
      registration expires without being refreshed, it and its associated data
    are removed from the server.</simpara></listitem>
</itemizedlist>
<para>MDS4 includes the following three Aggregator Sources: </para>
<itemizedlist>
  <listitem><simpara>the <emphasis>Query Aggregator Source</emphasis>, which
        polls a WSRF service for resource property information, </simpara></listitem>
  <listitem><simpara>the <emphasis>Subscription
        Aggregator Source</emphasis>, which collect data from a WSRF service via WSRF
    subscription/notification, </simpara></listitem>
  <listitem><simpara>the <emphasis>Execution Aggregator Source</emphasis>, which executes an administrator-supplied
            program to collect information.</simpara></listitem>
</itemizedlist>
</section>

<section><title> Information Providers</title>
<para>Depending on the implementation, an Aggregator Source may use an external
  software component (for example, the Execution Aggregator Source uses an executable
  program), or a WSRF service may use an external component to create and update
  its resource properties (which may then be registered to an Index or other
  aggregator service, using the Query or Subscription Aggregator Source). We
  refer to this set of components as <emphasis>Information Providers</emphasis>.</para>
<para> Currently, MDS4 includes the following sources of information:
</para>
<itemizedlist>
  <listitem><para><emphasis>Hawkeye Information Provider</emphasis>: An Information Provider that gathers
    Hawkeye data about Condor pool resources using the XML mapping of the GLUE
    schema and reports it to a WS GRAM service, which publishes it as resource
    properties.  This information includes:
    <itemizedlist>
      <listitem><simpara> basic host data (name, ID)</simpara></listitem>
      <listitem><simpara>processor information</simpara></listitem>
      <listitem><simpara>memory size</simpara></listitem>
      <listitem><simpara>OS name and version</simpara></listitem>
      <listitem><simpara>file system data</simpara></listitem>
      <listitem><simpara>processor load data</simpara></listitem>
      <listitem><simpara>other basic Condor host data. </simpara></listitem>
    </itemizedlist>
  </para></listitem>
  <listitem><para><emphasis>Ganglia Information Provider</emphasis>: An Information Provider that gathers
    cluster data from resources running Ganglia using the XML mapping of the
    GLUE schema and reports it to a WS GRAM service, which publishes it as
    resource properties.  This information includes:
    <itemizedlist>
      <listitem><simpara> basic host data (name, ID)</simpara></listitem>
      <listitem><simpara> memory size</simpara></listitem>
      <listitem><simpara> OS name
        and version</simpara></listitem>
      <listitem><simpara> file system data</simpara></listitem>
      <listitem><simpara> processor load data</simpara></listitem>
      <listitem><simpara> other basic
              cluster data. </simpara></listitem>
    </itemizedlist>
  </para></listitem>
  <listitem><para><emphasis>WS GRAM</emphasis>: The job submission service component of GT4. This WSRF
    service publishes information about the local scheduler, including:
    <itemizedlist>
      <listitem><simpara> queue
        information</simpara></listitem>
      <listitem><simpara> number of CPUs available and free</simpara></listitem>
      <listitem><simpara> job count information</simpara></listitem>
      <listitem><simpara>some memory statistics. </simpara></listitem>
    </itemizedlist>
  </para></listitem>
  <listitem><para><emphasis>Reliable File Transfer Service (RFT)</emphasis>: The file transfer service
    component of GT4. This WSRF service publishes:
    <itemizedlist>
      <listitem><simpara> status
          data of the server</simpara></listitem>
      <listitem><simpara> transfer status for a file or set of files</simpara></listitem>
      <listitem><simpara> number
            of active transfers</simpara></listitem>
      <listitem><simpara> some status information about the resource running
                the service. </simpara></listitem>
    </itemizedlist>
  </para></listitem>
  <listitem><simpara><emphasis>Community Authorization Service (CAS)</emphasis>  This WSRF services
          publishes information identifying the VO that it serves.</simpara></listitem>
  <listitem><simpara>Any other WSRF service that publishes resource properties.  Note:  In addition to any other resource properties, GT4 services publish a basic <computeroutput>ServiceMetaDataInfo</computeroutput> element that includes start time, version, and service type name.</simpara></listitem>
</itemizedlist>
</section>

<section><title> WebMDS user interface</title>
<para>WebMDS is a web-based interface to WSRF resource property information that
  is available as a user-friendly front-end to the Index Service.  WebMDS uses
  standard resource property requests to query resource property data and displays
  the results in various formats.</para>
<graphic fileref="webmds_table.jpg" format="JPEG"/>
<graphic fileref="webmds_detail.jpg" format="JPEG"/>
</section>

<section><title> Putting it all together</title>

<para>A typical deployment of MDS4 will enable a project to: </para>

<itemizedlist>
  <listitem><simpara>discover needed data
        from services in order to make job submission or replica selection decisions; </simpara></listitem>
  <listitem><simpara>evaluate the status of Grid services for a project testbed; </simpara></listitem>
  <listitem><simpara>be notified when
        disks are full or other error conditions happen; </simpara></listitem>
  <listitem><simpara> visualize the state
      of services. </simpara></listitem>
</itemizedlist>

<para>MDS should be deployed in a distributed fashion. Some components
            should be deployed central to a VO, while others should be deployed
    on individual resources.</para>

<para>In order to deploy a project or VO-wide MDS4 setup, we recommend the following
  steps. </para>

<para><emphasis>Note:</emphasis> The services deployed do <emphasis>not</emphasis> need to be run on the
    same host or be at the same location.</para>

<orderedlist>
  <listitem><simpara>For clusters (or Condor pools), make sure that Ganglia (or Hawkeye)
    is configured and running properly to view cluster information in
    the Index Service. Please see <ulink url="gluerp.html">Cluster Monitoring Information
    and the GLUE Resource Property</ulink>  for more information. Once properly deployed,
    you can view the scheduler and cluster information, whose format is defined
    by XML schema definitions, located at
    <computeroutput>$GLOBUS_LOCATION/share/schema/mds/usefulrp/batchproviders.xsd</computeroutput> and
    <computeroutput>$GLOBUS_LOCATION/share/schema/mds/usefulrp/ce.xsd</computeroutput>.</simpara></listitem>

  <listitem><para>Set up the Index Service:
<orderedlist>
      <listitem><simpara>If you want to set up a site-wide Index Service with all services and
        resources for the project at that site registered to it, including those
          provided by Ganglia or Hawkeye, please refer to the <ulink url="../index/admin-index.html">MDS
          Index System Administrator's Guide</ulink>.</simpara></listitem>

      <listitem><simpara> If you want to deploy an Index Service to act as the centralized data
        source for the VO to collect information about all of the resources in
        the VO, please see <ulink url="deployment_overview.html">Deploying WS MDS in a
          Virtual Organization</ulink>.</simpara></listitem>
    </orderedlist>
  </para></listitem>
  <listitem><simpara> Install the WebMDS release to view the contents of a central
      Index Service in a web browser (please see the <ulink url="../webmds/admin-index.html">WebMDS
      System Administrator's Guide</ulink> for more information).</simpara></listitem>
  <listitem><simpara>Deploy a Trigger Service notification script to alert interested
      parties about changes in the status of the VO (please see the <ulink url="../trigger/admin-index.html">Trigger
      Service System Administrator's Guide</ulink>).</simpara></listitem>
</orderedlist>

</section>




</chapter>
</book>
