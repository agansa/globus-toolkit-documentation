<title>Using CAS Command line Clients</title>
<section id="s-cas-admin-clients">
    <title>CAS Administrator clients</title>
    <para>The CAS administrator clients can be used to manipulate and maintain
        the data in the CAS database. It allows one to enroll (and unenroll) CAS
        Objects, create (and delete) groups, add (and remove) members from
        groups, and add (and remove) service type and action mappings. Typically
        these operation are performed by the CAS Administrator.</para>
    
    <para>All enroll operations involve granting cas/grantAll permission on the
        enrolled object to some user group (to which the user may belong or
        otherwise).</para>
    
    <para>All operations require that the user have specific permissions to
        perform the operation. Permissions and policies are given and applied
        to user groups. Hence a user is said to have permission to perform an
        operation if one of the user groups that the user belongs to has
        permission to perform that operation.</para>
    
    <para>If some user group to which the user belongs has permission
        "superuser" on cas server object then they may perform any operation,
        even if they do not have the specific rights that are outlined below for
        each operation.</para>
    
    <para>If a user has cas/grantAll permission on any object, then the user is
        permitted to perform any operation on that object.</para>
    
    <section id="s-cas-namespaces">  <title>Enrolling and Unenrolling Namespaces</title>
        
        <para>To enroll a namespace, the user must have cas/enroll_namespace
            permission (that is, the user must have permission to perform the
            enroll_namespace action on the cas service type).  The enroll
            operation allows the user to choose a userGroup to have cas/grantAll
            permission on the enrolled object. The comparison algorithm specified
            should be the name of the Comparison class that needs to be used to
            compare objects that belong to this namespace. The nickname should be
            unique across the CAS database and is used to refer to this user.</para>
        
        <screen>
            casAdmin$ cas-enroll [<emphasis>options</emphasis>] namespace <emphasis>userGpName</emphasis> <emphasis>nickname</emphasis> <emphasis>basename</emphasis> <emphasis>comparisonAlg</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>userGpName: The user group to which cas/grantAll permission should be
                granted on this trust anchor entity</simpara></listitem>
            <listitem><simpara>nickname: The namespace nickname </simpara></listitem>
            <listitem><simpara>basename: The base URL for the name space</simpara></listitem>
            <listitem><simpara>comparisonAlg: The comparison algorithm to be used. Unless the standard
                comparison algorithms described below are used, the
                fully qualified name of the class that needs to be used
                should be given. The class needs to extend from the
                abstract class
                org.globus.cas.impl.service.ObjectComparison.</simpara></listitem>
        </itemizedlist>

<para>        
        The two comparison classes provided as a part of the distribution are:
</para>
        <itemizedlist>
            
            <listitem><simpara>ExactComparison: This class does a case-sensitive exact comparison
                of the object names. If comparisonAlg in the above method is set to
                "ExactComparison", the class in the distribution is loaded and used.
            </simpara></listitem>
            <listitem><simpara>WildcardComparison: This class does wild card matching as described
                in "CAS Simple Policy Language". (FIXME link to that doc) It assumes
                that the wild card character is "*" and "/" is the file separator. If
                comparisonAlg in the above method is set to "WildCardComparison", the
                class in the distribution is loaded and used. </simpara></listitem>
        </itemizedlist>
        
        <para> Also two namespaces are added to the CAS database at boot up time,
            other than the inherent CAS Namespace.</para>
        
        <itemizedlist>
            <listitem><simpara>FTPDirectoryTree: Uses the WildCardComparison Algorithm and has
                the base URL set to the current directory.</simpara></listitem>
            <listitem><simpara>FTPExact: Uses the ExactComparison Algorithm and has the base
                URL set to the current directory.</simpara></listitem>
        </itemizedlist>
        
        <para>To unenroll a namespace, the user must have cas/unenroll permission on
            that namespace.  The namespace must also be unused&mdash;that is, there may
            not be any object in the database that belongs to this namespace.</para>
        
        <screen>
            casAdmin$ cas-remove [<emphasis>options</emphasis>] namespace <emphasis>nickname</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>nickname: The nickname of the namespace to be unenrolled.</simpara></listitem>
        </itemizedlist>
        
        <para>If the namespace nickname specified does not exist, an error is
            <emphasis>not</emphasis> thrown. If the unenroll operation is successfull all
            policy data on that namespace is purged.</para>
        
    </section>
    <section id="s-cas-object"><title>Enrolling and Unenrolling Objects</title>
        
        <para>To enroll an object, the user must have cas/enroll_object permission
            (that is, the use must have permission to perform the enroll_object action on
            the cas service type).  The enroll operation allows the user to choose a
            userGroup to have cas/grantAll permission on the enrolled object. The
            name of the object and the the namespace this object belongs to
            identifies an object in the database and should be unique across the
            CAS database.</para>
        
        <screen>
            casAdmin$ cas-enroll [<emphasis>options</emphasis>] object <emphasis>userGpName</emphasis> <emphasis>objectName</emphasis> <emphasis>namespaceNick</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>userGpName: The user group to which cas/grantAll permission should be granted on this trust anchor entity.</simpara></listitem>
            <listitem><simpara>objectName: The name of the object.</simpara></listitem>
            <listitem><simpara>namespaceNick: The nickname of the namespace this object belongs to.</simpara></listitem>
        </itemizedlist>
        
        <para>To unenroll an object the user must have cas/unenroll permission on
            that object.  The object must also be unused&mdash;that is, there may not
            be any object group in the database that this object belongs to.</para>
        
        <screen>
            casAdmin$ cas-remove [<emphasis>options</emphasis>] object <emphasis>objName</emphasis> <emphasis>namespaceNick</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>objName: The name of the object to be unenrolled.</simpara></listitem>
            <listitem><simpara>namespaceNick: The nickname of the namespace this object belongs to.</simpara></listitem>
        </itemizedlist>
        
        <para>If the object specified does not exist, an error is <emphasis>not</emphasis> be
            thrown. If the unenroll operation is successfull all policy data on
            that object is purged.</para>
        
    </section>
    <section id="s-cas-serviceType"><title>Enrolling and Unenrolling Service Type</title>
        
        <para>To enroll a service type, the user must have cas/enroll_serviceType
            permission (that is, the user must have permission to perform the
            enroll_serviceType action on the cas service type).  The enroll
            operation allows the user to choose a userGroup to have cas/grantAll
            permission on the enrolled service type. The service type name should
            be unique across the CAS database.</para>
        
        <screen>
            casAdmin$ cas-enroll [<emphasis>options</emphasis>] serviceType <emphasis>userGpName</emphasis> <emphasis>serviceTypeName</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>userGpName: The user group to which cas/grantAll permission should be granted on this trust anchor entity.</simpara></listitem>
            <listitem><simpara>serviceTypeName: The service type name.</simpara></listitem>
        </itemizedlist>
        
        <para>To unenroll a service type the user must have cas/unenroll permission
            on that service type.  The service type must also be unused&mdash;that is,
            there may not be any service type to action mapping.</para>
        
        <screen>
            casAdmin$ cas-remove [<emphasis>options</emphasis>] serviceType <emphasis>serviceTypeName</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>serviceTypeName: The service type name.</simpara></listitem>
        </itemizedlist>
        
        <para>If the service type specified does not exist, an error is <emphasis>not</emphasis> be
            thrown. If the unenroll operation is successfull all policy data on that
            service type is purged.</para>
        
    </section>
    <section id="s-cas-manageServiceType"><title>Maintaining Service Types</title>
        <para>To add an action mapping to a service type, the user must have
            cas/create_group_entry permission on the service type.</para>
        
        <screen>
            casAdmin$ cas-action [<emphasis>options</emphasis>] add <emphasis>serviceTypeName</emphasis> <emphasis>actionName</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>serviceTypeName: The service type name.</simpara></listitem>
            <listitem><simpara>actionName: The action name.</simpara></listitem>
        </itemizedlist>
        
        <para>To remove a service type action mapping the user must have
            cas/delete_group_entry permission on the service type.</para>
        
        <screen>
            casAdmin$ cas-action [<emphasis>options</emphasis>] remove <emphasis>serviceTypeName</emphasis> <emphasis>actionName</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>serviceTypeName: The service type name.</simpara></listitem>
            <listitem><simpara>actionName: The action name.</simpara></listitem>
        </itemizedlist>
        
        <para>If the group member being removed does not exist, an error is
            <emphasis>not</emphasis> thrown.</para>
        
    </section>
    
    <section id="s-cas-manageUserGp"><title>Maintaining User Groups</title>
        
        <para>To create a new user group the user must have cas/create_user_group
            permission (that is, the user must have permission to perform the create_user_group
            action on the cas service type). The user group name should be unique
            across the CAS database. The create operation allows the user to
            choose a user group to have cas/grantAll permission on the created
            user group.  If the user group that is chosen to have cas/grantAll
            permission is the new group created, then the user making this request
            is added to the new group.</para>
        
        <screen>
            casAdmin$ cas-group-admin [<emphasis>options</emphasis>] user create userGpName <emphasis>groupName</emphasis>
        </screen>
        
        <para>
            where :
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            
            <listitem><simpara>userGpName: The user group to which cas/grantAll permission should be
                granted on this trust anchor entity.</simpara></listitem>
            <listitem><simpara>groupName: The name of the user group being created.</simpara></listitem>
        </itemizedlist>
        
        <para>To add to a user to a user group the user must have
            cas/add_group_entry permission on that particular user group. Only
            user nicknames that exist in the CAS database can be valid members.</para>
        
        <screen>
            casAdmin$ cas-group-add-entry [<emphasis>options</emphasis>] user <emphasis>groupName</emphasis> <emphasis>nickname</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>groupName: The user group name to which the member needs to be added.</simpara></listitem>
            <listitem><simpara>nickname: The nickname of the user to be added to this group.</simpara></listitem>
        </itemizedlist>
        
        <para>To remove a user from a user group the user must have
            cas/remove_group_entry permission on that particular user group.</para>
        
        <screen>
            casAdmin$ cas-group-remove-entry [<emphasis>options</emphasis>] user <emphasis>groupName</emphasis> <emphasis>nickname</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>groupName: The user group name to which the member needs to be added.</simpara></listitem>
            <listitem><simpara>nickname: The nickname of the user to be added to this group.</simpara></listitem>
        </itemizedlist>
        
        <para>If the group member being removed does not exist, an error is
            <emphasis>not</emphasis> thrown. </para>
        
        <para>To delete a user group, the user must have cas/delete_user_group entry
            permission on that user group. The group must be empty and also not be
            referenced from other entities in the database (for example, it should not
            be a member of some object group).</para>
        
        <screen>
            casAdmin$ cas-group-admin [<emphasis>options</emphasis>] user delete <emphasis>groupName</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            
            <listitem><simpara>groupName: The name of the user group to be deleted.</simpara></listitem>
        </itemizedlist>
        
        <para>If the user group specified does not exist, an error is <emphasis>not</emphasis> thrown. If the unenroll operation is successfull all policy data on that user group is purged.</para>
        
    </section>
    <section id="s-cas-manageObjectGp"><title>Maintaining Object Groups</title>
        
        <para>To create a new object group the user must have
            cas/create_object_group permission (that is, the user must have permission to
            perform the create_object_group action on the cas service type). The object
            group name should be unique across the CAS database. The create
            operation allows the user to choose a user group to have cas/grantAll
            permission on the created object group.</para>
        
        <screen>
            casAdmin$ cas-group-admin [<emphasis>options</emphasis>] object create <emphasis>userGpName</emphasis> <emphasis>groupName</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>userGpName: The user group to which cas/grantAll permission should be
                granted on this trust anchor entity.</simpara></listitem>
            <listitem><simpara>groupName: The name of the user group being created.</simpara></listitem>
        </itemizedlist>
        
        <para>To add to a member (an object group can have the following CasObjects
            as members, object, user, user group, service type, namespace or trust
            anchor) to an object group, the user must have cas/add_group_entry
            permission on that particular object group.</para>
        
        <screen>
            casAdmin$ cas-group-add-entry [<emphasis>options</emphasis>] object <emphasis>groupName</emphasis> <emphasis>objectSpecDesc</emphasis> <emphasis>objcetSpec</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>groupName: The object group name to which the member needs to be added.</simpara></listitem>
            <listitem><simpara>objectSpecDesc: The type of CasObject (trustAnchor (or) user (or)
                userGroup (or) object (or) namespace (or) service Type).</simpara></listitem>
            <listitem><simpara>objectSpec: The identifier for the CasObject the user is adding
                (nickname (or) nickname (or) groupName (or) 
                objectNamespace objectName (or) nickname (or) serviceTypeName).</simpara></listitem>
        </itemizedlist>
        
        <para>To remove an object from an object group the user must have
            cas/remove_group_entry permission on that particular object group:</para>
        
        <screen>
            casAdmin$ cas-group-remove-entry [<emphasis>options</emphasis>] object <emphasis>groupName</emphasis> <emphasis>objectSpec</emphasis> <emphasis>objectSpecDesc</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>groupName: The user group name to which the member needs to be added.</simpara></listitem>
            <listitem><simpara>objectSpecDesc: The type of CasObject (trustAnchor (or) user (or)
                userGroup (or) object (or) namespace (or) service Type).</simpara></listitem>
            <listitem><simpara>objectSpec: The identifier for the CasObject the user is adding
                (nickname (or) nickname (or) groupName (or) 
                objectNamespace objectName (or) nickname (or) serviceTypeName).</simpara></listitem>
        </itemizedlist>
        
        <para>If the group member being removed does not exist, an error is
            <emphasis>not</emphasis> thrown.</para>
        
        <para> To delete an object group the user must have cas/delete_user_group entry
            permission on that object group. The group must be empty.</para>
        
        <screen>
            casAdmin$ cas-group-admin [<emphasis>options</emphasis>] object delete <emphasis>groupName</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            
            <listitem><simpara>groupName: The name of the object group to be deleted.</simpara></listitem>
        </itemizedlist>
        
        <para>If the object group specified does not exist, an error is <emphasis>not</emphasis> thrown. If the unenroll operation is successfull all policy data on that user group is purged.</para>
        
    </section>
    <section id="s-cas-manageServiceGp"><title>Maintaining Service/Action Groups</title>
        <para>To create a new service/action group, the user must have
            cas/create_serviceAction_group permission (that is, the user must have
            permission to perform the create_serviceAction_group action on the cas service
            type). The serviceAction group name should be unique across the CAS
            database. The create operation allows the user to choose a user group
            to have cas/grantAll permission on the created serviceAction group.</para>
        
        <screen>
            casAdmin$ cas-group-admin [<emphasis>options</emphasis>] serviceAction create <emphasis>userGpName</emphasis> <emphasis>groupName</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>userGpName: The user group to which cas/grantAll permission should be
                granted on this trust anchor entity.</simpara></listitem>
            <listitem><simpara>groupName: The name of the serviceAction group being created.</simpara></listitem>
        </itemizedlist>
        
        <para>To add a service/Action to a serviceAction group the user must have
            cas/add_group_entry permission on that particular serviceAction group
            (that is, the user must have permission to perform add_group_entry action on
            that service action group).</para>
        
        <screen>
            casAdmin$ cas-group-add-entry [<emphasis>options</emphasis>] serviceAction <emphasis>groupName</emphasis> <emphasis>serviceTypeName</emphasis> <emphasis>actionName</emphasis>
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>groupName: The user group name to which the member needs to be added.</simpara></listitem>
            <listitem><simpara>serviceTypeName: The service type name part of the mapping to be added to the group.</simpara></listitem>
            <listitem><simpara>actionName: The action name part of the mapping to be added to the group.</simpara></listitem>
        </itemizedlist>
        
        <para>To remove a service/Action from a serviceAction group, the user must have
            cas/remove_group_entry permission on that particular serviceAction
            group.</para>
        
        <screen>
            casAdmin$ cas-group-remove-entry [<emphasis>options</emphasis>] serviceAction <emphasis>groupName</emphasis> <emphasis>serviceTypeName</emphasis> <emphasis>actionName</emphasis>
            
        </screen>
 
<para>       
        where:
</para>
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>groupName: The user group name to which the member needs to be added.</simpara></listitem>
            <listitem><simpara>serviceTypeName: The service type name part of the mapping to be added to the group.</simpara></listitem>
            <listitem><simpara>actionName: The action name part of the mapping to be added to the group.</simpara></listitem>
        </itemizedlist>

<para>        
        If the action being removed does not exist, an error is <emphasis>not</emphasis> thrown.
</para>
        
        <para>To delete a serviceAction group the user must have cas/delete_user_group
            entry permission on that serviceAction group. The group must be empty
            and also must not be referenced from any other entity in the
            database. Ffor example, it should not be a member of some object group.</para>
        
        <screen>
            casAdmin$ cas-group-admin [<emphasis>options</emphasis>] serviceAction delete <emphasis>groupName</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            
            <listitem><simpara>groupName: The name of the user group to be deleted.</simpara></listitem>
        </itemizedlist>
        
        <para>If the service action group specified does not exist, an error is
            <emphasis>not</emphasis> thrown. If the unenroll operation is successfull all
            policy data on that serviceAction group is purged.</para>
        
    </section>
    <section id="s-cas-managePermission"><title>Maintaining Permissions</title>
        
        <para>The user may grant permissions to a user group on an object or object group to perform a service action or service action group (that is, to
            perform any action that is a member of the service action group to
            which permission is granted), provided the user has has both:</para>
        
        <itemizedlist>
            <listitem><simpara>cas/grant permission on the object or object group, and</simpara></listitem>
            <listitem><simpara>permission to perform the service action or service action
                group on the object or object group.</simpara></listitem>
            
        </itemizedlist>
        
        <screen>
            casAdmin$ cas-rights-admin [<emphasis>options</emphasis>] grant <emphasis>userGroupName</emphasis>  <emphasis>objectSpecDesc</emphasis> <emphasis>objectSpec</emphasis>  <emphasis>actionSpecDesc</emphasis> <emphasis>actionSpec</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>userGroupName: The user group to grant permission for.</simpara></listitem>
            <listitem><simpara>objectSpec: The identifier for the object or object group.</simpara></listitem>
            <listitem><simpara>objectSpecDesc: The type (object or objectGroup).</simpara></listitem>
            <listitem><simpara>actionSpec: The identifier for action or action group.</simpara></listitem>
            <listitem><simpara>actionSpecDesc: The type (serviceAction or serviceActionGp).</simpara></listitem>
        </itemizedlist>
        
        <para>The user may revoke a policy in the CAS database provided the user has
            cas/revoke permission on the object or object group on which the policy
            is defined.</para>
        
        <screen>
            casAdmin$ cas-rights-admin [<emphasis>options</emphasis>] revoke <emphasis>userGroupName</emphasis>  <emphasis>objectSpecDesc</emphasis> <emphasis>objectSpec</emphasis>  <emphasis>actionSpecDesc</emphasis> <emphasis>actionSpec</emphasis>
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>userGroupName: The user group to grant permission for.</simpara></listitem>
            <listitem><simpara>objectSpecDesc: The type of CasObject (trustAnchor (or) user (or)
                userGroup (or) object (or) namespace (or) serviceType
                (or) userGroup (or)).</simpara></listitem>
            <listitem><simpara>objectSpec: The identifier for the object or object group.</simpara></listitem>
            <listitem><simpara>actionSpec: The identifier for the action or action  group.</simpara></listitem>
            <listitem><simpara>actionSpecDesc: The type (serviceAction or serviceActionGp).</simpara></listitem>
        </itemizedlist>
        
    </section>
</section>
<section id="s-cas-query-clients"><title>Using CAS Query Clients</title>
    
    <para> The CAS Query commands do not alter the state of the database and
        any CAS user who has cas/query permissions may use the commands to
        retrieve data from the CAS server.</para>
    
    <para>The following queries can be run against the CAS server. These are
        typically used by CAS clients (who may not be administrators).</para>
    
    <para>The user need cas/query permissions to perform these operations&mdash;that is, the user must have permission to query on the cas server object.</para>
    
    
    <section id="whoami"><title>Getting user's CAS identity</title>
        
        <screen>
            casUser$ cas-whoami [<emphasis>options</emphasis>]
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
        </itemizedlist>

<para>        
        Returns the CAS user nick of the client.
</para>
        
    </section>
    <section id="list"><title>Getting object list</title>
        
        <screen>
            casUser$ cas-list-object [<emphasis>options</emphasis>] type
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>type: trustAnchor (or) user (or) userGroup (or) object (or)
                objectGroup (or) objectGroup (or) namespace (or) serviceType (or)
                serviceAction (or) serviceActionGp.</simpara></listitem>
        </itemizedlist>
        
        <para>
            Returns a list of CasObjects in the database of the requested type.
        </para>
        
    </section>
    <section id="getObject"><title>Getting CAS object </title>
        
        <screen>
            casUser$ cas-get-object [<emphasis>options</emphasis>] type name
            
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>type: trustAnchor (or) user (or) object (or) namespace (or) service Type.</simpara></listitem>
            <listitem><simpara>name: nickname (or) nickname (or) objectNamesapce objectName
                (or) nickname (or) serviceTypeName (corresponding to the type).</simpara></listitem>
        </itemizedlist>
        
        <para>
            Returns the particular object of the said type and name.
        </para>
        
    </section>
    <section id="groupList"><title>Getting group members</title>
        
        <screen>
            
            casUser$ cas-group-list-entries [<emphasis>options</emphasis>] type name
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>options: <ulink url="#client-options">Client options</ulink></simpara></listitem>
            <listitem><simpara>type: The type of the group (user (or) object (or) serviceAction).</simpara></listitem>
            <listitem><simpara>name: The name of the group.</simpara></listitem>
        </itemizedlist>
        
        <para>
            Returns list of group members.
        </para>
        
    </section>
    <section id="policyList"><title>Getting policy information </title>
        
        <screen>
            casUser$ cas-find-policies [-c <emphasis>cas-url</emphasis>] type name
        </screen>
        
        <para>
            where:
        </para>
        
        <itemizedlist>
            <listitem><simpara>[-c <emphasis>cas-url</emphasis>]: The URL of the CAS service.</simpara></listitem>
            <listitem><simpara>type: trustAnchor (or) user (or) userGroup (or) object (or)
                objectGroup (or) namespace (or) service Type (or) serviceAction
                (or) serviceActionGroup.</simpara></listitem>
            <listitem><simpara>name: nickname (or) nickname (or) groupName (or)
                objectNamespace|objectName (or) groupName (or) nickname (or)
                serviceTypeName (or) serviceType/Action (or) groupName
                (corresponding to the type).</simpara></listitem>
            
        </itemizedlist>
        
        <para>
            Returns all applicable policies, both policies that are implicit to
            the CAS server and those that are external.
        </para>
        
    </section>
</section>
<section id="client-options">
&WS_AA_CAS_Interface_Commandline_Common_Options_Frag;
    </section>