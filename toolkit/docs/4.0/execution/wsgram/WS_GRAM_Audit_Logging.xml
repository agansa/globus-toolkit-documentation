<important>
  <para>
    This feature is only available starting with GT 4.0.5.
  </para>
</important>
   
   <section id="s-wsgram-audit-logging-overview"><title>Overview</title>
 <!--
    <para>
	  For an introduction and overview about audit logging look
      <ulink url="http://www.globus.org/solutions/">here</ulink>. Audit logging in WS-GRAM is
	  done 3 times in a job's lifecycle: When the processing starts, when the job is submitted
	  to the local resource manager and when it's fully processed or when it fails.
    </para>
-->
      <para>
      WS-GRAM includes mechanisms to provide access to audit and
      accounting information associated with jobs that WS-GRAM submits to a local
      resource manager (LRM) such as PBS, LSF, or Condor.</para>
     
     <note> <para>Remember, GRAM is not a local resource manager but rather a protocol engine for
      communicating with a range of different local resource managers using a
      standard message format.</para></note>
     
      <para>In some scenarios, it is desirable to get general information about the usage of the
      underlying LRM, such as:</para>
      <itemizedlist>
         <listitem><para>What kinds of jobs were submitted via GRAM?</para></listitem>
         <listitem><para>How long did the processing of a job take?</para></listitem>
         <listitem><para>How many jobs were submitted by user X?</para></listitem>
      </itemizedlist>
     <para> The following three use cases give a better overview of the meaning and
      purpose of auditing and accounting:</para>
      <orderedlist>
         <listitem><para>
           <emphasis role="bold">Group Access</emphasis>.
           A grid resource provider allows a remote service (e.g.,
           a gateway or portal) to submit jobs on behalf of multiple users. The
           grid resource provider only obtains information about the identity of
           the remote submitting service and thus does not know the identity of
           the users for which the grid jobs are submitted. This group access is
           allowed under the condition that the remote service stores audit
           information so that, if and when needed, the grid resource provider
           can request and obtain information to track a specific job back to an
           individual user.
         </para></listitem>
         <listitem><para>
           <emphasis role="bold">Query Job Accounting</emphasis>.
           A client that submits a job needs to be able to
           obtain, after the job has completed, information about the resources
           consumed by that job. In portal and gateway environments where many
           users submit many jobs against a single allocation, this per-job
           accounting information is needed soon after the job completes so that
           client-side accounting can be updated. Accounting information is
           sensitive and thus should only be released to authorized parties.
         </para></listitem>
         <listitem><para>
           <emphasis role="bold">Auditing</emphasis>.
           In a distributed multi-site environment, it can be
           necessary to investigate various forms of suspected intrusion and
           abuse. In such cases, we may need to access an audit trail of the
           actions performed by a service. When accessing this audit trail, it
           will frequently be important to be able to relate specific actions
           to the user.
         </para></listitem>
      </orderedlist>

     <para>Audit logging in WS-GRAM is
       done 3 times in a job's lifecycle: When the processing starts, when the job is submitted
       to the local resource manager and when it's fully processed or when it fails.</para>
</section>
       <section><title>Audit and Accounting Records</title>
         
    <para>
           While audit and accounting records may be generated and stored by
           different entities in different contexts, we make the following assumptions in this chapter:</para>
           <!-- 
          <itemizedlist> 
              <listitem><para>Audit records are generated by the GRAM service itself and 
           accounting records by the LRM to which the GRAM service submits jobs. </para></listitem>
           
           <listitem><para>Audit records are stored in a DBMS indexed by a Grid Job Identifier (GJID), while 
           accounting records are maintained by the LRM indexed by a local job identifier (JID).</para></listitem>
           
           <listitem><para>Audit records contain the data described below; accounting records may contain 
             all information about the duration and the resource-usage of a job. </para></listitem>
          </itemizedlist>
         -->
         <informaltable>
           <tgroup cols="3">
             <thead>
               <row>
                 <entry>&nbsp;</entry>
                 <entry>Audit Records</entry>
                 <entry>Accounting Records</entry>
                 </row>
               </thead>
             <tbody>
               <row>
                 <entry>Generated by:</entry>
                 <entry>GRAM service</entry>
                 <entry>LRM to which the GRAM service submits jobs</entry>
               </row>
               <row>
                 <entry>Stored in:</entry>
                 <entry>Database, indexed by GJID</entry>
                 <entry>LRM, indexed by JID</entry>
               </row>
               <row>
                 <entry>Data that is stored:</entry>
                 <entry>See list below.</entry>
                 <entry>May include all information about the duration and resource-usage of a job</entry>
               </row>
             </tbody>
           </tgroup>
           </informaltable>
      <para>
        The audit record of each job contains the following data:</para>
      <itemizedlist>
        <listitem><para>
          <emphasis role="strong">job_grid_id</emphasis>:
          String representation of the resource EPR
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">local_job_id</emphasis>:
          Job/process id generated by the scheduler
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">subject_name</emphasis>:
          Distinguished name (DN) of the user
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">username</emphasis>:
          Local username
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">idempotence_id</emphasis>:
          Job id generated on the client-side
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">creation_time</emphasis>:
          Date when the job resource is created
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">queued_time</emphasis>:
          Date when the job is submitted to the scheduler
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">stage_in_grid_id</emphasis>:
          String representation of the stageIn-EPR (RFT)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">stage_out_grid_id</emphasis>:
          String representation of the stageOut-EPR (RFT)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">clean_up_grid_id</emphasis>:
          String representation of the cleanUp-EPR (RFT)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">globus_toolkit_version</emphasis>:
          Version of the server-side GT
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">resource_manager_type</emphasis>:
          Type of the resource manager (Fork, Condor, ...)
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">job_description</emphasis>:
          Complete job description document
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">success_flag</emphasis>:
          Flag that shows whether the job failed or finished successfully
        </para></listitem>
        <listitem><para>
            <emphasis role="strong">finished_flag</emphasis>:
          Flag that shows whether the job is already fully processed or
          still in progress
        </para></listitem>
      </itemizedlist>
       </section>
     
     <section><title>Converting EPR to GRAM Service GJID</title>
      <para>  
        The WS-GRAM service returns an EPR that is used to control the job. However, the
        EPR is an XML document and cannot effectively be used as a primary key
        for a database table. Therefore, the job's EPR needs to be converted to an
        acceptable GJID format.  </para>
        <para>  
        Beginning with GT 4.0.5, a utility class <computeroutput>EPRUtil.java</computeroutput> 
          is available to both the GRAM 
        service before storing the audit record and the GRAM client before
        getting audit information from the audit database.
      </para></section>
<section><title>Accessing Audit and Accounting Information</title>
      <para>
        To connect the two sets of records, both audit and accounting,
        we require that GRAM records the JID in each audit record that it
        generates. It is then straightforward for an audit service to respond
        to requests such as &quot;Give me the charge of the job with JID x&quot;  by:
          
         <orderedlist> 
           <listitem><para>first selecting matching record(s) from the audit table, </para></listitem>
           <listitem><para>then using the local JID(s) to join to the accounting table of the LRM and access relevant accounting record(s).</para></listitem></orderedlist>
      </para>
      <para>
        We propose a Web Service interface for accessing audit and accounting
          information.  <ulink url="http://www.globus.org/toolkit/docs/4.0/techpreview/ogsadai/">OGSA-DAI</ulink> 
          is a WSRF service that can create a single
        virtual database from two or more remote databases. 
        In the future, other per-job information such as job performance data
        could be stored using the GJID or local JID as an index, and then made
        available in the same virtual database.</para></section>

<section><title>For More Information</title>       
  <para>The rest of this chapter focuses on how to configure WS-GRAM to enable
        Audit-Logging. A case study for TeraGrid can be read
        <ulink url="http://www.teragridforum.org/mediawiki/index.php?title=GRAM4_Audit">
            here</ulink>, which also includes more information about how to use this data to get accounting
           information of a job, query the audit database for information
           via a Web Services interface, etc.
      </para>
</section>


  <section id="s-wsgram-audit-logging-config"><title>Configuration</title>
    <para>
        Configuration depends on the version of WS-GRAM being used. Independent from
        the version though is, that audit records are stored in a database and
        that audit logging is disabled by default.
    </para>
    
    <section id="gram4-audit-logging-config-createdb">
      <title>Creating the Audit Database</title>
        <para>
          Audit records are stored in a database which must be set up once.
        </para>
      
        <section><title>MySQL</title>
          <para>
            The following describes how to set up the audit database in MySQL:
          </para>
          <orderedlist>
            <listitem>
              <para>Create a database inside of MySQL</para>
            </listitem>
            <listitem>
              <para>
                Grant necessary privileges to the account that will be used
                to upload the audit records in the audit. Typically the "globus"
                account.
              </para>
            </listitem>
            <listitem>
              <para>Use the schema to create the table</para>
            </listitem>
          </orderedlist>
          <screen>host:~ feller$ mysql -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 16
Server version: 5.0.37 MySQL Community Server (GPL)

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; create database auditDatabase;
Query OK, 1 row affected (0.09 sec)
 
mysql&gt; GRANT ALL ON auditDatabase.* to globus@localhost identified by "foo";
Query OK, 0 rows affected (0.32 sec)

mysql&gt; exit
Bye
host:~ feller$ mysql -u globus -p auditDatabase &lt; ${GLOBUS_LOCATION}/share/gram-service/gram_audit_schema_mysql.sql 
Enter password: 
host:~ feller$</screen>
          </section>
      
        <section><title>PostgreSQL</title>
          <para>
            The following describes how to set up the audit database in PostgreSQL:
          </para>
          <orderedlist>
            <listitem>
              <para>Create a database inside of PostgreSQL</para>
            </listitem>
            <listitem>
              <para>
                Grant necessary privileges to the account that will be used
                to upload the audit records in the audit. Typically the "globus"
                account.
              </para>
            </listitem>
            <listitem>
              <para>Use the schema to create the table:</para>
            </listitem>
          </orderedlist>
          <screen># Connect as postgres admin
create database gt4audit\g
create user gt4auditload with encrypted password '&lt;password1&gt;'\g
create user gt4auditview with encrypted password '&lt;password2&gt;'\g
\c gt4audit
\i gram_audit_schema_postgres-8.0.sql
grant insert on gram_audit_table to gt4auditload\g
grant select on gram_audit_table to gt4auditview\g
\q</screen>
          <para>
            You must also update <filename>pg_hba.conf</filename> to allow
            connections from container host (<filename>pg_hba.conf</filename>
            configures client authentication and is
            stored in the database cluster's data directory):
          </para>
          <screen>hostssl   gt4audit  gt4auditload   &lt;containerhostip&gt; 255.255.255.255 md5
host      gt4audit  gt4auditload   &lt;containerhostip&gt; 255.255.255.255 md5
hostssl   gt4audit  gt4auditview   &lt;containerhostip&gt; 255.255.255.255 md5
host      gt4audit  gt4auditview   &lt;containerhostip&gt; 255.255.255.255 md5</screen>
        </section>

      </section>
      
      <section id="gram4-audit-logging-config-405-408">
        <title>Configuration in GT 4.0.5 - GT 4.0.8</title>
      
        <para>To turn on Audit Logging, follow these steps:</para>
          <section><title>Log4J</title>
            <para>
              Add the following lines to the Log4j configuration in
              <computeroutput>$GLOBUS_LOCATION/container-log4j.properties</computeroutput>
              to enable audit logging:
            </para>
           <screen># GRAM AUDIT
log4j.category.org.globus.exec.service.exec.StateMachine.audit=DEBUG, AUDIT
log4j.appender.AUDIT=org.globus.exec.utils.audit.AuditDatabaseAppender
log4j.appender.AUDIT.layout=org.apache.log4j.PatternLayout
log4j.additivity.org.globus.exec.service.exec.StateMachine.audit=false</screen>
          </section>
      
          <section><title>JNDI</title>
            <para>
              Add or modify the database configuration where the audit records are
              stored in <computeroutput>$GLOBUS_LOCATION/etc/gram-service/jndi-config.xml
              </computeroutput>. The following shows an example with MySQL as RDBMS:
            </para>
            <screen>&lt;resource name="auditDatabaseConfiguration" type="org.globus.exec.service.utils.AuditDatabaseConfiguration"&gt;
  &lt;resourceParams&gt;
    &lt;parameter&gt;
      &lt;name&gt;factory&lt;/name&gt;
      &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;driverClass&lt;/name&gt;
      &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;url&lt;/name&gt;
      &lt;value&gt;jdbc:mysql://&lt;host&gt;[:port]/auditDatabase&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;user&lt;/name&gt;
      &lt;value&gt;globus&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;password&lt;/name&gt;
      &lt;value&gt;foo&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;globusVersion&lt;/name&gt;
      &lt;value&gt;4.0.5&lt;/value&gt;
    &lt;/parameter&gt;
  &lt;/resourceParams&gt;
&lt;/resource&gt;</screen>
          </section>

      </section>

      <section id="gram4-audit-logging-config-409+"><title>Configuration in GT 4.0.9+</title>
         <para>
           Audit logging is configured entirely in WS-GRAM's JNDI configuration in
           <computeroutput>${GLOBUS_LOCATION}/etc/gram-service/jndi-config.xml</computeroutput>,
           using 2 sections: a general configuration section and a database section:
         </para>

         <section id="gram4-audit-logging-config-general"><title>General configuration</title>
           <screen>&lt;resource name="auditConfiguration" type="org.globus.exec.service.exec.utils.audit.AuditConfiguration"&gt;
  &lt;resourceParams&gt;
    ....
    &lt;parameter&gt;
      &lt;name&gt;enableAuditLogging&lt;/name&gt;
      &lt;value&gt;false&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;globusVersion&lt;/name&gt;
      &lt;value&gt;4.0.9&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;fallbackStorageDirectory&lt;/name&gt;
      &lt;value&gt;/opt/gt409/share/gram-service/&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;dbUploadRetryInterval&lt;/name&gt;
      &lt;value&gt;300&lt;/value&gt;
    &lt;/parameter&gt;
  &lt;/resourceParams&gt;
&lt;/resource&gt;</screen>

           <para>
             <informaltable>
               <tgroup cols="2">
               <thead>
                 <row>
                    <entry>Parameter</entry>
                    <entry>Explanation</entry>
                 </row>
               </thead>
               <tbody>
                 <row>
                   <entry>enableAuditLogging</entry>
                   <entry><computeroutput>true</computeroutput> to turn audit
                     logging on, <computeroutput>false</computeroutput> to
                     turn it off
                   </entry>
                 </row>
                 <row>
                   <entry>globusVersion</entry>
                   <entry>Version of the Globus Toolkit, does not have to be edited</entry>
                 </row>
                 <row>
                   <entry>fallbackStorageDirectory</entry>
                   <entry>If the insert or the update of a record into the
                     database system fails because the database is down or 
                     misconfigured, the record is stored as a file in the
                     directory specified by this parameter. This ensures that
                     no records are lost. Periodical attempts to upload the records
                     being stored in this directory into the database are performed
                     by WS-GRAM. Once the upload of a fallback record was successful
                     the record file will be deleted. This directory must be readable
                     and writable for the account that runs the container.
                   </entry>
                 </row>
                 <row>
                   <entry>dbUploadRetryInterval</entry>
                   <entry>Time in seconds after which, periodically, an attempt is
                     made to upload fallback records into the database.
                   </entry>
                 </row>              
               </tbody>
               </tgroup>
             </informaltable>
           </para>

         </section>
      
         <section id="gram4-audit-logging-config-database"><title>Database configuration</title>
           <screen>&lt;resource name="auditDatabase" type="javax.sql.DataSource"&gt;
  &lt;resourceParams&gt;
  ....
    &lt;parameter&gt;
      &lt;name>driverClassName&lt;/name&gt;
      &lt;value&gt;driver class name&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;url&lt;/name&gt;
      &lt;value&gt;db connection url&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;username&lt;/name&gt;
      &lt;value&gt;user to access the database&lt;/value&gt;
    &lt;/parameter&gt;
    &lt;parameter&gt;
      &lt;name&gt;password&lt;/name&gt;
      &lt;value&gt;password to access the database&lt;/value&gt;
    &lt;/parameter&gt;
  &lt;/resourceParams&gt;
&lt;/resource&gt;</screen>
           <para>
             We support 2 database systems: MySQL, PostgreSQL.
             The following table gives an overview which values must be used for
             the parameters url and driverClassName in the above JNDI configuration
             for the various db systems. Derby is configured as the default DB system.
             <informaltable>
               <tgroup cols="3">
               <thead>
                 <row>
                   <entry>DB system</entry>
                   <entry>driverClassName</entry>
                   <entry>url</entry>
                 </row>
               </thead>
               <tbody>
                 <row>
                   <entry>MySQL</entry>
                   <entry>com.mysql.jdbc.Driver</entry>
                   <entry>jdbc:mysql://HOST[:PORT]/auditDatabase</entry>
                 </row>
                 <row>
                   <entry>PostgreSQL</entry>
                   <entry>org.postgresql.Driver</entry>
                   <entry>jdbc:postgresql://HOST[:PORT]/auditDatabase</entry>
                 </row>
               </tbody>
               </tgroup>
             </informaltable>
           </para>
         </section>
    
      </section>
      
    </section>