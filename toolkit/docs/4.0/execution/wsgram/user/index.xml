<title>GT 4.0 WS GRAM: User's Guide</title>
<titleabbrev>User's Guide</titleabbrev>

<section id="s-wsgram-user-introduction"><title>Introduction</title>
<para>
    GRAM services provide secure job submission to many types of <glossterm linkend="job-scheduler">job schedulers</glossterm> 
  for users who have the right to access a job hosting resource in a Grid
    environment.  The existence of a <link linkend="s-wsgram-user-proxygen">valid proxy</link>
  is in fact required for job submission.  All GRAM job submission options are
  supported transparently through the embedded request document input. In fact,
    the job startup is done by submitting a client-side provided <glossterm linkend="job-description">job description</glossterm>
  to the GRAM services. This submission can be made by end-users with the 
    GRAM <link linkend="r-wsgram-commandline">command-line tools</link>.
</para>
</section>

<section id="s-wsgram-user-newfunctionality"><title>New Functionality</title>

<section id="s-wsgram-user-submissionid"><title>Submission ID</title>
<para>i
  A submission ID may be used in the GRAM protocol for reliability in the face
  of message faults or other transient errors in order to ensure that at most
  one instance of a job is executed, i.e. to prevent accidental duplication of
  jobs under rare circumstances with client retry on failure. By default, the
    <glossterm linkend="globusrun-ws">globusrun-ws</glossterm> program will generate a submission ID (<glossterm linkend="uuid">uuid</glossterm>).  One can override
  this behavior by supplying a submission ID as a command line argument.
</para>
<para>
  If a user is unsure whether a job was submitted successfully, he
  should resubmit using the same ID as was used for the previous attempt.
</para>

</section>


<section id="s-wsgram-user-jobholdandrelease"><title>Job hold and release</title>
<para>
It is possible to specify in a job description that the job be 
put on hold when it reaches a chosen state (see <ulink url="../WS_GRAM_Approach.html">GRAM
Approach</ulink>
documentation for more information about the executable 
job state machine, and see the<ulink url="schemas/mj_types.html#element_holdState"> job
description XML schema documentation</ulink>for information about how to specify a held
state).
This is useful for instance when a GRAM client wishes to directly 
access output files written by the job (as opposed to waiting for 
the stage-out step to transfer files from the job host). The client would  
request that the file cleanup process be held until released, 
giving the client an opportunity to fetch all remaining/buffered 
data after the job completes but <emphasis>before</emphasis> the output files are 
deleted. </para>
<para>
This is used by <computeroutput>globusrun-ws</computeroutput> in order to ensure client-side 
streaming of remote files in batch mode.
</para>
</section>



<section id="s-wsgram-user-multijobs"><title>MultiJobs</title>
    <para>The new job description XML schema allows for specification of a <glossterm linkend="multijob">multijob</glossterm> 
i.e. a job that is itself composed of several executable jobs.
This is useful in order to bundle a group of jobs together and submit 
them as a whole to a remote GRAM installation.</para>
</section>
<section id="s-wsgram-user-jobandprocessrendezvous"><title>Job and process rendezvous</title>
<para>WS GRAM services implement a <ulink url="../wsrendezvous/index.html">rendezvous</ulink> 
mechanism to perform synchronization between job processes in a multiprocess job and 
between subjobs in a multijob. The job application can in fact register binary information, for 
instance process information or subjob information, and get notified when 
all the other processes or subjobs have registered their own information.
This is for instance useful for parallel jobs which need to rendezvous 
at a "barrier" before proceeding with computations, in the case when no 
native application API is available to help do the rendezvous.</para>
</section>
</section>

<section>
   <title>Changed Functionality</title>
   <section>
     <title>Independent resource keys</title>
     <para>
       <emphasis role="bold">Note</emphasis>: This change is done in GT 4.0.5
     </para>
     <para>  
       WS GRAM enables the client to add a self-generated resource key to the
       input type when submitting a new job request to the
       ManagedJobFactoryService (MJFS). This enables the client to keep in
       contact to the job in case the server fails after the job was created but
       before the EndpointReference (EPR) of the newly created job was sent to
       the client.The client is then able to create an EPR itself with the
       self-generated job UUID and the address of the
       ManagedExecutableJobService (MEJS) and query for the state of the job.
     </para>
     <para>
       In former versions of WS GRAM the job UUID that was generated on the
       client-side was used in WS GRAM as the resource key of the created job
       resource. This has changed: WS GRAM now creates its own job UUID
       even if the client provides one in the input of its call to the MJFS
       and returns this job key inside the EPR which is returned to the client.
       With the self-generated job key the client can still contact the MJFS.
       The MJFS will simply use that mapping then.
       But the client can't contact the MEJS with that self-generated job key
       as part of an EPR in order to query for job state.
     </para>
     <section>
       <title>Open Questions</title>
       <para>
         <itemizedlist>
           <listitem>
             <para>
               I can't see that the mappings added to the
               idempotenceIdMap are removed at any time. Should we add this in
               the remove()-method of the MEJR?
             </para>
           </listitem>
         </itemizedlist>
       </para>    
     </section>  
   </section>
</section>  

<section id="s-wsgram-user-usagescenarios"><title>Usage scenarios</title>

<section id="s-wsgram-user-proxygen"><title>Generating a valid proxy</title>
<para>In order to generate a valid proxy file, use the 
<ulink url="../../security/prewsaa/user-index.html#grid-proxy-init">grid-proxy-init</ulink> 
tool available under <computeroutput>$GLOBUS_LOCATION/bin</computeroutput>:
<screen>
% bin/grid-proxy-init
Your identity: /O=Grid/OU=GlobusTest/OU=simpleCA.mymachine/OU=mymachine/CN=John Doe
Enter GRID pass phrase for this identity:
Creating proxy ................................. Done
Your proxy is valid until: Tue Oct 26 01:33:42 2004
</screen>
</para>
</section>

<section id="s-wsgram-user-simplejob"><title>Submitting a simple job</title>

<para>
  Use the <computeroutput>globusrun-ws</computeroutput> program to submit a
  simple job without writing a job description document.  Use the -c argument,
  a job description will be generated assuming the first arg is the executable
  and the remaining are arguments.  For example:
</para>

<screen>
   % globusrun-ws -submit -c /bin/touch touched_it
   Submitting job...Done.
   Job ID: uuid:4a92c06c-b371-11d9-9601-0002a5ad41e5
   Termination time: 04/23/2005 20:58 GMT
   Current job state: Active
   Current job state: CleanUp
   Current job state: Done
   Destroying job...Done.
</screen>

<para>Confirm that the job worked by verifying the file was touched:</para>
<screen>
   % ls -l ~/touched_it 
   -rw-r--r--  1 smartin globdev 0 Apr 22 15:59 /home/smartin/touched_it

   % date
   Fri Apr 22 15:59:20 CDT 2005
</screen>

<para>
  Note: you did not tell globusrun-ws where to run your job, so the default
  of localhost was used.
</para>

</section> <!-- s-wsgram-user-simplejob -->


<section id="s-wsgram-user-jobwithcontact"><title>Submitting a job with the contact string</title>

<para>
  Use globusrun-ws to submit the same touch job, but this time specify the 
  contact string.
</para>

<screen>
   % globusrun-ws -submit -F https://lucky0.mcs.anl.gov:8443/wsrf/services/ManagedJobFactoryService -c /bin/touch touched_it
   Submitting job...Done.
   Job ID: uuid:3050ad64-b375-11d9-be11-0002a5ad41e5
   Termination time: 04/23/2005 21:26 GMT
   Current job state: Active
   Current job state: CleanUp
   Current job state: Done
   Destroying job...Done.
</screen>

<para>
  Try the same job to a remote host.  Type globusrun-ws -help to learn the
  details about the contact string.
</para>

</section>
    <!-- s-wsgram-user-jobwithcontact -->

    <section id="s-wsgram-user-specifyingsimplejob"><title>Submitting a job with the job description</title>

<para>The specification of a job to submit is to be written by the user in a 
  job description XML file. 
</para>
<para>Here is an example of a simple job description:</para>
<screen>
&lt;job&gt;
    &lt;executable&gt;/bin/echo&lt;/executable&gt;
    &lt;argument&gt;this is an example_string &lt;/argument&gt;
    &lt;argument&gt;Globus was here&lt;/argument&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
&lt;/job&gt;
</screen>

<para>
  Tell globusrun-ws to read the job description from a file, using the -f
  argument:
</para>

<screen>
% bin/globusrun-ws -submit -f test_super_simple.xml
Submitting job...Done.
Job ID: uuid:c51fe35a-4fa3-11d9-9cfc-000874404099
Termination time: 12/17/2004 20:47 GMT
Current job state: Active
Current job state: CleanUp
Current job state: Done
Destroying job...Done.
</screen>
<para>

Note the usage of the substitution variable <computeroutput>${GLOBUS_USER_HOME}</computeroutput> 
which resolves to the user home directory.</para>
<para>
Here is an example with more job description parameters:</para>
<screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;job&gt;
    &lt;executable&gt;/bin/echo&lt;/executable&gt;
    &lt;directory&gt;/tmp&lt;/directory&gt;
    &lt;argument&gt;12&lt;/argument&gt;
    &lt;argument&gt;abc&lt;/argument&gt;
    &lt;argument&gt;34&lt;/argument&gt;
    &lt;argument&gt;this is an example_string &lt;/argument&gt;
    &lt;argument&gt;Globus was here&lt;/argument&gt;
    &lt;environment&gt;
        &lt;name&gt;PI&lt;/name&gt;
        &lt;value&gt;3.141&lt;/value&gt;
    &lt;/environment&gt;
    &lt;stdin&gt;/dev/null&lt;/stdin&gt;
    &lt;stdout&gt;stdout&lt;/stdout&gt;
    &lt;stderr&gt;stderr&lt;/stderr&gt;
    &lt;count&gt;2&lt;/count&gt;
&lt;/job&gt;
</screen>

<para>Note that in this example, a <computeroutput>&lt;directory&gt;</computeroutput> element specifies the current directory for the execution 
  of the command on the execution machine to be <computeroutput>/tmp</computeroutput>, and the standard output is 
  specified as the relative path <computeroutput>stdout</computeroutput>. The output is therefore written to <computeroutput>/tmp/stdout</computeroutput>: 
</para>
<screen>
% cat /tmp/stdout
12 abc 34 this is an example_string  Globus was here
</screen>

    </section>
    <section id="s-wsgram-user-delegating"><title>Delegating credentials</title>
<para>
    There are three different uses of delegated credentials: 
    1) for use by the <glossterm linkend="mejs">MEJS</glossterm> to create a remote user proxy, 
    2) for use by the MEJS to contact RFT, and 
    3) for use by RFT to contact the GridFTP servers.  The EPRs to each of these are
specified in three job description elements--they are jobCredentialEndpoint,
stagingCredentialEndpoint, and transferCredentialEndpoint respectively.  Please
see the <ulink url="#s-wsgram-Public_Interfaces-domain-schema">job description
schema</ulink> and <ulink url="schemas/rft_types.html">RFT
transfer request schema</ulink> documentation for more details about these
elements.
</para>

<para>
The <computeroutput>globusrun-ws</computeroutput> client can either delegate
these credentials automatically for a particular job, or it can reuse
pre-delegated credentials (see next paragraph) through the use of command-line
arguments for specifying the credentials' EPR files.  Please see the
<ulink url="#s-wsgram-user-commandline"> WS GRAM command-line tools
documentation</ulink> for details on these command-line arguments.
</para>

<para>It is possible to use delegation 
<ulink url="../../security/delegation/user-index.html#commandline">command-line
clients</ulink> to obtain and refresh delegated credentials in order to use them
when submitting jobs to WS GRAM. This, for instance, enables the submission of
many jobs using a shared set of delegated credentials.  This can significantly
decrease the number of remote calls for a set of jobs, thus improving
performance.
</para>


</section>
<section id="s-wsgram-user-findingschedulers"><title>Finding which schedulers are interfaced by the WS GRAM installation</title>

<para>Unfortunately there is no option yet to print the list of local resource 
managers supported by a given GRAM service installation. 
Such information must currently be provided out of band to the user. The <emphasis>GRAM name</emphasis> 
of  local resource managers for which GRAM support has been installed can be obtained 
by looking at the GRAM configuration on the GRAM server-side machine, as explained 
    <link linkend="s-wsgram-Interface_Config_Frag-managerconfig">here</link>.
</para><para>
The GRAM name of the local resource manager can be used with the <emphasis>factory type</emphasis> 
option of the job submission command-line tool to specify which factory resource to 
use when submitting a job. 
</para>

</section>
<section id="s-wsgram-user-specifyingstaging"><title>Specifying file staging in the job description</title>

<para>In order to do file staging one must add specific elements to the job description and delegate credentials appropriately (see
<ulink url="#s-wsgram-user-delegating">Delegating credentials</ulink>). The 
file transfer directives follow the <ulink url="schemas/rft_types.html">RFT
syntax</ulink>, which allows only for third-party transfers.  Each file transfer
must therefore specify a source URL and a destination URL.  URLs are specified
as GridFTP URLs (for remote files) or as file URLs (for files local to the
service--these are converted internally to full GridFTP URLs by the service).
</para>
<para>
For instance, in the case of staging a file <emphasis>in</emphasis>, the source
URL would be a GridFTP URL (for instance
<computeroutput>gsiftp://job.submitting.host:2811/tmp/mySourceFile
</computeroutput>) resolving to a source document accessible on the file system
of the job submission machine (for instance <computeroutput>/tmp/mySourceFile
</computeroutput>). At run-time the Reliable File Transfer service used by the
MEJS on the remote machine would reliably fetch the remote file using the
GridFTP protocol and write it to the specified local file (for instance 
<computeroutput>file:///${GLOBUS_USER_HOME}/my_transfered_file</computeroutput>,
which resolves to  <computeroutput>~/my_transfered_file</computeroutput>). Here
is how the stage-in directive would look like:

<screen>
    &lt;fileStageIn&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;<computeroutput>gsiftp://job.submitting.host:2811/tmp/mySourceFile</computeroutput>&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;<computeroutput>file:///${GLOBUS_USER_HOME}/my_transfered_file</computeroutput>&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageIn&gt;
</screen> 
</para>
<para><emphasis>Note:</emphasis> additional RFT-defined quality of service requirements can be specified 
      for each transfer. See the RFT documentation for more information.
</para>
<para>
Here is an example job description with file stage-in and stage-out:</para>

<screen>
&lt;job&gt;
    &lt;executable&gt;my_echo&lt;/executable&gt;
    &lt;directory&gt;${GLOBUS_USER_HOME}&lt;/directory&gt;
    &lt;argument&gt;Hello&lt;/argument&gt;
    &lt;argument&gt;World!&lt;/argument&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;fileStageIn&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;gsiftp://job.submitting.host:2811/bin/echo&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;file:///${GLOBUS_USER_HOME}/my_echo&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageIn&gt;
    &lt;fileStageOut&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;file:///${GLOBUS_USER_HOME}/stdout&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;gsiftp://job.submitting.host:2811/tmp/stdout&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageOut&gt;
    &lt;fileCleanUp&gt;
        &lt;deletion&gt;
            &lt;file&gt;file:///${GLOBUS_USER_HOME}/my_echo&lt;/file&gt;
        &lt;/deletion&gt;
    &lt;/fileCleanUp&gt;
&lt;/job&gt;
</screen>

<para>Note that the job description XML does not need to include a reference to the schema 
  that describes its syntax. As a matter of fact it is possible to omit the namespace 
  in the GRAM job description XML elements as well. The submission of this job to the GRAM services causes the following sequence 
  of actions:
</para>
<orderedlist>
<listitem><simpara> The <computeroutput>/bin/echo</computeroutput> executable is transfered from the submission machine 
    to the GRAM host file system. The destination location is the HOME directory of the 
    user on behalf of whom the job is executed by the GRAM services 
    (see <computeroutput>&lt;fileStageIn&gt;</computeroutput>).</simpara></listitem>
<listitem><simpara> The transfered executable is used to print a test string  
     (see <computeroutput>&lt;executable&gt;</computeroutput>, <computeroutput>&lt;directory&gt;</computeroutput> and 
      the <computeroutput>&lt;argument&gt;</computeroutput> elements) on the standard output, which is 
      redirected to a local file (see <computeroutput>&lt;stdout&gt;</computeroutput>).</simpara></listitem>
<listitem><simpara> The standard output file is transfered to the submission machine 
     (see <computeroutput>&lt;fileStageOut&gt;</computeroutput>).</simpara></listitem>
<listitem><simpara> The file that was initially transfered during the stage-in phase is removed 
     from the file system of the GRAM installation (see <computeroutput>&lt;fileCleanup&gt;</computeroutput>).</simpara></listitem>
</orderedlist>
</section>

<section id="s-wsgram-user-specifyingextensions">
<title>Specifying and handling custom job description extensions.</title>

<note><simpara>
This feature has been added in GT 4.0.5. For versions older than 4.0.5 an update package
is available to upgrade one's installation. See the
<ulink url="http://www.globus.org/toolkit/downloads/development/">downloads</ulink>
page for the latest links.
</simpara></note>

<para>
Basic support is provided for specifying custom extensions to the job
description. There are plans to improve the usability of this feature, but at
this time it involves a bit of work.
</para>
<para>
Specifying the actual custom elements in the job description is trivial. Simply add any elements that you need between the beginning and ending
<computeroutput>extensions</computeroutput> tags at the bottom of the job
description as in the following basic example:
<screen>
&lt;job&gt;
    &lt;executable&gt;/home/user1/myapp&lt;/executable&gt;
    &lt;extensions&gt;
        &lt;myData&gt;
            &lt;var1&gt;hello&lt;/var1&gt;
            &lt;var2&gt;world&lt;/var2&gt;
        &lt;/myData&gt;
    &lt;/extensions&gt;
&lt;/job&gt;
</screen>
</para>
<para>
To handle this data, you will have to alter the appropriate perl scheduler
script (i.e. fork.pm for the Fork scheduler, etc...) to parse the data returned 
from the <computeroutput>$description->extensions()</computeroutput> sub.
</para>

<para>
More information about job description extension support can be found in
the <ulink url="admin-index.html#s-wsgram-admin-extensions">Admin guide</ulink>
</para>

</section>

<!--
<section id="s-wsgram-user-jobidsub">
<title>Per-job customization with job ID substitution variable.</title>
<para>
To allow for customization of values, such as paths, on a per-job basis; a job
description substitution variable named "GLOBUS_JOB_ID" can be used.
</para>
<para>
For example:
</para>
<para>
<screen>
&lt;job&gt;
    &lt;executable>/bin/date&lt;executable&gt;
    &lt;stdout>/tmp/stdout.${GLOBUS_JOB_ID}&lt;stdout&gt;
    &lt;stderr>/tmp/stderr.${GLOBUS_JOB_ID}&lt;stderr&gt;
    &lt;fileStageOut&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;file:///tmp/stdout.${GLOBUS_JOB_ID}&lt;sourceUrl&gt;
         &lt;destinationUrl&gt;gsiftp://mymachine.mydomain.com/out.${GLOBUS_JOB_ID}&lt;destinationUrl&gt;
        &lt;transfer&gt;
    &lt;fileStageOut&gt;
&lt;job>
</screen>
</para>
</section>
-->

<section id="s-wsgram-user-specifyingmultijob"><title>Specifying and submitting a multijob</title>
<para>The job description XML schema allows for specification of a <emphasis>multijob</emphasis>
  i.e. a job that is itself composed of several executable jobs, which we 
  will refer to as <emphasis>subjobs</emphasis> 
  (<emphasis>note:</emphasis> subjobs cannot be multijobs, so the structure is not recursive).
  This is useful for instance in order to bundle a group of jobs together and submit 
  them as a whole to a remote GRAM installation.</para>
<para>
Note that no relationship can be specified between the subjobs of a multijob.
The subjobs are submitted to job factory services 
in their order of appearance in the multijob description.</para>
<para>
Within a <ulink url="schemas/gram_job_description.html#element_multiJob">multijob description</ulink>, 
each subjob description must come along with an endpoint for the factory to submit the subjob to. This 
enables the at-once submission of several jobs to different hosts.
The factory to which the multijob is submitted acts as an intermediary tier 
between the client and the eventual executable job factories. </para>
<para>
Here is an example of a multijob description:</para>

<screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;multiJob xmlns:gram="http://www.globus.org/namespaces/2004/10/gram/job" 
     xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"&gt;
    &lt;factoryEndpoint&gt;
        &lt;wsa:Address&gt;
            https://localhost:8443/wsrf/services/ManagedJobFactoryService
        &lt;/wsa:Address&gt;
        &lt;wsa:ReferenceProperties&gt;
            &lt;gram:ResourceID&gt;Multi&lt;/gram:ResourceID&gt;
        &lt;/wsa:ReferenceProperties&gt;
    &lt;/factoryEndpoint&gt;
    &lt;directory&gt;${GLOBUS_LOCATION}&lt;/directory&gt;
    &lt;count&gt;1&lt;/count&gt;

    &lt;job>
        &lt;factoryEndpoint&gt;
            &lt;wsa:Address&gt;https://localhost:8443/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
            &lt;wsa:ReferenceProperties&gt;
                &lt;gram:ResourceID&gt;Fork&lt;/gram:ResourceID&gt;
            &lt;/wsa:ReferenceProperties&gt;
        &lt;/factoryEndpoint&gt;
        &lt;executable&gt;/bin/date&lt;/executable&gt;
        &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout.p1&lt;/stdout&gt;
        &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr.p1&lt;/stderr&gt;
        &lt;count&gt;2&lt;/count&gt;
    &lt;/job&gt;

    &lt;job&gt;
        &lt;factoryEndpoint&gt;
            &lt;wsa:Address&gt;https://localhost:8443/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
            &lt;wsa:ReferenceProperties&gt;
                &lt;gram:ResourceID>Fork&lt;/gram:ResourceID&gt;
            &lt;/wsa:ReferenceProperties&gt;
        &lt;/factoryEndpoint&gt;
        &lt;executable&gt;/bin/echo&lt;/executable&gt;
        &lt;argument&gt;Hello World!&lt;/argument&gt;        
        &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout.p2&lt;/stdout&gt;
        &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr.p2&lt;/stderr&gt;
        &lt;count&gt;1&lt;/count&gt;
    &lt;/job&gt;

&lt;/multiJob&gt;
</screen>
<para><emphasis>Notes:</emphasis>
</para>
<itemizedlist>
<listitem><simpara>The <computeroutput>&lt;ResourceID&gt;</computeroutput> element within the <computeroutput>&lt;factoryEndpoint&gt;</computeroutput> WS-Addressing endpoint structures must be qualified with the 
appropriate GRAM namespace.</simpara></listitem>
<listitem><simpara>Apart from the <computeroutput>factoryEndpoint</computeroutput> element, all elements at the enclosing multijob level 
act as defaults for the subjob parameters, in this example <computeroutput>&lt;directory&gt;</computeroutput> and <computeroutput>&lt;count&gt;</computeroutput>.</simpara></listitem>
<listitem><simpara>The default <computeroutput>&lt;count&gt;</computeroutput> value is overridden in the subjob descriptions.</simpara></listitem>
</itemizedlist>
<para>

In order to submit a multijob description, use a job submission <ulink url="#commandline">command-line tool</ulink> 
and specify the Managed Job Factory resource to be <computeroutput>Multi</computeroutput>.

For instance, submitting the multijob description above using <computeroutput>globusrun-ws</computeroutput>, we obtain:</para>

<screen>
% bin/globusrun-ws -submit -f test_multi.xml
Delegating user credentials...Done.
Submitting job...Done.
Job ID: uuid:bd9cd634-4fc0-11d9-9ee1-000874404099
Termination time: 12/18/2004 00:15 GMT
Current job state: Active
Current job state: CleanUp
Current job state: Done
Destroying job...Done.
Cleaning up any delegated credentials...Done.
</screen>

<para>A multijob resource is created by the factory and exposes a set of 
  WSRF resource properties different than the resource properties of 
  an executable job. The state machine of a multijob is also different 
  since the multijob represents the <emphasis>overall</emphasis> execution of all the 
  executable jobs it is composed of.
  
</para>
</section>

<section id="s-wsgram-user-softenv"><title>Specifying SoftEnv keys in the job description</title>

  <para>
     <emphasis role="strong">Note</emphasis>: This feature is only available beginning from
     version 4.0.5 of the toolkit.
  </para>
   
  <para>
    For a short introduction to SoftEnv please have a look at the
    <ulink url="admin-index.html#s-wsgram-admin-softenv">SoftEnv
    section in the admin guide</ulink>.
  </para>
  <para>
    If SoftEnv is enabled on the server-side, nothing must be added to a job
    description to set up the environment which is specified in the
    <computeroutput>.soft</computeroutput> file in the remote home directory of
    the user before the job is submitted to the scheduler.
    If a different software
    environment should be used than the one specified in the remote
    <computeroutput>.soft</computeroutput> file, the user must provide 
    SoftEnv parameters in the extensions element of the job
    description. The schema of the extension element for software selection
    in the job description is as follows:
  </para>
  <screen>&lt;element name="softenv" type="xsd:string"&gt;</screen>
  <para>  
    For example, to add the SoftEnv commands "@teragrid-basic",
    "+intel-compilers", "+atlas", and "+tgcp" to the job process's
    environment, the user would specify the following "extensions" element
    in the job description:
  </para>
  <screen>&lt;extensions&gt;
  &lt;softenv&gt;@teragrid-basic&lt;/softenv&gt;
  &lt;softenv&gt;+intel-compilers&lt;/softenv&gt;
  &lt;softenv&gt;+atlas&lt;/softenv&gt;
  &lt;softenv&gt;+tgcp&lt;/softenv&gt;
&lt;/extensions&gt;</screen>
  <para>
    So far there is no way for a user to get information from the remote service
    itself whether SoftEnv support is enabled or not. The only way to check this so
    far is to submit a job with <computeroutput>/bin/env</computeroutput> as
    executable and watch the results.
  </para>
  <para> 
    <emphasis role="bold">Scenarios</emphasis>:
    <orderedlist>
      <listitem>
        <para>
          SoftEnv is <emphasis role="strong">disabled</emphasis> on the server-side
          <orderedlist>
            <listitem>
              <para>
                <emphasis role="strong">The user provides no SoftEnv extensions</emphasis>
              </para>
              <para>
                No SoftEnv environment is configured then before job submission, even
                if the user has a <computeroutput>.soft</computeroutput> file in his
                remote home directory.
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="strong">The user provides valid SoftEnv extensions</emphasis>
              </para>
              <para>
                If SoftEnv is not installed on the server then no environment
                will be configured
              </para>
              <para>
                If SoftEnv is installed, the environment the user specifies in the extensions
                elements overwrites any softenv configuration the user
                specifies in a <computeroutput>.soft</computeroutput> or a 
                <computeroutput>.nosoft</computeroutput> file in his remote home directory.
                The environment will be configured as specified by the user in the 
                extension elements before job submission.
              </para>     
            </listitem>
            <listitem>
              <para>
                <emphasis role="strong">The user provides invalid SoftEnv extensions</emphasis>
              </para>
              <para>
                If SoftEnv is not installed on the server then no environment
                will be configured
              </para>
              <para>
                If SoftEnv is installed, the environment the user specifies in the extensions
                elements overwrites any softenv configuration the user
                specifies in a <computeroutput>.soft</computeroutput> or a 
                <computeroutput>.nosoft</computeroutput> file in his remote home directory.
                Only the valid keys in the SoftEnv extensions elements will be configured.
                If no valid key is in there then no environment will be configured.
                SoftEnv warnings are logged to stdout of the job.
              </para>
            </listitem>
          </orderedlist>
          In general jobs don't fail if they have SoftEnv extensions in their
          description and SoftEnv is disabled or even not installed on the service-side.
          But they will fail if they rely on environments being set up before job submission.
        </para>
      </listitem>
      <listitem>
        <para>
          SoftEnv is <emphasis role="strong">enabled</emphasis> on the server-side
          <orderedlist>
            <listitem>
              <para>
                <emphasis role="strong">The user provides no SoftEnv extensions</emphasis>
              </para>
              <para>
                If the user has a <computeroutput>.soft</computeroutput> file (and no
                <computeroutput>.nosoft</computeroutput> file) in his remote home directory
                then the environment defined in his <computeroutput>.soft</computeroutput>
                file will be configured before job submission.
                If there is a <computeroutput>.soft</computeroutput> file) in his remote
                home directory no environment will be prepared.
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="strong">The user provides valid SoftEnv extensions</emphasis>
              </para>
              <para>
                The specified environment overwrites any softenv configuration the user
                specifies in a <computeroutput>.soft</computeroutput> or a 
                <computeroutput>.nosoft</computeroutput> file in his remote home directory.
                The environment will be configured as specified by the user in the 
                extension elements before job submission.
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="strong">The user provides invalid SoftEnv extensions</emphasis>
              </para>
              <para>
                The specified environment overwrites any softenv configuration the user
                specifies in a <computeroutput>.soft</computeroutput> or a 
                <computeroutput>.nosoft</computeroutput> file in his remote home directory.
                Only the valid keys in the SoftEnv extension elements will be configured.
                If no valid key is in there then no environment will be configured.
                SoftEnv warnings are logged to stdout of the job.
              </para>
            </listitem>
          </orderedlist>        
        </para>
      </listitem>
    </orderedlist>
  
  </para>
  <para>
    <emphasis role="bold">Note</emphasis>:
    In the current implementation it is not possible to call executables
    directly whose paths are defined in SoftEnv without specifiying the
    complete path to the executable.
  </para>
  <para>
    <emphasis role="bold">Example</emphasis>: Let's say a database query must
    be executed using the
    mysql-command. If mysql is not in the default path then the direct use of
    mysql as executable in the jobs description document will fail, even is
    the use of SoftEnv is configured. The mysql-command must be written to a
    script which is in the default path. Thus a job submission with the
    following job description document will fail:
  </para>
  <screen>&lt;job&gt;
  ...
  &lt;executable&gt;mysql&lt;/executable&gt;
  ...
&lt;/job&gt;</screen>
  <para>
    But when the command is embedded inside a shell script which is
    specified as the executable in the job description document, it will work.
  </para>
  <screen>#!/bin/sh
  ...
  mysql ...
  ...</screen>
  <para>
    <emphasis role="bold">Note</emphasis>:
    The use of invalid SoftEnv keys in the extension part of the job
    description document does not generate errors.
  </para>
  
  <!--
  <section>
    <title>Open Questions</title>
    <para>
      <itemizedlist>
        <listitem>
          <para>
            What about the packages  for Condor and PBS on
            <ulink url="http://www.globus.org/toolkit/downloads/development/">
            http://www.globus.org/toolkit/downloads/development/</ulink>?
          </para>
        </listitem>
        <listitem>   
          <para>
            Is the extension package globus_gram_job_manager_scripts-0.3
            now part of a the software or must it be downloaded separately?
          </para>
        </listitem>
        <listitem>
          <para>Provide link to SoftEnv?</para>
        </listitem>
        <listitem>
          <para>
            What about the predefined softenv key in the JNDI configuration?
            Is it already there? I can't find it in JNDI.
            (<ulink url="http://bugzilla.mcs.anl.gov/globus/show_bug.cgi?id=4207">
            http://bugzilla.mcs.anl.gov/globus/show_bug.cgi?id=4207</ulink>)
          </para>
        </listitem>
        <listitem>
          <para>  
            I can't see that the mappings added to the
            idempotenceIdMap are removed at any time. Should we add this in
            the remove()-method of the MEJR?
          </para>
        </listitem>
      </itemizedlist>
    </para>
   </section>
   -->
 </section>

 <section id="s-wsgram-user-substitutionvariables">
   <title>Specifying substitution variables in a job description</title>
   
   <para>
     Job description variables are special strings in a job description that are
     replaced by the GRAM service with values that the client-side does not
     <emphasis>a priori</emphasis> know. Job description variables can be used
     in any path-like string or URL specified in the job description.
     An example of a variable is
     <computeroutput>${GLOBUS_USER_HOME}</computeroutput>, which represents the
     path to the HOME directory on the file system where the job is executed.
     The set of variables is fixed in the gram service implementation.  This is 
     different from previous implementations of <glossterm linkend="rsl">RSL</glossterm>
     substitutions in GT2 and GT3,
     where a user could define a new variable for use inside a job description
     document.  This was done to preserve the simplicity of the job description
     XML schema (relatively to the GT3.2 RSL schema), which does not require a 
     specialized XML parser to serialize a job description document.
   </para>
   <para>
     Details of the RSL variables are in
     <ulink url="schemas/gram_job_description.html#SchemaProperties">job
     description doc</ulink> and in the
     <ulink url="admin-index.html#s-wsgram-admin-substitution-variables">substitution
     variable section</ulink> of the admin guide.
   </para>
   
   <section id="s-wsgram-user-substitutionvariables-changes">
     <title>Changes in WS GRAM beginning from GT version 4.0.5</title>
     <para>
       Beginning from version 4.0.5 additional variables can be defined on the
       server side for use in the job description. So far the user can't get
       information from WS GRAM if additional variables are defined on the
       server-side and if, what their names and values are. This information
       must be published by the provider so far.
     </para>
   </section>
  
 </section>

 <section id="s-wsgram-user-selfgeneratedkey">
   <title>Specifying a selfgenerated resource key during job submission</title>
   
   <para>
     WS GRAM enables a client to add a self-generated resource key to the input
     type when submitting a new job request to the ManagedJobFactoryService (MJFS).
     The client should make sure to provide a universal unique identifier (UUID) as
     job resource key. For information about UUID's please read 
     <ulink url="http://en.wikipedia.org/wiki/Universally_Unique_Identifier">here</ulink>.
   </para>
   <para>
     Providing its own UUID enables a client to resubmit a job in case the server did
     not respond to a prior job submission request due to e.g. network failures. If
     the client submits a job with an already existing resource key a second time,
     the job will not be started again because it's already running. This avoids
     unnecessary and undesired resource usage and enables a reliable job submission.
   </para>
   <para>
     Beginning from version 4.0.5 of the toolkit WS GRAM now creates its own job
     UUID even if the client provides one in the input of its call to the MJFS and
     returns this job UUID inside the endpoint reference (EPR) to the client.
     The client can still contact the ManagedJobFactoryService (MJFS)
     with the self-generated job resource key in order to resubmit a potentially not
     'lost' and submitted job.
     But the client can't contact the ManagedExecutableJobService (MEJS) with that
     self-generated job key as part of an EPR in order to query for job state any
     more. If it's unclear whether a job request has been started by the server,
     the client has to submit the job with the same job UUID again in order to get
     an EPR from the MJFS. With this the client then can query for job state or
     destroy the job.
   </para>

 </section>

</section>


<section id="s-wsgram-user-commandline"><title>Command-line tools</title>
    <para>Please see the <xref linkend="r-wsgram-commandline"/>.</para>

</section>

<section id="s-wsgram-user-gui"><title>Graphical user interfaces</title>
&WS_GRAM_Interface_GUI_Frag;
</section>

<section id="s-wsgram-user-troubleshooting"><title>Troubleshooting</title> &WS_GRAM_Troubleshooting_Frag;
</section>

<section id="s-wsgram-user-usage"><title>Usage statistics collection by the Globus Alliance</title>
&WS_GRAM_Usage_Statistics_Frag;
</section>

