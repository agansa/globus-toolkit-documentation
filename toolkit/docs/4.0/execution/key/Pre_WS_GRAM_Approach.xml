<title>GT 4.0 Pre WS GRAM Approach</title>
<titleabbrev>GT 4.0 Pre WS GRAM Approach</titleabbrev> 

<section id="s-Pre-WS-GRAM-Approach-intro"><title>Introduction</title>

  <para>
    The Globus Resource Allocation Manager (GRAM) is the lowest level of
    Globus resource management architecture. GRAM allows you to run jobs
    remotely, providing an API for submitting, monitoring, and terminating
    your job.
  </para>
  
  <para>
    When a job is submitted, the request is sent to the gatekeeper of the
    remote computer. The gatekeeper handles the request and creates a job 
    manager for the job. The job manager starts and monitors the remote 
    program, communicating state changes back to the user on the local 
    machine. When the remote application terminates, normally or by failing, 
    the job manager terminates as well.
  </para>

  <para>
    GRAM is responsible for
    <itemizedlist>
      <listitem><para>
        Parsing and processing the <emphasis role="strong">Resource
        Specification Language</emphasis> (RSL) 
	specifications that outline job requests. The request specifies 
	resource selection, job process creation, and job control. This is 
	accomplished by either denying the request or creating one or more i
	processes (jobs) to satisfy the request.
      </para></listitem>
      <listitem><para>
	Enabling remote monitoring and managing of jobs already created.
      </para></listitem>
    </itemizedlist>
    The Resource Specification Language (RSL) is a structured language by 
    which resource requirements and parameters can be outlined by a user.
  </para>
  <para>
    To run a job remotely, a GRAM gatekeeper (server) must be running on a 
    remote computer, listening at a port; and the application needs to be 
    compiled on that remote machine. The execution begins when a GRAM user 
    application runs on the local machine, sending a job request to the 
    remote computer. The executable, stdin and stdout, as well as the name 
    and port of the remote computer, are specified as part of the job 
    request. The job request is handled by the gatekeeper, which creates a 
    job manager for the new job. The job manager handles the execution of 
    the job, as well as any communication with the user.
  </para>
  <para>
    The architecture of GRAM is diagrammed below:
  </para>
  
  <mediaobject>
    <imageobject>
      <imagedata fileref="../key/gram2_architecture.png"/>
    </imageobject>
  </mediaobject>
  
  <para>
    <emphasis role="strong">Resource</emphasis>
  </para>

  <para>
    An entity capable of running one or more processes on behalf of a user.
  </para>
  
  <para>
    <emphasis role="strong">Client</emphasis>
  </para>
  
  <para>
    The process that is using the resource allocation client-side API.
  </para>
  
  <para>  
    <emphasis role="strong">Job</emphasis>
  </para>
  
  <para>
    A process or set of processes resulting from a job request. Jobs are
    grouped, so any error in one job results in the mutual termination of
    all others in the group. If the job is killed by the client, all
    processes are terminated, and the job itself is finally terminated as
    well.
  </para>
  
  <para>
    <emphasis role="strong">Job Request</emphasis>
  </para>
  
  <para>
    A request to gatekeeper to create one or more job processes, expressed
    in the supplied Resource Specification Language. This request guides

    <itemizedlist>
      <listitem><para>
        resource selection (when and where to create the job processes)
      </para></listitem>
      <listitem><para>
        job process creation (what job processes to create)
      </para></listitem>
      <listitem><para>
        job control (how the processes should execute
      </para></listitem>
    </itemizedlist>
  </para>

</section>

<section id="s-Pre-WS-GRAM-Approach-components"><title>Components</title>

  <section id="s-Pre-WS-GRAM-Approach-gatekeeper"><title>Gatekeeper</title>
  
    <para>
      A process, running as root, which begins the process of handling
      allocation requests. It exists on the remote computer before any request
      is submitted. When the gatekeeper receives an allocation request from a
      client, it
    
      <itemizedlist>
        <listitem><para>
          resource selection (when and where to create the job processes)
        </para></listitem>
        <listitem><para>
          mutually authenticates with the client,
        </para></listitem>
        <listitem><para>
           maps the requestor to a local user,
         </para></listitem>
         <listitem><para>
         starts a job manager on the local host as the local user, and
         </para></listitem>
       <listitem><para>
         passes the allocation arguments to the newly created job manager.
       </para></listitem>
     </itemizedlist>

    </para>

  </section>
  
  <section id="s-Pre-WS-GRAM-Approach-jobmanager"><title>Job Manager</title>

  <para>
    One job manager is created by the gatekeeper to fulfill every request
    submitted to the gatekeeper. It starts the job on the local system,
    and handles all further communication with the client. It is made up
    of two components:
    
    <itemizedlist>
      <listitem><para>
        Common Component - translates messages received from the gatekeeper
        and client into an internal API that is implemented by the machine
        specific component. It also translates callback requests from the
        machine specific components through the internal API into messages to
        the application manager.
      </para></listitem>
      <listitem><para>
        Machine-Specific Component - implements the internal API in the local
        environment. This includes calls to the local system, messages to the
        resource monitor, and inquiries to the MDS.
      </para></listitem>
    </itemizedlist>
  </para>

  </section>

</section>

<section id="s-Pre-WS-GRAM-Approach-jobstates"><title>Job States</title>

  <para>
    The GRAM supports the following scheduling model. A user or resource broker
    submits a job request, which initially registers as a pending job. The job
    then undergoes state changes according to this state diagram:

    <mediaobject>
      <imageobject>
        <imagedata fileref="../key/gram2_states.png"/>
      </imageobject>
    </mediaobject>
  </para>
  
  <para>
    <emphasis role="strong">Unsubmitted</emphasis>
  </para>
  
  <para>
      The job has not yet been submitted to the scheduler. A job state callback
      for this state is never sent; rather it was introduced for the case when
      the job manager is stopped and restarted before the job is submitted. This
      state was introduced in GRAM 1.5 (Globus 2.0).
  </para>
  
  <para>
    <emphasis role="strong">StageIn</emphasis>
  </para>
  
  <para>
      The job manager is staging executable, input, or data files to the job.
      Jobs which do not involve any staging will not enter this state. This
      state was introduced in GRAM 1.6.
  </para>
  
  <para>
    <emphasis role="strong">Pending</emphasis>
  </para>
  
  <para>
      The job has been submitted to the scheduler, but resources have not yet
      been allocated for the job.
  </para>
        
  <para>
    <emphasis role="strong">Active</emphasis>
  </para>
  
  <para>
      The job has received all of it's resources, and the application is
      executing.
  </para>
  
  <para>
    <emphasis role="strong">Suspended</emphasis>
  </para>
  
  <para>
      The job has been stopped temporarily by the scheduler. Only some
      schedulers will cause a job to enter the Suspended state. This state was
      introduced in GRAM 1.5 (Globus 2.0).
  </para>

  <para>
    <emphasis role="strong">StageOut</emphasis>
  </para>
  
  <para>
      The job manager is staging output files from the job manager host to
      remote storage. Jobs which do not involve any staging will not enter this
      state. This state was introduced in GRAM 1.6.
  </para>
  
  <para>
    <emphasis role="strong">Done</emphasis>
  </para>
  
  <para>
      The job completed successfully.
  </para>
  
  <para>
    <emphasis role="strong">Failed</emphasis>
  </para>
  
  <para>
      The job terminated before completion, as a result of an error, or a user or system cancel.
  </para>
  
</section>


<section id="s-Pre-WS-GRAM-Approach-audit"><title>Audit</title>

<table><title>Audit Logging Support</title>
<tgroup cols="2"><tbody>

<!--
  <row><entry>GRAM custom logging</entry>

  <entry><para>WS GRAM generates domain-specific logging information about job
  requests and exceptional conditions.  
  <ulink url="../wsgram/developer-index.html#debugging">See WS GRAM debugging doc</ulink></para></entry>
  </row>
-->

  <row><entry>GRAM job auditing direct to DB</entry>

  <entry><para>
  GRAM can be configured to write a job audit record to a file that is ready
  for uploading into a Database.  This can be useful for exposing and integrating 
  GRAM job information with a Grid's existing accounting infrastructure.  
  A case study for TeraGrid can be read
  <ulink url="http://www.teragridforum.org/mediawiki/index.php?title=GRAM4_Audit">
  here</ulink>
</para></entry>

  </row>

  <row><entry>Local scheduler logging</entry>

  <entry><para>For systems using a local batch scheduler, all of the
  accounting and logging facilities of that scheduler remain available
  for the administrator to track jobs whether submitted through GRAM
  or directly to the scheduler by local users.</para></entry>
  </row>

  </tbody></tgroup>
  </table>

</section>
