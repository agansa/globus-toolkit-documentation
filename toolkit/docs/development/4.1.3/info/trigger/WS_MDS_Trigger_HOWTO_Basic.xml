<?xml version='1.0' encoding='UTF-8'?>
<chapterinfo><date>(version 2.0) November 2006</date></chapterinfo>
<title>Trigger Service - Easy HowTo </title>
  <section id="trigger-howto-basic"><title>Purpose</title>
    <para>The purpose of this Easy HowTo is to introduce the GT4/MDS4 component known as the <emphasis>Trigger</emphasis>, 
      as well as to provide an example of setting one up successfully.  The current GT 4.2-drafts <ulink url="http://www-unix.globus.org/toolkit/docs/development/4.2-drafts/info/trigger/">documentation</ulink> provides a basic reference and will be updated as features are added, but for those of you who would like to get a simple trigger working without going through all of the documentation, this document is for you.</para>
    <para>We will be creating a simple trigger from scratch, and setting it up completely. To get the basic idea of how this is done, we will only use elements available in the default GT4 installation to show you how to use triggers.</para>
  </section>
  
  <section id="trigger-howto-basic-prereq"><title>Prerequisites</title>
  <itemizedlist>
    <listitem>
      <para>Basic GT4 installation (one of the following):
          <itemizedlist>
<!--            <listitem>
              <para><ulink url="http://www.globus.org/toolkit/downloads/4.0.4/">GT 4.0.4</ulink> Installation (including Java WS Core and WS MDS Aggregator Framework), 
                in addition to <ulink url="http://www-unix.mcs.anl.gov/%7Erobertm/globus/gt4.0.3-wsmds-update-1.0-src_bundle.tar.gz">this update patch</ulink>.</para>
              <para>Patching GT 4.0.4 is as simple as getting the proper patch and issuing the following command: </para>
              <screen>$GLOBUS_LOCATION/sbin/gpt-build  -update gt4.0.3-wsmds-update-1.0-src_bundle.tar.gz</screen>
                
            </listitem>-->
            <listitem>
              <para>GT 4.1.3+ Installation (including Java WS Core and WS MDS Aggregator Framework).</para> 
                <note><simpara>GT 4.1.3+ is simply a preview to some of the upcoming GT 4.2 functionality.  The trigger state is still highly developmental.</simpara></note>
            </listitem>
          </itemizedlist>
      </para>
    </listitem>
    <listitem>
      <para>Basic <ulink url="http://www.w3.org/TR/xpath">XML Path Language (XPath)</ulink></para>
    </listitem>
  </itemizedlist>
  </section>
  
  <section id="trigger-howto-basic-intro"><title>Introduction</title>
    <para>Triggers collect information from information providers using the same mechanism as the Index service (within the context of the common aggregator
      framework); but once that data is collected, we can configure a <emphasis role="strong">trigger</emphasis> to perform an action based on that data.</para> 
      <para>Once the conditions are prepared, and the collected data is evaluated, the data will be compared to the conditions and, if there's a match, the trigger will set an action to occur.</para>
    <para>Learning to use triggers involves understanding what you are doing conceptually and knowing how to configure everything properly. Below we'll go through an example trigger configuration file and discuss some steps that should occur in an example setup. Generally when setting up a trigger you should follow the steps outlined in this tutorial.</para>
      <para>First let's explain what we are doing. We're going to set up a trigger to monitor the Default Index Service, and to tell us when a new entry is added to the Default Index Service. When a new entry is added, our trigger will execute a script that will create a [log] file in our $GLOBUS_LOCATION directory [and every two minutes that the new entry is still registered, we'll add a notification to this log file].  This is not necessarily a practical example of how you would use a trigger, but it's simple enough to give you a basic idea of how to set one up. So let's get started!</para>
  </section>
  <section id="trigger-howto-basic-tut"><title>Trigger Tutorial</title>
    <para><emphasis>This tutorial requires a working GT 4.1.3 or higher recent CVS install, or a patched GT 4.1.2 installation.<!-- We will be using a patched GT 4.1.2 install in this example--></emphasis>.</para>
    <orderedlist>
      <listitem>
        <para><emphasis role="strong">Trigger Registration:</emphasis></para> 
         <para>The first thing we do is to setup a trigger registration.  What this means is that the trigger service will be connected to an aggregator source.  The registration tells the trigger service which aggregator source (or, monitored service) it should pay attention to.  We can monitor many services at once, but in this example we will be monitoring the Default Index Service.  Our trigger registration will specify that we want to be monitoring the Default Index Service.  To do this we will specify a Member EPR in an aggregator configuration file. For this example, we will quickly walk through a new aggregator configuration; this will allow us to register the trigger (The trigger is actually registered once we use the <computeroutput>mds-servicegroup-add</computeroutput> command; see below).</para> 
        <para>Let's create the configuration file in the following location (this file is provided with new installs):
        <programlisting>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</programlisting></para>
        <para>The <link linkend="trigger-howto-basic-configfile">entire config file</link> is located further below. The following table breaks it down:</para>
        
        <informaltable>
          <tgroup cols="1">
            <colspec colnum="1" colname="col1"/>
            <tbody>
              <row><entry role="rowhead">A. Preliminaries</entry></row>
              <row>
                <entry>
                  <literallayout class="monospaced">
<emphasis role="strong">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;ServiceGroupRegistrations
    xmlns="http://mds.globus.org/servicegroup/client"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
    xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
&lt;/ServiceGroupRegistrations&gt;</emphasis>
                  </literallayout>
                  <para>As this is an XML document, it must be properly formatted XML.</para>  
                  <para>Start your file with the appropriate header.</para> 
                  <para>The ServiceGroupRegistration node is the root of the document.</para>
                </entry>
              </row>
              
              <row><entry role="rowhead">B. Aggregator Sink / Service Group Registration Information (for more information, go <ulink url="http://www.globus.org/toolkit/docs/4.0/info/aggregator/Query_Aggregator_Source.html">here</ulink>).</entry></row>
              
              <row>
                <entry>
                  <literallayout class="monospaced">
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
  &lt;ServiceGroupRegistrations
        xmlns="http://mds.globus.org/servicegroup/client"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
        xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    <emphasis role="strong">&lt;defaultServiceGroupEPR&gt;
    &lt;/defaultServiceGroupEPR&gt;</emphasis>
  &lt;/ServiceGroupRegistrations&gt;
                  </literallayout>
                  <para>In this section we will enter the Trigger Registration Service.</para>
                </entry>
              </row>
              <row>
                <entry><literallayout class="monospaced">
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
  &lt;ServiceGroupRegistrations
          xmlns="http://mds.globus.org/servicegroup/client"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
          xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    &lt;defaultServiceGroupEPR&gt;
        <emphasis role="strong">&lt;wsa:Address&gt;
          http://127.0.0.1:8444/wsrf/services/TriggerRegistrationService
        &lt;/wsa:Address&gt;</emphasis>
    &lt;/defaultServiceGroupEPR&gt;
  &lt;/ServiceGroupRegistrations&gt;
                </literallayout>
                  <para>The Trigger Registration Service will register the monitored service (Member EPR).  <emphasis>Note: We will not be using https as the protocol, and the container should be started using the <computeroutput>-nosec</computeroutput> option until security has been properly tested.</emphasis></para> 
                </entry>
              </row>
              
              <row><entry role="rowhead">C. Aggregator Source Configuration (for more information, go <ulink url="http://www.globus.org/toolkit/docs/4.0/info/aggregator/Query_Aggregator_Source.html">here</ulink>).</entry></row>
              
              <row>
                <entry><literallayout class="monospaced">
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
  &lt;ServiceGroupRegistrations
          xmlns="http://mds.globus.org/servicegroup/client"
          xmlns:xsd="http://www.w3.org/2001/XMLSchema"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
          xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;defaultServiceGroupEPR&gt;
          &lt;wsa:Address&gt;
          http://127.0.0.1:8444/wsrf/services/TriggerRegistrationService
          &lt;/wsa:Address&gt;
      &lt;/defaultServiceGroupEPR&gt;
      <emphasis role="strong">&lt;ServiceGroupRegistrationParameters&gt;
            xmlns="http://mds.globus.org/servicegroup/client"
            xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
            xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;/ServiceGroupRegistrationParameters&gt;</emphasis>
  &lt;/ServiceGroupRegistrations&gt;
                </literallayout>
                  <para>Now we will specify the parameters used to register a [monitored] resource (e.g. information provider) to the service group (i.e. our trigger registration service).</para>
                </entry>
              </row>
              
              <row>
                <entry>
                  <literallayout class="monospaced">
...
  &lt;ServiceGroupRegistrationParameters
        xmlns="http://mds.globus.org/servicegroup/client"
        xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
        xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      <emphasis role="strong">&lt;RegistrantEPR
        xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"&gt;
        &lt;wsa:Address&gt;
            http://127.0.0.1:8444/wsrf/services/DefaultIndexService
        &lt;/wsa:Address&gt;
      &lt;/RegistrantEPR&gt;</emphasis>
  &lt;/ServiceGroupRegistrationParameters&gt;
  ...
                  </literallayout>
                  <para>We will set the RegistrantEPR to the entity (or information provider) to be monitored; in this case, we will be monitoring the DefaultIndexService.  <emphasis>Note: We refer often to the Registrant EPR as it's more generic name: Member EPR.</emphasis></para>
                </entry>
              </row>
              
              <row>
                <entry>
                  <literallayout class="monospaced">
...
&lt;ServiceGroupRegistrationParameters
      xmlns="http://mds.globus.org/servicegroup/client"
      xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
      xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
  &lt;RegistrantEPR
      xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"&gt;
      &lt;wsa:Address&gt;
          http://127.0.0.1:8444/wsrf/services/DefaultIndexService
      &lt;/wsa:Address&gt;
  &lt;/RegistrantEPR&gt;
  <emphasis role="strong">&lt;RefreshIntervalSecs&gt;600&lt;/RefreshIntervalSecs&gt;</emphasis>
&lt;/ServiceGroupRegistrationParameters&gt;
  ...
                  </literallayout>
                  <para>Set this to the number of seconds upon which the registration will be renewed (this is to keep the registration from expiring): <emphasis role="strong">600</emphasis>.</para>
                  <para>"600" means that we'll renew the registration every 10 minutes.</para>
                </entry>
              </row>
              
              <row>
                <entry>
                  <literallayout class="monospaced">
...
&lt;ServiceGroupRegistrationParameters
      xmlns="http://mds.globus.org/servicegroup/client"
      xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
      xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
  &lt;RegistrantEPR
      xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"&gt;
      &lt;wsa:Address&gt;
          http://127.0.0.1:8444/wsrf/services/DefaultIndexService
      &lt;/wsa:Address&gt;
  &lt;/RegistrantEPR&gt;
  &lt;RefreshIntervalSecs&gt;600&lt;/RefreshIntervalSecs&gt;
   <emphasis role="strong">&lt;Content xsi:type="agg:AggregatorContent"
              xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
        &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;/agg:AggregatorConfig&gt;
        &lt;agg:AggregatorData /&gt;
   &lt;/Content&gt;</emphasis>
&lt;/ServiceGroupRegistrationParameters&gt;
  ...
                  </literallayout>
                  <para>Now we configure aggregator-source-specific configuration parameters.</para>
                  <para>Note: The AggregatorData element must be present, and it is also an empty element.</para>
                </entry>
              </row>
              <row>
                <entry>
                  <literallayout class="monospaced">
...
  &lt;Content xsi:type="agg:AggregatorContent"
          xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        <emphasis role="strong">&lt;agg:GetResourcePropertyPollType 
                xmlns:wssg="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd"&gt;
            &lt;agg:PollIntervalMillis&gt;30000&lt;/agg:PollIntervalMillis&gt;
        &lt;/agg:GetResourcePropertyPollType&gt;</emphasis>
    &lt;/agg:AggregatorConfig&gt;
    &lt;agg:AggregatorData /&gt;
  &lt;/Content&gt;
  ...
                  </literallayout>
                  <para>Set this to how often you'll be polling the information provider for data and refreshing the current information: <emphasis role="strong">30000</emphasis>.</para>
                  <para>"30000" means that you'll be checking the information provider every 30 seconds.  This is not typical!  We are only using such a short polling interval so that you can quickly visualize whether or not you've successfully set up this trigger!</para>
                  <para>The xmlns:wssg attribute should all be in one line.</para>
                </entry>
              </row>
              
              <row>
                <entry>
                  <literallayout class="monospaced">
...
  &lt;Content xsi:type="agg:AggregatorContent"
            xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;agg:GetResourcePropertyPollType 
            xmlns:wssg="http://docs.oasis-open.org/wsrf/2004/06/\
                        wsrf-WS-ServiceGroup-1.2-draft-01.xsd"&gt;
            &lt;agg:PollIntervalMillis&gt;120000&lt;/agg:PollIntervalMillis&gt;
            <emphasis role="strong">&lt;agg:ResourcePropertyName&gt;wssg:Entry&lt;/agg:ResourcePropertyName&gt;</emphasis>
        &lt;/agg:GetResourcePropertyPollType&gt;
    &lt;/agg:AggregatorConfig&gt;
    &lt;agg:AggregatorData /&gt;
  &lt;/Content&gt;
  ...
                  </literallayout>
                  <para>Set this to the name of the resource property that the data is accessed by: <emphasis role="strong">wssg:Entry</emphasis>. <emphasis>wssg:Entry</emphasis> is one of the few resource properties available in the current implementation (this will likely change in future versions)</para>
                  <para>[The format is <emphasis>rp_namespace:rp_localname</emphasis>]</para>
                  <para>You can view some active ResourcePropertyNames as you poll the DefaultIndexService. For this example, this parameter is mostly irrelevant.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        
        <para>Let's review the complete configuration file just so you can check that you have included everything properly:</para>
        <para><anchor id="trigger-howto-basic-configfile" xreflabel="Simple Trigger Config File"/><filename>$GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</filename></para>
        
        <screen>
&lt;ServiceGroupRegistrations
  xmlns="http://mds.globus.org/servicegroup/client"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
  xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
  &lt;defaultServiceGroupEPR&gt;
    &lt;wsa:Address&gt;http://127.0.0.1:8444/wsrf/services/TriggerRegistrationService&lt;/wsa:Address&gt;
  &lt;/defaultServiceGroupEPR&gt;
  &lt;ServiceGroupRegistrationParameters
    xmlns="http://mds.globus.org/servicegroup/client"
    xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
    xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
    &lt;RegistrantEPR
      xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"&gt;
      &lt;wsa:Address&gt;http://127.0.0.1:8444/wsrf/services/DefaultIndexService&lt;/wsa:Address&gt;
    &lt;/RegistrantEPR&gt;
    &lt;RefreshIntervalSecs&gt;600&lt;/RefreshIntervalSecs&gt;
    &lt;Content xsi:type="agg:AggregatorContent"
      xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;agg:GetResourcePropertyPollType 
          xmlns:wssg="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd"&gt;
          &lt;agg:PollIntervalMillis&gt;30000&lt;/agg:PollIntervalMillis&gt;
          &lt;agg:ResourcePropertyName&gt;wssg:Entry&lt;/agg:ResourcePropertyName&gt;
        &lt;/agg:GetResourcePropertyPollType&gt;
      &lt;/agg:AggregatorConfig&gt;
      &lt;agg:AggregatorData /&gt;
    &lt;/Content&gt;
  &lt;/ServiceGroupRegistrationParameters&gt;
&lt;/ServiceGroupRegistrations&gt;    
        </screen>
        
        <!--
        
        EPR = End Point Reference - a reference to the delegated credential, can be used to later refresh the credentials.  Web services and WS-Resources are referenced using an "Endpoint Reference".  Services that create of locate WS-Resources return Endpoint References.  Web services are stateless; WS-Resources provide a context for stateful execution
        
        -->
        
        <para>You could simply copy these file contents and change the "127.0.0.1" to your hostname. Great! Now that we've got the configuration file set up, we need to register it with the Trigger Registration Service, so that the Trigger Service knows what to look out for.</para>
      </listitem>
      <listitem><para><emphasis role="strong">Trigger Action Script Configuration</emphasis>: Now that we have the trigger configuration file set to execute an action
        whenever our conditions are met, we need to determine what those actions are. We do this by setting up a Trigger Action Script.</para>

        <orderedlist>
          <listitem>
            <para>Here we write the action script:</para> 
            <para>We'll make it very simple:</para>
            <screen>
#!/bin/sh

DATE=`date`

echo "Trigger Service Entry: $DATE" &gt;&gt; $GLOBUS_LOCATION/trigger_service_base_action_log

cat &lt;&lt;EOF
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;OurActionScriptOutput&gt;
  &lt;OurDataDetected&gt;true&lt;/OurDataDetected&gt;
&lt;/OurActionScriptOutput&gt;
EOF
            </screen>
	    <emphasis>Note: This example script should be provided if your have a recent installation, however if not:</emphasis>
            <para>Save this file as: <filename>$GLOBUS_LOCATION/libexec/trigger/default-script.sh</filename></para>
            <important><para>Be sure that this file is executable! (e.g. chmod u+x default-script.sh)</para></important>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem><para><emphasis role="strong">Registration:</emphasis></para>
        <para>The registration step is necessary to connect the information source with the Trigger Registration Service (an aggregator service). 
        This step provides access to the information source data so that the trigger can then make this information available and act on it accordingly.</para>
        <para><emphasis>--&gt; Now start the container:</emphasis> (Note: the <computeroutput>-p</computeroutput> option allows you to specify a port.  We have been using 8444 in this example.  We will also specify <computeroutput>-nosec</computeroutput> until security for triggers has been adequately tested.)</para> 
          <screen>$GLOBUS_LOCATION/bin/globus-start-container -p 8444 -nosec</screen> 
          <para>You may also need to set up your environment variables, and/or generate a new proxy certificate: </para>
        <screen id="info-trigger-exampletest">
          source $GLOBUS_LOCATION/etc/globus-user-env.sh
          $GLOBUS_LOCATION/bin/grid-proxy-init -verify -debug
        </screen>
        <para>But before we create the trigger, let's just quickly test how many Entries are being registered by the Index Service. Type the following command in one line:</para> 
          <screen>$GLOBUS_LOCATION/bin/wsrf-query -s http://127.0.0.1:8444/wsrf/services/DefaultIndexService 'count(//*[local-name()="Entry"])'</screen> 
        <para>On our setup we get: <emphasis role="strong">3</emphasis>.</para>
      </listitem>
      <listitem><para><emphasis role="strong">Create Trigger Registration:</emphasis></para> 
        <para>Once the configurations have been properly set, it's easy to register them with the Trigger Registration Service.</para> 
            <para>We will create the trigger registration by running <emphasis role="strong"><link linkend="mds-servicegroup-add">mds-servicegroup-add</link></emphasis> to perform the registrations specified in the configuration file.</para> 
        <para>This tool takes an XML configuration file listing registrations, and causes those registrations to be made.</para>
            <para>Run the following command:</para> 
              <screen>$GLOBUS_LOCATION/bin/mds-servicegroup-add $GLOBUS_LOCATION/etc/globus_wsrf_mds_trigger/trigger-registration-example.xml</screen> 
              <important><para>Be sure the above command is on one line.</para></important>
            <para>If everything went well, you should get something like:</para>
            <screen>Processing configuration file...
INFO: Processed 1 registration entries
INFO: Successfully registered https://127.0.0.1:8443/wsrf/services/DefaultIndexService \
to servicegroup at https://127.0.0.1:8443/wsrf/services/TriggerRegistrationService
            </screen>
      </listitem>
      <listitem>
        <para><emphasis role="strong">Create Trigger:</emphasis></para> 
        <para>Now that we have created a trigger registration, and we have a service that will be monitored, we're ready to create the actual trigger that will be evaluating any incoming data and executing the action script that we've created.</para>
        <orderedlist>
          <listitem>
            <para>Create a new index configuration file (very simplistic):</para>
          <screen>$GLOBUS_LOCATION/etc/globus_wsrf_mds_index/our-test-index-registration.xml</screen>
            <para>You can just copy these file contents for now, editing your hostname.</para>
            <screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ServiceGroupRegistrations
  xmlns="http://mds.globus.org/servicegroup/client"
  xmlns:sgc="http://mds.globus.org/servicegroup/client"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
  xmlns:agg="http://mds.globus.org/aggregator/types"
  xmlns:gram="http://www.globus.org/namespaces/2004/10/gram/job"&gt;
  &lt;sgc:defaultServiceGroupEPR&gt;
    &lt;wsa:Address&gt;http://127.0.0.1:8444/wsrf/services/DefaultIndexService&lt;/wsa:Address&gt;
  &lt;/sgc:defaultServiceGroupEPR&gt;
  
  &lt;sgc:defaultRegistrantEPR&gt;
    &lt;wsa:Address&gt;http://127.0.0.1:8444/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
    &lt;wsa:ReferenceProperties&gt;&lt;gram:ResourceID&gt;Fork&lt;/gram:ResourceID&gt;&lt;/wsa:ReferenceProperties&gt;
  &lt;/sgc:defaultRegistrantEPR&gt;
  
  &lt;sgc:ServiceGroupRegistrationParameters&gt;
    &lt;sgc:RefreshIntervalSecs&gt;1440&lt;/sgc:RefreshIntervalSecs&gt;
    &lt;sgc:Content xsi:type="agg:AggregatorContent" xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;agg:GetResourcePropertyPollType
          xmlns:glue="http://mds.globus.org/glue/ce/1.1" &gt;
          &lt;agg:PollIntervalMillis&gt;120000&lt;/agg:PollIntervalMillis&gt;
          &lt;agg:ResourcePropertyName&gt;glue:GLUECE&lt;/agg:ResourcePropertyName&gt;
        &lt;/agg:GetResourcePropertyPollType&gt;
      &lt;/agg:AggregatorConfig&gt;
      &lt;agg:AggregatorData/&gt;
    &lt;/sgc:Content&gt;
  &lt;/sgc:ServiceGroupRegistrationParameters&gt;
&lt;/ServiceGroupRegistrations&gt;
            </screen>
          </listitem>
          <listitem>
            <para>Register this config file with the Default Index Service:</para>
            <screen>$GLOBUS_LOCATION/bin/mds-servicegroup-add  -s http://127.0.0.1:8444/wsrf/services/DefaultIndexService $GLOBUS_LOCATION/etc/globus_wsrf_mds_index/our-test-index-registration.xml</screen>
            <important><para>Be sure the above command is on one line.</para></important>
          </listitem>
          <listitem>
            <para>Test the registration by typing the following command:</para>
            <screen>$GLOBUS_LOCATION/bin/wsrf-query -s http://127.0.0.1:8444/wsrf/services/DefaultIndexService 'count(//*[local-name()="Entry"])'</screen>
            <important><para>Be sure the above command is on one line.</para></important>
          </listitem>
          <listitem>
            <para>If you previously issued this command above (during the trigger file configation), and it said <emphasis role="strong">3</emphasis>, it should now result in <emphasis role="strong">4</emphasis>. 
              Basically we've added a new entry to the Default Index Service. Because of this, our trigger should fire (if everything is properly set).</para>
          </listitem>
          <listitem>
            <para>After a few minutes, the trigger will have fired and executed the action script we wrote.  To verify this, type:</para>
            <screen>cat $GLOBUS_LOCATION/our_new_entry_detected</screen>
            <para>You should see some output like the following:</para>
            <screen>OUR LOG: New Index Service Entry: Fri Mar  9 09:32:32 CST 2007
OUR LOG: New Index Service Entry: Fri Mar  9 09:34:32 CST 2007
OUR LOG: New Index Service Entry: Fri Mar  9 09:36:32 CST 2007
OUR LOG: New Index Service Entry: Fri Mar  9 09:38:32 CST 2007
            </screen>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para><emphasis role="strong">Test Trigger:</emphasis></para> 
        <para>Now that our trigger is registered, it's ready to perform actions. We set our trigger to fire when it detected a new entry in the Default Index Service. 
          As it stands, since there are no new entries, the trigger will not fire. So let's add an entry to the Index Service so that we can be sure that our trigger is working properly.</para>
        <orderedlist>
          <listitem>
            <para>Create a new index configuration file (very simplistic):</para>
          <screen>$GLOBUS_LOCATION/etc/globus_wsrf_mds_index/our-test-index-registration.xml</screen>
            <para>You can just copy these file contents for now, editing your hostname.</para>
            <screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ServiceGroupRegistrations
  xmlns="http://mds.globus.org/servicegroup/client"
  xmlns:sgc="http://mds.globus.org/servicegroup/client"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/03/addressing"
  xmlns:agg="http://mds.globus.org/aggregator/types"
  xmlns:gram="http://www.globus.org/namespaces/2004/10/gram/job"&gt;
  &lt;sgc:defaultServiceGroupEPR&gt;
    &lt;wsa:Address&gt;http://127.0.0.1:8444/wsrf/services/DefaultIndexService&lt;/wsa:Address&gt;
  &lt;/sgc:defaultServiceGroupEPR&gt;
  
  &lt;sgc:defaultRegistrantEPR&gt;
    &lt;wsa:Address&gt;http://127.0.0.1:8444/wsrf/services/ManagedJobFactoryService&lt;/wsa:Address&gt;
    &lt;wsa:ReferenceProperties&gt;&lt;gram:ResourceID&gt;Fork&lt;/gram:ResourceID&gt;&lt;/wsa:ReferenceProperties&gt;
  &lt;/sgc:defaultRegistrantEPR&gt;
  
  &lt;sgc:ServiceGroupRegistrationParameters&gt;
    &lt;sgc:RefreshIntervalSecs&gt;1440&lt;/sgc:RefreshIntervalSecs&gt;
    &lt;sgc:Content xsi:type="agg:AggregatorContent" xmlns:agg="http://mds.globus.org/aggregator/types"&gt;
      &lt;agg:AggregatorConfig xsi:type="agg:AggregatorConfig"&gt;
        &lt;agg:GetResourcePropertyPollType
          xmlns:glue="http://mds.globus.org/glue/ce/1.1" &gt;
          &lt;agg:PollIntervalMillis&gt;120000&lt;/agg:PollIntervalMillis&gt;
          &lt;agg:ResourcePropertyName&gt;glue:GLUECE&lt;/agg:ResourcePropertyName&gt;
        &lt;/agg:GetResourcePropertyPollType&gt;
      &lt;/agg:AggregatorConfig&gt;
      &lt;agg:AggregatorData/&gt;
    &lt;/sgc:Content&gt;
  &lt;/sgc:ServiceGroupRegistrationParameters&gt;
&lt;/ServiceGroupRegistrations&gt;
            </screen>
          </listitem>
          <listitem>
            <para>Register this config file with the Default Index Service:</para>
            <screen>$GLOBUS_LOCATION/bin/mds-servicegroup-add  -s http://127.0.0.1:8444/wsrf/services/DefaultIndexService $GLOBUS_LOCATION/etc/globus_wsrf_mds_index/our-test-index-registration.xml</screen>
            <important><para>Be sure the above command is on one line.</para></important>
          </listitem>
          <listitem>
            <para>Test the registration by typing the following command:</para>
            <screen>$GLOBUS_LOCATION/bin/wsrf-query -s http://127.0.0.1:8444/wsrf/services/DefaultIndexService 'count(//*[local-name()="Entry"])'</screen>
            <important><para>Be sure the above command is on one line.</para></important>
          </listitem>
          <listitem>
            <para>If you previously issued this command above (during the trigger file configation), and it said <emphasis role="strong">3</emphasis>, it should now result in <emphasis role="strong">4</emphasis>. 
              Basically we've added a new entry to the Default Index Service. Because of this, our trigger should fire (if everything is properly set).</para>
          </listitem>
          <listitem>
            <para>After a few minutes, the trigger will have fired and executed the action script we wrote.  To verify this, type:</para>
            <screen>cat $GLOBUS_LOCATION/our_new_entry_detected</screen>
            <para>You should see some output like the following:</para>
            <screen>OUR LOG: New Index Service Entry: Fri Mar  9 09:32:32 CST 2007
OUR LOG: New Index Service Entry: Fri Mar  9 09:34:32 CST 2007
OUR LOG: New Index Service Entry: Fri Mar  9 09:36:32 CST 2007
OUR LOG: New Index Service Entry: Fri Mar  9 09:38:32 CST 2007
            </screen>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>
  </section>
  <section id="trigger-howto-basic-congrats"><title>Congratulations!</title>  
    <para>You have now successfully setup, configured, registered, and tested a trigger created from scratch!</para>
  <para><emphasis role="strong">Next Steps:</emphasis> Check out the documentation and create more triggers to perform actions
    more relevant to your own objectives. Experiment with the XPath queries to expand the possibilities of what you can use them for. 
    If you have questions, feel free to contact us!</para>
  </section>
      