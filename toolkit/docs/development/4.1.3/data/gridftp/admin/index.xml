<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % myents SYSTEM "../../../entities">

%myents;

]>
<book id="gridftpAdmin">
    <title> GT &shortversion; GridFTP : System Administrator's Guide</title>
    <titleabbrev>System Administrator's Guide</titleabbrev>
<bookinfo><abstract>    <title>Introduction</title>
        <para>This guide contains advanced configuration information for system administrators
            working with GridFTP. It provides references to information on procedures
            typically performed by system administrators, including installation, configuring,
            deploying, and testing the installation. This guide should help you configure
            and run the GridFTP <glossterm>server</glossterm> in some standard configurations.</para>
<para>        <important>
            <simpara> This information is in addition to the basic Globus Toolkit prerequisite, 
                overview, installation, security configuration instructions in the <olink targetdoc="gtadmin"/>.  
                Read through this guide before continuing!</simpara>  
        </important></para>
    </abstract></bookinfo>
<chapter id="gridftp-admin-installing" xreflabel="Building and installing GridFTP"><title>Building and Installing</title>
    <indexterm type="gridftp-howto"><primary>building and installing</primary><secondary>general instructions</secondary></indexterm>
    <indexterm type="gridftp"><primary>building and installing</primary><secondary>general instructions</secondary></indexterm>
    <para>GridFTP is built and installed as part of
        a default GT &version; installation. For basic installation instructions, see <olink targetdoc="gtadmin" />.
        
        No extra installation steps are required for this component.</para>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GridFTP_Building.xml" xpointer="xpointer(/section/*)"/>
    </chapter>
    
<chapter id="gridftp-admin-configuring"><title>Configuring </title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GridFTP_Interface_Config_Frag.xml" xpointer="xpointer(/section/*)"/>
</chapter>

<chapter id="gridftp-admin-deploying"><title>Deploying the GridFTP Server: <computeroutput>globus-gridftp-server</computeroutput></title>
<para>It is assumed that the toolkit installation was successful and that Globus
security is properly configured.  For more information, see the 
    <olink targetdoc="gtadmin"/>. Also be sure to reference <olink targetptr="gridftp-admin-configuring"/>.</para>

<section id="gridftp-admin-daemon_mode"><title>Running in daemon mode</title>
    <indexterm type="gridftp-howto"><primary>deploying </primary><secondary>running in daemon mode</secondary></indexterm>
    <indexterm type="gridftp"><primary>deploying </primary><secondary>running in daemon mode</secondary></indexterm>
    
<para>The server should generally be run as root in daemon mode, though it is 
  possible to run it as a user (see below). When run as root you will need to have a 
  host certificate.</para>
<para>Run the server: </para>
<screen>globus-gridftp-server &lt; -s | -S &gt; &lt;args&gt;</screen>
<para>where:</para>
<variablelist termlength="100pt">
<varlistentry><term>-s</term>
	<listitem>
		<simpara>
			Runs in the foreground (this is the default mode).
		</simpara>
	</listitem>
</varlistentry>
<varlistentry><term>-S</term>
	<listitem>
		<simpara>
			Detaches from the terminal and runs in the background.
		</simpara>
	</listitem>
</varlistentry>
</variablelist>

<para>The following additional steps may be required when running as a user other than root:
<itemizedlist>
  <listitem><simpara>Create a ~/.gridmap file, containing the DNs of any clients you wish to
  allow, mapped to the current username.</simpara></listitem>
  <listitem><simpara>Create a proxy with <computeroutput>grid-proxy-init</computeroutput>.</simpara></listitem>
</itemizedlist>

</para>
</section>
<section id="gridftp-admin-inetd"><title>Running under inetd or xinetd</title>
    <indexterm type="gridftp-howto"><primary>deploying </primary><secondary>running under inetd or xinetd</secondary></indexterm>
    <indexterm type="gridftp"><primary>deploying </primary><secondary>running under inetd or xinetd</secondary></indexterm>
    
<para>The -i command line option enables the server to be run under inetd or xinetd.</para>
<para>See <olink targetptr="gridftp-admin-configuring"/> for example xinetd and inetd configuration
   entries. </para>

</section>
<section id="gridftp-admin-data_nodes"><title>Remote data-nodes and striped operation</title>
<para>The GridFTP server now supports separate front end (client control connection)
and back end (data node) processes. In addition, a single front end process may
connect to multiple back end data nodes. </para>
<para>When multiple back end data nodes are available, the server is said to be 
in a striped configuration, or simply, is a striped server.  In this mode 
transfers are divided over all available data nodes, thus allowing the 
combined bandwidth of all data nodes to be used.</para>
<para>Note: The connection between the front end and data nodes is referred to as 
the <emphasis>ipc channel</emphasis>.</para>

<para>The ability to use inetd or daemon execution modes applies to both 
front end servers and data nodes, and the same certificate and user requirements
apply.</para>

<para>To start the front end: 
<screen>globus-gridftp-server &lt;args&gt; -r &lt;host:port&gt;[,&lt;host:port&gt;,...]</screen>
To start the data-node:
<screen>globus-gridftp-server -p &lt;port&gt; -dn</screen>
The <computeroutput>-p &lt;port&gt;</computeroutput> option used on the data-node is the port 
  that will be used for ipc connections.  This is the port that you will register
  with the front end server.</para>
<para>  For example:
<screen>machineB&gt; globus-gridftp-server -p 6000 -dn
machineC&gt; globus-gridftp-server -p 7000 -dn
machineA&gt; globus-gridftp-server -p 5000 -r machineB:6000,machineC:7000</screen>
The client would only connect to the front end at 
<computeroutput>machineA:5000</computeroutput>, for example, using globus-url-copy with the -stripe option:
<screen>globus-url-copy -stripe gsiftp://machineA:5000/file file:///destination
   <emphasis>or</emphasis>
globus-url-copy -stripe gsiftp://machineA:5000/file gsiftp://machineX/destination</screen>
Where machineX may be another striped server or a standard GridFTP server.</para>


</section>

<section id="gridftp-admin-seperated"><title>Separation of Processes</title>
<para>
As is illustrated above, the GridFTP server can be separated into front end
and data node processes.  This is the architecture used to achieve a striped
server, but it can also be exploited to achieve a higher level of security.
</para>
<para>
Running the server as root is often desirable because it allows the server to
fork and setuid on a child processes related to an authenticated user.  This
allows the server to leverage the operating systems file system permissions
and other security devices.  However, it is not at all desirable to have
a root running process listening on a port open to the world.  If an
attacker were to compromise the process they could obtain root level
access to the machine.
</para>
<para>
To overcome this security risk the gridftp server can be run in a
front end/back end manner.  The front end can be run as any user, say user globus,
that has very limited access to the machine.  The front end is the processes
open to the outside world.  If it is compromised an attacker has only 
gained access to that limited account.  The back end is run as root, but
configured to only allow connections from the front end.
</para>
<para>To start the front end:</para> 
<screen>globus-gridftp-server -p 7000 -r localhost:7001</screen>
<para> and the back end:</para>
<screen>globus-gridftp-server -p 7001 -dn -allow-from 127.0.0.1</screen>
</section>
    <section id="gridftp-admin-server-gfork">
        <title>Running with GFork Master Plugin</title>
        <para>GFork is a service like inetd that listens on a TCP port and runs a configurable
            executable in a child process whenever a connection is made. GFork also creates
            bi-directional pipes between the child processes and the master service. These pipes
            are used for interprocess communication between the child process executables and a
            master process plugin. More information on GFork can be found
            <olink targetptr="gridftp-admin-gfork-master">here</olink>.</para>
    </section>
</chapter>


<chapter id="gridftp-admin-testing"><title>Testing</title>
    <indexterm type="gridftp-howto"><primary>testing </primary></indexterm>
    <indexterm type="gridftp"><primary>testing </primary></indexterm>

<para>If the globus-ftp-client-test package has been installed, our standard
test suite may be run to verify functionality on your platform.  Simply set
up the globus environment, chdir to 
<computeroutput>$GLOBUS_LOCATION/test/globus_ftp_client_test/</computeroutput> and run <computeroutput>./TESTS.pl</computeroutput>.</para>
<!-- 
    <para> Please also see <olink targetptr="gridftp-cft-whatistesting">Call for Community Testing</olink>.</para>
    -->
</chapter>

<chapter id="gridftp-admin-security_considerations"><title>Security Considerations </title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GridFTP_Security_Considerations_Frag.xml" xpointer="xpointer(/section/*)"/>

</chapter>

<chapter id="gridftp-admin-troubleshooting"><title>Troubleshooting</title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GridFTP_Troubleshooting_Frag.xml" xpointer="xpointer(/section/*)"/>
</chapter>

<chapter id="gridftp-admin-usage"><title>Usage statistics collection by the Globus Alliance </title>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
        href="../GridFTP_Usage_Statistics_Frag.xml" xpointer="xpointer(/section/*)"/>
</chapter>
    <appendix id="gridftp-admin-gfork-master">
        <title>Running the Globus GridFTP Server With GFork</title>
        <section id="gridftp-gfork-master-intro">
            <title>Introduction</title>
            <para>GFork is a user-configurable super-server daemon very similar to xinetd in that it
                listens on a TCP port. When clients connect to a port, it runs an
                administrator-defined program which services that client connection, just as xinetd
                does.</para>
            <para>An unfortunate drawback to xinetd is that there is no way to maintain or share
                long-term information. Every time a client connects, a new process is created; and
                every time that client disconnects, the process is destroyed. All of the information
                regarding the specific interactions with a given client is lost with these transient
                processes. A further disadvantage is that there is no way for these service
                instances to share service-specific information with each other while they are
                running.</para>
            <para>There are times when it is useful for a service to maintain long-term
                service-specific state, or for a service to share state across client connections.
                GFork is designed to address this situation. GFork runs a long term master program
                (that is user-defined) and forms communication links via UNIX pipes between this
                process and all client connection child processes. This allows long-term state to be
                maintained in memory and allows for communication between all nodes.</para>
            <para>Associated with a GFork instance is a master process. When GFork starts, it runs a
                user-defined master program and opens up bi-directional pipes to it. The master
                program runs for the lifetime of the GFork daemon. The master is free to do whatever
                it wants; it is a user-defined program. Some master programs listen on alternative
                TCP connections to have state remotely injected. Others monitor system resources,
                such as memory, in order to best share resources. As clients connect to the TCP
                listener, child processes are forked which then service the client connection.
                Bi-directional pipes are opened up to the child processes as well. These pipes allow
                for communication between the master program and all child processes. The master
                program and the child programs have their own protocol for information exchange over
                these links. GFork is just a framework for safely and quickly creating these links.</para>
        </section>
        <section id="gridftp-gfork-master-use-case">
            <title>Use Cases</title>
            <para>The creation of GFork was motivated by the Globus GridFTP server. GridFTP can be
                run as a striped server where there is a frontend and several backends. The backends
                run in tandem to transfer files faster by tying together many NICs. The frontend is
                the contact point for the client where transfer requests are made. When the frontend
                is run out of inetd, the list of possible backends must be statically configured.
                Unfortunately, backends tend to come and go. Sometimes backends fail, and sometimes
                backends are added to a pool. We needed a way to have a dynamic pool of backends for
                use in live transfers. To accomplish this we created GFork.</para>
        </section>
        <section id="gridftp-gfork-config">
            <title>Configuration</title>
            <para>A major difference between GFork configuration and xinetd is that GFork only runs
                one service per instance, where xinetd runs many services per instance all
                associated with many different ports. GFork takes a single configuration file and
                handles a single service. If there is demand, GFork will be enhanced to handle many
                services in the way that xinetd does.</para>
            <para>Running the globus-gridftp-server under GFork is almost identical to running it
                under xinetd. First, you need a configuration file:</para>
<screen>service gridftp2
{
env += GLOBUS_LOCATION=&lt;path to GL&gt;
env += LD_LIBRARY_PATH=&lt;path to GL&gt;/lib
server = &lt;path to GL&gt;/sbin/globus-gridftp-server
server_args = -i 
server_args += -d ALL -l &lt;path to GL&gt;/var/gridftp.log
port = 5000
}</screen>
            <para>That portion is identical to xinetd. In fact, an existing xinetd configuration
                file should work.</para>
            <para>When running GridFTP out of GFork, the server should be run with a master program.
                The master program provides enhanced functionality such as dynamic backend
                registration for striped servers, managed system memory pools and internal data
                monitoring for both striped and non-striped servers.
            </para>
            <para>To run with a master program, the following two lines are needed in the config
                file.</para>
<screen>
master = &lt;path to GL&gt;/libexec/gfs-gfork-master
master_args = &lt;options&gt;</screen>
            <para>These last two options relate to the master program and work in the same way that
                <computeroutput>server</computeroutput>
                and
                <computeroutput>server_args</computeroutput>
                do. The first line tells GFork what master program to use (for the GridFTP server,
                we use
                <command>gfs-gfork-master</command>). The second line provides options to the master
                program.
            </para>
            <para>The full list of master options are as follows (this is to date only, run the
                program with
                <option>--help</option>
                for newer options):</para>
            <variablelist>
                <varlistentry>
                    <term>-b | --reg-cs &lt;contact string&gt;</term>
                    <listitem>
                        <para>Contact to the frontend registry. This option makes it a data node.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-df | --dn-file &lt;path&gt;</term>
                    <listitem>
                        <para>Path to a file containing the list of acceptable DNs. Default is
                            system gridmap file.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-G | --gsi &lt;bool&gt;</term>
                    <listitem>
                        <para>Enable or disable GSI. Default is on.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-h | --help</term>
                    <listitem>
                        <para>Print the help message.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-l | --logfile &lt;path&gt;</term>
                    <listitem>
                        <para>Path to the logfile.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-p | --port &lt;int&gt;</term>
                    <listitem>
                        <para>Port where the server listens for connections.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-s | --stripe-count &lt;int&gt;</term>
                    <listitem>
                        <para>The maximum number of stripes to give to each server. A value of 0
                            indicates all stripes are available.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-u | --update-interval &lt;int&gt;</term>
                    <listitem>
                        <para>Number of seconds between registration updates.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>The following is an example GFork configuration file:</para>
<screen>service gridftp2
{
instances = 100
env += GLOBUS_LOCATION=/home/bresnaha/Dev/Globus-gfork3/GL
env += LD_LIBRARY_PATH=/home/bresnaha/Dev/Globus-gfork3/GL/lib
server = /home/bresnaha/Dev/Globus-gfork3/GL/sbin/globus-gridftp-server
server_args = -i -aa
server_args += -d ALL -l /home/bresnaha/tst.log
server_args += -dsi remote -repo-count 1
nice = 10
port = 5000
master = /home/bresnaha/Dev/Globus-gfork3/GL/libexec/gfs-gfork-master
master_args = -port 6065 -l /home/bresnaha/master.log -G n
master_args += -dn /home/bresnaha/master_gridmap
}</screen>
            <para>Once you have a configuration file, run GFork with:</para>
            <screen>% gfork -c &lt;path to config file&gt;</screen>
        </section>
        <section id="gridftp-gfork-striped">
            <title>GFork and Striped Servers</title>
            <para>As mentioned in
                <olink targetptr="gridftp-admin-data_nodes"/>, GridFTP offers a powerful enhancement
                called striped servers. In this mode a GridFTP server is set up with a single
                frontend and one or more backends. All of the backends work in concert to transfer a
                single file and thereby achieve high throughput rates. Here we describe how to
                configure one frontend and multiple backends for use as a striped server with GFork.</para>
            <section id="gridftp-gfork-striped-frontend">
                <title>Frontend Configuration</title>
                <para>The frontend server described here is run using dynamic backends. We need
                    additional options for both the GridFTP server and the master program. The
                    following lines are added to the config file:</para>
                <screen>server_args += -dsi remote 
                    master_args = -port 8588
                    master_args += -df &lt;path to gridmap file&gt;</screen>
                <para>The first line is an additional argument to the GridFTP server. It tells the
                    server that it will be operating in split mode (separate frontend and backend
                    processes) and that it will be using the frontend. (Specifically it tells the
                    server to use the 'remote' DSI).</para>
                <para>The second line tells the master program on which port it should listen for
                    backend registrations. Backend services can then connect to this port to notify
                    the frontend of their existence. By default, a registration is good for 10
                    minutes, but a backend is free to refresh its registration. In this way, a
                    frontend is provided with the list of possible backends (stripes) which may be
                    used for a transfer.</para>
                <para>The third line provides the master program with a list of authorized DNs. Each
                    line in the file must contain a GSI DN (certificate subject). In order to
                    register, the backend must authenticate and provide its DN. The provided DN is
                    checked against this file. In other words, the file is a list of DNs that may
                    register with the frontend. If the master program is not given a
                    <option>-df</option>
                    option and is given the
                    <option>-G</option>
                    option, then there is no registration security at all.</para>
            </section>
            <section id="gridftp-gfork-striped-backend">
                <title>Backend Configuration</title>
                <para>Any striped server setup can have more than one backend service. Furthermore,
                    any one computer can run multiple backends. The following explains how to set up
                    a backend server. These steps should be repeated for each needed backend
                    instance.</para>
                <para>A backend server may also be run with GFork, it just needs different options
                    for both the GridFTP server and the master program. A sample backend config file
                    is shown here:</para>
<screen>service gridftp2
{
env += GLOBUS_LOCATION=&lt;path to GL&gt;
env += LD_LIBRARY_PATH=&lt;path to GL&gt;/lib

server = &lt;path to GL&gt;/sbin/globus-gridftp-server
server_args = -i  
server_args += -dn
master = &lt;path to GL&gt;/libexec/gfs-gfork-master
master_args = -b localhost:8588
}</screen>
                <para>Notable additions to this file are:</para>
                <screen>server_args += -dn
                    master_args = -b localhost:8588</screen>
                <para>The first line tells the GridFTP server that it will be a 'data node', which
                    is another name for a backend.</para>
                <para>The second line tells the master program two things, first that it will be a
                    master of a data node, and second what the frontend's registration contact point
                    is. Note that in our example we have a hostname of 'localhost' and a port of
                    '8588'. 8588 is (and must be) the same port that was provided to the frontend's
                    master program in the previous step.</para>
                <para>Once the configuration file is complete, run GFork again as follows:</para>
                <screen>% gfork -c &lt;conf file&gt;</screen>
                <para>This will start up the data node and the master program will register itself
                    to the frontend and refresh its registration every 5 minutes (default setting).</para>
            </section>
        </section>
        <section id="gridftp-gfork-memory-mgt">
            <title>GFork with Memory Management</title>
            <para>Another feature of the GridFTP GFork plugin is memory usage limiting. Under
                extreme client loads, it is possible that GridFTP servers require more memory than
                the system has available. Due to a common kernel memory allocation scheme known as
                optimistic provisioning, this situation can lead to a full consumption of memory
                resources and thus trigger the out of memory handler. The OOM handler will kill
                processes in a difficult-to-predict way in order to free up memory. This will leave
                the system in an unpredicatable and unstable state; obviously, this is a situation
                that we want to avoid.</para>
            <para>To control this situation, the GridFTP GFork plugin has a memory limiting option.
                This will attempt to limit memory usage to a given value or to the maximum amount of
                RAM in the system. Most of the memory is given to the first few connections, but
                when the plugin detects that it is overloaded, each session is limited to half the
                available memory.</para>
            <para>To enable this feature, one of two options must be passed to the master program
                via the
                <option>master_args</option>
                in the config file:</para>
            <variablelist>
                <varlistentry>
                    <term>-m</term>
                    <listitem>
                        <simpara>Limits memory consumption to amount of RAM in the system.</simpara>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>-M &lt;formated int&gt;</term>
                    <listitem>
                        <simpara>Limits memory to the given value.</simpara>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>Another important option should be provided in the GFork config file:
                <option>instance</option>. When a client connects to GFork, a GridFTP server
                instance is executed. This instance requires a certain amount of RAM. If connections
                are coming in too fast, this can act as a DOS attack. Limiting the number of allowed
                simultaneous connections will help the memory management algorithm do its job. This
                limit is set with:</para>
            <screen>instance = &lt;int&gt;</screen>
            <para>We recommend a value of 100 or |RAM|/2M, whichever is smaller.</para>
            <para>The following is an example of a GFork configuration file with memory limiting
                enabled:</para>
<screen>service gridftp2
{
instance = 100  
env += GLOBUS_LOCATION=&lt;path to GL&gt;
env += LD_LIBRARY_PATH=&lt;path to GL&gt;/lib
server = &lt;path to GL&gt;/sbin/globus-gridftp-server
server_args = -i
server_args += -dn
master = &lt;path to GL&gt;/libexec/gfs-gfork-master
master_args = -M 512M
}</screen>
        </section>
    </appendix>
    <glossary role="auto" id="glossary-gridftpAdmin">
        <remark>some terms not in the docs but wanted in glossary: 
            <glossterm>scheduler</glossterm>
        </remark>
        <glossdiv><title>A</title>
            <glossentry>
                <glossterm>Dummy term</glossterm>
                <glossdef>
                    <para>This is a dummy entry for the automatic glossary database. Do not edit.</para>
                </glossdef>
            </glossentry>
        </glossdiv>
    </glossary>
</book>