<title>GT 4.0: C WS Core Command Reference</title>
<refentry id="globus-wsc-container">
<refmeta>
<refentrytitle>globus-wsc-container</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>

<refnamediv>
<refname>globus-wsc-container</refname>
<refpurpose>Hosts C web services</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-wsc-container</command>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Tool description</title>
<para>
  This command starts the C WS container, allowing WS and WSRF-enabled services
  to be invoked.  <emphasis>globus-wsc-container</emphasis> must be running to invoke services
    written using the C WS core.  
</para>
</refsect1>

<refsect1><title>Features</title>
  <itemizedlist>
  <listitem><simpara>
    The container can be run in the background with the <emphasis>-bg</emphasis> option,
    and <emphasis>-pidfile</emphasis> allows the pid of the process to written to a specified
    file.  This is useful for scripting the command, especially when running
    tests, or when the container process is expected to have a short lifetime. </simpara></listitem>
  <listitem><simpara>Supports HTTPS by default.  In order to turn off HTTPS, use the <emphasis>-nosec</emphasis> argument </simpara></listitem>
</itemizedlist>
</refsect1><refsect1><title>Limitations</title>
  <itemizedlist>
  <listitem><simpara>
    The C container does not have a shutdown command (the Java container
    has <emphasis>globus-stop-container</emphasis>).  To shutdown the C container, you
    can either CRTL-C the process, or kill the process with the
    process ID (use <emphasis>-pidfile</emphasis>)
  </simpara></listitem>
</itemizedlist>
</refsect1>
<refsect1><title>Command syntax</title>
<para>
  Run: <emphasis>globus-wsc-container -help</emphasis>
<screen>
Syntax: globus-wsc-container [-help][-max &lt;max sessions&gt;] ...

    Options
    -help, -usage             Displays usage
    -version                  Displays version
    -max      &lt;max sessions&gt;  Max sessions that can be started in parallel
    -port &lt;port&gt;              Set the port of the container
    -pidfile &lt;path&gt;           Write PID of container to this file
    -bg                       Run container in the background
    -nosec                    Don't use https

</screen>
</para>
</refsect1>

</refentry>


<refentry id="globus-wsrf-cgen">

<refmeta>
                         <refentrytitle>globus-wsrf-cgen</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>

<refnamediv>
<refname>globus-wsrf-cgen</refname>
<refpurpose>Generate Stubs/Skeletons in C</refpurpose>
</refnamediv>

<refsynopsisdiv><cmdsynopsis>
<command>globus-wsrf-cgen</command>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Tool description</title>
<para>
  This tool generates C bindings from a set of WSDL schema files.
  The tool is able to generate client bindings, service bindings, just types,
  or all three.  The <ulink url="WSDLtoCBindings.pdf">WSDL to C mapping document</ulink> gives more 
    information on how WSDL is mapped to the C programming language.
</para>
</refsect1>

<refsect1><title>Command syntax</title>
<para>
  Run: <emphasis>globus-wsrf-cgen -help</emphasis>
<screen>
globus-wsrf-cgen [-help][-s &lt;package name&gt;][-f &lt;flavor&gt;] \
                 [-p &lt;prefix file&gt;][-P &lt;prefix&gt;][-r &lt;relative path&gt;] \
                 [-d &lt;output dir&gt;][-N &lt;namespace&gt;][-n &lt;file&gt;] \
                 [-G &lt;namespace&gt;][-g &lt;file&gt;][-np][-nk][-nf &lt;function&gt;][-ns] \
                 &lt;wsdl schema&gt;

    This command generates client side bindings in C from a WSDL schema file.

    Optional arguments:

     -help, -usage          : displays this message
     -s &lt;package name&gt;      : name used to create the package.  Defaults to
                              the service name from the WSDL schema. This
                              argument is required, unless -no-package is
                              specified.
     -flavor &lt;flavor&gt;
     -fl &lt;flavor&gt;           : Specifies build flavor for the bindings package
                              e.g. gcc32dbg.  This option is required, unless
                              -no-package or -no-tarball is specified.
     -p &lt;file&gt;              : location of the Namespace to Prefix mappings
     -P &lt;prefix map&gt;        : additional Namespace to Prefix mapping specified
                              on the command line.  This argument should be
                              be formatted as &lt;prefix&gt;=&lt;namespace&gt;.
     -N &lt;namespace&gt;         : Namespace to generate types for.  -N arguments
                              limit which types are generated.  Multiple
                              -N arguments can be combined with -n args.
                              With -N or -n arguments, -G and -g arguments 
                              are ignored.
     -n &lt;file&gt;              : File with Namespaces to generate types for.
                              One namespace per line.  See -N for further info.
     -G &lt;namespace&gt;         : Namespace to NOT generate types for.  If -N
                              or -n are specified, -G arguments are ignored.
     -g &lt;file&gt;              : File with Namespaces to NOT generate types for.
                              If -N or -n are specified, -g arguments are 
                              ignored.
     -r &lt;relative path&gt;     : the relative path where generated headers are
                              install into.  $GL/include/&lt;flavor&gt;/&lt;relpath&gt;
     -d &lt;output dir&gt;        : directory to put the generated files in
     -no-package
     -np                    : No package creation.  Just generate files.
     -no-tarball
     -nb                    : Package files are created, but no package 
                              tarball is generated.  -np implies -nt
     -no-func &lt;func&gt;
     -nf &lt;func&gt;             : No generation of the function &lt;func&gt;.  e.g.
                              wsnt_TopicExpressionType_deserialize.  This
                              option is useful if you want to write your
                              own marshalling functions for a given type.
     -no-skel
     -nk                    : No skeleton source file generation
     -no-service
     -ns                    : No service.  Only generate client bindings 
                              and types.  -ns implies -nk.
     -no-client
     -nc                    : No client.  Only generate service bindings 
                              and types.  
     -no-types
     -nt                    : No types.  Only generate client and
                              service bindings.

    Required Argument:
     &lt;wsdl schema&gt;          : the WSDL schema to generate client side bindings

</screen>
</para>
</refsect1>

<refsect1><title>Limitations</title>
<para>
  <itemizedlist>
    <listitem><simpara>
      Only generates bindings from document/literal style WSDL schemas.
      For more information on WSDL schema styles, go 
      <ulink url="http://www-106.ibm.com/developerworks/webservices/library/ws-whichwsdl/">here</ulink>. </simpara></listitem>
    <listitem><simpara> Only generates ANSI-C bindings.  C++ bindings are not supported. </simpara></listitem>
  </itemizedlist>
</para>
</refsect1>

</refentry>









