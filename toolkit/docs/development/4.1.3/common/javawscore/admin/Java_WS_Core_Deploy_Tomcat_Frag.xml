<?xml version='1.0' encoding='UTF-8'?>
    <para>To deploy a Java WS Core installation into Tomcat run:</para>

<screen>$ cd $GLOBUS_LOCATION
$ ant -f share/globus_wsrf_common/tomcat/tomcat.xml deploySecureTomcat -Dtomcat.dir=<emphasis>&lt;tomcat.dir&gt;</emphasis></screen>

<para>Where <emphasis>&lt;tomcat.dir&gt;</emphasis> is an <emphasis>absolute</emphasis> path to the Tomcat installation directory. 
Also, <computeroutput>-Dwebapp.name=&lt;name&gt;</computeroutput> can be specified to set the name of the web application under which the 
  installation will be deployed. By default &quot;<computeroutput>wsrf</computeroutput>&quot; web application name is used.
</para>
<para>
The <computeroutput>deploySecureTomcat</computeroutput> task will update an existing Tomcat deployment if Java WS Core was already deployed 
  under the specified web application name. The <computeroutput>redeploySecureTomcat</computeroutput> task can be used instead to overwrite the 
  existing deployment.
</para>
<note>
   <simpara>Please note that during deployment a subset of the files from Java WS Core installation is copied into Tomcat. Also, the copied files in 
     Tomcat might have different permissions then the originals.</simpara>
</note>

    <para>In addition to the above deployment step you will also need to modify
the Tomcat <filename>&lt;tomcat_root&gt;/conf/server.xml</filename> configuration file. In particular you will need to add the following configuration entries:
</para>
    <itemizedlist>
      <listitem>
        <para>Tomcat 4.1.x</para>
        <orderedlist>
            <listitem>
              <para>Add a HTTPS Connector in the <emphasis>&lt;Service name=&quot;Tomcat-Standalone&quot;&gt;</emphasis> section and update the parameters
appropriately with your local configuration:</para> 
<screen>&lt;Connector
    className=&quot;org.apache.catalina.connector.http.HttpConnector&quot;
    port=&quot;8443&quot; minProcessors=&quot;5&quot; maxProcessors=&quot;75&quot;
    authenticate=&quot;true&quot; secure=&quot;true&quot; scheme=&quot;https&quot;
    enableLookups=&quot;true&quot; acceptCount=&quot;10&quot; debug=&quot;0&quot;&gt;
    &lt;Factory
       className=&quot;org.globus.tomcat.catalina.net.HTTPSServerSocketFactory&quot;
       proxy=&quot;/path/to/proxy/file&quot;
       cert=&quot;/path/to/certificate/file&quot;
       key=&quot;/path/to/private/key/file&quot;
       cacertdir=&quot;/path/to/ca/certificates/directory&quot;/&gt;
  &lt;/Connector&gt;</screen>
              <para>In the above the <computeroutput>proxy</computeroutput>, <computeroutput>cert</computeroutput>, <computeroutput>key</computeroutput> and 
                <computeroutput>cacertdir</computeroutput> attributes are optional. Furthermore, the <computeroutput>proxy</computeroutput> and the combination of 
                <computeroutput>cer</computeroutput>t and <computeroutput>key</computeroutput> attributes are mutually exclusive.
              </para>
            </listitem>
          <listitem>
            <para>Add a HTTPS Valve in the <emphasis>&lt;Engine name=&quot;Standalone&quot; ... &gt; </emphasis>section:</para>
            <screen>&lt;Valve className=&quot;org.globus.tomcat.catalina.valves.HTTPSValve&quot;/&gt;</screen>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>Tomcat 5.0.x</para>
        <orderedlist>
          <listitem>
            <para>Add a HTTPS Connector in the <emphasis>&lt;Service name=&quot;Catalina&quot;&gt;</emphasis> section and update the parameters
              appropriately with your local configuration: </para>
            <screen>&lt;Connector
    className=&quot;org.globus.tomcat.coyote.net.HTTPSConnector&quot;
    port=&quot;8443&quot; maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot; 
    autoFlush=&quot;true&quot;
    disableUploadTimeout=&quot;true&quot; scheme=&quot;https&quot;
    enableLookups=&quot;true&quot; acceptCount=&quot;10&quot; debug=&quot;0&quot; 
    proxy=&quot;/path/to/proxy/file&quot;
    cert=&quot;/path/to/certificate/file&quot;
    key=&quot;/path/to/private/key/file&quot;
    cacertdir=&quot;/path/to/ca/certificates/directory&quot;/&gt;</screen>
            <para>In the above the <computeroutput>proxy</computeroutput>, <computeroutput>cert</computeroutput>, <computeroutput>key</computeroutput> and <computeroutput>cacertdir</computeroutput> attributes are optional. Furthermore, the <computeroutput>proxy</computeroutput> and the combination of <computeroutput>cer</computeroutput>t and <computeroutput>key</computeroutput> attributes are mutually exclusive.
            </para>
          </listitem>
          <listitem>
            <para>Add a HTTPS Valve in the <emphasis>&lt;Engine name=&quot;Catalina&quot; ... &gt; </emphasis>section:</para>
            <screen>&lt;Valve className=&quot;org.globus.tomcat.coyote.valves.HTTPSValve&quot;/&gt;</screen>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem><!-- no ids in frags used more than once:  id="javawscore-admin-tomcat-55" -->
        <para>Tomcat 5.5.x</para>
        <orderedlist>
          &Java_WS_Core_Tomcat_55_Frag;
        </orderedlist>
      </listitem>
    </itemizedlist>
    
    <note>
      <simpara>It is recommend to run Tomcat with Java 1.4.2+.</simpara>
    </note>
    
    <section>
      <title><filename>web.xml</filename> configuration</title>
      <para>You may have to edit <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/web.xml</filename> if you are running Tomcat on a non-default port, that is if not using port 8443 (HTTPS). For example, if you run Tomcat on port 443 using HTTPS then the WSRF servlet entry should be modified as follows:</para>
      <screen>&lt;web-app&gt;
    ...
    &lt;servlet&gt;
        &lt;servlet-name&gt;WSRFServlet&lt;/servlet-name&gt;
        &lt;display-name&gt;WSRF Container Servlet&lt;/display-name&gt;
        &lt;servlet-class&gt;
            org.globus.wsrf.container.AxisServlet
        &lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;defaultProtocol&lt;/param-name&gt;
            &lt;param-value&gt;https&lt;/param-value&gt;
        &lt;/init-param&gt; 
        &lt;init-param&gt;
            &lt;param-name&gt;defaultPort&lt;/param-name&gt;
            &lt;param-value&gt;443&lt;/param-value&gt;
        &lt;/init-param&gt;   
        &lt;load-on-startup&gt;true&lt;/load-on-startup&gt; 
    &lt;/servlet&gt;
    ...
&lt;/web-app&gt;</screen>
      
      <para>
        Also, by default the <link linkend="javawscore-Interface_Config_Frag-webContext"><computeroutput>webContext</computeroutput></link> property
        is set to the directory name of the web application on the file
        system. However, sometimes the context under which the web application
        is published might be different from the directory name of the
        application. In such cases it is necessary to explicitly configure
        the published context name in the <filename>web.xml</filename> file. 
        To configure the web application context name set the <computeroutput>webContext</computeroutput> parameter in <filename>web.xml</filename> file. For example (assuming services are published under <computeroutput>http://localhost:8080/foo/services</computeroutput>) the <computeroutput>webContext</computeroutput> should be set to:</para>
      <screen>&lt;web-app&gt;
    ...
    &lt;servlet&gt;
        &lt;servlet-name&gt;WSRFServlet&lt;/servlet-name&gt;
        ...
        &lt;init-param&gt;
            &lt;param-name&gt;webContext&lt;/param-name&gt;
            &lt;param-value&gt;foo&lt;/param-value&gt;
        &lt;/init-param&gt; 
        ...
        &lt;load-on-startup&gt;true&lt;/load-on-startup&gt; 
    &lt;/servlet&gt;
    ...
&lt;/web-app&gt;</screen>
      
    </section>
    
    <section>
      <title>Enabling local invocations</title>
      <para>
        To enable <link linkend="javawscore-developer-LocalInvocations">local invocation</link> in Tomcat you must add <computeroutput>axis-url.jar</computeroutput> to the CLASSPATH before starting Tomcat. 
      </para>
      <para>
        For example on Windows:
      </para>
      <screen>&gt; cd &lt;tomcat.dir&gt;
&gt; set CLASSPATH=&lt;tomcat.dir&gt;\common\lib\axis-url.jar
&gt; bin\startup</screen>
      <para>
        On Unix/Linux (csh/tcsh):
      </para>
      <screen>$ cd &lt;tomcat.dir&gt;
$ setenv CLASSPATH &lt;tomcat.dir&gt;/common/lib/axis-url.jar
$ bin/startup</screen>
      <para>
      </para>
    </section>
    
    <section id="javawscore-admin-tomcat-debugging">
      <title>Debugging</title>
      
      <section>
        <title>Tomcat log files</title>
        <para>
          Please always check the Tomcat log files under the <filename>&lt;tomcat.dir&gt;/logs</filename> directory for any errors or exceptions.
        </para>
      </section>
      
      <section>
        <title>Enabling Log4J debugging</title>
        
        <itemizedlist>
          <listitem>
            <para>Tomcat 4.1.x</para>
            <para>
              Copy <filename>$GLOBUS_LOCATION/lib/common/commons-logging-*.jar</filename> files to <filename>&lt;tomcat.dir&gt;/common/lib</filename> directory. Also, copy <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/classes/log4j.properties</filename> file to <filename>&lt;tomcat.dir&gt;/common/classes/</filename> directory. Then configure the Log4j configuration file in <filename>&lt;tomcat.dir&gt;/common/classes/</filename> directory appropriately. The debugging settings will affect all the code in <emphasis>all</emphasis> web applications.
            </para>
          </listitem>
          <listitem>
            <para>Tomcat 5.0.x, 5.5.x</para>
            <para>
              Copy <filename>$GLOBUS_LOCATION/lib/common/log4j-*.jar</filename> and <filename>$GLOBUS_LOCATION/lib/common/commons-logging-*.jar</filename> files to <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/lib/</filename> directory. Then configure the Log4j configuration file in <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/classes/</filename> directory appropriately. The debugging settings will only affect the web application code.
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <section>
      <title>Creating WAR file</title>
      <para>
        To create a <computeroutput>.war</computeroutput> of a Java WS Core installation do:
      </para>
      <screen>$ cd $GLOBUS_LOCATION
$ ant -f share/globus_wsrf_common/tomcat/tomcat.xml war -Dwar.file=<emphasis>&lt;war.file&gt;</emphasis></screen>
      <para>
        Where <emphasis>&lt;war.file&gt;</emphasis> specifies the <emphasis>absolute</emphasis> path of the war file.
      </para>
      <para>
        Please note that deploying a <computeroutput>war</computeroutput> file might not be enough to have a working Java WS Core deployment. For example, in some cases the <computeroutput>xalan.jar</computeroutput> must be placed in the <computeroutput>endorsed</computeroutput> directory of the container.
      </para>
    </section>
    
    <section>
      <title>Deploying and undeploying services</title>
      <para>
        To deploy a service into Tomcat, first deploy the service into a regular GT installation using the <command>globus-deploy-gar</command> tool and then deploy the GT installation into Tomcat (as described in <xref linkend="javawscore-admin-deploying" />). Similarly, to undeploy a service, first undeploy the service from a regular GT installation using <command>globus-undeploy-gar</command> tool and then <emphasis>deploy</emphasis> the GT installation into Tomcat.
      </para>
      <note>
        <simpara>Some GT services may not work properly in Tomcat.</simpara>
      </note>
    </section>
    