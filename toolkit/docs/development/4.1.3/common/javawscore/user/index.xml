<title>GT 4.0 Java WS Core : User's Guide</title>
<titleabbrev>User's Guide</titleabbrev>

<section id="s-javawscore-user-introduction"><title>Introduction</title>
<para>[End user-friendly introduction AND references to the Toolkit-level User's Guide where they can find general end user-oriented information] </para>
</section>

<section id="s-javawscore-user-commandline"><title>Command-line tools</title>
<para><xref linkend="r-javawscore-reference"/></para>
</section>

<section id="s-javawscore-user-gui"><title>Graphical user interfaces</title>
&Java_WS_Core_Interface_GUI_Frag;
</section>




<section id="s-javawscore-user-troubleshooting"><title>Troubleshooting</title>


<section id="s-javawscore-user-runningclients"><title>Running clients from any directory</title>
<para>
A client launched directly through the <computeroutput>java</computeroutput> executable might fail if ran from a directory other then the <computeroutput>GLOBUS_LOCATION</computeroutput> (It usually happens if the client receives notifications). To ensure that a client can be started from any directory pass a <computeroutput>GLOBUS_LOCATION</computeroutput> system property on the <computeroutput>java</computeroutput> command line set to the appropriate <computeroutput>GLOBUS_LOCATION</computeroutput> directory. 
For example on Unix/Linux:
<screen> $ java -DGLOBUS_LOCATION=$GLOBUS_LOCATION foo.MyClass</screen>
or on Windows:
<screen> &gt; java -DGLOBUS_LOCATION=%GLOBUS_LOCATION% foo.MyClass</screen>
</para>

&Java_WS_Core_Troubleshooting_Frag;

</section>
</section>


<section id="s-javawscore-user-miscellaneousinfo"><title>Miscellaneous information</title>

<section id="s-javawscore-user-RunningJava"><title>Running Java Programs From Command Line</title>

<para>
Sometimes it might be necessary to run a Java program directly using the <computeroutput>java</computeroutput> executable. There are two recommended ways of doing so (the <computeroutput>GLOBUS_LOCATION</computeroutput> environment variable must first be set in both cases):
</para>

<section><title>With <computeroutput>globus-devel-env</computeroutput> script help</title>
<para>
The <computeroutput>globus-devel-env</computeroutput> script can be used to set the proper <computeroutput>CLASSPATH</computeroutput> environment variable.
To set the <computeroutput>CLASSPATH</computeroutput> on Windows execute:

<screen> &gt; %GLOBUS_LOCATION%\etc\globus-devel-env.bat</screen>

On Unix/Linux machines execute (for bash/sh):

<screen> $ . $GLOBUS_LOCATION/etc/globus-devel-env.sh</screen>
or (for csh/tcsh):
<screen> $ source $GLOBUS_LOCATION/etc/globus-devel-env.csh</screen>

Once the <computeroutput>globus-devel-env</computeroutput> is executed successfully run the Java program, for example:
</para>
<para>On Windows:
<screen> &gt; java -DGLOBUS_LOCATION=%GLOBUS_LOCATION% foo.MyClass</screen>
On Unix/Linux:
<screen> $ java -DGLOBUS_LOCATION=$GLOBUS_LOCATION foo.MyClass</screen>
<emphasis>Note:</emphasis>
Passing <computeroutput>-DGLOBUS_LOCATION</computeroutput> is not necessary but will enable the client to execute from any directory.
</para>
</section>
<section><title>Using bootstrap</title>
<para>
Sometimes the above method might fail if the <computeroutput>CLASSPATH</computeroutput> environment variable is too long for the OS to handle. With the bootstrap method, a bootstrap code is executed first which sets the classpath programatically and then invokes the specified Java program. 
To invoke a Java program on Windows through bootstrap execute:
<screen> &gt; java -cp %GLOBUS_LOCATION%\lib\bootstrap.jar -DGLOBUS_LOCATION=%GLOBUS_LOCATION% \
       org.globus.bootstrap.Bootstrap foo.MyClass</screen>
On Unix/Linux machines execute:

<screen> $ java -cp $GLOBUS_LOCATION/lib/bootstrap.jar -DGLOBUS_LOCATION=$GLOBUS_LOCATION \
       org.globus.bootstrap.Bootstrap foo.MyClass</screen>
</para>
</section>
</section>
</section>

<section id="s-javawscore-user-usage"><title>Usage statistics collection by the Globus Alliance</title>
&Java_WS_Core_Usage_Statistics_Frag;
</section>




