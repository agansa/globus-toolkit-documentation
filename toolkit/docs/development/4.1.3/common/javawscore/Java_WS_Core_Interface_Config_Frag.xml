<section><title>Configuration overview</title>
<para>
Java WS Core provides per- <constant>gar</constant> configuration and supports configuration profiles. The configuration information of a service is mainly encapsulated in two separate configuration files: </para>
<itemizedlist>
  <listitem><simpara>
      <emphasis><filename>server-config.wsdd</filename></emphasis> (Web Service Deployment Descriptor) - 
      contains information about the web service.
  </simpara></listitem>
  <listitem><simpara> 
      <emphasis><filename>jndi-config.xml</filename></emphasis> (JNDI configuration file) - 
      contains information about the resource management. 
  </simpara></listitem>
</itemizedlist>
<para>A service that support security might also have the <emphasis><filename>security-config.xml</filename></emphasis> (security
  deployment descriptor) file. Please see the <ulink url="http://www-unix.globus.org/toolkit/docs/development/4.0-drafts/security/authzframe/security_descriptor.html">Security
  Descriptor</ulink> page in the GT4 WS Authorization Framework documentation for
  details.
</para>

<para>All these configuration files are dropped into the <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/</computeroutput> directory during the deployment process.</para>
</section>

<section><title>Syntax of the interface:</title>
<section id="s-javawscore-Interface_Config_Frag-GlobalConfig"><title>Global Configuration</title>

<para>
The global properties are specified in the <computeroutput>&lt;globalConfiguration&gt;</computeroutput> section
of <computeroutput>*server-config.wsdd</computeroutput> files in the <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/</computeroutput> directory.
The configuration item <emphasis>name</emphasis> corresponds to the "<emphasis>name</emphasis>" attribute
in a <computeroutput>&lt;parameter&gt;</computeroutput> sub element, and the <emphasis>value</emphasis> is put
as a "<emphasis>value</emphasis>" attribute within the same parameter element. 
</para>

<table><title>General configuration parameters</title>
<tgroup cols="4"><thead>
<row>
 <entry>Name</entry>
 <entry>Value</entry>
 <entry>Description</entry>
 <entry>Comments</entry>
</row>
</thead>
<tbody>
<row>
 <entry><emphasis>logicalHost</emphasis></entry>
 <entry>&lt;hostname&gt;</entry>
 <entry>
      This parameter specifies the hostname to use instead of the default local host. It is equivalent to setting the <computeroutput>GLOBUS_HOSTNAME</computeroutput> environment property. Can be FQDN or just hostname. 
 </entry>
 <entry>Optional</entry>
</row>

<row>
 <entry><emphasis>disableDNS</emphasis></entry>
 <entry>&lt;boolean&gt;</entry>
 <entry>
      This parameter specifies whether to perform DNS lookup on the <computeroutput>logicalHost</computeroutput> parameter. By default <computeroutput>"false"</computeroutput> is assumed (DNS lookup is performed).
 </entry>
 <entry>Optional</entry>
</row>

<row>
 <entry><emphasis>domainName</emphasis></entry>
 <entry>&lt;domanin name&gt;</entry>
 <entry>
      This parameter specifies the domain name to append to the host name if the host name is not qualified by a domain.
 </entry>
 <entry>Optional</entry>
</row>

<row>
 <entry><emphasis>publishHostName</emphasis></entry>
 <entry>&lt;boolean&gt;</entry>
 <entry>
      This parameter specifies whether to publish the hostname or the ip address. It is only used when DNS lookups are enabled (<computeroutput>disableDNS</computeroutput> is false).
 </entry>
 <entry>Optional</entry>
</row>

</tbody></tgroup>
</table>

<table><title>Standalone/embedded container-specific configuration parameters</title>
<tgroup cols="4"><thead>
<row>
 <entry>Name</entry>
 <entry>Value</entry>
 <entry>Description</entry>
 <entry>Comments</entry>
</row>
</thead>
<tbody>
<row>
 <entry><emphasis>containerThreads</emphasis></entry>
 <entry>&lt;int&gt;</entry>
 <entry>
      This parameter controls the initial thread pool size for the container.
      By default it is set to 5.
 </entry>
 <entry>Optional</entry>
</row>

<row>
 <entry><emphasis>containerThreadsMax</emphasis></entry>
 <entry>&lt;int&gt;</entry>
 <entry>
      This parameter sets the maximum number of threads for the container. By default it is set to 4 * the <computeroutput>containerThread</computeroutput> setting.
 </entry>
 <entry>Optional</entry>
</row>

<row>
 <entry><emphasis>containerThreadsHighWaterMark</emphasis></entry>
 <entry>&lt;int&gt;</entry>
 <entry>
      This parameter controls when the thread pool of the container should start shrinking (if the number of idle threads exceeds this number). By default it is set to 2 * the <computeroutput>containerThread</computeroutput> setting.
 </entry>
 <entry>Optional</entry>
</row>

</tbody></tgroup>
</table>

</section>

<section id="s-javawscore-Interface_Config_Frag-ServiceConfig"><title>Service Configuration</title>

<section><title>WSDD</title>
<para>
An example of a deployment descriptor for a CounterService:
</para>
<screen>
&lt;service name="CounterService" provider="Handler"
         use="literal" style="document"&gt;
 &lt;parameter name="className"
            value="org.globus.wsrf.samples.counter.CounterService"/&gt;
 &lt;parameter name="handlerClass"
            value="org.globus.axis.providers.RPCProvider"/&gt;
 &lt;parameter name="scope"
            value="Application"/&gt;
 &lt;wsdlFile&gt;share/schema/core/samples/counter/counter_service.wsdl&lt;/wsdlFile&gt;
 &lt;parameter name="allowedMethodsClass"
            value="com.counter.CounterPortType"/&gt;
 &lt;parameter name="providers" value="
            DestroyProvider SetTerminationTimeProvider GetRPProvider 
            SubscribeProvider GetCurrentMessageProvider"/&gt;
&lt;/service&gt;
</screen>
<para>

Services are defined in a <computeroutput>&lt;service&gt;</computeroutput> element. The "<emphasis>name</emphasis>" attribute
of the <computeroutput>&lt;service&gt;</computeroutput> element defines the remotely accessible name
of the service. The service handle will have the form of &lt;hosting environment
URL&gt;/foo, where:</para>
 <itemizedlist>
   <listitem><simpara>the hosting environment URL typically is <computeroutput>http://&lt;host&gt;:&lt;port&gt;/wsrf/services.</computeroutput>
   </simpara></listitem>
   <listitem><simpara><emphasis>foo</emphasis> is
    the name of the service (<computeroutput>&lt;service name="foo" ...&gt;</computeroutput>).
   </simpara></listitem>
 </itemizedlist> 
<para>The <emphasis>use</emphasis> attribute
  should be set to <emphasis>literal</emphasis> and the <emphasis>style</emphasis> attribute to <emphasis>document</emphasis> for
  all WSRF/WSN based services. 
The configuration information for a service is defined by various <computeroutput>&lt;parameter&gt;</computeroutput> sub-elements
  within a <computeroutput>&lt;service&gt;</computeroutput> element. The configuration item <emphasis>name</emphasis> corresponds
  to the "<emphasis>name</emphasis>" attribute in a <computeroutput>&lt;parameter&gt;</computeroutput> sub element,
  and the <emphasis>value</emphasis> is put as a "<emphasis>value</emphasis>" attribute within the same parameter
 element. </para>

<table><title>Axis Standard Parameters</title>
<tgroup cols="4"><tbody>
<row>
 <entry><emphasis>Name</emphasis></entry>
 <entry><emphasis>Value</emphasis></entry>
 <entry><emphasis>Description</emphasis></entry>
 <entry><emphasis>Comments</emphasis></entry>
</row>
<row>
 <entry><emphasis>className</emphasis></entry>
 <entry>&lt;class&gt;</entry>
 <entry>This parameter specifies a class that implements the web service methods.</entry>
 <entry>Required</entry>
</row>
<row>
 <entry><emphasis>handlerClass</emphasis></entry>
 <entry>&lt;class&gt;</entry>
 <entry>
      This parameter specifies what dispatcher to use, to dispatch a request
      to a service method. This parameter is required if the <emphasis>provider</emphasis> 
      attribute of the <emphasis>service</emphasis> is set to <computeroutput>Provider</computeroutput>.
      The default dispatcher we provide is called 
      <emphasis>org.globus.axis.providers.RPCProvider</emphasis>. It enables special features
      such as operation providers or security support.
 </entry>
 <entry>Recommended in our environment</entry>
</row>
<row>
 <entry><emphasis>scope</emphasis></entry>
 <entry>&lt;value&gt;</entry>
 <entry>
     Scope value can be one of: <emphasis>Request</emphasis> (the default), <emphasis>Application</emphasis>, or <emphasis>Session</emphasis>. If <emphasis>Request</emphasis> scope is used, a new service object is created for each SOAP request that comes in for the service. If <emphasis>Application</emphasis> scope is used, only a single instance of the service object is created and used for all SOAP requests that come in for the service. If <emphasis>Session</emphasis> scope is used, a new service object is created for each session-enabled client who accesses the service. <emphasis>Note:</emphasis> Only <emphasis>Request</emphasis> and <emphasis>Application</emphasis> scope is supported when used with <emphasis>org.globus.axis.providers.RPCProvider</emphasis> handlerClass.
 </entry>
 <entry><emphasis>Application</emphasis> scope is recommended</entry>
</row>
<row>
 <entry><emphasis>wsdlFile</emphasis></entry>
 <entry>&lt;path&gt;</entry>
 <entry>
      This parameter points to a wsdl file for the service. The wsdl file
      must contain the <emphasis>wsdl:service</emphasis> entry. The file location
      can be relative or absolute. A relative file location is recommended.
 </entry>
 <entry>Required in our environment</entry>
</row>
<row>
 <entry><emphasis>allowedMethods</emphasis></entry>
 <entry>&lt;list of methods&gt;</entry>
 <entry>
      This parameter specifies a space or comma separated list of method names
      that can be called via SOAP. <computeroutput>"*"</computeroutput> indicates that all methods
      of the service class can be invoked via SOAP.
 </entry>
 <entry>Optional. By default all methods are allowed.</entry>
</row>
</tbody></tgroup>
</table>

<table><title>Java WS Core Parameters</title>
<tgroup cols="4"><tbody>
<row>
 <entry><emphasis>Name</emphasis></entry>
 <entry><emphasis>Value</emphasis></entry>
 <entry><emphasis>Description</emphasis></entry>
 <entry><emphasis>Comments</emphasis></entry>
</row>
<row>
 <entry><emphasis>loadOnStartup</emphasis></entry>
 <entry>&lt;boolean&gt;</entry>
 <entry>
      If set to <emphasis>true</emphasis> this parameter will cause the web service and the corresponding ResourceHome (if any) to be initialized (with proper security settings if configured) at container startup. This is useful for restarting some tasks, etc. at container startup without having to call the service. Please check the <link linkend="Activation">Lifecycle and activation</link> section for details.
 </entry>
 <entry>Optional</entry>
</row>

<row>
 <entry><emphasis>allowedMethodsClass</emphasis></entry>
 <entry>&lt;class&gt;</entry>
 <entry>
      This parameter is similar to the <emphasis>allowedMethods</emphasis> standard Axis property but it specifies a Java class or an interface that is introspected to come up with a list of allowed methods that can be called remotely on the service. To is useful to easily restrict the SOAP-accessible methods of the service. Usually the class specified in this parameter would be the remote interface class generated for the service. This parameter only has effect if used with <emphasis>org.globus.axis.providers.RPCProvider</emphasis> handlerClass. 
 </entry>
 <entry>Optional</entry>
</row>

<row>
 <entry><emphasis>providers</emphasis></entry>
 <entry>&lt;list of providers&gt;</entry>
 <entry>
      This parameter specifies a space separated list of provider names or class names. Please see <link linkend="s-javawscore-developer-OperationProvider">operation provider support</link> section for details. This parameter only has effect if used with <emphasis>org.globus.axis.providers.RPCProvider</emphasis> handlerClass.
 </entry>
 <entry>Optional</entry>
</row>

</tbody></tgroup>
</table>

<para>Please see <ulink url="http://ws.apache.org/axis/java/user-guide.html#PublishingServicesWithAxis">Custom Deployment</ulink> for details on Axis Web Services Deployment Descriptor.
</para>

</section>

<section><title>JNDI</title>
<para>An example of a JNDI configuration bit for a CounterService:
<screen>
 &lt;service name="CounterService">
   &lt;resource 
            name="home"
            type="org.globus.wsrf.samples.counter.CounterHome">
     &lt;resourceParams&gt;
        &lt;parameter&gt;
           &lt;name&gt;factory&lt;/name&gt;
           &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
           &lt;name&gt;resourceClass&lt;/name&gt;
           &lt;value&gt;org.globus.wsrf.samples.counter.PersistentCounter&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
           &lt;name&gt;resourceKeyName&lt;/name&gt;
           &lt;value&gt;{http://counter.com}CounterKey&lt;/value&gt;
        &lt;/parameter&gt;
        &lt;parameter&gt;
           &lt;name&gt;resourceKeyType&lt;/name&gt;
           &lt;value&gt;java.lang.Integer&lt;/value&gt;
        &lt;/parameter&gt;
     &lt;/resourceParams&gt;
   &lt;/resource&gt;
 &lt;/service&gt;
</screen>

Each service in WSDD should have a matching entry in the JNDI configuration file with the same name. Under each service entry in JNDI different resource objects or entries might be defined. Please see the <link linkend="s-javawscore-developer-JNDIDetails">JNDI section</link> for details. 
Each service entry in JNDI should have a resource defined called <computeroutput>"home"</computeroutput>. That resource is the <computeroutput>ResourceHome</computeroutput> implementation for the service (as specified by the <computeroutput>type</computeroutput> attribute). Depending on the <computeroutput>ResourceHome</computeroutput> implementation different options can be configured for the <computeroutput>ResourceHome</computeroutput>. Currently we have two main base <computeroutput>ResourceHome</computeroutput> implementations: <computeroutput>org.globus.wsrf.impl.ResourceHomeImpl</computeroutput> and <computeroutput>org.globus.wsrf.impl.ServiceResourceHome</computeroutput>.
</para>
<para>
<emphasis>Note:</emphasis> All <computeroutput>"home"</computeroutput> resources must specify a <computeroutput>factory</computeroutput> parameter with <computeroutput>org.globus.wsrf.jndi.BeanFactory</computeroutput> value.
</para>


<section><title>ResourceHomeImpl</title>

<para>
This implementation is a generic <computeroutput>ResourceHome</computeroutput> implementation. It supports persistent resources, resource caching, resource sweeper, etc. 
</para>

<table><title>ResourceHomeImpl parameters</title>
<tgroup cols="4"><tbody>
<row>
 <entry><emphasis>Name</emphasis></entry>
 <entry><emphasis>Value</emphasis></entry>
 <entry><emphasis>Description</emphasis></entry>
 <entry><emphasis>Comments</emphasis></entry>
</row>

<row>
 <entry><emphasis>resourceKeyName</emphasis></entry>
 <entry>&lt;qname&gt;</entry>
 <entry>
      This parameter specifies a QName of the resource key. The namespace 
      is specified in the <computeroutput>{}</computeroutput>. For example, this 
      QName will be used to discover the SOAP header that contains the key
      of the resource in the request.
 </entry>
 <entry>Required</entry>
</row>

<row>
 <entry><emphasis>resourceKeyType</emphasis></entry>
 <entry>&lt;class&gt;</entry>
 <entry>
      This parameter specifies the type of the resource key as a Java class.
      The key XML element is deserialized into this Java type. The Java type
      can be for any simple Java type, Axis generated bean, or a class with
      a type mapping.
 </entry>
 <entry>Optional. Defaults to <computeroutput>java.lang.String</computeroutput></entry>
</row>

<row>
 <entry><emphasis>resourceClass</emphasis></entry>
 <entry>&lt;class&gt;</entry>
 <entry>
      This parameter specifies the classname of the resource object.
      This is used to ensure that right type of resource object is added
      to resource home and to instantiate the right object if resource
      supports persistence.
 </entry>
 <entry>Required</entry>
</row>

<row>
 <entry><emphasis>sweeperDelay</emphasis></entry>
 <entry>&lt;long&gt;</entry>
 <entry>
      This parameter specifies how often the resource sweeper runs in
      milliseconds.
 </entry>
 <entry>Optional. Defaults to 1 minute</entry>
</row>

<row>
 <entry><emphasis>cacheLocation</emphasis></entry>
 <entry>&lt;jndi path&gt;</entry>
 <entry>
      This parameter specifies the JNDI location of the resource cache for this
      resource home. Please see <link linkend="s-javawscore-Interface_Config_Frag-resourcecache">Configuring Resource Cache</link> below for details.
 </entry>
 <entry>Optional</entry>
</row>

</tbody></tgroup>
</table>

<section id="s-javawscore-Interface_Config_Frag-resourcecache"><title>Configuring Resource Cache</title>

<para>
If <emphasis>ResourceHomeImpl</emphasis> is configured with resource class that implements the <emphasis>PersistenceCallback</emphasis> interface it will store the resource objects wrapped in Java <ulink url="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ref/SoftReference.html">SoftReference</ulink>. That allows the JVM to automatically reclaim these resource objects thus reducing the memory usage. Since the JVM can decide to reclaim these objects at any point sometimes a resource object can be reclaimed between two subsequent invocations on the same resource. This for example can cause the state of the resource to be reloaded from disk on each call.
To prevent the JVM from reclaiming the resource objects so quickly a cache can be setup up to hold direct references to these objects. A basic LRU (least recently used) cache implementation is provided. Other cache implementations can be used as long as they implement the <emphasis>org.globus.wsrf.utils.cache.Cache</emphasis> interface.
</para>

<para>
To configure a cache for <emphasis>ResourceHomeImpl</emphasis> first define a cache resource entry in JNDI:
</para>
<screen>
&lt;resource name="cache" 
             type="org.globus.wsrf.utils.cache.LRUCache"&gt;
  &lt;resourceParams&gt;
     &lt;parameter&gt;
        &lt;name&gt;factory&lt;/name&gt;
        &lt;value&gt;org.globus.wsrf.jndi.BeanFactory&lt;/value&gt;
     &lt;/parameter&gt;
     &lt;parameter&gt;
        &lt;name&gt;timeout&lt;/name&gt;
        &lt;value&gt;120000&lt;/value&gt;
     &lt;/parameter&gt;
  &lt;/resourceParams&gt;
&lt;/resource>
</screen>

<para>
In this case a LRU cache is configured. The "<emphasis>timeout</emphasis>" parameter (in ms) is used to specify the idle time of the resource object before it is removed from the cache.

The same cache resource can be reused in different services but usually once cache per service will be configured. 
</para>

<para>
Once the cache resource entry is defined add the "<emphasis>cacheLocation</emphasis>" parameter to the service <emphasis>home</emphasis> resource. The "<emphasis>cacheLocation</emphasis>" parameter value is the JNDI name of the cache resource:
<screen>
&lt;service name="CounterService"&gt;
   &lt;resource name="home" type="..."&gt;
      &lt;resourceParams&gt;
         ...<emphasis>
         &lt;parameter&gt;
            &lt;name&gt;cacheLocation&lt;/name&gt;
            &lt;value&gt;java:comp/env/services/CounterService/cache&lt;/value&gt;
         &lt;/parameter&gt;</emphasis>
         ...
      &lt;/resourceParams&gt;
   &lt;/resource>
   ...
   &lt;resource name="cache" 
             type="org.globus.wsrf.utils.cache.LRUCache"&gt;
   ...
   &lt;/resource>
&lt;/service>
</screen>
Please note that once the object is removed from the cache it is still up to the JVM to actually reclaim the object.
</para>

</section>
</section>

<section><title>ServiceResourceHome</title>

<para>
This implementation does not accept any special parameters.
</para>

</section>
</section>
</section>

<section id="s-javawscore-Interface_Config_Frag-usageStatisticsTargets"><title>Usage Statistics Configuration</title>

<para>
Java WS Core container and other GT services are configured to send out usage statistics. Please see the <link linkend="s-javawscore-admin-usage">usage statistics section</link> for more information.
</para>
<para>
The targets to which the usage statistics are sent to are configured via the <emphasis><computeroutput>usageStatisticsTargets</computeroutput></emphasis> parameter defined in the <computeroutput>&lt;globalConfiguration&gt;</computeroutput> section of the <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/server-config.wsdd</computeroutput> file. The <emphasis><computeroutput>usageStatisticsTargets</computeroutput></emphasis> parameter specifies a space separated list of targets to which the usage statistics of various components will be sent to. Each target is of form: <computeroutput>host[:port]</computeroutput> (port is optional, if not specified a default port will be assumed). By default usage statistics are sent to <computeroutput>usage-stats.globus.org:4810</computeroutput>. 
</para>
<para>To disable sending of the usage statistics remove this parameter, comment it out, or remove all of its values.</para>

</section>

<section id="s-javawscore-Interface_Config_Frag-ConfigurationProfiles"><title>Configuration Profiles</title>

<para>
Configuration profiles allow for the same Java WS Core installation to have multiple configurations. That is, the same installation can be used to run different containers each with different configuration.
</para>
<para>
When a <link linkend="deployGar">gar file is deployed</link>, a <computeroutput>-Dprofile</computeroutput> option can be specified to deploy the configuration files under a specific profile name. If the profile name is specified, the deploy operation will drop the configuration file as <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/&lt;profile.name&gt;-server-config.wsdd</computeroutput> and/or <computeroutput>$GLOBUS_LOCATION/etc/&lt;gar.id&gt;/&lt;profile.name&gt;-jndi-config.xml</computeroutput>. 
The configuration profiles can also be created by hand simply by copying and/or renaming the configuration files appropriately. Each configuration profile should duplicate the contents of <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/server-config.wsdd</computeroutput> and <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/jndir-config.xml</computeroutput> in order to make the basic functionality to work properly.
</para>
<para>
Once a configuration profile is created, the <link linkend="globus-start-container">standalone container can be started</link> with a <computeroutput>-profile</computeroutput> option to load configuration files in a specific profile.
</para>
</section>
</section>


