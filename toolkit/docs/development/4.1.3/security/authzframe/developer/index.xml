<?xml version='1.0' encoding='UTF-8'?>
<title>GT4 WS AA Developer&apos;s Guide</title>
<titleabbrev>Developer&apos;s Guide</titleabbrev>
<section id="authzframe-developer-introduction">
  <title>Introduction</title>
  <para>The authorization framework enforces  the configured authorization
policy on the service and client side.  </para>

<para> On the service side, the framework allows 
developers to configure a chain of authorization mechanisms either
programmatically or declaratively using security descriptors. It also
allows for plugging in new authorization schemes (in addition to using
those that are provided with the framework). Moreover, the framework
allows for this configuration to be done at resource, service or
container level, each taking precedence in the order specified and
scoped as the name suggests.</para>

<para> On the client side, a pluggable framework for authorization of service is provided.</para>

</section>

<section id="authzframe-developer-beforeyoubegin">
  <title>Before you begin</title>
  <section id="authzframe-developer-features">
    <title>Feature summary</title>
    &WS_AA_Authz_Feature_Summary_Frag;
  </section>
  <section id="authzframe-developer-platforms">
    <title>Tested platforms</title>
    &WS_AA_Authz_Platform_Summary_Frag;
  </section>
  <section id="authzframe-developer-compatibility">
    <title>Backward compatibility summary</title>
    &WS_AA_Authz_Compatibility_Summary_Frag;
  </section>
  <section id="authzframe-developer-dependencies">
    <title>Technology dependencies</title>
    &WS_AA_Authz_Dependencies_Summary_Frag;
  </section>
  <section id="authzframe-developer-security_considerations">
    <title>Security considerations </title>
    &WS_AA_Authz_Security_Considerations_Frag;
  </section>
</section>
<section id="authzframe-developer-archdes">
  <title>Architecture and design overview</title>
  <section>
    <title>Server-side authorization</title>
    <para>The Java WS Authorization framework leverages the generic GT Java Authorization Framework. The framework consists of an engine that evaluates a chain of configured authorization schemes, also known as Policy Decision Points (PDPs), to determine if the client making the invocation can access the resource/service. The chain can also be configured with Policy Information Points (PIPs), which can be used to glean information that would be useful in the decision making process. </para>
    <para>The framework enables attribute-based authorization. PIPs can be used to collect attributes about resource/operations/subjects and used in the decision making process. While the toolkit provides some implementations of PIPs/PDPs, the framework is pluggable and custom mechanisms can be written and configured.
    </para> 
    <para> An authorization engine consists of PIPs, PDPs and a combining algorithm. The configured authorization engine is invoked as part of a handler chain, immediately after authentication of the invocation (<function>java:org.globus.wsrf.impl.security.authorization.AuthorizationHandler</function>). If no  security mechanism is used for an operation,  authorization is not done for that operation.  </para>
    <para> The architecture of Generic Java Authorization Engine is described in detail in this <ulink url="&docpath;security/authzframe/gtJavaAuthzEngine.pdf">document</ulink>. It also describes interfaces and writing custom PDPs/PIPs.</para>
    <para>Any PDP has to implement the interface <function>org.globus.security.authorization.PDP</function> and contain the logic to return a permit or deny based on information such as the subject DN, the service being accessed and the operation being performed. To manage configuration information, each PDP can be bootstrapped with an object implementing the <function>org.globus.security.authorization.ChainConfig</function> interface. The interface has get and set methods which can be used to retrieve and set scoped parameters for the PDP. </para>
    <para>PIPs have to implement the interface <function>org.globus.security.authorization.PIP</function> with the functionality to collect attributes from the invocation context that are relevant to making the authorization decision.</para>
    <section>
     <title> Authorization Policy Configuration </title>

    <para>A chain of PDPs and PIPs, with relevant configuration information, can be configured at resource, service or container level. These chain use Permit Override with Delegation as default combining algorithm. Additionally an administrative policy can be configured at the container level. The administrative chain uses First Applicable combining algorithm by default. Note that comining algorithms can be configured to over-ride the deafult. The following describes the precedence in which configured policy is used: </para>

<para>
<orderedlist>
<listitem> <para>If container level administrative policy is specified, it is evaluated. 
  <orderedlist>
    <listitem> <para> If (1) returns a deny, the request is denied. </para></listitem>
    <listitem> <para>If (1) returns a permit, step (2) is done.</para></listitem>
  </orderedlist>
  </para></listitem>
  <listitem> <para>If resource level policy is specified, it is evaluated.
  <orderedlist>
    <listitem> <para> If (2) returns a deny, the request is denied. </para></listitem>
    <listitem> <para>If (2) returns a permit, the request is permitted.</para></listitem>
  </orderedlist>
  </para></listitem>
  <listitem><para> If (2) is not specified and service level policy is specified, it is evaluated.
  <orderedlist>
    <listitem> <para> If (3) returns a deny, the request is denied. </para></listitem>
    <listitem> <para>If (3) returns a permit, the request is permitted.</para></listitem>
  </orderedlist>
  </para></listitem>
  <listitem><para> If (3) is not specified and container level policy configuration is specified, it is evalauted.
    <orderedlist>
    <listitem> <para> If (4) returns a deny, the request is denied. </para></listitem>
    <listitem> <para>If (4) returns a permit, the request is permitted.</para></listitem>
  </orderedlist>
 </para></listitem>
 </orderedlist>
</para>
      </section>

    <section>
     <title> Authorization Handler Steps </title>

<para>
<orderedlist>

<listitem><para>Invoke <xref linkend="authzframe-pip-ContainerPIP"/> to collect attributes inherent to the framework. The PIP creates an instance of RequestEntities class to use as parameter with PIPs. It also creates an instance of ResourceChainConfig class to push the current message context as a parameter to ContianerPIP. </para></listitem>

<listitem><para>Evaluate the administrator authorization engine, if one is configured

<orderedlist>
<listitem><para>If bootstrap overwrite is configured, then only BootstrapPIPs in administrator engine is invoked. Else the <xref linkend="authzframe-pip-X509Bootstrap"/> is invoked prior to any other Bootstrap PIPs configured.</para></listitem>

<listitem><para>The authorization engine is run and if a deny decision is returned, the operation is denied. If a permit decision is returned, the operation is permitted. If a not applicable or indeterminate is returned, further authorization engines are evaluated.</para></listitem>
</orderedlist>

</para></listitem>

<listitem><para>Evaluate the authorization engine configured in the resource, service, container, in that order depending on which is configured

<orderedlist>
<listitem><para>If bootstrap overwrite is configured, then only BootstrapPIPs in administrator engine is invoked. Else the <xref linkend="authzframe-pip-X509Bootstrap"/> is invoked prior to any other Bootstrap PIPs configured.</para></listitem>

<listitem><para>If any decision other than a Permit is returned, the operation is denied. If a permit is returned the operation is allowed.</para></listitem>
</orderedlist>
</para></listitem>

<listitem><para>If no authorization engine was configured, then default authorization engine is created, which checks whether the caller has same credentials as service (self authorization)</para></listitem>

      </orderedlist>
       </para>
     </section>
      
  </section>

  <section>
    <title>Client-side authorization</title>
    <para>Client side authorization is done as a part of the authentication handler. GSI Secure Message authentication does client-side authorization only after the operation is completed. This is done as a part of the web services client handler. The other two authentication schemes supported, GSI Secure Conversation and GSI Transport, authorize the server during the handshake, prior to the operation invocation. </para>
    <para> The Transport Level Security protocol allows for authorization (an expected DN comparison) during the handshake. This is disabled by default in the toolkit, unless delegation of credential is requested. If no delegation is requested, the configured authorization mechanism is invoked afer the handshake is complete, prior to the operation invocation. If delegation is requested, authorization (expected DN comparison) is done during key exchange as a part of the protocol. </para>
<para>The toolkit supports self, gridmap, host and identity authorization on the client side. The authorization to be used is set programmatically on the Stub and the handler enforces it.</para>
  </section>
</section>
<section id="authzframe-developer-pubinterfaces">
  <title>Public interface</title>
  <section id="authzframe-developer-apis"><title>Semantics and syntax of APIs</title>
    &WS_AA_Authz_Interface_API_Frag;
  </section>
  <section id="authzframe-developer-wsdl"><title>Semantics and syntax of the WSDL</title>
    &WS_AA_Authz_Interface_WSDL_Frag;
  </section>
  <section id="authzframe-developer-protocols"><title>Semantics and syntax of non-WSDL protocols</title>
    &WS_AA_Authz_Interface_Protocol_Frag;
  </section>
  <section id="authzframe-developer-cmd"><title>Command-line tools</title>
    &WS_AA_Authz_Interface_Commandline_Frag;
  </section>
  <section id="authzframe-developer-guis"><title>Overview of Graphical User Interfaces</title>
    &WS_AA_Authz_Interface_GUI_Frag;
  </section>
  <section id="authzframe-developer-domain"><title>Semantics and syntax of domain-specific interface</title>
    &WS_AA_Authz_Interface_Domain_Frag;
  </section>
  <section id="authzframe-developer-config"><title>Configuration interface</title>
    &WS_AA_Authz_Interface_Config_Frag;
  </section>
  <section id="authzframe-developer-env"><title>Environment variable interface</title>
    &WS_AA_Authz_Interface_Env_Frag;
  </section>
  <section id="authzframe-developer-pip-pdp"><title>PIPs and PDPs</title>
    &WS_AA_Authz_Interface_PIP_PDP_Frag;
  </section>
</section>
<section id="authzframe-developer-scenarios">
  <title>Usage scenarios</title>
  <section id="authzframe-developer-scenarios-samlAssertion"><title>Using SAML Authorization Assertions</title>
    <para>Please see <xref linkend="message-developer-scenarios-samlAssertion"/> in the Message-/Transport-level Security documentation.</para>
    </section>

</section>

<section id="authzframe-developer-tutorials">
  <title>Tutorials</title>
  <para>There are no tutorials available at this time.</para>
</section>

<section id="authzframe-developer-debugging">
  <title>Debugging</title>
  <para>Log output from the   authorization framework is a useful tool for debugging
  issues. Logging in   the code is based on  the <ulink url="http://jakarta.apache.org/commons/logging/">Jakarta Commons Logging</ulink> API and is described in more detail in <xref linkend="javawscore-developer-debugging"/>. As
  described in the above section, configuration files need to be edited to
  enable logging at different levels. For example, to see all logging
  for server side authorization, the following lines need to be added to container logging configuration file. To see client-side authorization framework logging, the same line  needs to  be added to <emphasis>$GLOBUS_LOCATION/log4j.properties</emphasis>.<screen>log4j.category.org.globus.wsrf.impl.security.authorization=DEBUG </screen></para>
  <para>The authorization module uses <ulink url="http://www.globus.org/cog/java/">Java CoG Kit</ulink> for some of the functionality. To turn on logging for that functionality, the following can be added to the relevant logging file, depending on whether it is the client or the server side logging.<screen>log4j.category.org.globus.gsi.jaas=DEBUG
log4j.category.org.globus.gsi.gssapi=DEBUG
log4j.category.org.globus.security.gridmap=DEBUG</screen></para>
</section>
<section id="authzframe-developer-troubleshooting">
  <title>Troubleshooting</title>
  <section>
     <title>No grid map file</title>
     <para>
       Check to ensure that a <glossterm>grid map file</glossterm> name is configured as shown in <xref linkend="security-secdesc-other-defaultGridMap"/> and that the security descriptor with grid map file information is configured correctly.
     </para>
  </section>

  <section>
     <title>Authorization failed. Peer is anonymous</title>
     <para>
     If an anonymous client is used, only some authorization schemes can authorize them. Self authorization, identity authorization, gridmap authorization and host authorization will fail if anonymous clients are used. Ensure that an appropriate authorization scheme is used if anonymous clients are allowed.
     </para>
  </section>
  <section>
  <title>&quot;org.globus.ogsa.security.authorization&quot; property must be of &quot;org.globus.ogsa.impl.security.authorization.Authorization&quot; type</title>
  <para> This error can occur on the client side if the authorization instance set on the stub does not implement interface <constant>org.globus.ogsa.impl.security.authorization.Authorization</constant>. A common error is importing authorization classes from <constant>org.globus.gsi.gssapi.auth</constant> rather than from <constant>org.globus.ogsa.impl.security.authorization</constant>. It is recommended that client security descriptors be used to set these properties, so the right classes and properties are setup by the framework.
  </para>
  </section>
</section>
<section id="authzframe-developer-relateddocs">
  <title>Related Documentation</title>
&WS_AA_Authz_Associated_Standards_Frag;
</section>
