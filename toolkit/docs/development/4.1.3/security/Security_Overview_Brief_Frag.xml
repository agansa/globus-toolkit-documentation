<?xml version='1.0' encoding='UTF-8'?>

<para>Security tools are concerned with establishing the identity of
  users or services (authentication), protecting communications
  (message protection), and determining who is allowed to perform what
  actions (authorization). It also includes supporting functions such
  as managing user credentials and maintaining group membership
  information.</para>


<para>GT4 provides distinct WS and pre-WS authentication and
  authorization capabilities.  Both build on the same base, namely
  standard X.509 end entity certificates and <glossterm
  baseform="proxy certificate">proxy certificates</glossterm>, which
  are used to identify persistent entities such as users and servers
  and to support the temporary delegation of privileges to other
  entities.</para>

  <para>For more information about the security concepts behind GT4,
  see <link linkend="security-key">Security: Key
  Concepts</link>. </para>

  <para>For a comparison of features between Java and C code, see
  <link linkend="security-features">Security Features</link>.</para>

  <para>For firewall information, click <ulink
url="http://www.globus.org/toolkit/security/firewalls/">here</ulink>.</para>

<para><emphasis role="strong">GT4&rsquo;s Java WS security</emphasis>: As mentioned above, there are three main aspects to Java WS Security: authentication, message protection and authorization. Authentication and message protected are tightly coupled: authentication establishes that the remote entity is who he claims to be and then using the keys the message sent is secured. Toolkit supports two types of mechanisms to achieve this:

<itemizedlist> <listitem>
<simpara><link linkend="message">Message-level Security</link>
mechanisms, which implement the WS-Security standard and the
WS-SecureConversation specification to provide message protection for
GT4&rsquo;s SOAP messages</simpara></listitem>

<listitem><simpara><link linkend="message">Transport-level
Security</link> mechanisms, which use transport-level security (TLS)
mechanisms; and</simpara></listitem> 
</itemizedlist>
</para>

<para>In all mechanisms supported in the toolkit, integrity and
privacy protection mechanisms are supported, with integrity being the
default level of protection. Also, the authentication is mutual in all
cases, that is the server authenticates the client and the client
authenticates the server.</para>

<para>Once authentication is complete, the peer identity is
established and the next step is authorization. Authorization happens
after authentication (and in some cases once a secure message is
received), where you establish whether the remote entity can perform
the action that is being requested. An <link
linkend="authzframe">Authorization Framework</link> provides this
functioanality on the server and client side. On the server side, a
framework that allows for a variety of authorization schemes,
including a &ldquo;grid-mapfile&rdquo; access control list, an access
control list defined by a service, a custom authorization handler, and
access to an authorization service via the SAML protocol, is used to
accomplish this. On the client side, similar, but a subset of the
mechanisms are provided.</para>

<para>The client configures the preferred authentication mechanism to
use for an invocation using <link
linkend="message-interface-domain-syntax">stub configuration</link>
or <link linkend="security-secdesc-introduction">security
descriptors</link>.  Multiple message protection mechanims can be
used to secure the same message, with a performance cost incurred. The
server can configure the set of acceptable security mechanisms an
invocation using security descriptors. The server response is secured
with the same protection mechanism as the request.</para>

<para> The WS Secure Conversation and Transport Layer Security
mechanims, allow for anonymous access, where the client need not
furnish credentials. In this mechanism authentiction and message
protection steps are still done and it is not an insecure call. But
the keys are generated on the fly and the server has no way to
establish the identity of the client. So authorization has to
accomadate amonymous clients, if indeed the server would like to
accept anonymous clients. </para>

<para>Another important piece of security infrastructure if the
ability of an entity to delegate its rights to another. The WS Secure
Conversation mechanism allows for delegation as a part of the protocol
and alternatively <link linkend="delegation">Delegation Service</link>
can be used to delegate credentials to any service. </para>

<para>The toolkit also provides <link linkend="cas">Community Authorization Service (CAS)</link>, a service that can be used to manage and assert fine-grained rights for users. </para>

<para><emphasis role="strong">GT4&rsquo;s Pre-WS security</emphasis>:
GT4 provides similar authentication, delegation, and
  authorization mechanisms, although with fewer authorization options. Refer to  <link linkend="prewsaa">Pre-WS Authentication &amp; Authorization</link>.
  </para>

<para>Other security components include:
  <itemizedlist>
     <listitem><para>Credential Management 
           <itemizedlist>
              <listitem><simpara><link linkend="myproxy">MyProxy</link></simpara></listitem>
             <listitem><simpara><link linkend="gtadmin-simpleca">SimpleCA</link></simpara></listitem>
            </itemizedlist></para>
    </listitem>
    <listitem> <para>Utilities 
    <itemizedlist>
      <listitem><simpara><link linkend="openssh">GSI-OpenSSH</link></simpara></listitem>
    </itemizedlist></para>
    </listitem>
  </itemizedlist></para>
  
  <para>TODO: add blurb about SGAS (SweGrid Accounting System)</para>