<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[

<!ENTITY % myents SYSTEM "../../../entities">

%myents;

]>
<book id="gridwayAdmin">
<title>GT &version; GridWay: System Administrator's Guide</title>
<titleabbrev>System Administrator's Guide</titleabbrev>

<bookinfo><abstract><title>Introduction</title>
<para>This guide contains
  installation and configuration information for system administrators installing
	GridWay. It explains how to install, configure and test the installation. </para>
<para>	<important>
		<simpara> This information is in addition to the basic Globus Toolkit prerequisite, 
			overview, installation, security configuration instructions in the <olink targetdoc="gtadmin" />.  
			Read through this guide before continuing!</simpara>  
	</important></para>
</abstract></bookinfo>
<chapter id="gridway-admin-installing"><title>Building and installing</title>
	
	<para>The full source <olink targetdoc="gtadmin">installation</olink> of GT &version; will build the prerequisite libraries with the correct flavor.</para>
	
	<section><title>Required Software</title>
		
		<para>GridWay is distributed as a source package; the following software is required to compile it:</para>
		
		<para>
			<itemizedlist>
				<listitem><para>C compiler: Tested versions gcc 3.4.2, 3.4.4, 4.0.3, 4.0.3 and 4.1.2</para></listitem>
				<listitem><para>Globus C libraries: globus_gram_client, globus_ftp_client and globus_gass_copy</para></listitem>
				<listitem><para>Globus JAVA development libraries</para></listitem>
				<listitem><para>J2SE versions 1.4.2_10+ (Builds higher than 10) or 1.5.0+</para></listitem>
				<listitem><para>GNU Make</para></listitem>
				<listitem><para>Sudo command (only required for multiple-user mode)</para></listitem>
				<listitem><para>Berkeley Database library version 4.4.20 (only required to compile the accounting module)</para></listitem>
			</itemizedlist>
		</para>
	</section>

	<section><title>Building</title>
		
		<para>
			To build GridWay alongside Globus you have two useful options you can pass to the Globus configure script. Here is an example:
		</para>

		<screen>$ ./configure --enable-gridway --with-gridwayargs="&lt;gridway args&gt;"</screen>

		<para>
			These two options are described in the following table:
		</para>

		<informaltable>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Option</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>--enable-gridway</entry>
						<entry>Tells globus to build GridWay. This option is disabled by default.</entry>
					</row>
					<row>
						<entry>--with-gridwayargs</entry>
						<entry>
							This option is used to pass parameters to the GridWay configuration interface. These parameters
							should be separated by spaces. The parameters you can use and their descriptions
							can be found in the table below.
						</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>

		<para>
			Specific GridWay building parameters:
		</para>

		<informaltable>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Option</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
      		   <entry>--disable-drmaa</entry>
      		   <entry>Don't build DRMAA support. Default is enabled.</entry>
      		</row>
      		<row>
      		   <entry>--disable-prews</entry>
      		   <entry>Don't build pre-web-services support. Default is enabled.</entry>
      		</row>
       		<row>
      		   <entry>--disable-ws</entry>
      		   <entry>Don't build web-services support. Default is enabled.</entry>
      		</row>
          <row>
            <entry>--enable-globus-scheme</entry>
            <entry>Adds GridWay subdirectories to etc and var. This parameter is meant to be used within a gpt-build process, not directly. Default is disabled.</entry>
          </row>
          <row>
            <entry>--enable-jsdl</entry>
            <entry>Does compile JSDL support. Default is disabled.</entry>
          </row>
          <row>
            <entry>--disable-gridftp</entry>
            <entry>Does not compile GridFTP MAD. Default is enabled.</entry>
          </row>

       		<row>
      		   <entry>--with-db=path_to_db</entry>
      		   <entry>Specify the Berkeley Database path to build accounting support.</entry>
      		</row>
       		<row>
      		   <entry>--with-doc</entry>
      		   <entry>Install GridWay documentation</entry>
      		</row>
       		<row>
      		   <entry>--with-tests</entry>
      		   <entry>Install tests</entry>
      		</row>
				</tbody>
			</tgroup>
		</informaltable>

	</section>
	</chapter>

	<chapter id="s-gridway-admin-configuring"><title>Configuring</title>
		<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
			href="../GridWay_Interface_Config_Frag.xml" xpointer="xpointer(/section/*)"/>
	</chapter>
	<chapter id="s-gridway-admin-deploying"><title>Deploying</title>
<para>
	GridWay is installed in the Globus directory when you issue the
	<command>make install</command>.
</para>
</chapter>
<chapter id="gridway-admin-testing"><title>Testing</title>
	  <para>
	  In order to test the GridWay installation, login as the <filename>&lt;gwadmin&gt;</filename>
	  account and follow the steps listed below:
	  </para>

	  <para>
	  <orderedlist>
	    <listitem>
	    <para>
	    Set up the environment variables <envar>GW_LOCATION</envar> and
	    <envar>PATH</envar>:
	    <screen>
$ export GW_LOCATION=$GLOBUS_LOCATION
$ export PATH=$PATH:$GW_LOCATION/bin</screen>
	    </para>
	    <para>
	    or <screen>
$ setenv GW_LOCATION $GLOBUS_LOCATION
$ setenv PATH $PATH:$GW_LOCATION/bin</screen>
	    </para>
	    <para>
	    depending on the shell you are using.
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    Generate a valid proxy
	    <screen>
$ grid-proxy-init
Your identity: /O=Grid/OU=GRIDWAY/CN=GRIDWAY User
Enter GRID pass phrase for this identity:
Creating proxy ................................. Done
Your proxy is valid until: Mon Oct 29 03:29:17 2005</screen>
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    Show the GridWay license:
	    <screen>
$ gwd -v
Copyright 2002-2007 GridWay Team, Distributed Systems Architecture
Group, Universidad Complutense de Madrid

GridWay 5.2 is distributed and licensed for use under the terms of the
Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0).</screen>
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    Start the GridWay daemon (GWD) in multiple users mode:
	    <screen>$ gwd -m</screen>
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    Check the connection to GWD:
	    <screen width='80'>
$ gwps
USER         JID DM   EM   START    END      EXEC    XFER    EXIT NAME            HOST
$ gwhost
HID PRIO  OS              ARCH   MHZ %CPU  MEM(F/T)     DISK(F/T)     N(U/F/T) LRMS                 HOSTNAME</screen>
	    </para>
	    </listitem>

	    <listitem>
	    <para>
	    Stop GWD:
	    <screen>$ pkill gwd</screen>
	    </para>
	    </listitem>
	  </orderedlist>
	  </para>

		<section>
	  <title>GridWay Test Suite</title>

	  <para>
	  GridWay is shipped with a test suite, available in the test directory. The
	  test suite exercises different parts of GridWay, and can be used to track
	  functionality bugs. However you need a working GridWay installation and
	  testbed to execute the suite. Usage information is available with
	  "gwtest -h". Tests can be performed individually (using the test id) or all
	  together automatically.
	     <table frame='all'>
	     <title>GridWay tests description.</title>
	       <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	       <colspec colname='test1' colwidth='1cm'/>
	       <colspec colname='test2' colwidth='5cm'/>
	       <colspec colname='test3' colwidth='30cm'/>
	       <tbody>
	         <row>
	         <entry>Test #</entry>
	         <entry>Test Name</entry>
	         <entry>Description</entry>
	         </row>
	           <row>
	             <entry>1</entry>
	             <entry>Normal Execution (SINGLE)</entry>
	             <entry>Submits a single job and verifies it is executed correctly</entry>
	           </row>
	           <row>
	             <entry>2</entry>
	             <entry>Normal Execution (BULK)</entry>
	             <entry>Submits an array of 5 jobs and verifies that all of them are executed correctly.</entry>
	           </row>
	           <row>
	             <entry>3</entry>
	             <entry>Pre Wrapper</entry>
	             <entry>Verifies that GridWay is able to execute the pre wrapper functionality.</entry>
	           </row>
	           <row>
	             <entry>4</entry>
	             <entry>Prolog Fail (Fake Stdin) No Reschedule</entry>
	             <entry>Submits a single job that fails in the prolog state due to a wrong input file for stdin.</entry>
	           </row>
	           <row>
	             <entry>5</entry>
	             <entry>Prolog Fail (Fake Stdin) Reschedule</entry>
	             <entry>Equal to the previous one, but GridWay tries to reschedule the job up to 2 times.</entry>
	           </row>
	           <row>
	             <entry>6</entry>
	             <entry>Prolog Fail (Fake Input File) No Reschedule</entry>
	             <entry>Same as #4 with a wrong input file for the executable.</entry>
	           </row>
	           <row>
	             <entry>7</entry>
	             <entry>Prolog Fail (Fake Executable) No Reschedule</entry>
	             <entry>Same as #4 with a wrong filename for the executable.</entry>
	           </row>
	           <row>
	             <entry>8</entry>
	             <entry>Prolog Fail (Fake Executable) No Reschedule</entry>
	             <entry>Same as #4 with a wrong filename for the executable.</entry>
	           </row>
	           <row>
	             <entry>9</entry>
	             <entry>Prolog Fail (Fake Stdin) No Reschedule (BULK)</entry>
	             <entry>Same as #4 submitting an array of 5 jobs.</entry>
	           </row>
	           <row>
	             <entry>10</entry>
	             <entry>Execution Fail No Reschedule</entry>
	             <entry>Submits a single job designed to fail (bad exit code) and verifies the correctness of the final state (failed).</entry>
	           </row>
	           <row>
	             <entry>11</entry>
	             <entry>Execution Fail Reschedule</entry>
	             <entry>Same as #9 but GridWay tries to reschedule the job up to 2 times.</entry>
	           </row>
	           <row>
	             <entry>12</entry>
	             <entry>Hold Release</entry>
	             <entry>Submits a single job on hold, releases it and verifies that it is executed correctly.</entry>
	           </row>
	           <row>
	             <entry>13</entry>
	             <entry>Stop Resume</entry>
	             <entry>Submits a single job, stops it (in Wrapper state), resumes it and verifies that it is executed correctly.</entry>
	           </row>
	           <row>
	             <entry>14</entry>
	             <entry>Kill Sync</entry>
	             <entry>Submits a job and kills it using a synchronous signal.</entry>
	           </row>
	           <row>
	             <entry>15</entry>
	             <entry>Kill Async</entry>
	             <entry>Submits a job and kills it using an asynchronous signal.</entry>
	           </row>
	           <row>
	             <entry>16</entry>
	             <entry>Kill Hard</entry>
	             <entry>Submits a job and hard kills it.</entry>
	           </row>
	           <row>
	             <entry>17</entry>
	             <entry>Migrate</entry>
	             <entry>Submits a job and sends a migrate signal when it reaches the Wrapper state. It then verifies the correct execution of the job.</entry>
	           </row>
	           <row>
	             <entry>18</entry>
	             <entry>Checkpoint local</entry>
	             <entry>Submits a job which creates a checkpoint file and verifies the correct execution of the job and the correct creation of the checkpoint file.</entry>
	           </row>
	           <row>
	             <entry>19</entry>
	             <entry>Checkpoint remote server</entry>
	             <entry>Same as #17 but the checkpoint file is created in a remote gsiftp server.</entry>
	           </row>
	           <row>
	             <entry>20</entry>
	             <entry>Wait Timeout</entry>
	             <entry>Submits a job and waits for it repeatedly using short timeouts until it finishes correctly.</entry>
	           </row>
	           <row>
	             <entry>21</entry>
	             <entry>Wait Zerotimeout</entry>
	             <entry>Same as #19 but with zero timeout (effectively, an asynchronous wait).</entry>
	           </row>
	           <row>
	             <entry>22</entry>
	             <entry>Input Output files</entry>
	             <entry>Tests the different methods GridWay offers to stage files (both input and output).</entry>
	           </row>
	           <row>
	             <entry>23</entry>
	             <entry>Epilog Fail (Fake Output) No Reschedule</entry>
	             <entry>Submits a single job that fails in the epilog state due to a wrong output filename.</entry>
	           </row>
	           <row>
	             <entry>24</entry>
	             <entry>Epilog Fail (Fake Output) Reschedule</entry>
	             <entry>Same as #22 but GridWay tries to reschedule the job up to 2 times.</entry>
	           </row>
	           <row>
	             <entry>25</entry>
	             <entry>Epilog Fail (Fake Output) No Reschedule (BULK)</entry>
	             <entry>Same as #22 but submitting an array of 5 jobs.</entry>
	           </row>
	         </tbody>
	     </tgroup>
	   </table>
	   </para>
	  </section>
	  </chapter>

<chapter id="gridway-admin-security_considerations"><title>Security considerations</title>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
		href="../GridWay_Security_Considerations_Frag.xml" xpointer="xpointer(/section/*)"/>
</chapter>

<chapter id="gridway-admin-troubleshooting" xreflabel="Troubleshooting"><title>Troubleshooting</title>

	  <para>
	  If you are having problems starting GWD, check the errors listed below. Also
	  try checking the daemon logs, see <olink targetptr='Logging'/>.
	  </para>


<variablelist>

<varlistentry>
<term>Lock file exists</term>
<listitem>
 <para>
      GridWay finishes with the following message when you try to start it:
      <screen>Error! Lock file &lt;path_to_GridWay>/var/.lock exists.</screen>
      Be sure that no other GWD is running, then remove the lock file and try
again.
      </para>
</listitem>
</varlistentry>


<varlistentry>
<term>Error in MAD initialization</term>
<listitem>
      <para>
      GridWay finishes with the following message, when you try to start it:
    <screen>
  Error in Execution MAD prews initialization, exiting. Check path,
  you have a valid proxy...</screen>
      Check that you have generated a valid proxy (for example with the
      grid-proxy-info command). Also, check that the directory
      <filename>$GW_LOCATION/bin</filename> is in your path, and the executable
name
      of all the MADs is defined in <filename>gwd.conf</filename>.
      </para>
</listitem>
</varlistentry>

<varlistentry>
<term>Error contacting GWD</term>
<listitem>
      <para>
      Client commands, like <command>gwps</command>, finish with the message:
      <screen>
  connect(): Connection refused
  Could not connect to gwd</screen>
      Be sure that GWD is running (ex. <emphasis>pgrep -l gwd</emphasis>). If
it
      is running, check that you can connect to GWD (ex. <emphasis>telnet
      `cat $GW_LOCATION/var/gwd.port`</emphasis>)
      </para>
</listitem>
</varlistentry>
</variablelist>

</chapter>

</book>