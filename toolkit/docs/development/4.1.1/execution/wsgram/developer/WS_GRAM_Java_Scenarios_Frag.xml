

<para>The following is a general scenario for submitting a job using the Java
stubs and APIs. Please consult the
<ulink url="http://www-unix.globus.org/toolkit/docs/4.0/common/javawscore/Java_WS_Core_Public_Interfaces.html#apis">Java WS Core API</ulink>,
<ulink url="http://www-unix.globus.org/toolkit/docs/4.0/security/delegation/WS_AA_Delegation_Service_Public_Interfaces.html#apis">Delegation API</ulink>,
<ulink url="http://www-unix.globus.org/toolkit/docs/4.0/data/rft/RFT_Public_Interfaces.html#apis">Reliable File Transfer API</ulink>, and
<ulink url="http://www-unix.globus.org/toolkit/docs/4.0/execution/wsgram/WS_GRAM_Public_Interfaces.html#apis">WS-GRAM API</ulink>
documentation for details on package names for classes referenced in the code
excerpts.
</para>

<section id="s-wsgram-developer-scenarios-java-imports">
<title>Class imports</title>
<para>
The following imports will be needed for these examples:
<screen>
</screen>
import java.io.File;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import java.security.cert.X509Certificate;
import javax.xml.rpc.Stub;
import javax.xml.soap.SOAPElement;
import org.apache.axis.components.uuid.UUIDGenFactory;
import org.apache.axis.message.addressing.AttributedURI;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.globus.delegation.DelegationUtil;
import org.globus.exec.generated.CreateManagedJobInputType;
import org.globus.exec.generated.CreateManagedJobOutputType;
import org.globus.exec.generated.ManagedJobFactoryPortType;
import org.globus.exec.generated.ManagedJobPortType;
import org.globus.exec.generated.ReleaseInputType;
import org.globus.exec.utils.ManagedJobConstants;
import org.globus.exec.utils.ManagedJobFactoryConstants;
import org.globus.exec.utils.client.ManagedJobClientHelper;
import org.globus.exec.utils.client.ManagedJobFactoryClientHelper;
import org.globus.exec.utils.rsl.RSLHelper;
import org.globus.wsrf.NotificationConsumerManager;
import org.globus.wsrf.WSNConstants;
import org.globus.wsrf.encoding.ObjectDeserializer;
import org.globus.wsrf.impl.security.authentication.Constants;
import org.globus.wsrf.impl.security.authorization.Authorization;
import org.globus.wsrf.impl.security.authorization.HostAuthorization;
import org.globus.wsrf.impl.security.authorization.IdentityAuthorization;
import org.globus.wsrf.impl.security.authorization.SelfAuthorization;
import org.globus.wsrf.impl.security.descriptor.ClientSecurityDescriptor;
import org.globus.wsrf.impl.security.descriptor.GSISecureMsgAuthMethod;
import org.globus.wsrf.impl.security.descriptor.GSITransportAuthMethod;
import org.globus.wsrf.impl.security.descriptor.ResourceSecurityDescriptor;
import org.oasis.wsn.Subscribe;
import org.oasis.wsn.SubscribeResponse;
import org.oasis.wsn.SubscriptionManager;
import org.oasis.wsn.TopicExpressionType;
import org.oasis.wsn.WSBaseNotificationServiceAddressingLocator;
import org.oasis.wsrf.lifetime.Destroy;
import org.oasis.wsrf.properties.GetMultipleResourceProperties_Element;
import org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse;
import org.oasis.wsrf.properties.GetResourcePropertyResponse;
</section>

<section id="s-wsgram-developer-scenarios-java-loadingjd">
<title>Loading the job description</title>
<para>
<screen>
File jobDescriptionFile = new File("myjobdesc.xml");
JobDescriptionType jobDescription = RSLHelper.readRSL(jobDescriptionFile);
</screen>
The object <computeroutput>jobDescription</computeroutput> will be of sub-type
MultiJobDescriptionType if the file contents is a multi-job description.</para>
</section>

<section id="s-wsgram-developer-scenarios-java-factorystub">
<title>Creating the factory service stub</title>
<para>
<screen>
URL factoryUrl = ManagedJobFactoryClientHelper.getServiceURL(
    contactString).getURL();
String factoryType
    = ManagedJobFactoryConstants.FACTORY_TYPE.<emphasis>&lt;factory type constant&gt;</emphasis>;
EndpointReferenceType factoryEndpoint
    = ManagedJobFactoryClientHelper.getFactoryEndpoint(factoryUrl, factoryType);
ManagedJobFactoryPortType factoryPort
    = ManagedJobFactoryClientHelper.getPort(factoryEndpoint);
</screen></para>
<para>The format of <computeroutput>contactString</computeroutput> is
<emphasis>[protocol://]host[:port][/servicepath].</emphasis></para>
</section>

<section id="s-wsgram-developer-scenarios-java-stubsec">
<title>Setting stub security parameters</title>
<para>
<screen>
ClientSecurityDescriptor secDesc = new ClientSecurityDescriptor();
secDesc.setGSITransport(Constants.<emphasis>&lt;protection level constant&gt;</emphasis>);
secDesc.setAuthz(<emphasis>&lt;<computeroutput>Authorization</computeroutput> sub-class instance&gt;</emphasis>);
if (proxy != null) {
    secDesc.setGSSCredential(proxy);
}
((Stub) port)._setProperty(Constants.CLIENT_DESCRIPTOR, secDesc);
</screen>
Use setGSISecureMsg() for GSI Secure Message.</para>
</section>

<section id="s-wsgram-developer-scenarios-java-queryingrps">
<title>Querying for factory resource properties</title>

<section>
<title>One at a time</title>
<screen>
GetResourcePropertyResponse response
    = factoryport.getResourceProperty(ManagedJobConstants.<emphasis>&lt;RP constant&gt;</emphasis>);

SOAPElement[] any = response.get_any();

... = ObjectDeserializer.toObject(any[0], <emphasis>&lt;RP type&gt;</emphasis>.class);
</screen>
</section>
<section>
<title>Many at a time</title>
<screen>
GetMultipleResourceProperties_Element rpRequest
    = new GetMultipleResourceProperties_Element();
rpRequest.setResourceProperty(new QName[] {
    ManagedJobFactoryConstants.<emphasis>&lt;RP constant #1&gt;</emphasis>,
    ManagedJobFactoryConstants.<emphasis>&lt;RP constant #2&gt;</emphasis>,
    ManagedJobFactoryConstants.<emphasis>&lt;RP constant #N&gt;</emphasis>
});
GetMultipleResourcePropertiesResponse response
    = factoryPort.getMultipleResourceProperties(rpRequest);

SOAPElement[] any = response.get_any();

... = ObjectDeserializer.toObject(any[0], <emphasis>&lt;RP #1 type&gt;</emphasis>.class);
... = ObjectDeserializer.toObject(any[0], <emphasis>&lt;RP #2 type&gt;</emphasis>.class);
... = ObjectDeserializer.toObject(any[0], <emphasis>&lt;RP #N type&gt;</emphasis>.class);
</screen>

</section>
</section>

<section id="s-wsgram-developer-scenarios-java-delegating">
<title>Delegating credentials (if needed)</title>
<para>
<screen>
X509Certificate certToSign = DelegationUtil.getCertificateChainRP(
    delegFactoryEndpoint,   //EndpointReferenceType
    secDesc,                //ClientSecurityDescriptor
)[0];   //first element in the returned array
EndpointReferenceType credentialEndpoint = DelegationUtil.delegate(
    delegFactoryurl,        //String
    credential,             //GlobusCredential
    certToSign,             //X509Certificate
    lifetime,               //int (seconds)
    fullDelegation,         //boolean
    secDesc);               //ClientSecurityDescriptor
</screen>

There are three types of delegated credentials:

<orderedlist>
<listitem><para>Credential used by the job to generate user-owned proxy:
    <screen>jobDescription.setJobCredential(credentialEndpoint);</screen></para></listitem>
<listitem><para>Credential used to contact RFT for staging and file clean up:
    <screen>jobDescription.setStagingCredentialEndpoint(credentialEndpoint);</screen></para></listitem>
<listitem><para>Credential used by RFT to contact GridFTP servers:
    <screen>TransferRequestType stageOut = jobDescription.getFileStageOut();
         stageOut.setTransferCredential(credentialEndpoint);</screen>
    Do the same for fileStageIn and fileCleanUp.</para></listitem>
</orderedlist>
</para>
</section>

<section id="s-wsgram-developer-scenarios-java-creatingjob">
<title>Creating the job resource</title>
<para>
<screen>
CreateManagedJobInputType jobInput = new CreateManagedJobInputType();
jobInput.setJobID(new AttributedURI("uuid:" + UUIDGenFactory.getUUIDGen()));
jobInput.setInitialTerminationTime(<emphasis>&lt;Calendar instance&gt;</emphasis>);
if (multiJob) jobInput.setMultiJob(jobDescription) else jobInput.setJob(jobDescription);
if (subscribeOnCreate) jobInput.setSubscribe(subscriptionReq);
CreateManagedJobOutputType createResponse
    = factoryPort(createManagedJob(jobInput);
EndpointReferenceType jobEndpoint = createResponse.getManagedJobEndpoint();
</screen>
</para>
</section>

<section id="s-wsgram-developer-scenarios-java-jobstub">
<title>Creating the job service stub</title>
<para>
<screen>
ManagedJobPortType jobPort = ManagedJobClientHelper.getPort(jobEndpoint);
</screen>
You must set the appropriate security parameters for the job service stub
(<computeroutput>jobPort</computeroutput>) as well.</para>
</section>

<section id="s-wsgram-developer-scenarios-java-subscribing">
<title>Subscribing for job state notifications</title>
<para>
<screen>
NotificationConsumerManager notifConsumerManager
    = NotificationConsumerManager.getInstance();

notifConsumerManager.startListening();
List topicPath = new LinkedList();
topicPath.add(ManagedJobConstants.RP_STATE);

ResourceSecurityDescriptor resourceSecDesc = new ResourceSecurityDescriptor();
resourceSecDesc.setAuthz(Authorization.<emphasis>&lt;authz type constant&gt;</emphasis>);

Vector authMethods = new Vector();
authMethods.add(GSITransportAuthMethod.BOTH);
resourceSecDesc.setAuthMethods(authMethods);

EndpointReferenceType notificationConsumerEndpoint
    = notifConsumerManager.createNotificationConsumer(
        topicPath,
        this,
        resourceSecDesc);


Subscribe subscriptionReq = new Subscribe();
subscriptionReq.setConsumerReference(
    notificationConsumerEndpoint);

TopicExpressionType topicExpression = new TopicExpressionType(
    WSNConstants.SIMPLE_TOPIC_DIALECT,
    ManagedJobConstants.RP_STATE);
subscriptionReq.setTopicExpression(topicExpression);

EndpointReferenceType subscriptionEndpoint;
</screen>
<itemizedlist>
<listitem><para>Subscribe on creation
<screen>jobInput.setSubscribe(subscriptionReq);</screen></para></listitem>
<listitem><para>Subscribe after creation
<screen>SubscribeResponse subscribeResponse
        = jobPort.subscribe(subscriptionRequest);
     subscriptionEndpoint = subscribeResponse.getSubscriptionReference();
</screen></para></listitem>
</itemizedlist>
</para>
</section>

<section id="s-wsgram-developer-scenarios-java-releasing">
<title>Releasing any state holds (if necessary)</title>
<para>
<screen>
jobPort.release(new ReleaseInputType());
</screen>
</para>
</section>

<section id="s-wsgram-developer-scenarios-java-destroying">
<title>Destroying resources</title>
<para>
<screen>
/*destroy subscription resource*/
SubscriptionManager subscriptionManagerPort
    = new WSBaseNotificationServiceAddressingLocator()
    .getSubscriptionManagerPort(subscriptionEndpoint);

//set stub security parameters on subscriptionManagerPort

subscriptionManagerPort.destroy(new Destroy());


/*destroy the job resource*/
jobPort.destroy(new Destroy());
</screen>
</para>
</section>

