<para>
The following is a general scenario for submitting a job using the C stubs
and APIs. Please consult the
<link linkend="cwscore-pi-apis">C WS Core API</link>,
<link linkend="wsgram-pi-apis">WS GRAM API</link>
documentation for details on the APIs used in the code
excerpts.
</para>

<section id="wsgram-developer-scenarios-c-loadingjd">
<title>Loading the job description</title>
<para>
<programlisting>
    const char *                        file = "job.xml";
    globus_soap_message_handle_t        message;
    <ulink url="/api/c/globus_c_gram_client_bindings/html/group__wsgram__CreateManagedJobInputType.html">wsgram_CreateManagedJobInputType</ulink>    input;

    globus_soap_message_handle_init_from_file(&amp;message, file);

    globus_soap_message_deserialize_element_unknown(message, &amp;element);

    if(strcmp(element.local, "job") == 0)
    {
        <ulink url="/api/c/globus_c_gram_client_bindings/html/group__wsgram__JobDescriptionType.html">wsgram_JobDescriptionType</ulink> *     jd;

        input.choice_value.type = wsgram_CreateManagedJobInputType_job;
        jd = &amp;input.choice_value.value.job;

        wsgram_JobDescriptionType_deserialize(&amp;element, jd, message, 0);
    }
    else if(strcmp(element.local, "multiJob") == 0)
    {
        <ulink url="/api/c/globus_c_gram_client_bindings/html/group__wsgram__MultiJobDescriptionType.html">wsgram_JobDescriptionType</ulink> *     mjd;

        input.choice_value.type = wsgram_CreateManagedJobInputType_multiJob;
        mjd = &amp;input.choice_value.value.multiJob;

        wsgram_MultiJobDescriptionType_deserialize(&amp;element, mjd, message, 0);
    }
    xsd_QName_destroy_contents(&amp;element);
    globus_soap_message_handle_destroy(message);
</programlisting>

This code sets the choice value of the wsgram_CreateManagedJobInputType to
    be the appropriate type depending on whether the <glossterm>job description</glossterm> is a job or
    <glossterm>multijob</glossterm> request.
</para>
</section>

<section id="wsgram-developer-scenarios-c-security">
<title>Setting the security attributes</title>
<para>
<programlisting>
globus_soap_message_attr_t               message_attr;

globus_soap_message_attr_init(&amp;message_attr);

/*
 * Set authentication mode to host authorization: other possibilities are
 * GLOBUS_SOAP_MESSAGE_AUTHZ_HOST_IDENTITY or
 * GLOBUS_SOAP_MESSAGE_AUTHZ_HOST_SELF.
 */
globus_soap_message_attr_set(
    message_attr,
    GLOBUS_SOAP_MESSAGE_AUTHZ_METHOD_KEY,
    NULL,
    NULL,
    (void *) GLOBUS_SOAP_MESSAGE_AUTHZ_HOST);

/*
 * Set message protection level. GLOBUS_SOAP_MESSAGE_AUTH_PROTECTION_PRIVACY
 * for encryption.
 */
globus_soap_message_attr_set(
    message_attr,
    GLOBUS_SOAP_MESSAGE_AUTH_PROTECTION_KEY,
    NULL,
    NULL,
    (void *) GLOBUS_SOAP_MESSAGE_AUTH_PROTECTION_PRIVACY);
</programlisting>
</para>
</section>

<section id="wsgram-developer-scenarios-c-factoryhandle">
<title>Creating the factory client handle</title>
<para>
<programlisting>
ManagedJobFactoryService_client_handle_t    factory_handle;

result = ManagedJobFactoryService_client_init(
    &amp;factory_handle,
    message_attr,
    NULL);
</programlisting>
</para>
</section>

<section id="wsgram-developer-scenarios-c-queryingrps">
<title>Querying for factory resource properties</title>
<section>
<title>One at a time</title>
<para>
<programlisting>
/*
 * localResourceManager, or other resource property names as defined in the
 * WSDL
 */
xsd_QName                                property_name =
{
    "http://www.globus.org/namespaces/2004/10/gram/job",
    "localResourceManager"
};
wsrp_GetResourcePropertyResponseType *   property_response;
int                                      fault_type;
xsd_any *                                fault;

ManagedJobFactoryPortType_GetResourceProperty(
    factory_handle,
    endpoint,
    &amp;property_name,
    &amp;property_response,
    (ManagedJobFactoryPortType_GetResourceProperty_fault_t *) &amp;fault_type,
    &amp;fault);
</programlisting>

If this is successful, then <computeroutput>property_response</computeroutput>'s
<computeroutput>any</computeroutput> field will contain the deserialized data in the
<computeroutput>value</computeroutput> field of the first element in the array.
</para><para>
<programlisting>
xsd_string * localResourceManager = property_response-&gt;any.elements[0].value;

printf("local resource manager is %s\n", *localResourceManager);
</programlisting>
</para>
</section>
</section>

<!--
<section id="s-wsgram-developer-scenarios-c-delegating">
<title>Delegating credentials (if needed)</title>
<para>
<screen>
/* TODO: Fill this section in */
</screen>
There are three types of delegated credentials:
<orderedlist>
<1istitem><para>Credential used by the job to generate user-owned proxy:
    <screen>jobDescription.setJobCredential(credentialEndpoint);</screen></para></section>
<listitem><para>Credential used to contact RFT for staging and file clean up:
    <screen>jobDescription.setStagingCredentialEndpoint(credentialEndpoint);</screen></para></1istitem>
<1istitem><para>Credential used by RFT to contact GridFTP servers:
    <screen>TransferRequestType stageOut = jobDescription.getFileStageOut();
         stageOut.setTransferCredential(credentialEndpoint);</screen>
    <para>Do the same for fileStageIn and fileCleanUp.</para></para></1istitem>
</orderedlist>
</para>
</section>
-->

<section id="wsgram-developer-scenarios-c-consumer">
<title>Creating the notification consumer</title>
<para>
The notification consumer can be either passed in as part of the
<computeroutput>wsgram_CreateManagedJobInputType</computeroutput> or through a
separate invocation of
<computeroutput>ManagedJobPortType_Subscribe_epr()</computeroutput>.
<programlisting>
    globus_service_engine_t             engine;
    wsa_EndpointReferenceType           consumer_reference;
    
    globus_service_engine_init(&amp;engine, NULL, NULL, NULL, NULL, NULL);

    globus_notification_create_consumer(
            &amp;consumer_reference,
            engine,
            notify_callback,
            NULL);
</programlisting>
</para>
</section>

<section id="wsgram-developer-scenarios-c-creatingjob">
<title>Creating the job resource</title>
<para>
First, prepare the other parts of the
<computeroutput>wsgram_CreateManagedJobInputType</computeroutput> structure.
<programlisting>
/*
 * You can set input.InitialTerminationTime to be a timeout if interested.
 * The xsd_dateTime type is a struct tm pointer.
 */
time_t                                  term_time = time(NULL);
globus_uuid_t                           uuid;
wsa_AttributedURI *                     job_id;
wsa_EndpointReferenceType *             factory_epr;
xsd_any *                               reference_property;
wsgram_CreateManagedJobOutputType *     output = NULL;
xsd_QName                               factory_reference_id_qname =
{
    "http://www.globus.org/namespaces/2004/10/gram/job",
    "ResourceID"
};

term_time += 60 * 60; /* 1 hour later */
xsd_dateTime_copy(&amp;input.InitialTerminationTime, gmtime(&amp;term_time));

/*
 * Set unique JobID. This is used to reliably create jobs and check for status.
 */
globus_uuid_create(&amp;uuid);
wsa_AttributedURI_init(&amp;job_id);
job_id-&gt;base_value = globus_common_create_string("uuid:%s", uuid.text);

/* To subscribe to notifications at create time, add the consumer's EPR to
 * the input message. Otherwise, use the EPR created above in a 
 * call to  
 */
wsnt_SubscribeType_init(&amp;input.Subscribe);
wsa_EndpointReferenceType_copy_contents(
        &amp;input.Subscribe.ConsumerReference,
        &amp;consumer_reference);

xsd_any_init(&amp;input.Subscribe-&gt;TopicExpression.any);
&amp;input.Subscribe-&gt;TopicExpression.any-&gt;any_info =
        &amp;xsd_QName_contents_info;
xsd_QName_copy(
    (xsd_QName **) &amp;input.Subscribe-&gt;TopicExpression.any-&gt;any.value,
    &amp;ManagedJobPortType_state_rp_qname);

xsd_anyURI_copy_cstr(
    &amp;input.Subscribe-&gt;TopicExpression._Dialect,
    "http://docs.oasis-open.org/wsn/2004/06/TopicExpression/Simple");
xsd_boolean_init(&amp;input.Subscribe-&gt;UseNotify);

*(&amp;input.Subscribe-&gt;UseNotify) = GLOBUS_TRUE;

/* Construct the EPR of the job factory */
wsa_EndpointReferenceType_init(&amp;factory_epr);
wsa_AttributedURI_init_contents(&amp;factory_epr-&gt;Address);
xsd_anyURI_init_contents_cstr(&amp;factory_epr-&gt;Address.base_value,
        globus_common_create_string(
                "https://%s:%hu/wsrf/services/%s",
                factory_host,
                factory_port,
                MANAGEDJOBFACTORYSERVICE_BASE_PATH);
wsa_ReferencePropertiesTypeinit(&amp;factory_epr-&gt;ReferenceProperties);
reference_property = xsd_any_array_push(
        &amp;factory_epr-&gt;ReferenceProperties.any);
reference_property-&gt;any_info = &amp;xsd_string_info;
xsd_QName_copy(
        &amp;reference_property-&gt;element,
        &amp;factory_reference_id_qname);

xsd_string_copy_cstr(
        (xsd_string **) &amp;reference_property-&gt;value,
        "Fork");
        
/* Submit the request to the service container */
ManagedJobFactoryPortType_createManagedJob_epr(
        factory_handle,
        factory_epr,
        input,
        &amp;output,
        (ManagedJobFactoryPortType_createManagedJob_fault_t *) &amp;fault_type,
        &amp;fault);
</programlisting>
If this is successful, then the <computeroutput>output</computeroutput> structure will be
initialized with the results of the operation. Of particular interest is the
<computeroutput>managedJobEndpoint</computeroutput> which contains the reference to the
newly-created job resource.
</para>
</section>

<section id="wsgram-developer-scenarios-c-subscribing">
<title>Subscribing for job state notifications</title>
<para>
</para><para>In order to subscribe for job state change notifications to an existing job
resource, initialize the <computeroutput>subscribe_input</computeroutput> used below in the same
way as <computeroutput>input.Subscribe</computeroutput> was initialized above.
<programlisting>
    ManagedJobService_client_handle_t   job_handle;
    wsnt_SubscribeType                  subscribe_input;
    wsnt_SubscribeResponseType *        subscribe_response;

ManagedJobService_client_init(
    &amp;job_handle,
    message_attr,
    NULL);

ManagedJobPortType_Subscribe_epr(
    job_handle,
    output-&gt;managedJobEndpoint,
    subscribe_input,
    &amp;subscribe_response,
    (ManagedJobPortType_Subscribe_fault_t *) &amp;fault_type,
    &amp;fault);
</programlisting>
</para>
</section>

<section id="wsgram-developer-scenarios-c-releasing">
<title>Releasing any state holds (if necessary)</title>
<para>
<programlisting>
    wsgram_ReleaseInputType             release;
    wsgram_ReleaseOutputType *          release_response = NULL;

    wsgram_ReleaseInputType_init_contents(&amp;release);

ManagedJobPortType_release_epr(
    job_handle,
    output-&gt;managedJobEndpoint,
    &amp;release,
    &amp;release_response,
    (ManagedJobPortType_release_fault_t *) &amp;fault_type,
    &amp;fault);
</programlisting>
</para>
</section>

<section id="wsgram-developer-scenarios-c-destroying">
<title>Destroying resources</title>
<para>
<programlisting>
/* destroy subscription resource */
    SubscriptionManagerService_client_init    subscription_handle;
    wsnt_DestroyType                          destroy;
    wsnt_DestroyResponseType *                destroy_response = NULL;

    SubscriptionManagerService_client_init(
        &amp;subscription_handle,
        message_attr,
        NULL);
    /* if subscription done at job creation time, use
     * output-&gt;subscriptionEndpoint in place of 
     * subscribe_response-&gt;SubscriptionReference,
     */
    SubscriptionManager_Destroy_epr(
        subscription_handle,
        subscribe_response-&gt;SubscriptionReference,
        &amp;destroy,
        &amp;destroy_response,
        (SubscriptionManager_Destroy_fault_t *) &amp;fault_type,
        &amp;fault);

    /* destroy the job resource */
    jobPort.destroy(new Destroy());
    ManagedJobPortType_Destroy_epr(
        job_handle,
        output-&gt;managedJobEndpoint,
        &amp;destroy,
        &amp;destroy_response,
        (ManagedJobPortType_Destroy_fault_t *) &amp;fault_type,
        &amp;fault);
</programlisting>
</para>
</section>

<section id="s-wsgram-developer-scenarios-c-build">
<title>Building a client</title>
<para>
In order to build a client application, certain flags must be passed to the
compiler and linker to enable them to be able to locate headers and libraries.
The easiest way to do so is to generate a <emphasis>makefile header</emphasis>,
which is a fragment of a Makefile which includes all of the necessary flags
needed to build the application. To do this, issue the command:

<screen>
<prompt>% </prompt><command>globus-makefile-header --flavor=gcc32dbg globus_c_gram_client_bindings &gt; Makefile.inc</command>
</screen>
</para>

<para>
Then, write your makefile to include this file and use the GLOBUS_CC,
GLOBUS_LD, GLOBUS_CFLAGS, GLOBUS_LDFLAGS, and GLOBUS_PKG_LIBS macros. For
example:

<programlisting>
GLOBUS_FLAVOR_NAME=gcc32dbg

include Makefile.inc

CC = $(GLOBUS_CC)
LD = $(GLOBUS_LD)

CFLAGS = $(GLOBUS_CFLAGS)
LDFLAGS = $(GLOBUS_LDFLAGS) $(GLOBUS_PKG_LIBS)

client: client.c
</programlisting>
</para>
</section>
