<?xml version='1.0' encoding='UTF-8'?>
<title>GT 4.0 Java WS Core : System Administrator&apos;s Guide</title>
<titleabbrev>System Administrator&apos;s Guide</titleabbrev>
<section id="s-javawscore-admin-introduction">
  <title>Introduction</title>
  <para>This guide contains advanced configuration information for system administrators
  working with Java WS Core. It provides references to information on procedures
  typically performed by system administrators, including installation, configuring,
    deploying, and testing the installation.</para>
  <important>
    <simpara>This information is in addition to the basic Globus Toolkit prerequisite, overview, installation, security configuration instructions in the <ulink url="../../admin/docbook/">GT 4.0 System Administrator&apos;s Guide</ulink>. Read through this guide before continuing!</simpara>
  </important>
</section>
<section id="installing">
  <title>Building and Installing</title>
  <para>Java WS Core  is built and installed as part of a default GT 4.0 installation.
        For basic installation instructions, see the <ulink url="../../admin/docbook/">GT 4.0 System Administrator&apos;s Guide</ulink>. No extra installation steps are required for this component.</para>
  <para>The following are optional instructions for more advanced types of installations.
  These are for those advanced users who want to build the latest code from CVS or are just interested in the Java WS Core.</para>
  <section id="s-javawscore-admin-buildfromsource">
    <title>Building from source</title>
    <informaltable frame="none">
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry>1.</entry>
            <entry>
              <para>
Obtain the source code for Java WS Core:
</para>
              <formalpara>
                <title>From CVS</title>
                <para>
<orderedlist>
                    <listitem>
                      <para>
  To get the latest source from cvs execute:
 <screen> cvs -d :pserver:anonymous@cvs.globus.org:/home/globdev/CVS/globus-packages \
     checkout wsrf</screen>
 </para>
                    </listitem>
                    <listitem>
                      <para>
  Change into the <computeroutput>wsrf</computeroutput> directory.
 <screen> cd wsrf</screen>
 </para>
                    </listitem>
                  </orderedlist></para>
              </formalpara>
              <formalpara>
                <title>From Core-only source distribution</title>
                <para><orderedlist>
                    <listitem>
                      <para>
   Untar or unzip the distribution archive.
   <screen> tar xvfz ws-core-XXX-src.tar.gz</screen>
 </para>
                    </listitem>
                    <listitem>
                      <para>
  Change into the unpacked distribution directory.
   <screen> cd ws-core-XXX</screen>
 </para>
                    </listitem>
                  </orderedlist></para>
              </formalpara>
            </entry>
          </row>
          <row valign="top">
            <entry>2.</entry>
            <entry>Set the <computeroutput>GLOBUS_LOCATION</computeroutput> environment variable to the absolute path of the target directory of your installation. <para>On Windows:
<screen> set GLOBUS_LOCATION=c:\gt4</screen>
</para><para>On Unix/Linux:
<screen> setenv GLOBUS_LOCATION /soft/gt4/</screen> or <screen> export GLOBUS_LOCATION=/soft/gt4/</screen>
</para><para>
If <computeroutput>GLOBUS_LOCATION</computeroutput> is not set, an <computeroutput>install</computeroutput> directory will be created under the current directory.
</para></entry>
          </row>
          <row valign="top">
            <entry>3.</entry>
            <entry>
              <para>Run:
 <screen> ant all</screen>
 </para>
              <para>
  Additional arguments can be specified on the <computeroutput>ant</computeroutput> command line to customize the build:
  <itemizedlist>
                  <listitem>
                    <simpara><computeroutput>-DwindowsOnly=false</computeroutput> - generate launch scripts for standard Globus tools such as <computeroutput>grid-proxy-init</computeroutput>, etc. (Unix/Linux only)</simpara>
                  </listitem>
                  <listitem>
                    <simpara><computeroutput>-Dall.scripts=true</computeroutput> - generate Windows and Unix launch scripts</simpara>
                  </listitem>
                  <listitem>
                    <simpara><computeroutput>-Denable.container.desc</computeroutput> - create and configure the container with a global security descriptor</simpara>
                  </listitem>
                </itemizedlist>
 </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section id="s-javawscore-admin-installcoreonlybinary">
    <title>Installing Core-only binary distribution</title>
    <informaltable frame="none">
      <tgroup cols="2">
        <tbody>
          <row valign="top">
            <entry>1.</entry>
            <entry>Untar or unzip the distribution archive. <screen> tar xvfz ws-core-XXX-bin.tar.gz</screen></entry>
          </row>
          <row valign="top">
            <entry>2.</entry>
            <entry>Change into the unpacked distribution directory. <screen> cd ws-core-XXX</screen></entry>
          </row>
          <row valign="top">
            <entry>3.</entry>
            <entry>Set the <computeroutput>GLOBUS_LOCATION</computeroutput> environment variable to the unpacked distribution directory. <para>On Windows:
<screen> set GLOBUS_LOCATION=c:\gt4</screen>
</para><para>On Unix/Linux:
<screen> setenv GLOBUS_LOCATION /soft/gt4/</screen> or <screen> export GLOBUS_LOCATION=/soft/gt4/</screen>
</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
<emphasis>Note: </emphasis>Please make sure to have the <ulink url="http://java.sun.com/products/jaas/index-10.html">JAAS</ulink> library installed if running with J2SE 1.3.1.
</para>
  </section>
</section>
<section id="s-javawscore-admin-configuring">
  <title>Configuring </title>
&Java_WS_Core_Interface_Config_Frag;
</section>
<section id="s-javawscore-admin-deploying">
  <title>Deploying</title>
  <section>
    <title>Recommended JVM settings for the container</title>
    <para>
It is recommended to increase the maximum heap size of the JVM when running the container. By default on Sun JVMs a 64MB maximum heap size is used. The maximum heap size can be set using the <computeroutput>-Xmx</computeroutput> JVM option. Example:

<screen>
 $ setenv GLOBUS_OPTIONS -Xmx512M
 $ $GLOBUS_LOCATION/bin/globus-start-container
</screen>

The above example will make the container start with maximum heap size set to 512MB.
</para>
    <para>
It is also recommended to experiment with other JVM settings to improve performance. For example, the <computeroutput>-server</computeroutput> option on Sun JVMs enables a server VM which can deliver better performance for server applications.
</para>
  </section>
  <section>
    <title>Deploying into Tomcat</title>
    <para>Please note that Tomcat 4.1.x and 5.0.x versions are supported. We recommend running Tomcat with Java 1.4.2+.</para>
    <note>
      <simpara>Some GT services may not work properly in Tomcat.</simpara>
    </note>
    <para>To deploy Java WS Core installation into Tomcat run:

<screen>$ cd $GLOBUS_LOCATION
$ ant -f share/globus_wsrf_common/tomcat/tomcat.xml deploySecureTomcat -Dtomcat.dir=<emphasis>&lt;tomcat.dir&gt;</emphasis></screen>Where <emphasis>&lt;tomcat.dir&gt;</emphasis> is an <emphasis>absolute</emphasis> path to the Tomcat installation directory. 
</para>
    <para>In addition to the above steps you may have to edit <filename>&lt;tomcat.dir&gt;/webapps/wsrf/WEB-INF/web.xml</filename> if you are running Tomcat on a non-default port, i.e. not using port 8443 (HTTPS). For example, if you run Tomcat on  port 443 using HTTPS then the WSRF servlet entry should be modified as follows:</para>
    <screen>&lt;web-app&gt;
...
    &lt;servlet&gt;
        &lt;servlet-name&gt;WSRFServlet&lt;/servlet-name&gt;
        &lt;display-name&gt;WSRF Container Servlet&lt;/display-name&gt;
        &lt;servlet-class&gt;
            org.globus.wsrf.container.AxisServlet
        &lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;defaultProtocol&lt;/param-name&gt;
            &lt;param-value&gt;https&lt;/param-value&gt;
        &lt;/init-param&gt; 
        &lt;init-param&gt;
            &lt;param-name&gt;defaultPort&lt;/param-name&gt;
            &lt;param-value&gt;443&lt;/param-value&gt;
        &lt;/init-param&gt;   
        &lt;load-on-startup&gt;true&lt;/load-on-startup&gt; 
    &lt;/servlet&gt;
...
&lt;/web-app&gt;</screen>
    <para>Please see the <ulink url="../../security/message/admin-index.html#s-message-admin-deploying">Tomcat &amp; Transport Security</ulink> documentation for  security related Tomcat configuration steps.
</para>
    <section>
      <title>Enabling local invocations</title>
      <para>
	      To enable local innovations (<ulink url="../../common/javawscore/developer-index.html#s-javawscore-developer-LocalInvocations">developer reference</ulink>) in Tomcat you must add <computeroutput>axis-url.jar</computeroutput> to the CLASSPATH before starting Tomcat. 
</para>
      <para>
For example on Windows:

<screen>
 &gt; cd &lt;tomcat.dir&gt;
 &gt; set CLASSPATH=&lt;tomcat.dir&gt;\common\lib\axis-url.jar
 &gt; bin\startup
</screen>

On Unix/Linux (csh/tcsh):

<screen>
 $ cd &lt;tomcat.dir&gt;
 $ setenv CLASSPATH &lt;tomcat.dir&gt;/common/lib/axis-url.jar
 $ bin/startup
</screen>
</para>
    </section>
    <section>
      <title>Creating WAR file</title>
      <para>
To create a <computeroutput>.war</computeroutput> of Java WS Core installation do:

<screen>
 $ cd $GLOBUS_LOCATION
 $ ant -f share/globus_wsrf_common/tomcat/tomcat.xml war -Dwar.file=<emphasis>&lt;war.file&gt;</emphasis>
</screen>

Where <emphasis>&lt;war.file&gt;</emphasis> specifies an <emphasis>absolute</emphasis> path of the war file.
</para>
      <para>
Please note that deploying a <computeroutput>war</computeroutput> file might not be enough to have a working Java WS Core deployment. For example, in some cases the <computeroutput>xalan.jar</computeroutput> must be placed in the <computeroutput>endorsed</computeroutput> directory of the container.
</para>
    </section>
  </section>
</section>
<section id="s-javawscore-admin-testing">
  <title>Testing</title>
  <para>To execute Java WS Core tests first ensure Ant is configured with JUnit (To install JUnit with Ant copy the junit.jar found in JUnit distribution to the $ANT_HOME/lib directory).</para>
  <para>To execute the test do the following:</para>
  <informaltable frame="none">
    <tgroup cols="2">
      <tbody>
        <row valign="top">
          <entry>1.</entry>
          <entry>
            <para>Start the standalone container with <computeroutput>-nosec</computeroutput> argument:
 <screen>
 $ cd $GLOBUS_LOCATION
 $ bin/globus-start-container -nosec</screen>
</para>
          </entry>
        </row>
        <row valign="top">
          <entry>2.</entry>
          <entry>
            <para>Run the interoperability tests:
 <screen>
 $ ant -f share/globus_wsrf_test/runtests.xml runServer \
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_interop.jar</screen>
</para>
          </entry>
        </row>
        <row valign="top">
          <entry>3.</entry>
          <entry>
            <para>Run the unit tests:
 <screen>
 $ ant -f share/globus_wsrf_test/runtests.xml runServer \
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_unit.jar -DbasicTestsOnly=true</screen>
</para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
	  Please see <ulink url="../../common/javawscore/developer-index.html#s-javawscore-developer-runningtests">
		  the developer guide</ulink> for more information on running the tests and the testing infrastructure.
</para>
</section>
<section id="s-javawscore-admin-security_considerations">
  <title>Security Considerations </title>
&Java_WS_Core_Security_Considerations_Frag;
</section>
<section id="s-javawscore-admin-troubleshooting">
  <title>Troubleshooting</title>
  <section id="s-javawscore-admin-globusstop">
    <title><computeroutput>globus-stop-container</computeroutput> fails with an authorization error</title>
    <para>
By default <computeroutput>globus-stop-container</computeroutput> must be executed with the same credentials as the container is running with. If the <emphasis>ShutdownService</emphasis> or the container is configured with separate private key and certificate files (usually <computeroutput>/etc/grid-security/containercert.pem</computeroutput> and <computeroutput>/etc/grid-security/containerkey.pem</computeroutput>) do the following to stop the container:

<screen>
 $ grid-proxy-init -cert /etc/grid-security/containercert.pem \
                   -key /etc/grid-security/containerkey.pem \
                   -out containerproxy.pem
 $ setenv X509_USER_PROXY containerproxy.pem
 $ globus-stop-container
 $ unsetenv X509_USER_PROXY
 $ rm containerproxy.pem
</screen>

Alternatively, the <emphasis>ShutdownService</emphasis> can be configured with a separate gridmap file to allow a set of users to stop the container. Please see the <ulink url="../../security/wsaa.html">WS Authentication &amp; Authorization</ulink> section for details.
</para>
  </section>
  <section id="s-javawscore-admin-globusstart">
    <title><computeroutput>globus-start-container</computeroutput> hangs during startup</title>
    <para>
By default Sun 1.4.x+ JVMs are configured to use <computeroutput>/dev/random</computeroutput> device as an entropy source. Sometimes the machine can run out of entropy and applications (such as the container) using the <computeroutput>/dev/random</computeroutput> device will block until more entropy is available. One workaround for this issue is to configure the JVM to use <computeroutput>/dev/urandom</computeroutput> (non-blocking) device instead. For Sun JVMs a <computeroutput>java.security.egd</computeroutput> system property can be set to configure a different entropy source. To set the system property and pass it to <computeroutput>globus-start-container</computeroutput> script do the following:
<screen>
 export GLOBUS_OPTIONS=-Djava.security.egd=file:/dev/urandom
</screen>
or
<screen>
 setenv GLOBUS_OPTIONS -Djava.security.egd=file:/dev/urandom
</screen>
<emphasis>Note:</emphasis> This does not apply to Windows machines.
</para>
  </section>
  <section id="s-javawscore-admin-programsfail">
    <title>Programs fail with <computeroutput>java.lang.NoClassDefFoundError: javax/security/...</computeroutput> errors</title>
    <para>
These errors might occur when running with J2SE 1.3.1 and the <ulink url="http://java.sun.com/products/jaas/index-10.html">JAAS</ulink> library is not installed. Either install the <ulink url="http://java.sun.com/products/jaas/install_notes.html">JAAS</ulink> library or upgrade to J2SE 1.4.x or higher.
</para>
  </section>
  <section id="s-javawscore-admin-troubleshooting-general">
    <title>General troubleshooting information</title>
&Java_WS_Core_Troubleshooting_Frag;
  </section>
</section>
<section id="s-javawscore-admin-usage">
  <title>Usage statistics collection by the Globus Alliance</title>
&Java_WS_Core_Usage_Statistics_Frag;
</section>
