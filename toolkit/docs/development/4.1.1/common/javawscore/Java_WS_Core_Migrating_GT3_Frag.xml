<?xml version='1.0' encoding='UTF-8'?>

<section id="javawscore-migrating-points">
<title>Key Migration Points</title>

<section id="javawscore-migrating-wsdl">
 <title>Schemas</title>

<section id="javawscore-migrating-wsdl-gwsdl">
 <title>GWSDL</title>
 <para>
  GT3 used <computeroutput>GWSDL</computeroutput> to describe service messages and operations. GT4 uses standard <glossterm linkend="wsdl">WSDL</glossterm> with one extensibility attribute to describe resource properties. Please see the <ulink url="http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-04.pdf">WS-ResourceProperties</ulink> specification for details on expressing the resource properties in <computeroutput>WSDL</computeroutput>.
 </para>
</section>

<section id="javawscore-migrating-wsdl-porttype">
 <title>Port Types</title>
 <para>
  In GT3 every service inherited some basic operations and functionality (from <computeroutput>GridService</computeroutput> port type) as required by the OGSI specification. However, in GT4 there is no such requirement (because the <glossterm linkend="wsrf">WSRF</glossterm>/<glossterm linkend="wsn">WSN</glossterm> specifications do not require it). Also, the <computeroutput>Factory</computeroutput> port type defined in the OGSI specification does not exist in WSRF/WSN specifications. Therefore, there is no standard create operation or functionality provided by GT4.
 </para>
</section>

<section id="javawscore-migrating-wsdl-formatting">
 <title>WSDL formatting</title>
 <para>
  GT3 relied on <emphasis>wrapped</emphasis> formatting of the WSDL. GT4 uses standard <emphasis>document</emphasis> formatting. This change introduces differences in how the Java interface for the service looks. Please see the <link linkend="javawscore-developer-archdes">design document</link> and the <link linkend="javawscore-developer-DocumentLiteral">document/literal</link> section for more details.
 </para>
</section>

</section>

<section id="javawscore-migrating-developing">
 <title>Developing services</title>
 <para>
  In GT3, the business logic of the service and the state were coupled together in one class. In GT4, the business logic and the state are decoupled and placed in two separate classes. The business logic is put in a <emphasis>service</emphasis> class while the state is put in a <emphasis>resource</emphasis> class. The <emphasis>service</emphasis> is stateless while the <emphasis>resource</emphasis> is stateful. Also, GT4 introduces <glossterm linkend="ResourceHome">ResourceHome</glossterm> classes that are responsible for managing and discovering resources. Please see the <link linkend="javawscore-pi-apis">programming model overview</link> for details.
 </para>
 <para> 
  Even though a GT4 developer needs to modify two or three separate files the coding effort is about the same as in GT3.
 </para>
</section>

<section id="javawscore-migrating-configuring">
 <title>Configuring services</title>
 <para>
  In GT3, most of the configuration information was stored in the <computeroutput>server-config.wsdd</computeroutput> file. In GT4, since the business logic and state were decoupled, the service information is still kept in <glossterm linkend="server-config.wsdd">server-config.wsdd</glossterm> but resource information is now placed in the new <glossterm linkend="jndi-config.xml">jndi-config.xml</glossterm> file. Please see the <link linkend="javawscore-developer-JNDIDetails">JNDI</link> section for more details.
 </para>
</section>

</section>

<section id="javawscore-migrating-related-doc">
<title>Related Documentation</title>

<itemizedlist>
      <listitem>
        <simpara>
          <ulink url="http://www.qub.ac.uk/escience/howtos/GT3%20to%20GT4%20Version%200.3.htm">GT3.2 to GT4 Migration: A First HOWTO by Terry Harmer and Julie McCabe</ulink>
        </simpara>
      </listitem>
</itemizedlist>

</section>