<?xml version='1.0' encoding='UTF-8'?>

<title>GT 4.0 CAS Command Reference</title>

<refentry id="cas-proxy-init">

  <refmeta>

    <refentrytitle>cas-proxy-init</refentrytitle>

    <manvolnum>1</manvolnum>

  </refmeta>

  <refnamediv>

    <refname>cas-proxy-init</refname>

    <refpurpose>Generate a CAS proxy</refpurpose>

  </refnamediv>

  <refsynopsisdiv>

    <cmdsynopsis>

      <command>cas-proxy-init</command>

    </cmdsynopsis>

  </refsynopsisdiv>

  <refsect1>

    <title>Tool description</title>

    <para>cas-proxy-init contacts a CAS server and obtains an
    assertion for the user and embeds it in an credential. This
    credential can be used to access CAS-enabled services.</para>

  </refsect1>

  <refsect1>

    <title>Command syntax</title>

    <screen>cas-proxy-init [<option>options</option>] [ -t <replaceable>tag</replaceable> | -p <replaceable>proxyfile</replaceable>]</screen>

    <table>

      <title>cas-proxy-init options</title>

      <tgroup cols="2">

        <tbody>

          <row>

            <entry>

              <para><emphasis>-p</emphasis> <emphasis>proxyfile</emphasis></para>

            </entry>

            <entry>Specify the file in which to store the CAS credential. Cannot be used with the <emphasis>-t</emphasis> option.</entry>

          </row>

          <row>

            <entry>

              <para><emphasis>-t</emphasis> <emphasis>tag</emphasis></para>

            </entry>

            <entry>Choose a filename in which to store the CAS credential based on the value <emphasis>tag</emphasis>. Cannot be used with the <emphasis>-p</emphasis> option.</entry>

          </row>

          <row>

            <entry>

              <para><emphasis>-c</emphasis> <emphasis>url</emphasis></para>

            </entry>

            <entry>

              <para>Contact URL for the CAS server. This typically looks like 

  <screen>http://<emphasis>Host</emphasis>:<emphasis>Port</emphasis>/wsrf/services/CASService</screen>where <emphasis>Host</emphasis> and <emphasis>Port</emphasis> are the host and port where

  the container with the CAS service is running.

   </para>

            </entry>

          </row>

          <row>

            <entry>

              <para><emphasis>-s</emphasis> <emphasis>server_identity</emphasis></para>

            </entry>

            <entry>

              <para>When doing mutual authentication with the CAS server,

  expect <emphasis>server_identity</emphasis> as the remote identity.</para>

            </entry>

          </row>

          <row>

            <entry>

              <para><emphasis>-f</emphasis> <emphasis>policy_file</emphasis></para>

            </entry>

            <entry>

              <para>Generate a CAS credential that includes only those permissions

specified in file <emphasis>policy_file</emphasis> (the default is to generate a

credential with all the user&apos;s permissions). Details about the template of the file is provided at end of this table.</para>

            </entry>

          </row>

          <row>

            <entry>

              <para><emphasis>-l</emphasis> <emphasis>hours</emphasis></para>

            </entry>

            <entry>

              <para>Generate a credential which has an assertion with a lifetime of <emphasis>hours</emphasis>

  hours. This is just a request for lifetime, but may be overruled by the CAS server, if the request exceeds a set maximum for the lifetime of assertions it issues.</para>

            </entry>

          </row>

          <row>

            <entry>

              <para><emphasis>-m</emphasis> <emphasis>messageType</emphasis></para>

            </entry>

            <entry>Used to set the chosen security mechanism. It can be set to &apos;msg&apos; for Secure Message, &apos;conv&apos; for Secure Conversation and &apos;trans&apos; for <glossterm linkend="transport-level-security">Transport security</glossterm>. If not set and the server URL starts with &apos;https&apos;, Transport Security is used, otherwise Secure Message is used. </entry>

          </row>

          <row>

            <entry>

              <para><emphasis>-n</emphasis> <emphasis>protectionType</emphasis></para>

            </entry>

            <entry>Used to set the protection type. Can be set to &apos;sig&apos; or &apos;enc&apos; to indicate signature or encryption. Defaults to signature. </entry>

          </row>

        </tbody>

      </tgroup>

    </table>
&WS_AA_CAS_Interface_Commandline_Common_Options_Frag;
    <section id="s-cas-specific-permissions"><title>Requesting specific permissions from the CAS server</title>
    <para>It is possible to request specific permissions from the CAS server

using the <emphasis>-f</emphasis> option. This option causes <emphasis>cas-proxy-init</emphasis>

to read a set of requested rights from a file.</para>

    <para>This file should contain one or more resource identifiers:

<screen>Resource: <emphasis>ResourceNamesapce</emphasis>|<emphasis>ResourceName </emphasis></screen></para>

    <para>For each resource, there should be one or more action identifiers:

<screen><emphasis>serviceType action </emphasis></screen></para>

    <para>For example, if the client needed assertions for



&quot;file/read&quot; service/action for resource

&quot;ftp://sample.org&quot; and &quot;ftp://sample3.org&quot;, both

in &quot;FTPNamespace&quot; and &quot;directory/read&quot; and

&quot;directory/write&quot; permissions on the former resource only,

the policy file should have the following entries:



<screen>Resource: FTPNamespace|ftp://sample1.org

file read

directory read

directory write

Resource: FTPNamespace|ftp://sample3.org

file read</screen></para>

    <para>To indicate any resource, the following wildcard notation should

be used:

<screen>uri:samlResourceWildcard</screen></para>

    <para>To indicate any action, the following wildcard notation for

serviceType and action should be used. Note that this should be the

first (and clearly the only action) in the list of action

specified. All other actions in the list are ignored and if it is not

the first, it is not treated as a wildcard.

<screen>uri:samlActionNSWildcard uri:samlActionWildcard</screen></para>

    <para>For example, if the client needs assertions for all resources and

all actions, the policy file should look like:

<screen>Resource: uri:samlResourceWildcard

uri:samlActionNSWildcard uri:samlActionWildcard</screen></para>

    <para>If the client needs assertions for all actions on resource

&quot;FTPNamespace|ftp://sample1.org&quot;, the policy file should be

as follows:



<screen>Resource: FTPNamespace|ftp://sample1.org

uri:samlActionNSWildcard uri:samlActionWildcard</screen>

</para></section>

  </refsect1>

</refentry>

        <refentry id="cas-wrap">
                <refmeta>
                        <refentrytitle>cas-wrap</refentrytitle>
                        <manvolnum>1</manvolnum>
                </refmeta>
                <refnamediv>
                        <refname>cas-wrap</refname>
                        <refpurpose>PURPOSE</refpurpose>
                </refnamediv>
                <refsynopsisdiv><cmdsynopsis>
                                <command>cas-wrap</command>
                        </cmdsynopsis>
                </refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>The <emphasis>cas-wrap</emphasis> program runs a grid-enabled program, causing it
to use previously-generated CAS credentials.
</para>
</refsect1><refsect1><title>Command syntax</title>
<screen>
        cas-wrap [-t <replaceable>tag</replaceable> | -p<replaceable> proxyfile </replaceable>] <replaceable>command args</replaceable></screen>
</refsect1><refsect1><title>Command options</title>

<para><emphasis>cas-wrap</emphasis> invokes the given command with the given argument
 using the specified previously-generated CAS credential. For
 example:

<screen>
        % cas-wrap -t my-community gsincftp myhost.edu
</screen>
</para>

<para>will look for a credential generated by a previous
execution of:

<screen>
% cas-proxy-init -t my-community</screen>
</para>
<para>and then set the environment to use that credential while
running the command:

<screen>
% gsincftp myhost.edu</screen>
</para>
<para>The second form should be used if <emphasis>cas-proxy-init </emphasis>was
run with the <emphasis>-p</emphasis> option. For example:
<screen>
% cas-wrap -p /path/to/my/cas/credential gsincftp myhost.edu</screen>
</para>

<para>will look for a credential generated by a previous
execution of:

<screen>
% cas-proxy-init -p /path/to/my/cas/credential </screen>
</para>

<para>and then set the environment to use that credential while
running the command:
<screen>
% gsincftp myhost.edu</screen>
</para>
  &WS_AA_CAS_Interface_Commandline_Common_Options_Frag;
</refsect1></refentry>

        <refentry id="cas-enroll">
                <refmeta>
                        <refentrytitle>cas-enroll</refentrytitle>
                        <manvolnum>8</manvolnum>
                </refmeta>
                <refnamediv>
                        <refname>cas-enroll</refname>
                        <refpurpose>PURPOSE</refpurpose>
                </refnamediv>
                <refsynopsisdiv><cmdsynopsis>
                                <command>cas-enroll</command>
                        </cmdsynopsis>
                </refsynopsisdiv>

                <refsect1><title>Tool description</title>
<para>To enroll a trust anchor, the user must have cas/enroll_trustAnchor
permission on that cas server object (that is, the user must have permission to
perform the enroll_trustAnchor action on the CAS service type).  The
enroll operation allows the user to choose a user group to which
cas/grantAll permission on the enrolled object should be granted. The
nickname should be unique across the CAS database and is used to refer
to this trust anchor.</para>
                </refsect1><refsect1><title>Command syntax</title>
<screen>
  casAdmin$ cas-enroll [<emphasis>options</emphasis>] trustAnchor <emphasis>userGpName</emphasis> <emphasis>nickname</emphasis> <emphasis>authMethod</emphasis> <emphasis>authData</emphasis></screen>

<para>
<itemizedlist>
  <listitem><simpara>options: <ulink url="#client-options">client options</ulink>
</simpara></listitem>
  <listitem><simpara>userGpName: the user group to which cas/grantAll permission
                  should be granted on this trust anchor entity
</simpara></listitem>
  <listitem><simpara>nickname: trust anchor nickname
</simpara></listitem>
  <listitem><simpara>authMethod: authentication method used by the trust anchor
</simpara></listitem>
  <listitem><simpara>authData: data used for authentication, typically the DN
</simpara></listitem>
</itemizedlist>
</para>
                  &WS_AA_CAS_Interface_Commandline_Common_Options_Frag;
</refsect1></refentry>

        <refentry id="cas-remove">
                <refmeta>
                        <refentrytitle>cas-remove</refentrytitle>
                        <manvolnum>8</manvolnum>
                </refmeta>
                <refnamediv>
                        <refname>cas-remove</refname>
                        <refpurpose>PURPOSE</refpurpose>
                </refnamediv>
                <refsynopsisdiv><cmdsynopsis>
                                <command>cas-remove</command>
                        </cmdsynopsis>
                </refsynopsisdiv>

                <refsect1><title>Tool description</title>
<para>To unenroll a trust anchor, the user must have cas/unenroll permission
on that trust anchor.  The trust anchor must also be unused (that is, there may not be any users in the database that have this trust
anchor or it may not be a part of any object group).</para>

                </refsect1><refsect1><title>Command syntax</title>
<screen>
  casAdmin$ cas-remove [<emphasis>options</emphasis>] trustAnchor <emphasis>nickname</emphasis></screen>

<para>
<itemizedlist>
  <listitem><simpara>options: <ulink url="#client-options">client options</ulink>
</simpara></listitem>

  <listitem><simpara>nickname: nickname of the trust anchor to be unenrolled
</simpara></listitem>
</itemizedlist>
</para>

<para>If the trust anchor nickname specified does not exist, an error is
<emphasis>not</emphasis> thrown. If the unenroll operation is successful all
  policy data on that trust anchor is purged.</para>
                  &WS_AA_CAS_Interface_Commandline_Common_Options_Frag;
                </refsect1></refentry>
