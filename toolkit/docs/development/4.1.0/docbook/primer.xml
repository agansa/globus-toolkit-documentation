<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
[
<!ENTITY  GT4figure SYSTEM  "../GT4figure.jpg"  NDATA  JPG>
]>


<chapter><title>Documentation Primer</title>
	<?dbhtml filename="primer.html" ?>
	<!-- Based on OpenACS documentation here: http://openacs.org/doc/current/docbook-primer.html  -->

	<section><title>Overview of Globus Toolkit Documentation</title>

	<para>Globus Toolkit [describe GT]. </para>

	<para>This document includes the policies and guidelines behind the current documentation, requirements for documents and help for using
		the DocBook XML Schema for common documentation elements.</para>
	</section>
	<section><title>Globus Toolkit Documentation Strategy</title>

	<para>To help compensate
	for not having a dedicated staff of technical writers, our strategy is to have templates of necessary documentation and then 
	during the development process, more and more information is added and refined. This process is facilitated by
	the documentation coordinator (Cris) and [lisa's title] (Lisa). With each development release, the documentation becomes more
	and more complete. This iterative process allows the documentation to be built up over time instead of in one mad
	rush right before final release.</para>
	
	<para>To reduce duplication, we also utilize 'fragments' of frequently used information. For example, a brief description
	of the component is stored in [component_name]_Overview_Brief_Frag.xml and 'plugged in' wherever such a 
	description is needed. Thus, any update to the overview frag is updated whereever it's used and remainds.
	standard throughout the documentation. As you can guess from this example, such frags have the following 
	naming convention: [component_name]_[description]_Frag.xml</para>
	
	<para>Our templates provide a standard organization for all admin, user and developer guides for all components of the 
	Globus Toolkit. If a section does not apply for a component, there will be a statement: "This section does not apply 
	for this component." For example, if a component does not have a gui interface, then the GUI_Frag.xml will explicitly
	say so. The benefit is that the reader will know the component does not have a GUI interface instead of just not
	seeing it represented in the documentation and wondering if it was simply left out.</para>
	
<section><title>Release cycle for documentation</title>
	<para>The following list outlines what happens with documentation in a typical release cycle:</para>
	<orderedlist>
		<listitem>Once development begins for the next major release (we'll use 4.2 as an example release), 
			a new folder is added to the Development Documentation directory: 
			<filename>toolkit/docs/development/4.2-drafts/</filename>
		</listitem>
		<listitem>The directory for the previous stable release docs are temporarily frozen as they are copied over
			to 4.2-drafts/</listitem>
		<listitem>Documentation coordinator updates files for the upcoming release (changes version numbers, etc)
		</listitem>
		<listitem>Release Docs and Calls for Testing files are configured for development releases.</listitem>
		<listitem>Developers start updating documents in this development directory for the upcoming release</listitem>
		<listitem>For each development release leading up to the stable release, a corresponding directory
		is set up in the development docs directory, the drafts directory is frozen and copied over, release numbers
		are updated for development release number and release notes are updated. For example, 
		<filename>toolkit/docs/development/4.1.5</filename>
		</listitem>
		<listitem>Cris and Lisa go over documentation for revisions.</listitem>
		<listitem>Before final release, a directory is added in the docs: toolkit/docs/4.2/, the 
		drafts directory is frozen, files are copied over to new directory, version numbers are updated, and
		release notes written.</listitem>
	</orderedlist>
</section>
</section>
	<section><title>Globus Toolkit General Documentation Requirements</title>
	
	<itemizedlist>
		<listitem>Clarity in presentation. [TODO] is a recommended example of our online documentation.</listitem>
		<listitem>Avoid requirements that significantly increase the labor required to maintain documentation.</listitem>
		<listitem>Use best practices learned from the print world, web, and other media, about use of gamma, space, writing style etc.
			<itemizedlist>
			<listitem>Consistency in publishing -Establishing and adhering to publishing standards</listitem>
			<listitem>Use standardized language -Use international English (without slang or colloquial terms) for ESL (English as a second language) readers (and making translation easier for those interested in translating the documentation for internationalization efforts).</listitem>
			<listitem>All jargon used in documentation needs to be defined. Use standardized terms when available, avoiding implicit understanding of specific Globus Toolkit terms.</listitem>
			<listitem>Document titles (for example on html pages) should include whole document title (as in book title): (chapter title) : (section), so that bookmarks etc. indicate location in a manner similar to pages in books (in print publishing world).</listitem>
			<listitem>Organize document according to the needs of the reader (which may be different than the wishes of the writers).</listitem>
			<listitem>Do not make informal exclamations about difficulty/ease for users to complete tasks or understand... for example, "Simply...". Readers come from many different backgrounds --remember that the greater audience is likely as varied as the readers on the internet--- If important, state pre-conditions or knowledge requirements etc. if different than the rest of the context of the document. For example, "requires basic competency with a text-based editor such as vi or emacs via telnet" </listitem>
			</itemizedlist>
		</listitem>
		<listitem>Show where to find current information instead of writing about current info that becomes obsolete. If the information 
		is not found elsewhere, then create one place for it, where others can refer to it (coordinate with Cristina). 
		This structure of information will significantly reduce obsolescence in writing and labor burden to maintain 
		up-to-date documentation. In other words, state facts in appropriately focused, designated areas only, then refer to 
		them by reference (with links).
		<note><simpara>Sometimes facts should be stated multiple ways, to accommodate different reading style preferences. They 
		should still be in one area, using a common layout of perhaps summary, introduction and discussion requiring 
		increasing expertise, complexity or specificity.</simpara></note></listitem>
		<listitem>Consistency in link descriptions -When link urls refer to whole documents, make the link (anchor wrapped title) that 
		points to a document with the same title and/or heading of the document.</listitem>
		<listitem>Consider Globus Toolkit documentation as a set of books (an encyclopedic set organized like an atlas) that 
		contains volumes (books). Each book contains chapters and sections much like how DocBook examples are shown, 
		where each chapter is a web page. This designation helps create Globus Toolkit books in PDF, and helps new 
		readers visualize how the documentation is organized.</listitem>
		<listitem>Use a consistent general outline for each book (which is already expressed by the templates).
			<itemizedlist>
			<listitem>Introduction (includes purpose/goal), [Glossary of terms, Credits, License, Copyright, Revision History]</listitem>
			<listitem>Priorities of order and content vary based on each of the different readers mentioned. The developers guide 
			should be organized to be most useful to the priorities of developers, while being consistent with the general
			documentation requirements including publishing strategy, style etc.</listitem>
			<listitem>Use generic DocBook syntax to maximize reader familiarity with the documents.
			<screen>&lt;book&gt;&lt;title&gt;&lt;chapter id="Part 1"&gt;&lt;etc...&gt;</screen></listitem>
			</itemizedlist>
		</listitem>
		</itemizedlist>
		
	<section><title>Globus Toolkit Documentation Requirements for User Guides</title>
	
	<para>Please keep the following in mind when coming up with material for this guide:</para>
	<itemizedlist>
	<listitem>Assume that the reader (end-user) has little technical background/knowledge.</listitem>
	<listitem>Acquaint users with the uses, benefits, and the possibilities this system brings</listitem>
	<listitem>Try to include jargon definitions, glossary, and FAQs (links are fine). 
	FAQ should refer answers to the same place for consistency, brevity and maintainability.</listitem>
	</itemizedlist>

	<para>The user's guide has the following outline:</para>
	<orderedlist>
	<listitem><emphasis role="strong">Introduction</emphasis>: Include how to get help (at the very least a link to the Globus Toolkit Support page (http://www.globus.org/toolkit/support.html)
	How and where to find answers, contact others, or what to do about an error when using the system. 
	Include types of available support (open-source, private commercial etc.) including references.</listitem>
	<listitem>PROPOSED: <emphasis role="strong">User-friendly Overview</emphasis>: Explain/foster understanding of the overall structure of the system. This would be 
	an overview of the component, how it works, and how to find out more or dig deeper... </listitem>
	<listitem><emphasis role="strong">Command-line tools</emphasis>: this section points to the standalone commandline reference (link to info about writing those out)</listitem>
	<listitem><emphasis role="strong">Graphical user interface</emphasis>: Explain/tutorial on how the UI works (use links), Page flow, descriptions of form elements; browser/interface strengths and limitations</listitem>
	<listitem><emphasis role="strong">Troubleshooting</emphasis></listitem>
	<listitem>Cris: what about user how-to's?</listitem>
	</orderedlist>
	</section>
	<section><title>Globus Toolkit Documentation Requirements for System Administrators</title>
	<para>The user's guide has the following outline:</para>
	<orderedlist>
		<listitem><emphasis role="strong">Introduction</emphasis></listitem>
		<listitem>PROPOSED: <emphasis role="strong">Overview of Admin Process</emphasis>: Describe a structural overview of a working system and 
			how the components work together. Maybe a  "The Layered Cake view" a general network view of system; </listitem>
		<listitem><emphasis role="strong">Configuring</emphasis>: ([component]_Interface_Configuring_Frag.xml)</listitem>
		<listitem><emphasis role="strong">Deploying</emphasis></listitem>
		<listitem><emphasis role="strong">Testing</emphasis></listitem>
		<listitem><emphasis role="strong">Security Considerations</emphasis></listitem>
		<listitem><emphasis role="strong">Troubleshooting</emphasis>: Describe a methodology for diagnosing problems, finding error statements and 
			interpreting them</listitem>
		<listitem>Cris: what about admin how-to's? [Provide a comprehensive description of typical administrative processes for this component] can 
		we cull them from the discussion lists? could start with just a list of howtos we need.</listitem>
		<listitem>Cris: what about examples of how a sys admin manages this component?</listitem>
	</orderedlist>
	
	</section>
	<section><title>Globus Toolkit Installation Documentation Requirements</title>
	<para>The toolkit installation guide has the following outline:</para>
		<orderedlist>
			<listitem>Introduction</listitem>
			<listitem>Before you begin</listitem>
			<listitem>Software Prerequisites</listitem>
			<listitem>Installing GT &shortversion;: Cris: it would be cool to have a graphic that represents the info here</listitem>
			<listitem>GT4: Security: Pre-WS Authentication &amp; Authorization Admin Guide (pulled in)</listitem>
			<listitem>Basic Security Configuration</listitem>
			<listitem>GT &shortversion; SimpleCA: Admin Guide</listitem>
			<listitem>GT &shortversion; GridFTP : System Administrator's Guide</listitem>
			<listitem>GT &shortversion; Java WS Core : System Administrator's Guide</listitem>
			<listitem>GT &shortversion; Reliable File Transfer (RFT) Service: System Administrator's Guide</listitem>
			<listitem>GT &shortversion; WS GRAM : System Administrator's Guide</listitem>
			<listitem>GT &shortversion; GSI-OpenSSH: System Administrator's Guide</listitem>
			<listitem>GT &shortversion; MyProxy: System Administrator's Guide</listitem>
			<listitem>GT &shortversion; CAS Admin Guide</listitem>
			<listitem>GT &shortversion; RLS: System Administrator's Guide</listitem>
			<listitem>Packaging details</listitem>
		</orderedlist>

	</section>		
	<section><title>Globus Toolkit Developer Tutorial Documentation Requirements?</title>
		
		* list learning prerequisites to customize, fix, and improve the component.
		* Refer to developers guide instead of duplicating here
		* List suggestions for installing and setting up a development environment; these can be annotated links to the installation documentation
		* Provide working examples
		* General rules to follow for stability, scalability
		* Include a summary of important links used by developers
		* Note any deprecated tools and methods by linking to prior versions instead of describing them in current docs 
	
	<para>A developer tutorial has the following outline:</para>
		<orderedlist>
		<listitem>None at this time</listitem>
		</orderedlist>
	
	</section>		
	<section><title>Globus Toolkit Developer Documentation Requirements</title>
		<itemizedlist>		
		<listitem> This documentation should be written for ongoing use by developers, not as a tutorial.</listitem>
		<listitem>List of practical development and diagnostics tools and methodologies.</listitem>
		<listitem>List of Globus Toolkit development resources, api-doc, schema files, etc. (public interfaces)</listitem>
		<listitem>Identify each component subsystem, explain why it is used (instead of other choices). In the case of subsystems that are developed outside of 
			Globus Toolkit, include external references to development and reference areas.</listitem>
		<listitem>package design guidelines and development process templates including planning, core functions, testing, usability, and creating case studies</listitem>
		</itemizedlist>		
		<para>The developer's guide has the following outline:</para>
		<orderedlist>
			<listitem>Introduction</listitem>
			<listitem>Before you begin (with Features Summary, Tested Platforms, Backward Compatibility, Tech Dependencies and Security Consideration Frags
				Cris: should we add Associated Standards Frag???)</listitem>
			<listitem>Architecture and design overview:  Add overview diagrams </listitem>
			<listitem>Public interfaces (link to separate doc)</listitem>
			<listitem>Usage scenarios (might be confused with howtos)</listitem>
			<listitem>Tutorials</listitem>
			<listitem>Debugging</listitem>
			<listitem>Troubleshooting</listitem>
			<listitem>Related Documentation</listitem>
		</orderedlist>
	</section>		
	<section><title>Globus Toolkit Commandline Reference Requirements</title>
		<para>TODO</para>
	</section>
	<section><title>Globus Toolkit Public Interface Guide Requirements</title>
		<para>TODO</para>
	</section>
	<section><title>Globus Toolkit Release Notes Requirements</title>
		<para>TODO (talk about stable vs incremental vs development)</para>
	</section>
	<section><title>Globus Toolkit Quality Profile Requirements</title>
		<para>TODO</para>
	</section>
	<section><title>Globus Toolkit Fact Sheet Requirements</title>
		<para>TODO</para>
	</section>
	<section><title>Globus Toolkit Migrating Guide Requirements</title>
		<para>TODO</para>
	</section>
	<section><title>Globus Toolkit Samples Requirements</title>
		<para>TODO</para>
	</section>
	</section>
	<section><title>Why DocBook?</title>
		
		<para>All Globus Toolkit documentation will be marked up to conform to the DocBook XML DTD. Theoretically, any strict DTD would have been sufficient. 
		We could even write our own. However, DocBook is a publishing standard based on XML with similar goals to the Globus Toolkit Documentation project. 
		Some specific reasons why we are using DocBook:</para>
		<itemizedlist>
			<listitem> It is open-source.</listitem>
			<listitem>A growing community surrounds DocBook (has mailing lists)</listitem>
			<listitem>A number of free and commercial tools are available for editing and publishing DocBook documents.</listitem>
			<listitem>It enables us to publish in a variety of formats.</listitem>
			<listitem>XML separates content from presentation: It relieves each contributor of the burden of presentation, freeing each writer to focus on content and 
			sharing knowledge.</listitem>
			<listitem>It is well tested technology. (It has been in development since the early 1990's). </listitem>
		</itemizedlist>
		
		<para>The following DocBook primer walks you through the basics, and should cover the needs for 95 percent of the documentation we produce. 
		Remember to:</para>
		<itemizedlist>
			<listitem>Always close your tags with corresponding end-tags and to not use other tag minimization</listitem>
			<listitem>Write all elements and attributes in lowercase</listitem>
			<listitem>Quote all attributes </listitem>
		</itemizedlist>
	</section>
	<section><title>Tools</title>
		
		<para>You are going to need the following to work with the Globus Toolkit Docbook XML documentation:</para>
		<itemizedlist>
			<listitem><ulink url="http://docbook.org/xml/index.html">Docbook XML DTD</ulink> - The document type definition for XML. You can find an RPM or 
				DEB package or you can download a zip file from the site linked from here.</listitem>
			<listitem><ulink url="http://sourceforge.net/projects/docbook/">XSL Stylesheets</ulink> (docbook-xsl) - The stylesheets to convert to HTML. We have 
				been using a stylesheet based upon NWalsh's chunk.xsl.</listitem>
			<listitem>xsltproc - The processor that will take an XML document and, given a xsl stylesheet, convert it to HTML. It needs libxml2 and libxslt (available 
				in RPM and DEB formats or from <ulink url="http://xmlsoft.org/">xmlsoft.org</ulink>.</listitem>
			<listitem>Some editing tool. Some options are Oxygen XML Editor, Syntec (wysiwig), and Emacs with the psgml mode. You can read about other editing tools in
				the <ulink url="http://en.tldp.org/LDP/LDP-Author-Guide/docbookxml.html">LDP Author Guide</ulink>.</listitem>
		</itemizedlist>
	</section>
	<section><title>Accessing Documentation via CVS</title>
		<para>We use CVS to manage our documentation. This requires some basic knowledge about CVS (link to CVS info?). For Windows environments, we recommend TortoiseCVS.</para>
		
		<screen>CVSROOT: [you]@cvs.globus.org:/home/globdev/CVS/alliance-web</screen>
		
		<para>The path to the Globus Toolkit project docs is:</para>
		<filename>alliance/toolkit/docs/[two-number version - such as &shortversion;]/[area - such as security]/[component - such as delegation]</filename>
		
		<para>Once changes are committed to the repository, they are automatically copied over to the web - so your changes should be live as soon as they're committed.</para>
		
		<para>When replacing binary files such as pdfs or images - make sure you overwrite the file in your checkout and then commit the new version.</para>
				
		</section>
	<section><title>Writing New Docs</title>
		<para>For the most part, you only need to edit existing DocBook files. The following information is helpful If, however, you need to create a 
			new standalone doc.</para>
		
		<para>After you have the tools mentioned above, you need to define a title for your document. Then start thinking about the possible sections and 
		subsections you will have in your document. Make sure you coordinate with Cris to make sure you're not writing something that someone else is already 
		writing. Also, if you desire to use the Globus Toolkit CVS repository, please see this page [TODO].</para>
		
		<para>You can look at some templates for documents (in Docbook XML) here [TODO link to charles' chapters].</para>
	</section>
	<section><title>Document Structure</title>
		
		<para>The documentation for each package will make up a little "book" that is structured like this:</para>
		
		<screen>
		book                        : Docs for one component or family of components: GridFTP
		|
		+--chapter               : One section - for developers guide - also corresponds to heading level 1
			|
			---------+------------------------------------------------------
			|
			+--section           : Single section: Introduction
			|
			+--section           : Single section - Architecture and design
			|
				+--section       : Subsections - Design Overview
				|
		</screen>
		<para>The following is some docbook code representing how the above info 'nests':</para>
		<screen>
		&lt;book&gt; &lt;title&gt;GridFTP Release Manuals&lt;/title&gt;
			&lt;chapter&gt;&lt;title&gt;GridFTP Developer's Guide&lt;/title&gt;
			
				&lt;section&gt;&lt;title&gt;Introduction&lt;/title&gt;
				&lt;para&gt;[content]&lt;/para&gt;
				&lt;/section&gt;
			
				&lt;section&gt;&lt;title&gt;Architecture and design&lt;/title&gt;
					&lt;section&gt;&lt;title&gt;Design Overview&lt;/title&gt;
					&lt;para&gt;[content]&lt;/para&gt;
					&lt;/section&gt;	
				&lt;/section&gt;			
			
			&lt;/chapter&gt;
		&lt;/book&gt;
		</screen>
		
		<para>[The actual content is split up into documents that start at a &lt;section&gt;-level. These are then tied together in a top-level document that contains all the 
		information above the line. This will be explained in more detail in a later document.]</para>
		
		<para>For now you can take a look at the sources of these DocBook documents to get an idea of how they are tied together.</para>
	</section>
	<section><title>Using system entities</title>
		<para>TODO: explain using entities in the documentation</para>
	</section>
	<section><title>Headlines, Sections</title>
		
		<para>Given that your job starts at the &lt;section&gt;-level, all your documents should open with a &lt;section&gt;-tag and end with the corresponding 
		&lt;/section&gt;.</para>
		
		<para>You need to feed every &lt;section&gt; two attributes. The first attribute, id, is standard and can be used with all elements. It comes in very handy 
		when interlinking between documents (more about this when talking about links in the section called “Links”). The value of id has to be unique 
		throughout the book you're making since the id's in your sections will turn into anchor tags when the book is parsed into HTML.</para>
			
		<para>The other attribute is xreflabel. The value of this is the text that will appear as the link when referring to this section.</para>
			
		<para>Right after the opening tag you put the title of the document - this is usually the same as xreflabel-attribute. E.g. the top level of the document you're reading 
		right now looks like this:</para>
			
			<screen>&lt;section id="docbook-primer" xreflabel="GT4 DocBook Primer"&gt;
				&lt;title&gt;D DocBook Primer&lt;/title&gt;
				
				...
				
			&lt;/section&gt;</screen>
			
		<para>Inside this container your document will be able to nest &lt;section&gt; tags, each with the same requirements - id and xreflabel attributes, and a 
		&lt;title&gt;-tag inside. Actually, the xreflabel is never required in sections, but it makes linking to that section a lot easier.</para>
				
		<para>When it comes to naming your &lt;section&gt;'s and below, prefix them with some abbreviation of the id in the section tag such as "requirements-overview".</para>
	</section>
	<section><title>Code</title>
				
			<para>For displaying a snippet of code, a filename or anything else you just want to appear as a part of a sentence, we will use the tag &lt;computeroutput&gt;. 
			This takes the place of the HTML-tag &lt;code&gt;.</para>
					
			<para>For bigger chunks of code, the tag &lt;screen&gt; is used. Just wrap your code block in it; mono-spacing, indents and DocBook
			takes care of it automatically.</para>
	</section>
	<section><title>Links</title>
						
			<para>Linking falls into two different categories: inside the book you're making and outside:</para>
						
			<section><title>1. Inside linking, cross-referencing other parts of your book</title>
						
			<para>By having unique id's you can cross-reference any part of your book with a simple tag, regardless of where that part is.</para>
				<para>At this time, you can only use internal linking within the same book (component). For example, if you are editing
				the Java WS Core developer's guide, you can use the following method of linking to any other Java WS Core doc. To link
				to docs outside of the javawscore directory, you'd need to use an external link. We are planning to link up all docs into a set of books
					which would allow internal linking throughout a version of documentation (../docs/&shortversion;/).</para>
						
			<para>Check out this link to a subsection of the Developer's Guide:</para>
						
			<para>Put this in your XML:</para>
						
			<screen>- Find information about creating a package in
			&lt;xref linkend="section1"&gt;&lt;/xref&gt;.</screen>
						
			<para>And the output is:</para>
						
			<para>- Find information about creating a package in 
			<xref linkend="section1">Making a Package</xref>.</para>
						
			<para>Note that even though this is an empty tag, you have to either:</para>
			<itemizedlist>			
				<listitem>Provide the end-tag, &lt;/xref&gt;, or</listitem>
				<listitem>Put a slash before the ending-bracket: &lt;xref linkend="blahblah"/&gt; </listitem>
			</itemizedlist>			
			<para>If the section you link to hasn't a specified xreflabel-attribute, the link is going to look like this:</para>
						
			<para>Put this in your XML:</para>
						
			<screen>-Find information about what a package looks like in 
				&lt;xref linkend="section1"&gt;&lt;/xref&gt;.</screen>
						
			<para>And the output is:</para>
						
			<para>- Find information about what a package looks like in 
			the section called “What a Package Looks Like”.</para>
						
			<para>Note that since I haven't provided an xreflabel for the subsection, section1, the parser will try its best to explain where the link takes you. </para>
			</section>
			<section><title>2. Linking outside the documentation</title>
						
			<para>If you're hyper-linking out of the documentation, it works almost the same way as HTML - the tag is just a little different (&lt;ulink&gt;):</para>
							
			<screen>&lt;ulink url="http://www.oracle.com/"&gt;Oracle Corporation&lt;/ulink&gt;</screen>
							
			<para>....will create a hyper-link to Oracle in the HTML-version of the documentation.</para>
							
			<important><simpara>NOTE: Do NOT use ampersands in your hyper links. These are reserved for referencing entities, which is exactly how you'll make an 
				ampersand: &amp; </simpara></important></section>
	</section>						
	<section><title>Graphics</title>
							
			<note><simpara>Currently this section currently only takes HTML-output into consideration - not a printed version</simpara></note>
							
			<para>To insert a graphic we use the elements &lt;figure&gt;, &lt;mediaobject&gt;, &lt;imageobject&gt;, and &lt;imagedata&gt;. [The news is that you have to provide two 
				versions of all your graphics - one for the Web (probably a GIF or a JPEG) and one for print (EPS).] Finally you should provide a brief 
				description in the &lt;figure&gt; element's title tag. If you want a caption to appear below the graphic, use the
			&lt;caption&gt; element with a &lt;para&gt; tag.</para>
								
		<screen>&lt;figure&gt;&lt;title&gt;This is an image of the flow in the Request Processor&lt;/title&gt;
				&lt;mediaobject&gt;
					&lt;imageobject&gt;
						&lt;imagedata fileref="relative/path/from/top/rp-flow.gif" format="GIF" align="center"/&gt;
					&lt;/imageobject&gt;
					&lt;imageobject&gt;
					&lt;imagedata entityref="relative/path/from/top/rp-flow.eps" format="EPS" align="center"/&gt;
					&lt;/imageobject&gt;
				&lt;/mediaobject&gt;
			&lt;/figure&gt;</screen>
			
			<para>In addition to using the above code, do the following:</para>
		
			<itemizedlist>
				<listitem><simpara>Put your graphics in the same directory as the document</simpara></listitem>
				<listitem><simpara>Make sure to use the fileref attribute for the imagedata tag.</simpara></listitem>
			</itemizedlist>
</section>
	<section><title>Lists</title>
								
		<para>Here's how you make the DocBook equivalent of the three usual HTML-lists:</para>
								
	<section><title>How to make an &lt;ul&gt;</title>
									
		<para>Making an unordered list is pretty much like doing the same thing in HTML - if you close your &lt;li&gt;, that is. The only differences are that each list item 
		has to be wrapped in something more, such as &lt;para&gt;, and that the tags are called &lt;itemizedlist&gt; and &lt;listitem&gt;:</para>
										
	<screen>&lt;itemizedlist&gt;
											
		&lt;listitem&gt;&lt;para&gt;Stuff goes here&lt;/para&gt;&lt;/listitem&gt;
		&lt;listitem&gt;&lt;para&gt;More stuff goes here&lt;/para&gt;&lt;/listitem&gt;
								
	&lt;/itemizedlist&gt;</screen>
										
	</section>
	
	<section><title>How to make an &lt;ol&gt;</title>
											
	<para>The ordered list is like the preceding, except that you use &lt;orderedlist&gt; instead:</para>
												
	<screen>&lt;orderedlist&gt;
													
		&lt;listitem&gt;&lt;para&gt;Stuff goes here&lt;/para&gt;&lt;/listitem&gt;
		&lt;listitem&gt;&lt;para&gt;More stuff goes here&lt;/para&gt;&lt;/listitem&gt;
							
	&lt;/orderedlist&gt;</screen>
		</section>										

	<section><title>How to make a &lt;dl&gt;</title>
													
	<para>This kind of list is called a variablelist and these are the tags you'll need to make it happen: &lt;variablelist&gt;, &lt;varlistentry&gt;, &lt;term&gt; and &lt;listitem&gt;:</para>
														
	<screen>&lt;variablelist&gt;
													
		&lt;varlistentry&gt;
			&lt;term&gt;Heading (&lt;dt&gt;) goes here&lt;/term&gt;
			&lt;listitem&gt;&lt;para&gt;And stuff (&lt;dd&gt;)goes here&lt;/para&gt;&lt;/listitem&gt;
		&lt;/varlistentry&gt;
															
		&lt;varlistentry&gt;
			&lt;term&gt;Another heading goes here&lt;/term&gt;
			&lt;listitem&gt;&lt;para&gt;And more stuff goes here&lt;/para&gt;&lt;/listitem&gt;
		&lt;/varlistentry&gt;
											
	&lt;/variablelist&gt;</screen></section>

	</section>
	<section><title>Tables</title>
														
		<para>DocBook supports several types of tables, but in most cases, the <ulink url="http://docbook.org/tdg/en/html/informaltable.html">&lt;informaltable&gt;</ulink> 
			is enough:</para>
															
				<screen>&lt;informaltable frame="all"&gt;
					&lt;tgroup cols="3"&gt;
						&lt;tbody&gt;
																	
							&lt;row&gt;
								&lt;entry&gt;a1&lt;/entry&gt;
								&lt;entry&gt;b1&lt;/entry&gt;
								&lt;entry&gt;c1&lt;/entry&gt;
							&lt;/row&gt;
																	
							&lt;row&gt;
								&lt;entry&gt;a2&lt;/entry&gt;
								&lt;entry&gt;b2&lt;/entry&gt;
								&lt;entry&gt;c2&lt;/entry&gt;
							&lt;/row&gt;
																		
							&lt;row&gt;
								&lt;entry&gt;a3&lt;/entry&gt;
								&lt;entry&gt;b3&lt;/entry&gt;
								&lt;entry&gt;c3&lt;/entry&gt;
							&lt;/row&gt;
																
						&lt;/tbody&gt;
					&lt;/tgroup&gt;
				&lt;/informaltable&gt;</screen>
															
			<para>With our current XSL-style-sheet, the output of the markup above will be a simple HTML-table:</para>
		
				<informaltable frame="all">
					<tgroup cols="3">
						<tbody>
							
							<row>
								<entry>a1</entry>
								<entry>b1</entry>
								<entry>c1</entry>
							</row>
							
							<row>
								<entry>a2</entry>
								<entry>b2</entry>
								<entry>c2</entry>
							</row>
							
							<row>
								<entry>a3</entry>
								<entry>b3</entry>
								<entry>c3</entry>
							</row>
							
						</tbody>
					</tgroup>
				</informaltable>
															
		<para>If you want cells to span more than one row or column, it gets a bit more complicated - check out <ulink url="http://docbook.org/tdg/en/html/table.html">&lt;table&gt;</ulink> 
		for an example.</para>
	</section>
	<section><title>Emphasis</title>
		<para>Our documentation uses two flavors of emphasis - italics and bold type. DocBook uses one - 
		<ulink url="http://docbook.org/tdg/en/html/emphasis.html">&lt;emphasis&gt;</ulink>.</para>
																	
		<para>The &lt;emphasis&gt; tag defaults to italics when parsed. If you're looking for emphasizing with bold type, use &lt;emphasis role="strong"&gt;.</para>
	</section>
	<section><title>Indexing Your DocBook Documents</title>
		<para>Marking up index-words may not have any importance for the HTML-output, but in order to make it easier to make a nice print-version of the 
		documentation, you should mark up words in your documents that you would like to see show up in an index one day.</para>
																		
		<para>Use <ulink url="http://docbook.org/tdg/en/html/indexterm.html">&lt;indexterm&gt;</ulink>, 
		<ulink url="http://docbook.org/tdg/en/html/primary.html">&lt;primary&gt;</ulink> and 
		<ulink url="http://docbook.org/tdg/en/html/secondary.html">&lt;secondary&gt;</ulink> for this. See these links for an explanation.</para>
	</section>
	<section><title>Converting to HTML</title>
													
		<note><simpara>This section is quoted almost verbatim from the LDP Author Guide.</simpara></note>
																			
		<para>Once you have the Docbook Tools installed, you can convert your xml documents to HTML or other formats.</para>
																			
		<para>With the DocBook XSL stylesheets, generation of multiple files is controlled by the stylesheet. If you want to generate a single file, you call one stylesheet. 
		If you want to generate multiple files, you call a different stylesheet.</para>
																		
		<para>To generate a single HTML file from your DocBook XML file, use the command:</para>
																			
		<screen>bash$  xsltproc -o outputfilename.xml /usr/share/sgml/docbook/stylesheet/xsl/nwalsh/html/html.xsl filename.xml</screen>
																			
		<note><simpara>This example uses Daniel Veillard's xsltproc command available as part of libxslt from 
		<ulink url="http://www.xmlsoft.org/XSLT/">http://www.xmlsoft.org/XSLT/</ulink>. If you are using other XML 
		processors such as Xalan or Saxon, you will need to change the command line appropriately.</simpara></note>
																			
		<para>To generate a set of linked HTML pages, with a separate page for each &lt;chapter&gt;, &lt;section&gt; or &lt;appendix&gt; tag, use the following command:</para>
																				
		<screen>bash$  xsltproc /usr/share/sgml/docbook/stylesheet/xsl/nwalsh/html/chunk.xsl filename.xml</screen>
																				
		<para>You could also look at a Makefile (found in most component directories) for examples of how these documents are generated.</para>

	</section>
	<section><title>Further Reading</title>		
		<itemizedlist>
			<listitem>Bacon's sed</listitem>
			<listitem>Using Xinclude</listitem>
			<listitem>The LDP Author Guide has a lot of good information, a table of docbook elements and their "look" in HTML and lots of good links for tools.</listitem>
			<listitem>David Lutterkort wrote an intro to the PSGML Mode in Emacs</listitem>
			<listitem>For checking if your document is well-formed, James Clark's free Java parser, XP, is recommended. (note that it is not a validating parser, 
			but as long as you follow the guidelines set forth in this document, your XML will validate)</listitem>
			<listitem>AptConvert from PIXware is a Java editor that will produce DocBook documents and let you transform them into HTML and PDF for a local 
			preview before you submit.</listitem>
			<listitem>In the process of transforming your HTML into XML, HTML tidy can be a handy tool to make your HTML "regexp'able". Brandoch Calef has 
			made a Perl script that gets you most of the way. </listitem>
		</itemizedlist>																
	</section>

</chapter>
