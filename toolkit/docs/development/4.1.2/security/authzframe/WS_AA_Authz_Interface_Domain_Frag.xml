<?xml version='1.0' encoding='UTF-8'?>

<section>

  <title>Interface introduction</title>

  <para> On the server side the authorization configuration is configured using security descriptors, either programmatically or using files. Refer to <xref linkend="security-secdesc-configAuthz"/> and <xref linkend="security-secdesc-customAuthz"/> for detailed documentation.</para>

  <para>On the client side the authorization configuration is set on the stub instance used for method invocation. Properties can be set directly on the stub or set using a client security descriptor. The next section discusses setting property directly on stub and writing custom authorization schemes, while <xref linkend="security-secdesc-client-authz"/> describes using clients side security descriptors to configure a distributed authorization schema. </para>

</section>

<section>

  <title>Syntax of the interface</title>

  <section>
  <title>Using distributed client-side authorization schemes</title>

  <para>The following client side authorization schemes are
  distributed as a part of the toolkit: no authorization, self
  authorization, host authorization, hostOrSelf authorization and identity
  authorization. </para>

  <itemizedlist>

      <listitem>
  
      <para>If setting <emphasis>properties directly on the
      stub</emphasis>, there are two properties that maybe used, based
      on that authentication scheme used.

        <itemizedlist>

        <listitem><para>

        If GSI Secure Transport or GSI Secure Conversation is used, the
        <constant>org.globus.axis.gsi.GSIConstants.GSI_AUTHORIZATION</constant>
        property must be set on the stub. The value of this property
        must be an instance of an object that extends from
        <constant>org.globus.gsi.gssapi.auth.GSSAuthorization</constant>. All
        distributed authorization schemes have implementation in
        <constant>org.globus.gsi.gssapi.auth</constant> package.

        </para></listitem>
        
        <listitem><para>

        For all other authentication schemes, the
        <constant>org.globus.wsrf.impl.security.Constants.AUTHORIZATION</constant>
        property must be set on the stub. The value of this property
        must be an instance of an object that implements the
        <constant>org.globus.wsrf.impl.security.authorization.Authorization</constant>
        interface.

        </para></listitem>

      <listitem>

      <para> Example:

      <screen>
      // Create endpoint reference EndpointReferenceType
      endpoint = new EndpointReferenceType(); 
      // Set address of service
      String counterAddr = 
         &quot;http://localhost:8080/wsrf/services/CounterService&quot;;
         // Get handle to stub object
         CounterPortType port = 
            locator.getCounterPortTypePort(endpoint);
            <emphasis>// set client authorization to self 
            ((Stub)port)._setProperty(Constants.AUTHORIZATION, SelfAuthorization.getInstance());</emphasis>
            </screen>
        </para>
      </listitem> 

        </itemizedlist> 
       </para>
      </listitem> 


      <listitem> 
        <para>Setting properties using the client descriptor is described in <xref linkend="security-secdesc-configDesc-client"/> and <xref linkend="security-secdesc-client-authz"/> </para>
      </listitem>

      </itemizedlist> 

</section>


<section>
<title>Writing custom client-side authorization scheme</title>

<para> Other than the distributed client authorization scheme,
custom client-side authorization schemes can be
written and can be set as value for appropriate property on the stub.</para>

<note><para> Security descriptors cannot be used to configure custom
authorization schemes on client side.  </para></note>

 <itemizedlist> 

      <listitem>

      <para>
      If the authentication scheme to be used is <emphasis>GSI Secure
      Transport</emphasis> or <emphasis>GSI Secure
      Conversation</emphasis>, the custom authorization scheme should
      extend from extends from
      <constant>org.globus.gsi.gssapi.auth.GSSAuthorization</constant>.</para>

      <screen>
      public class TestAuthorization extends GSSAuthorization {
      
        // Provide some way to instantiate this class. Can use constructor
        // with arguments to pass in parameters.
         public TestAuthorization() {

         }

         public GSSName getExpectedName(GSSCredential cred, String host) 
            throws GSSException {

            // Return the expected GSSName of the remote entity.
         }


          public void authorize(GSSContext context, String host)
	     throws AuthorizationException {      

             // Perform the authorization steps.
             // context.getSrcName() provides the local GSSName
             // context.getTargName() provides the remote GSSName

             // if authorization fails, throw AuthorizationException
         }
      }
      </screen>
      
      <para> The following describes the steps done for client side
      authorization during context establishment:

      <itemizedlist>

      <listitem>
      <para> Prior to initialization of context establishment the
      relevant handler (HTTPSSender in case of GSI Secure Transport or
      SecContextHandler in case of GSI Secure Conversation), invokes
      <emphasis>getExpectedName</emphasis> on the instance of
      GSSAuthorization set on the Stub.  </para> </listitem>

      <listitem>
      <para> 
      During context establishment, if the expected target name from
      previous step is not null, it is compared with the remote peer's
      GSSName. If it is not a match, context establishment is
      abandoned and an error is thrown.
      </para>

      <para>
      If the expected target name is null, then a match is not done,
      unless the option of delegation is used. That is, if GSI Secure
      Conversation with delegation is used, then the expected target
      name cannot be null and must match the remote peer's identity.
      </para>
      </listitem>

      <listitem>
      <para> 
      Once the context has been established, the
      <emphasis>authorize</emphasis> method is invoked.
      </para>
      </listitem>

      </itemizedlist>
      </para>

      <note>
      <para> Client authorization is done prior to invocation.
      </para>
      </note>

      <para>To configure the custom authorization scheme:

      <screen>
      ((Stub)port)._setProperty(GSIConstants.GSI_AUTHORIZATION, new TestAuthorization());
      </screen>
      
      </para>

      <para> Various authorization scheme implementations in
      package <constant>org.globus.gsi.gssapi.auth</constant> would
      serve as examples. <ulink url="http://viewcvs.globus.org/viewcvs.cgi/jglobus/src/org/globus/gsi/gssapi/auth/?root=Java+COG&amp;pathrev=HEAD">View CVS Link</ulink>  </para>

      </listitem>

      <listitem><para>

        For all authentication schemes other than those in previous step the
        <constant>org.globus.wsrf.impl.security.Constants.AUTHORIZATION</constant>
        property must be set on the stub. The value of this property
        must be an instance of an object that implements the
        <constant>org.globus.wsrf.impl.security.authorization.Authorization</constant>
        interface.</para>

      <screen>
      public class TestAuthorization implements Authorization {
      
        // Provide some way to instantiate this class. Can use constructor
        // with arguments to pass in parameters.
         public TestAuthorization() {

         }

         public GSSName getName(MessageContext ctx) 
            throws GSSException {

            // Return the expected GSSName of the remote entity.
         }


          void authorize(Subject peerSubject, MessageContext context)
                                 throws AuthorizationException {

             // Perform the authorization steps.
             // peerSubject provides the remote Subject
             // Use SecurityManager API to get local Subject

             // if authorization fails, throw AuthorizationException
         }
      }
      </screen>

      <para> The following describes the steps done for client side
      authorization:

      <itemizedlist>
      <listitem>
      <para> The client side handler WSSecurityClientHandler, invokes
      <emphasis>authorize</emphasis> method on the authorization
      instance.  </para> </listitem> 

      </itemizedlist>
      
      <note>
      <para> Client authorization is done after the invocation.
      </para>
      </note>

      </para>

      <para>To configure the custom authorization scheme:

      <screen>
      ((Stub)port)._setProperty(Constants.AUTHORIZATION, new TestAuthorization());
      </screen>
      
      </para>

      <para> Various authorization scheme implementations in
      package <constant>org.globus.wsrf.impl.security.authorization</constant> would serve as examples. <ulink url="http://viewcvs.globus.org/viewcvs.cgi/wsrf/java/core/source/src/org/globus/wsrf/impl/security/authorization/?pathrev=HEAD">View CVS Link</ulink>.  </para>

      
      </listitem>

    </itemizedlist>
</section>

<section>
<title>Default client-side authorization </title>
    <para> If no  authorization mechanism has been specified, HostOrSelf authorization is used. In this scheme host authorization is tried first, if it fails, self authorization is attempted</para>
</section>
</section>

