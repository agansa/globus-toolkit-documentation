<?xml version='1.0' encoding='UTF-8'?>
<title>GT4 Delegation Service Developer&apos;s Guide</title>
<titleabbrev>Developer&apos;s Guide</titleabbrev>
<section id="s-delegation-developer-introduction">
  <title>Introduction</title>
  <para>The Delegation Service provides an interface  that,  given the endpoint reference to the
credential resource, allows service developers to retrieve a delegated credential. While there is remote interface to delegate and refresh a credential,  no remote interface is provided for acquiring the delegated credential   (that is   all access is through shared Java state.)</para>
  <para>In addition, the
component provides  a utility API that can be used for developing
client side code to generate a  credential, delegate and refresh it</para>
</section>
<section id="s-delegation-developer-archdes">
  <title>Architecture and design overview</title>
  <section>
    <title>Overview</title>
    <para>This component offers an interface for delegating
credentials  and subsequently managing them. It exposes the delegated credentials as  a WS-Resources and allows authorized co-hosted services  to access these credentials through a Java API. Furthermore, it  gives clients the ability to refresh and manage the lifetime of their delegated credentials. </para>
    <para>This component has a Delegation Factory Service and Delegation
Service.  A delegate call on the factory creates a WS-Resource
 managed by the Delegation Service that represents the delegated credential. The
delegate call returns a Endpoint Reference (EPR) that can be used to later refresh the credentials.</para>
    <para>Services that are interested in the delegated credential can register a
listener (an object that implements<constant> org.globus.delegation.DelegationRefreshListener</constant>) with the
specific delegated credential resource. There currently is no  remote interface for this, hence
only services that are in the same hosting environment can register
interest. The credentials are pushed to the listener anytime a refresh
is done.</para>
    <para>In practice delegation is done as follows. The Delegation Factory Service publishes its certificate chain,  including the service&apos;s certificate, as a
Resource Property.          In the first  step of  the delegation process the client obtains this certificate chain, validates and authorizes it, and extracts the public key from the Delegation Factory  Service certificate.  The client then creates  the proxy certificate it is going to delegate by   binding, i.e. signing, the service&apos;s public key to  the proxy certificate information using its private key. In the third and final step the client passes the certificate chain that starts with the proxy certificate to the Delegation Factory Service, which upon receipt replies with the address to the created delegated credential WS-Resource.</para>
    <para>Additionally the component allows the delegator to renew  delegated
credentials. Credential renewal follows the same steps as the initial delegation, except for the final step in which the client acts against  its WS-Resource instead of the Delegation Service Factory. </para>
  </section>
  <section>
    <title>Relationship to WS-Trust</title>
    <para>The Delegation service uses WS-Trust messages as described in the WS-Trust specification. However, it should be noted that these messages are underspecified (the contents of the basic WS-Trust envelop are xsd:any) and the contents of these messages for the Delegation Services are simplistic and  do not achieve the &quot;spirit&quot; intended by the specification.</para>
  </section>
  <section>
    <title>Normal Usage Patterns</title>
    <section>
      <title>Creation</title>
      <graphic fileref="DelegationServiceCreate.gif" format="GIF" align="center"/>
      <orderedlist>
        <listitem>
          <para>The client   does a lookup on the Delegation Factory Service  (DFS) for the Resource Property (RP) containing the certificate chain of the DFS. To perform this lookup the client uses the EPR of the DFS obtained from a RP of another application (e.g. GRAM, RFT) or some other OOB method.<itemizedlist>
              <listitem>
                <simpara>This lookup is secured via transport-level security. The client and server mutually authenticate and authorize each other. Messages are integrity protected.</simpara>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>The client creates a proxy certificate by binding the public key of DFS, obtained from certificate chain in the previous step, to  the proxy identity of the client.<itemizedlist>
              <listitem>
                <simpara>The lifetime of proxy certificate defaults to the lifetime of the signing certificate (typically a short-lived proxy)</simpara>
              </listitem>
            </itemizedlist></para>
        </listitem>
        <listitem>
          <para>The client sends the proxy certificate (and chain) to DFS; a endpoint reference (EPR)  for the delegated  credential is returned to client, which the client may use in subsequent invocations of other services co-hosted with the Delegation Service.<itemizedlist>
              <listitem>
                <simpara>The resource expires on proxy expiration</simpara>
              </listitem>
              <listitem>
                <simpara>An ACL is created for the delegated credential resource, which contains the identity of the credential delegator.</simpara>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </orderedlist>
    </section>
    <section>
      <title>Refresh</title>
      <graphic fileref="DelegationServiceRefresh.gif" format="GIF" align="center"/>
      <para>The original delegator of a credential may refresh the credential (i.e. replace it with a different credential, presumably one that has an expiration date  farther in the future). The usage pattern for this method is identical to the Creation method described in the previous section, with the exception that the EPR of the previously created Delegation Resource is used as opposed to the EPR of the Delegation Factory Service.</para>
    </section>
  </section>
  <section>
    <title>Credential Storage</title>
    <para>The Delegation Factory Service and the Delegation Service use  standard Grid service credentials, namely a private key and certificate chain where the EEC has a DN containing the FQDN of the host on which the services  are running. The private key and certificate chain are stored on local disk, protected by local file system permissions. By  default the PEM files <filename>/etc/grid-security/containercert.pem</filename> and <filename>/etc/grid-security/containerkey.pem</filename> are used.</para>
    <para>When a delegated proxy credential is persisted to disk, it is stored as a serialized JAVA object in <filename>~globus/.globus/persisted/{ip addr}/DelegationResource/</filename>. The private key of the Delegation Service is stored with the delegated proxy certificate to ease the use of delegated credentials by services in the hosting environment.</para>
  </section>
  <section>
    <title>Access to Delegated Proxy Resources</title>
    <para>After delegating a credential to the Delegation Service, a client will typically invoke an application service (e.g. GRAM, RFT) that requires the use of such a delegated credential. In such situations, the client will pass the EPR of the delegated credential to the service which it is invoking.</para>
    <para>The service will use an internal hosting environment API (as opposed to a web services method) to access the delegated credential. This interface provides the identity of the requesting client to the underlying software, which verifies that the client identity is present in the ACL of the proxy resource before returning the requested credential.</para>
  </section>
  <section>
    <title>Registration for Renewal Events</title>
    <para>Services internal to the hosting environment can register with a resource proxy to receive updated credentials when they renewed by the client. Such registrations are authorized in the same manner as direct access to the proxy.  Registered  services will have any renewed credentials pushed to them.</para>
  </section>
</section>
<section id="s-delegation-developer-pubinterfaces">
  <title>Public interface</title>
  <para>The semantics and syntax of the APIs and WSDL for the component, along with
  descriptions of domain-specific structured interface data, can be found in
  the <ulink url="../WS_AA_Delegation_Service_Public_Interfaces.html">public interface guide</ulink>.</para>
</section>
<section id="s-delegation-developer-scenarios">
  <title>Usage scenarios</title>
  <section>
    <title> Client-side scenario </title>
    <itemizedlist>
      <listitem>
        <simpara>Prior to delegating, the client needs to get information about the public key of the Delegation Factory Service. A utility API to do that is described <ulink url="../WS_AA_Delegation_Service_Public_Interfaces.html#getCertChain">here</ulink>.</simpara>
      </listitem>
      <listitem>
        <simpara>Once the delegation client has the public key of Delegation Factory Service it needs to create a delegated credential using that public key and then invoke the remote interface on the factory to delegate the credential. A utility API to do all of the above is described <ulink url="./../WS_AA_Delegation_Service_Public_Interfaces.html#delegate">here</ulink>. The Endpoint Reference that is returned by this operation can be distributed to services that the user would like to delegate its rights to.</simpara>
      </listitem>
      <listitem>
        <simpara>The user may need to refresh the delegated credential. The onus is on the user to do this prior to expiration of the delegated credential. If the user does not refresh the credential the expired credential will be garbage collected and the Endpoint Reference cannot be reused. A utility API that can be used to refresh is described <ulink url="./../WS_AA_Delegation_Service_Public_Interfaces.html#refresh">here</ulink></simpara>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title> Service-side scenario </title>
    <para>This section describes the usage scenario where some service is provided with a delegated credential EPR and needs to access the credential. Typically, as a part of application the delegated credential EPR is sent to the service and and it is assumed that the delegation service is co-hosted (that is it runs in the same hosting environment).</para>
    <para>The service needs to create a listener object that implements
 the <constant>org.globus.delegation.DelegationRefreshListener</constant>
interface and register the listener with the Delegation Service.   Upon registering the listener  the Delegation Service checks  that the delegator identity matches either the identity  passed in the
subject object or the identity contained in the peer subject 
associated with the current message context. Once the listener has been authorized the delegated credential is made available to the listener. Details about the API are described <ulink url="./../WS_AA_Delegation_Service_Public_Interfaces.html#registerListener">here</ulink>.</para>
  </section>
</section>
<section id="s-delegation-developer-tutorials">
  <title>Tutorials</title>
  <para>There are no tutorials available at this time</para>
</section>
<section id="s-delegation-developer-features">
  <title>Feature summary</title>
&WS_AA_Delegation_Service_Feature_Summary_Frag;
</section>
<section id="s-delegation-developer-platforms">
  <title>Tested platforms</title>
&WS_AA_Delegation_Service_Platform_Summary_Frag;
</section>
<section id="s-delegation-developer-compatibility">
  <title>Backward compatibility summary</title>
&WS_AA_Delegation_Service_Compatibility_Summary_Frag;
</section>
<section id="s-delegation-developer-dependencies">
  <title>Technology dependencies</title>
&WS_AA_Delegation_Service_Dependencies_Summary_Frag;
</section>
<section id="s-delegation-developer-security_considerations">
  <title>Security considerations </title>
&WS_AA_Delegation_Service_Security_Considerations_Frag;
</section>
<section id="s-delegation-developer-debugging">
  <title>Debugging</title>
  <para>Log output from the delegation service is a useful tool for debugging
  issues. Logging in the delegation service code is based on  the <ulink url="http://jakarta.apache.org/commons/logging/">Jakarta Commons Logging</ulink> API and is described in more detail <ulink url="../../../common/javawscore/developer/index.html#s-javawscore-developer-debugging">here</ulink>. As
  described in the above section, configuration files need to be edited to
  enable logging at different levels. For example, to see all debug logging
  statements for the delegation service, the following lines need to be added:<screen>log4j.category.org.globus.delegation.service=DEBUG 
log4j.category.org.globus.delegation.factory=DEBUG </screen></para>
  <para>Debugging information  from delegation clients can be obtained by setting the following line in the client side logging configuration file.<screen>log4j.category.org.globus.delegation.client=DEBUG</screen></para>
  <note>
    <simpara>Client side logging configuration has to be done in $GLOBUS_LOCATION/log4j.properties</simpara>
  </note>
</section>
<section id="s-delegation-developer-troubleshooting">
  <title>Troubleshooting</title>
  <section>
    <title> Unable to retrieve caller DN, cannot register</title>
    <para>This error occurs when attempting to register a listener with a delegated credential resource without a  JAAS subject. There are two ways of registering - either the JAAS subject can be explicitly  passed using the API or the JAAS subject  can be picked up from the current message context (the subject representing the client). If the later mechanism for  registering is used and there is no client credential associated with the thread that is calling the register function, then this exception is thrown. If this occurs make sure to use the API call  that explicitly  passes the subject.</para>
  </section>
  <section>
    <title><emphasis>test user DN </emphasis> is not authorized to access this resource</title>
    <para>Only the user who created the delegated credential is allowed to access it. There are two sets of API functions for getting the credential and registering listeners: one in which the caller&apos;s DN is picked up from the current thread and the other in which a JAAS subject (containing the caller&apos;s DN) is explicitly function parameter. If the caller&apos;s DN (picked up from thread or specified explicitly)  does not match the DN of the user who created the credential, this error is thrown. Ensure that the DN explicitly specified or the client DN associated with the thread matches the creator&apos;s DN.</para>
    <note>
      <para>The <emphasis>test user DN</emphasis> specified in the error message is just a  placeholder and will contain the actual DN of the user attempting to access the credential.</para>
    </note>
  </section>
  <section>
    <title>CoG Configuration and troubleshooting</title>
    <para>Also, for security related troubleshooting the <ulink url="http://www-unix.globus.org/cog/distribution/1.2/FAQ.TXT">CoG FAQ</ulink> might prove useful (especially secitons on configuring credentials, CAs and so on.)</para>
  </section>
</section>
<section id="s-delegation-developer-relateddocs">
  <title>Related Documentation</title>
&WS_AA_Delegation_Service_Associated_Standards_Frag;
</section>
