
<section><title>Enabling debug logging for GRAM classes</title>
<para>
For starters, consult the
    <ulink url="http://www-unix.globus.org/toolkit/docs/4.0/common/javawscore/developer-index.html#s-javawscore-developer-debugging">Debugging section of
the Java WS Core Developer's Guide</ulink> for details about what files to edit and
other general log4j configuration information.
</para>
<para>
To turn on debug logging for the Managed Executable Job Service (MEJS), add the
following entry to the <computeroutput>container-log4j.properties</computeroutput> file:
<screen>
log4j.category.org.globus.exec.service.exec=DEBUG
</screen>
To turn on debug logging for the delegated proxy management code, add the
following entry to the <computeroutput>container-log4j.properties</computeroutput> file:
<screen>
log4j.category.org.globus.exec.service.utils=DEBUG
</screen>
To turn on debug logging for the Managed Multi Job Service (MMJS), add the
following entry to the <computeroutput>container-log4j.properties</computeroutput> file:
<screen>
log4j.category.org.globus.exec.service.multi=DEBUG
</screen>
To turn on debug logging for the Managed Job Factory Service (MJFS), add the
following entry to the <computeroutput>container-log4j.properties</computeroutput> file:
<screen>
log4j.category.org.globus.exec.service.factory=DEBUG
</screen>
To turn on debug logging for all GRAM code, add the following entry to the
<computeroutput>container-log4j.properties</computeroutput> file:
<screen>
log4j.category.org.globus.exec=DEBUG
</screen>
Follow the pattern to turn on logging for other specific packages or classes.
</para>

</section>
<section><title>Instrumented timings logging</title>
<para>
Both the service and Java client API code contain special debugging statements
which output certain timing data to help in determining performance bottlenecks.
</para>
<para>
The service code uses the PerformanceLog class to output the timings
information.  To turn on service timings logging without triggering full debug
logging for the service code, add the following lines to the
container-log4j.properties file:
<screen>
log4j.category.org.globus.exec.service.factory.ManagedJobFactoryService.performance=DEBUG
log4j.category.org.globus.exec.service.exec.ManagedExecutableJobResource.performance=DEBUG
log4j.category.org.globus.exec.service.exec.StateMachine.performance=DEBUG
</screen>
The Java client API  has not been converted over to using the PerformanceLog
class, so the debug statements are sent at the INFO level to avoid having to
turn on full debug logging. To turn on client timings logging without triggering
full debug logging for the client code, add the following line to the
container-log4j.properties file:
<screen>
log4j.category.org.globus.exec.client.e=INFO
</screen>
</para>
<para>
There are two parsing scripts available in the source distribution that aren't
distributed in any GPT package for summarizing the service and client timings
data.  The are located in
<computeroutput>ws-gram/service/java/test/throughput/</computeroutput>, and are
named <computeroutput>parse-service-timings.pl</computeroutput> and
<computeroutput>parse-client-timings.pl</computeroutput>. They both simply take
the path of the appropriate log file that contains the timing data.  These
scripts work fine with log files that have other logging statements mixed with
the timing data.
</para>
</section>

<section><title>Debugging script execution</title>
<para>
It may be necessary to debug the scheduler scripts if jobs aren't being
submitted correctly, and either no fault or a less-than-helpful fault is
generated.  Ideally we would like that this not be necessary; so if you find
that you must resort to this, please file a bug report or let us know on the
discuss e-mail list.
</para>
<para>
By turning on debug logging for the MEJS (see above), you should be able to
search for <emphasis>"Perl Job Description"</emphasis> in the logging output to
find the perl form of the job description that is sent to the scheduler scripts.
</para>
<para>
Also by turning on debug logging for the MEJS, you should be able to search for
<emphasis>"Executing command"</emphasis> in the logging output to find the
specific commands that are executed when the scheduler scripts are invoked from
the service code.  If you saved the perl job description from the previous
paragraph, then you can use this to manually run these commands.
</para>
<para>
There is a perl job description attribute named
<computeroutput>logfile</computeroutput> that isn't currently supported in the
XML job description that can be used to print debugging info about the
execution of the perl scripts.  The value for this attribute is a path to a file
that will be created.  You can add this to the perl job description file that
you created from the service debug logging before manually running the script
commands.
</para>
<para>
Beyond the above advice, you may want to edit the perl scripts themselves to
print more detailed information. For more information on the location and
composition of the scheduler scripts, please consult the
<ulink url="http://www-unix.globus.org/toolkit/docs/4.0/execution/wsgram/developer/scheduler-tutorial-perl.html">WS-GRAM
Scheduler Interface Tutorial</ulink>.
</para>
</section>
