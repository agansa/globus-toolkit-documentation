<partintro><para><emphasis>THIS TOOL HAS BEEN DEPRECATED. NO GUARANTEES ARE MADE TO THIS DOCUMENTATION'S
ACCURACY AND THE TOOL'S FUNCTIONALITY.</emphasis></para></partintro>

<refentry id="managed-globus-run">
<refmeta>
<refentrytitle>managed-globus-run</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>managed-globus-run</refname>
<refpurpose>PURPOSE</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>managed-globus-run</command>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1 id="tooldescription"><title>Tool Description</title>

<para><computeroutput>managed-job-globusrun</computeroutput> is the job submission tool 
for the Globus Toolkit 3.9.5, i.e. it is a program for submitting jobs to a 
local or remote job host and managing those jobs via GRAM services. 
GRAM services provide secure job submission to many types of job schedulers 
for users who have the right to access a job hosting resource in a Grid environment. 
All GRAM job submission options are supported transparently through the
embedded request document input. In fact, the job startup is done by submitting 
a client-side provided job description (RSL)
to the GRAM services.</para>

<para>In addition to starting jobs, it is possible to delegate credentials needed for
certain optional GRAM features, query the state of a previously 
started job and parse a job description file without making any submission.
Online and batch submission modes are supported with reattachment (recovery) 
for jobs whether they were started with this client or another GRAM client 
application.</para>

<para><emphasis>Note:</emphasis> the existence of a valid proxy is required for essentially all
supported operations but job description file parsing (<command>-p</command>). In order 
to generate a valid proxy file, use the grid-proxy-init tool available 
under $GLOBUS_LOCATION/bin.</para>

<para><emphasis>IMPORTANT RELEASE NOTE:</emphasis> this version of the job submission tool is <emphasis>not</emphasis> 
the final version that will be supplied with GT 3.9.5. A job submission tool 
(written in C) will be provided with additional features such as file streaming.</para>
</refsect1>
<refsect1 id="commandsyntax"><title>Command Syntax</title>

<refsect2><title>Arguments</title>
<screen>managed-job-globusrun [options] [&lt;factory&gt;] &lt;RSL&gt;
managed-job-globusrun -p -file &lt;RSL filename&gt;
managed-job-globusrun (-state | -release | -kill) &lt;job handle&gt;
managed-job-globusrun -help | -usage | -version</screen>
<para>with</para>
<screen>&lt;RSL&gt;     = -file &lt;RSL filename&gt; | &lt;command line&gt;
&lt;factory&gt; = -factory &lt;contact&gt; [-type &lt;type&gt;]
&lt;contact&gt; = [&lt;protocol&gt;://]&lt;host&gt;[:[port]][/&lt;service&gt;]
[options] = [-q] [-n]
            [-b] [-duration] [-terminate-at]
            [-auth &lt;auth&gt;] [-xmlsec &lt;sec&gt;] [-personal]
            [-submission-id &lt;ID&gt;]
</screen>

</refsect2>

<refsect2><title>Options</title>
  <table><title>TITLE</title>
<tgroup cols="2">
<colspec colname="c1"/>
<colspec colname="c2"/>
<tbody>
    <row>
      <entry namest="c1" nameend="c2">Help options </entry>
    </row>
    <row>
      <entry><command>-help</command></entry>
      <entry>Displays help information about the command. </entry>
    </row>
    <row>
      <entry><command>-usage</command></entry>
      <entry>Displays usage of the command.</entry>
    </row>
    <row>
      <entry><command>-v, -version</command></entry>
      <entry>Displays version of the command.</entry>
    </row>
    <row>
      <entry namest="c1" nameend="c2">Job Factory Contact  options </entry>
    </row>
    <row>
      <entry><command>-factory &lt;contact&gt;</command></entry>
      <entry><para>Specifies the URL of the Job Factory Service
  to contact when submitting or listing jobs.
  A factory contact string can be specified in
  the following ways:</para>
        <itemizedlist>
          <listitem><simpara> host</simpara></listitem>
          <listitem><simpara> host:</simpara></listitem>
          <listitem><simpara> host:port</simpara></listitem>
          <listitem><simpara> host:port/service</simpara></listitem>
          <listitem><simpara> host/service</simpara></listitem>
          <listitem><simpara> host:/service</simpara></listitem>
        </itemizedlist>        <para>          It is also possible to specify the protocol
          by prepending <command>protocol://</command> to each of the
          previous possibilities, bringing the total
          number of supported syntaxes to 12.</para>
        <para>          For those factory contacts which omit the
          protocol, port or service field, the following default values
          are used, as the following table explains:
        <table><title>TITLE</title>
<tgroup cols="2"><thead>
          <row>
<entry>URL part</entry>
            <entry>default value</entry>
          </row></thead><tbody>
          <row>
            <entry>port</entry>
            <entry>8080</entry>
          </row>
          <row>
            <entry>protocol</entry>
            <entry>http</entry>
          </row>
          <row>
            <entry>service</entry>
            <entry> /wsrf/services/ManagedJobFactoryService</entry>
          </row>
        </tbody></tgroup>
</table>      Omitting altogether the -factory option is
  equivalent to specifying the local host as
  the contact string (with the implied default
  protocol, port and service).</para>
      </entry>
    </row>
    <row>
      <entry><command>-type &lt;factory type&gt;</command></entry>
      <entry> Specifies the type of factory resource to use. This is
the name of the local resource manager. 
The default value is <emphasis>Fork</emphasis>.</entry>
    </row>
    <row>
       <entry namest="c1" nameend="c2">Job Specification
          options</entry>
    </row>
    <row>
      <entry><command>&lt;command line&gt;</command></entry>
      <entry><para>Creates a simple job description that only
  consists of a command line of the form:</para>
        <screen>'executable (argument)*'</screen>
        <para>          Quotes must be used if there is one or more
      arguments.</para></entry>
    </row>
    <row>
      <entry><command>-file &lt;RSL filename&gt;</command></entry>
      <entry><para> Reads RSL from the local file &lt;RSL filename&gt;.</para>
        <para>      The RSL must be a single job request.</para></entry>
    </row>
    <row>
      <entry><command>-p</command></entry>
      <entry><para>This option only parses the RSL, and then prints either
        a
success message or a parser failure. No job
will be submitted to any factory service.</para>
        <para>      The RSL must be a single job request.</para></entry>
    </row>
    <row>
       <entry namest="c1" nameend="c2">Batch Operations options </entry>
    </row>
    <row>
      <entry><command>-b, -batch</command></entry>
      <entry><para>Do not wait for started
        job to complete (and
do not destroy started job service on exit.) 
The handle of the job service will be
printed on the standard output.
</para>
        <para>          This option is 
          incompatible with multi-request jobs. 
      Implies -quiet.</para></entry>
    </row>
    <row>
      <entry><command>-state &lt;handle&gt;</command></entry>
      <entry>Print out the state of the specified job. 
For a list of valid states, see the GRAM 
documentation [need link]; the current valid states are 
Pending, Active, Done, Suspended, and Failed. 
The handle may need to be quoted.</entry>
    </row>
    <row>
      <entry><command>-r, -release &lt;handle&gt; </command></entry>
      <entry><para>release the specified job from hold. The handle may need to be quoted.</para>
      </entry>
    </row>    
    <row>
      <entry><command>-k, -kill &lt;handle&gt; </command></entry>
      <entry><para>Kill the specified job. The handle may need to be quoted.</para>
      <para>Note: The &lt;handle&gt; argument is printed out
when executing in batch mode or when using
the -list option.</para>
      </entry>
    </row>
    <row>
       <entry namest="c1" nameend="c2">Job Resource Lifetime
          options </entry>
    </row>
    <row>
      <entry><command>-duration &lt;duration&gt;</command></entry>
      <entry><para>Specify the duration of the job resource. The job
  resource will destroy itself automatically
  after the specified duration starting from
  service creation.</para>
        <itemizedlist>
          <listitem><simpara> Format: HH:mm</simpara></listitem>
          <listitem><simpara> Default: 24 hours.</simpara></listitem>
        </itemizedlist>        <para>          Incompatible with -terminate-at. 
      Useful with -batch.</para></entry>
    </row>
    <row>
      <entry><command>-terminate-at &lt;date&gt;</command></entry>
      <entry><para>Specify the termination date/time of the job resource. 
  Same as -duration but with an absolute date/time value.</para>
        <itemizedlist>
          <listitem><simpara> Format: MM/dd/yyyy HH:mm</simpara></listitem>
          <listitem><simpara> Default: see -duration.</simpara></listitem>
        </itemizedlist>  
        <para>          The date expression may need to be quoted, 
        as in: </para>
        <screen>-terminate-at '08/15/2005 11:30'</screen>
        <para>          Incompatible with -duration. 
      Useful with -batch.</para></entry>
    </row>
    <row>
       <entry namest="c1" nameend="c2">Security options </entry>
    </row>
    <row>
      <entry><command>-auth &lt;auth&gt;</command></entry>
      <entry>Set authorization type.<para>
       Usually, secure communication includes 
      mutual authentication. In addition to the service authorizing the client for the 
      requested operation(s), an authorization decision is made by the client to determine 
      whether the remote service is the one intended. Depending on the configured authorization  
      type of the GRAM services (which by default is 'host'), the user must select a 
      corresponding client-side authorization type &lt;auth&gt;.</para>
        <para>&lt;auth&gt; can be:</para>
        <itemizedlist>
          <listitem><simpara> <emphasis>host</emphasis> for host authorization (default): the GSI "host authorization" rule is 
                  used to verify that the service is using a host credential appropriate 
                  for the underlying service address information. This is the default.</simpara></listitem>
          <listitem><simpara> <emphasis>self</emphasis> for self authorization: the GSI "self authorization" rule is used 
                  to verify that the service is using a (proxy) credential derived from the 
                  same identity as the client's.</simpara></listitem>
          <listitem><simpara>an &lt;id&gt; for identity authorization: the service must be using a credential 
                  with the exact subject name provided.</simpara></listitem>
        </itemizedlist></entry>
    </row>
    <row>
      <entry><command>-xmlsec &lt;sec&gt;</command></entry>
      <entry> <para>Set message protection level. </para>
        <para>&lt;sec&gt; can be:</para>
        <itemizedlist>
          <listitem><simpara> <emphasis>sig</emphasis> for XML Signature (default)</simpara></listitem>
          <listitem><simpara> <emphasis>enc</emphasis> for XML Encryption.</simpara></listitem>
        </itemizedlist></entry>
    </row>
    <row>
      <entry><command>-personal</command></entry>
      <entry>Shortcut for -auth self.</entry>
    </row>
    <row>
      <entry><command>-proxy &lt;proxy file&gt;</command></entry>
      <entry>Use &lt;proxy file&gt; instead of the default 
proxy credential file.</entry>
    </row>
    <row>
      <entry><command>-deleg &lt;deleg&gt;</command></entry>
      <entry> <para>Set delegation type. </para>
        <para>&lt;deleg&gt; can be:</para>
        <itemizedlist>
          <listitem><simpara> <emphasis>limited</emphasis> for limited delegation (default).</simpara></listitem>
          <listitem><simpara> <emphasis>full</emphasis> for full delegation</simpara></listitem>
          <listitem><simpara> <emphasis>none</emphasis> for no delegation</simpara></listitem>
        </itemizedlist></entry>
    </row>
    <row>
       <entry namest="c1" nameend="c2">Miscellaneous options </entry>
    </row>
    <row>
      <entry><command>-q, -quiet</command></entry>
      <entry><para>Switch quiet mode on, i.e. do not print diagnostic
        messages when job state changes, in non-batch mode.</para><para>
       Disabled by default.</para>
      </entry>
    </row>
    <row>
      <entry><command>-n, -no-interrupt</command></entry>
      <entry>Disable interrupt handling. By default,
interrupt signals (typically generated by
        <emphasis>Ctrl</emphasis> + <emphasis>C</emphasis>) cause the program to terminate the
currently submitted job. This flag disables
that behavior.</entry>
    </row>
    <row>
      <entry><command>-timeout &lt;integer&gt;</command></entry>
      <entry> <para>Set timeout for HTTP socket, in milliseconds.</para>
        <para>          Applies to job submission only. The default value is 120000.</para></entry>
    </row>
    <row>
      <entry><command>-submission-id &lt;ID&gt;</command></entry>
      <entry> <para>Set the submission ID of a previous job submission 
          for which no server response was received.</para><para>The ID can be used after 
          an attempted job submission in order to recover the handle to the job.</para></entry>
    </row>    
    <row>
       <entry namest="c1" nameend="c2">GT2 globusrun
          options NOT functional (yet)</entry>
    </row>
    <row>
      <entry><command>-l, -list</command></entry>
      <entry><para>NOT IMPLEMENTED ON SERVER SIDE YET.</para>
        <para>List previously started and not destroyed
          job services for this user. The output of 
          this command consists of the handles and RSL
        of the submitted jobs.</para>
        <para>      Requires the -factory &lt;URL&gt; argument.</para></entry>
    </row>
    <row>
      <entry><command>-dryrun</command></entry>
      <entry><para>NOT IMPLEMENTED ON SERVER SIDE YET.</para>
        <para>Augment the RSL in order to mark this job as
          a dry run, if the RSL does not already say
          so. This causes the job manager to stop
          short of starting the job, but still detect
          other RSL errors (such as bad directory,
          bad executable, etc). An error message will
        be displayed if the dry run fails.</para>
        <para>          Otherwise, a message will be displayed
      indicating that the dryrun was successful.</para></entry>
    </row>
    <row>
      <entry><command>-authenticate-only</command></entry>
      <entry>NOT IMPLEMENTED ON SERVER SIDE YET.</entry>
    </row>
  </tbody></tgroup>
</table>
</refsect2>
</refsect1>



<refsect1 id="newfunctionality"><title>New Functionality</title>

<refsect2 id="substitutionvariables"><title>Substitution variables</title>
<para>In GT 3.9.2, RSL substitution variables had been removed from GRAM. 
Starting with GT 3.9.5, substitution variables are available again, 
while preserving the simplicity of the job description XML schema 
(relatively to the GT3.2 RSL schema).
Susbtitution variables can be used in any path-like string or URL 
specified in the job description. They are special strings that are 
replaced by the GRAM services with actual values that the client-side 
does not <emphasis>a priori</emphasis> know. An example of substitution variable is 
<command>${GLOBUS_USER_HOME}</command>, which represents the path to the 
HOME directory on the file system visible by the GRAM services of the 
user on behalf of whom the job is executed.
</para>

<para> 
Details are in <ulink url="http://www-unix.globus.org/toolkit/docs/development/4.0-drafts/execution/wsgram/schemas/mjs_job_description.html">job description doc</ulink>
</para>

</refsect2><refsect2 id="submissionid"><title>Submission ID</title>
<para>A submission ID may be used in the GRAM protocol for robust
reliability in the face of message faults or other transient errors in order 
to ensure that at most one instance of a job is executed, i.e. to prevent
accidental duplication of jobs under rare circumstances with client
retry on failure. The managed-job-globusrun tool always uses this feature,
requiring either a submission ID to be passed in as input or a new
unique ID to be created by the tool itself. If a new ID is created, it
should be captured by the user who wishes to exploit this reliability
interface. The ID in use, whether created or passed as input, will be
written to the first line of standard output unless the <emphasis>quiet mode</emphasis> 
is in effect.</para>

<para>If a user is unsure whether a job was submitted successfully, he
should resubmit using the same ID as was used for the previous
attempt.</para>

</refsect2><refsect2 id="jobholdandrelease"><title>Job hold and release</title>
<para>
It is posible to specify in a job description that the job be 
put on hold when it reaches a chosen state (see <ulink url="../../key/WS_GRAM_Approach.html">GRAM Approach</ulink>
documentation for more information about the executable 
job state machine, and the job description XML schema documentation 
for information about how to specify a <ulink url="http://www-unix.globus.org/toolkit/docs/development/4.0-drafts/execution/wsgram/schemas/mj_types.html">held state</ulink>
This is useful for instance when a GRAM client wishes to directly 
access output files written by the job (as opposed to waiting for 
the stage-out step to transfer files from the job host). The client would  
request that the file cleanup process be held until released, 
giving the client an opportunity to fetch all remaining/buffered 
data after the job completes but <emphasis>before</emphasis> the output files are 
deleted. 
</para><para>
Note that the hold feature of the GRAM service interface is 
not exploited by the current Java version of the client tool, 
but will be in the C client in order to implement client-side 
streaming of remote stdout/err. 
</para><para>
The current client tool does however
<itemizedlist>
<listitem><simpara>automatically release a 
job remotely in interactive mode if the job is being held 
at any given state</simpara></listitem>
<listitem><simpara>offer an option (<command>-release</command>) for the user 
    to release a job previously submitted in batch mode.</simpara></listitem>
</itemizedlist>
</para>

</refsect2>

<refsect2 id="multijobs"><title>MultiJobs</title>
<para>The new job description XML schema allows for specification of a MultiJob 
i.e. a job that is itself composed of several executable jobs 
(those jobs cannot be multijobs, so the structure is not recursive). 
This is useful in order to bundle a group of jobs together and submit 
them as a whole to a remote GRAM installation.
</para><para>
Note that there is no 
specification of relationships between the executable jobs, which we will 
refer to as "subjobs". The subjobs are submitted to job factory services 
in their order of appearance in the multijob description.
</para>
</refsect2>

<refsect2 id="jobandprocessrendezvous"><title>Job and process rendezvous</title>
<para>This version of GRAM offers a mechanism to perform synchronization 
between job processes in a multiprocess job and between subjobs in a multijob. 
The job application can in fact register binary information, for 
instance process information or subjob information, and get notified when 
all the other processes or subjobs have registered their own information.
This is for instance useful for parallel jobs which need to rendezvous 
at a "barrier" before proceeding with computations, in the case when no 
native application API is available to help do the rendezvous.</para>
</refsect2>
</refsect1>

<refsect1 id="limitations"><title>Limitations</title>
<para>With the porting of existing GRAM functionality from OGSI to WSRF, 
this new version of the job submission tool suffers from a few limitations 
comparatively to previous versions of the tool.
These limitations will be dealt with in the next version of the tool, which 
will be implemented in C and thus will also be more performant.</para>

<refsect2 id="nofilestaginggass"><title>No more file staging using GASS</title>
<para>The GASS server is not being used anymore by GRAM, so the options 
-server and -write have been removed.  Instead, file staging is done in a
 reliable fashion via RFT and GridFTP servers.
<ulink url="#specifyingstaging">  file staging in GT 3.9.5 GRAM</ulink>
</para>
</refsect2><refsect2 id="nooutputredirection"><title>No standard output redirection yet</title>
<para>Unlike the GT3.2 managed-job-globusrun used with the option -output, 
this version of the tool does not offer any streamed redirection of 
the standard streams. This is because the GASS server is not used anymore 
by GRAM. Instead, a future version of the tool will allow for streaming 
of any server-side file (including the standard streams of the job 
execution) using GridFTP "tailing" of remote files.</para>

</refsect2><refsect2 id="nolistingsubmittedjobs"><title>No listing of submitted jobs yet</title>
<para>The -list option, which made the 3.2 tool print the identifiers of the jobs 
submitted by the user on the standard output, is not available in this version 
of the tool.</para>
</refsect2>
</refsect1>

<refsect1 id="toolbehavior"><title>Tool behavior for some features</title>

<refsect2 id="autojobresourcedestruction"><title>Tool-triggered automatic job resource destruction</title>
 <para>Execution errors and user interrupt events are handled by automatically
 destroying the requested job service(s), unless the -batch option
 is on the command-line. The -batch option prevents the tool from
 listening to job state changes and from waiting for the job to finish.
 If -batch is selected, the command will return as soon as the remote
 job has been submitted.</para>
 <para> The behavior of the tool with respect to job service destruction will vary
 in response to several kinds of events:</para>
 <itemizedlist>
 <listitem><simpara> The command exits normally after the job(s) finish(es), and destroys
      the job service(s) it requested. In batch mode, the requested job
      is never destroyed.</simpara></listitem>
  <listitem><simpara> The command is terminated in response to a user interrupt, such as
      typing <emphasis>Ctrl</emphasis> + <emphasis>C</emphasis>, or a system-wide event, such as user logoff or system
      shutdown. If the -no-interrupt option is on the command-line,
      and the command-line has been successfully parsed when the interrupt
      occurs, the tool does not destroy any job service(s) it requested.
      Otherwise the tool destroys the requested job service(s).</simpara></listitem>
  <listitem><simpara> In case of any error of execution, the command will exit and
      destroy the job(s) it successfully requested.</simpara></listitem>
 </itemizedlist>

<para>If the Java virtual machine of the tool aborts, that is, stops running without shutting down
 cleanly, for instance because it received a SIGKILL signal on Unix, then no
 guarantee can be made about whether or not the job service(s) will be
 destroyed.</para>
 <para>Note: the shutdown behavior explained above cannot be guaranteed if the JVM option -Xrs is entered.
 The recommended way to disable service destruction is to specify the -batch option on the command-line.</para>

</refsect2><refsect2 id="credentialdelegation"><title>Credential delegation</title>


<refsect3 id="singlejob"><title>Single job submission</title>
<para>managed-job-globusrun inserts references to newly delegated credentials in the job description 
before submitting it. In order to do so, it obtains endpoint references to resources representing 
delegated credentials by passing a proxy credential (user supplied or default) to the Globus 
delegation services. The resulting EPRs are then inserted in the job description before submission.
The possible elements where the EPR are added are: 
as the value of <command>jobCredentialEndpoint</command> and <command>stagingCredentialEndpoint</command>, 
in order to secure calls to the GRAM and RFT factories, and inside each individual RFT directive, 
i.e. inside the <command>fileStageIn</command>, <command>fileStageOut</command> and <command>fileCleanUp</command> 
elements.
See the <ulink url="../schemas/mjs_job_description.html">job description doc</ulink> 
for details about these attributes.
The Managed Executable Job uses the endpoints in the job description to fetch the credentials 
from the Delegation services and use them as needed on behalf of the job.
</para>

</refsect3><refsect3 id="multijob"><title>MultiJob submission</title>
<para><command>managed-job-globusrun</command> delegates full credentials to the delegation service 
for the multijob, then processes each single job as stated in the single 
job submission case. </para>
<para>If several subjobs are to use the same delegation service, then only 
one credential will be delegated to that delegation service, i.e. the same 
credential will be used for several jobs.</para>
</refsect3>
</refsect2>
</refsect1>

<refsect1 id="howtosubmit"><title>How to do common job submission tasks</title>

<refsect2 id="interactivemode"><title>Submitting a job in interactive mode</title>

<para>A very simple command-line can be used to submit a job. 
For instance, the following command-line submits a job 
to the GRAM services hosted on the same machine (assuming a 
Globus container is running of course):</para>

<screen>% bin/managed-job-globusrun "/bin/echo Testing 1...2...3"</screen>

<para>The output should look like:</para>
<screen>
Submission ID: uuid:661AA7F0-2573-11D9-99B2-D4755757F903
WAITING FOR JOB TO FINISH
========== State Notification ==========
Job State: Active
========================================
========== State Notification ==========
Job State: CleanUp
========================================
========== State Notification ==========
Job State: Done
========================================
Exit Code: 0
DESTROYING SERVICE
SERVICE DESTROYED
</screen>

<para><emphasis>Note:</emphasis> the job state notifications are printed in the order of arrival, but 
              they may arrive at the client-side in <emphasis>any order</emphasis>.</para>
<para>In this example the job description specifies the standard output 
stream path of the job to be: ${GLOBUS_USER_HOME}/stdout. The GRAM 
services replace the substitution variable ${GLOBUS_USER_HOME} 
with the path to the Home directory of the submitting user 
as seen by the machine were the invoked GRAM services are hosted.
You can thus verify the output of the job with the following 
command:</para>

<screen>% cat ~/stdout</screen>

<para>which will display the string:</para>

<screen>12 abc 34 pdscaex_instr_GrADS_grads23_28919.cfg pgwynnel was here</screen>

</refsect2><refsect2 id="batchmode"><title>Submitting a job in batch mode, checking its status
  and destroying the resource</title>

<para>To submit a job without having the client wait for job completion, 
specify the option <command>-batch</command> (or <command>-b</command>) on the command-line:</para>
<screen>
% bin/managed-job-globusrun -batch "/bin/echo Testing 1...2...3"
Warning: Will not wait for job completion, and will not destroy job service.
Submission ID: uuid:9C715240-26C7-11D9-850A-ABE2020F9ED6
CREATED MANAGED JOB SERVICE WITH HANDLE:
http://127.0.0.1:8080/wsrf/services/ManagedExecutableJobService?9C715240-26C7-11D9-850A-ABE2020F9ED6
</screen>

<para>To check the status of the job, use the -state option:</para>
<screen>
% bin/managed-job-globusrun 
-state 'http://127.0.0.1:8080/wsrf/services/ManagedExecutableJobService?9C715240-26C7-11D9-850A-ABE2020F9ED6'
Job State: Done
</screen>

<para>To destroy the job resource created on the server side, use the -kill option:</para>
<screen>
% bin/managed-job-globusrun 
-kill 'http://127.0.0.1:8080/wsrf/services/ManagedExecutableJobService?9C715240-26C7-11D9-850A-ABE2020F9ED6'
DESTROYING SERVICE
SERVICE DESTROYED
</screen>

</refsect2><refsect2 id="findingschedulers"><title>Finding which schedulers are interfaced by the WS GRAM installation</title>

<para>Unfortunately there is no option yet to print the list of local resource 
managers supported by a given GRAM service installation. 
Such information must currently be provided out of band to the user. The <emphasis>GRAM name</emphasis> 
of  local resource managers for which GRAM support has been installed can be obtained 
by looking at the GRAM configuration on the GRAM server-side machine, as explained <ulink url="http://www-unix.globus.org/toolkit/docs/development/4.0-drafts/execution/wsgram/WS_GRAM_Interface_Config_Frag.html#managerconfig">here</ulink>

The GRAM name of the local resource manager can be used with the <computeroutput>-type</computeroutput> 
option to specify which factory resource to use when submitting a job. 
For instance: 

<screen>
% bin/managed-job-globusrun -type Fork /bin/true
</screen>
will submit a <computeroutput>/bin/true</computeroutput> job to the <command>Fork</command> local resource manager 
(i.e. the command-line <computeroutput>/bin/true</computeroutput> will simply be executed as a newly spawn process)

<screen>
% bin/managed-job-globusrun -type LSF /bin/true
</screen>
will submit a <computeroutput>/bin/true</computeroutput> job to the LSF scheduler (if installed).

<screen>
% bin/managed-job-globusrun -type Multi -file simple_multi_job.xml
</screen>
where simple_multi_job.xml contains the description of a <ulink url="#specifyingmultijob">multijob</ulink> 
will submit a multi job to the <command>Multi ManagedJobFactory</command> resource.

</para>

</refsect2><refsect2 id="specifyingstaging"><title>Specifying file staging in the job description</title>
<para>
In order to do file staging one must add specific elements to the job description. The 
file transfer directives follow the RFT syntax <ulink url="http://www-unix.globus.org/toolkit/docs/development/4.0-drafts/data/rft/rft_job_description.html">RFT syntax</ulink>
,which enables third-party transfers.
Each file transfer must therefore specify a source URL and a destination URL.  
URLs are specified as GridFTP URLs (for remote files) or as file URLs (for local files).
</para><para>
For instance, in the case of staging a file <emphasis>in</emphasis>, the source URL would be a 
GridFTP URL (for instance <command>gsiftp://job.submitting.host:2888/tmp/mySourceFile</command>) 
resolving to a source document accessible on the file system of the job submission 
machine (for instance <command>/tmp/mySourceFile</command>). At run-time the 
Reliable File Transfer service used by the GRAM service on the remote machine 
would fetch the remote file using the GridFTP protocol and write it reliably 
to the specified local file (for instance 
<command>file:///${GLOBUS_USER_HOME}/my_transfered_file</command>, which resolves to  
<command>~/my_transfered_file</command>). Here is how the stage-in directive would look like:

<screen>
    &lt;fileStageIn&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;<command>gsiftp://job.submitting.host:2888/tmp/mySourceFile</command>&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;<command>file:///${GLOBUS_USER_HOME}/my_transfered_file</command>&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageIn&gt;
</screen> 

<emphasis>Note:</emphasis> additional RFT-defined quality of service requirements can be specified 
      for each transfer. See the RFT documentation for more information.
</para>
<para>
Here is an example job description with file stage-in and stage-out:

<screen>
&lt;job&gt;
    &lt;executable&gt;my_echo&lt;/executable&gt;
    &lt;directory&gt;${GLOBUS_USER_HOME}&lt;/directory&gt;
    &lt;argument&gt;Hello&lt;/argument&gt;
    &lt;argument&gt;World!&lt;/argument&gt;
    &lt;stdout&gt;${GLOBUS_USER_HOME}/stdout&lt;/stdout&gt;
    &lt;stderr&gt;${GLOBUS_USER_HOME}/stderr&lt;/stderr&gt;
    &lt;fileStageIn&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;gsiftp://job.submitting.host:2888/bin/echo&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;file:///${GLOBUS_USER_HOME}/my_echo&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageIn&gt;
    &lt;fileStageOut&gt;
        &lt;transfer&gt;
            &lt;sourceUrl&gt;file://${GLOBUS_USER_HOME}/stdout&lt;/sourceUrl&gt;
            &lt;destinationUrl&gt;gsiftp://job.submitting.host:2888/tmp/stdout&lt;/destinationUrl&gt;
        &lt;/transfer&gt;
    &lt;/fileStageOut&gt;
    &lt;fileCleanUp&gt;
        &lt;deletion&gt;
            &lt;file&gt;file://${GLOBUS_USER_HOME}/my_echo&lt;/file&gt;
        &lt;/deletion&gt;
    &lt;/fileCleanUp&gt;
&lt;/job&gt;
</screen>
</para>
<para>
The submission of this job to the GRAM services causes the following sequence 
of actions:
<orderedlist>
<listitem><simpara> The <command>/bin/echo</command> executable is transfered from the submission machine 
    to the GRAM host file system. The destination location is the HOME directory of the 
    user on behalf of whom the job is executed by the GRAM services 
    (see <command>&lt;fileStageIn&gt;</command>).</simpara></listitem>
<listitem><simpara> The transfered executable is used to print a test string  
     (see <command>&lt;executable&gt;</command>, <command>&lt;directory&gt;</command> and 
      the <command>&lt;argument&gt;</command> elements) on the standard output, which is 
      redirected to a local file (see <command>&lt;stdout&gt;</command>).</simpara></listitem>
<listitem><simpara> The standard output file is transfered to the submission machine 
     (see <command>&lt;fileStageOut&gt;</command>).</simpara></listitem>
<listitem><simpara> The file that was initially transfered during the stage-in phase is removed 
     from the file system of the GRAM installation (see <command>&lt;fileCleanup&gt;</command>).</simpara></listitem>
</orderedlist>
</para>


</refsect2><refsect2 id="specifyingmultijob"><title>Specifying and submitting a MultiJob</title>
<para>
Within the multijob description, each subjob description 
must come along with an endpoint for the factory to submit the subjob to. This 
enables the at-once submission of several jobs to different hosts.
The factory to which the multijob is submitted acts as an intermediary tier 
between the client and the eventual executable job factories. 
See the <ulink url="../schemas/mjs_job_description.html">job description schema documentation</ulink> for more information about multijob specification.
</para><para>
A multijob must be submitted to a <command>Multi</command> job factory resource:
<screen>
% bin/managed-job-globusrun -type Multi -file myMultiJob.xml
</screen>
A multijob resource is created by the factory and exposes a set of 
WSRF resource properties different than the resource properties of 
an executable job. The state machine of a multijob is also different 
since the multijob represents the overall execution of all the executable 
jobs it is composed of.
</para></refsect2>
</refsect1>

<refsect1 id="troubleshooting"><title>Troubleshooting</title>

<refsect2 id="jobexecution"><title>Job Execution Errors</title>
<para><ulink url="../schemas/mj_faults.html">fault types</ulink></para>
</refsect2>


<refsect2 id="commonissues"><title>Common issues</title>

<refsect3 id="expiredcreds"><title>Expired credentials</title>
<para><emphasis>Symptom:</emphasis> the client output shows an error related to expired credentials, 
as in:</para>
<screen>
Error: error submitting job request: ; nested exception is:
        javax.xml.rpc.soap.SOAPFaultException: Expired credentials 
        (O=Grid,OU=GlobusTest,OU=simpleCA.foo.bar.com,OU=bar.com,CN=John Doe,CN=1255793213).
</screen>
<para><emphasis>Solution:</emphasis> use the $GLOBUS_LOCATION/bin/grid-proxy-init tool to create a new proxy file:</para>
<screen>
% bin/grid-proxy-init
Your identity: /O=Grid/OU=GlobusTest/OU=simpleCA-foo.bar.com/OU=bar.com/CN=John Doe
Enter GRID pass phrase for this identity:
Creating proxy ................................. Done
Your proxy is valid until: Tue Oct 26 01:33:42 2004
</screen>

</refsect3><refsect3 id="sockettimeout"><title>Socket timeout error</title>
<para><emphasis>Symptom:</emphasis> the client output shows a timeout error when waiting for 
                the response from the GRAM service(s):</para>
<screen>
Error: error submitting job request: ; nested exception is:
        java.net.SocketTimeoutException: Read timed out
</screen>                

<para><emphasis>Solution:</emphasis> re-submit the job with a higher delay before HTTP socket timeout than the default. 
Use the<computeroutput>-timeout</computeroutput> option of <computeroutput>managed-job-globusrun</computeroutput>, as in:</para>
<screen>
% bin/managed-job-globusrun -timeout 240000 -f myJob.xml
</screen>

</refsect3><refsect3 id="postmasterexception"><title>Connection refused to postmaster</title>
<para><emphasis>Symptom:</emphasis> the server log and client output show exception stack traces 
                   with the following message:</para>
<screen>
Unable to create RFT Resource; nested exception is:
        org.apache.commons.dbcp.DbcpException: Connection refused. Check that the hostname 
        and port are correct and that the postmaster is accepting TCP/IP connections.
</screen>
<para>This error indicates a lack of configuration for RFT.
<emphasis>Solution:</emphasis> <ulink url="../../../data/rft/RFT_Interface_Config_Frag.html">See RFT Configuration Docs</ulink>
</para>

</refsect3><refsect3 id="gridmapentryneeded"><title>Lack of authorization for the user's Distinguished Name</title>
<para><emphasis>Symptom:</emphasis> the server log and client output show exception stack traces 
                   with the following message:</para>
<screen>
Error: error submitting job request: 
    org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException: 
    (pdp08) "/O=Grid/OU=GlobusTest/OU=simpleCA-foo.bar.com/OU=foo.bar.com/CN=John Doe" 
    is not authorized to use operation:
    {http://properties.impl.wsrf.globus.org}getMultipleResourceProperties on this service
</screen>
<para>
This error indicates a lack of authorization for the Distinguished Name (DN) reported 
in the error message. This means that according to the gridmap configuration for the 
toolkit, this user has not been authorized to call the operation reported in the 
error message.</para>
<para><emphasis>Solution:</emphasis> Add an entry for the user's DN to the gridmap file. See the 
<ulink url="../admin/index.html#gridmap">GRAM configuration documentation</ulink>

</para>

</refsect3><refsect3 id="filesnotfound"><title>File(s) Not Found warnings</title>
<para><emphasis>Symptom:</emphasis> the server LOG displays messages at WARN severity such as:</para>
<screen>
[Thread-3] WARN  factory.ManagedJobFactoryResource [getRestartTimestamp:187] 
    java.io.FileNotFoundException: /software/globus/gt4/rc3.9.5/var/globus-jsm-fork.stamp (No such file or directory)
[Thread-3] WARN  factory.ManagedJobFactoryResource [getRestartTimestamp:187] 
    java.io.FileNotFoundException: /software/globus/gt4/rc3.9.5/var/globus-jsm-multi.stamp (No such file or directory)
[Thread-2] WARN  utils.XmlPersistenceHelper [load:185] [CORE] File 
    /nfs/v5/alain/.globus/persisted/128.9.72.67/ManagedExecutableJobResourceStateType/897BC6E0-26CA-11D9-8D59-FF280F77E689.xml
    for resource {http://www.globus.org/namespaces/2004/10/gram/job}ResourceID=897BC6E0-26CA-11D9-8D59-FF280F77E689 
    was not found
</screen>
<para><emphasis>Solution:</emphasis> the log messages above are harmless and are not indicative of any problem in the 
behavior of the GRAM service. They can be ignored.</para>
</refsect3>
</refsect2>


<refsect2 id="knownproblems"><title>Known problems</title>

<refsect3 id="hangingclient"><title>Client Hanging Forever</title>
<para><emphasis>Symptom:</emphasis> in interactive (i.e. non-batch) mode, the managed-job-globusrun client 
            seems to be stuck waiting for additional job state notifications.</para>
<para><emphasis>Solution:</emphasis> This is a known problem which can happen sometimes.</para>

<para>Possible solution: remove the timestamp files in $GLOBUS_LOCATION/var:</para>
<screen>
% rm var/globus-jsm-*.stamp
</screen>
<para>Restart the container.</para>
<para>If you decide to report the issue, please provide the job description 
and submission command-line as well as a full server-side GRAM log 
so we can determine the cause of the problem:</para>
<orderedlist>
<listitem><simpara>Edit $GLOBUS_LOCATION/log4j.properties to add <command>exec=DEBUG</command>.</simpara></listitem>
<listitem><simpara>Restart container and execute the same job submission command-line.</simpara></listitem>
<listitem><simpara>Submit full GRAM server LOG to support list.</simpara></listitem>
</orderedlist>
</refsect3><refsect3 id="NotRegisteredException"><title>NotRegisteredException ERROR log message</title>
<para><emphasis>Symptom:</emphasis> the following message appears in the server log:</para>
<screen>
[Thread-7] ERROR jobmanager.JobManager [unsubscribeForNotifications:1762] unable to stop monitoring job for state changes
org.globus.exec.monitoring.NotRegisteredException
	at org.globus.exec.monitoring.JobStateMonitor.unregisterJobID(JobStateMonitor.java:375)
	at org.globus.exec.service.job.jobmanager.JobManager.unsubscribeForNotifications(JobManager.java:1758)
	at org.globus.exec.service.job.jobmanager.JobManager.processState(JobManager.java:1274)
	at org.globus.exec.service.job.jobmanager.RunQueue.run(RunQueue.java:75)
</screen>

<para><emphasis>Solution:</emphasis> this is typically harmless and can be ignored.</para>
</refsect3>
</refsect2>
</refsect1>
</refentry>



