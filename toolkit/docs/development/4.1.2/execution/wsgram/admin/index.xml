<title>GT 4.0 WS GRAM : System Administrator's Guide</title>
<titleabbrev> System Administrator's Guide</titleabbrev>
 
<section id="s-wsgram-admin-introduction"><title>Introduction</title>

<para>This guide contains advanced configuration information
  for system administrators working with WS GRAM. It provides references to
  information on procedures typically performed by system administrators,
  including installation, configuring, deploying, and testing the
  installation. It also describes additional prerequisites and host settings
  necessary for WS GRAM operation. Readers should be familiar with the
  <ulink url="http://www.globus.org/toolkit/docs/4.0/execution/key/index.html">Key Concepts</ulink> and
  <ulink url="http://www.globus.org/toolkit/docs/4.0/execution/key/WS_GRAM_Approach.html">Implementation Approach</ulink>
  for WS GRAM to understand the motivation for and interaction between the
  various deployed components.
</para>


  <important>
 <simpara> The information in this WS GRAM Admin Guide is in addition to the basic Globus Toolkit prerequisite, 
   overview, installation, security configuration instructions in the <ulink url="http://www.globus.org/toolkit/docs/4.0/admin/docbook/">GT 4.0 System Administrator's Guide</ulink>.  
    Read through this guide before continuing!</simpara>  
  </important>

</section>
<!-- introduction -->

<section id="s-wsgram-admin-installing"><title>Building and Installing</title>
  <para>WS GRAM is built and installed as part of
    a default GT 4.0 installation. For basic installation instructions, see the
    <ulink url="http://www.globus.org/toolkit/docs/4.0/admin/docbook/">GT 4.0 System Administrator's Guide</ulink>.</para>
  
<section id="s-wsgram-admin-installing-req"><title>Installation Requirements</title>

<!-- transport level security -->
<section id="s-wsgram-admin-security"><title>Transport Level Security (TLS)</title>
<para>
  In order to use WS GRAM, the container must be started with Transport Level
  security.  The "-nosec" option should *not* be used with
  <computeroutput>globus-start-container</computeroutput>.
</para>
</section>

<!-- sudo -->
<section id="s-wsgram-admin-sudo"><title>Functioning sudo</title> <para>
  WS GRAM requires that the <glossterm linkend="sudo">sudo</glossterm> command is
  installed and functioning on the service host where WS GRAM software will
  execute.
</para>
<para>
  Authorization rules will need to be added to the
  <computeroutput>sudoers</computeroutput> file to allow the WS GRAM service
  account to execute (without a password) the <glossterm linkend="scheduler-adapter">scheduler adapter</glossterm> in the
  accounts of authorized GRAM users.  For configuration details, see the
  <link linkend="s-wsgram-admin-configsudo">Configuring sudo</link> section.
</para>
<para>
   Platform Note: On AIX, sudo is not installed by default, but it is available as source and rpm here: 
  <ulink url="http://www-1.ibm.com/servers/aix/products/aixos/linux/download.html">AIX 5L Toolbox for Linux Applications</ulink>
</para>
</section>

<!-- local scheduler -->
<section id="s-wsgram-admin-localscheduler"><title>Local Scheduler</title>
<para> 
  WS GRAM depends on a local mechanism for starting and controlling jobs.
  Included in the WS GRAM software is a Fork <glossterm linkend="scheduler">scheduler</glossterm>, which requires no
  special software installed to execute jobs on the local host.  However, to
  enable WS GRAM to execute and manage jobs to a <glossterm linkend="batch-scheduler">batch scheduler</glossterm>, the scheduler
  software must be installed and configured prior to configuring WS GRAM.
</para>
</section>

<!-- scheduler adapters -->
<section id="s-wsgram-admin-schedulerAdpaters"><title>Scheduler Adapter</title>
  <para>  WS GRAM depends on scheduler adapters to translate the WS GRAM <glossterm linkend="job-description">job description</glossterm>
  document into commands understood by the local scheduler, as well as monitor
  the jobs.</para>
  <para>
    Scheduler adapters included in the GT 4.0 release are:
  <ulink url="http://www.openpbs.org/">PBS</ulink>,
  <ulink url="http://www.cs.wisc.edu/condor/">Condor</ulink>,
  <ulink url="http://www.platform.com/Products/Platform.LSF.Family/Platform.LSF/">LSF</ulink>
  </para>

  <para>
     Third party schedulers adapters available for GT 4.0 are: <ulink url="http://www.lesc.ic.ac.uk/projects/SGE-GT4.html">Sun Grid Engine</ulink>
  </para>

  <para>
    For configuration details, see the
  <link linkend="s-wsgram-admin-configuringscheduleradapters">Configuring scheduler adapters</link> section.
  </para>

</section>

<!-- GridFTP -->
<section id="s-wsgram-admin-gridftp"><title>GridFTP</title>
<para> 
  Though staging directives are processed by RFT (see next section), RFT
  uses GridFTP servers underneath to do the actual data movement. As a
  result, <emphasis>there must be at least one GridFTP server that shares a
  file system with the execution nodes</emphasis>.  There is no special process
  to get staged files onto the execution node before the job executable is run.

  See the
  <ulink url="s-wsgram-admin-nondefaultgridftp">Non-default GridFTP server</ulink>
  section of this admin guide for details on how to configure WS GRAM for your
  GridFTP servers used in your execution environment.
</para>
</section>

<!-- RFT -->
<section id="s-wsgram-admin-rft"><title>Reliable File Transfer Service (RFT)</title>
<para> 
  WS GRAM depends on RFT to perform file staging and cleanup directives in 
  a job description.  For configuration details, see the
  <ulink url="http://www.globus.org/toolkit/docs/4.0/data/rft/admin-index.html">RFT admin guide</ulink>

  <emphasis>Important:</emphasis> Jobs requesting these functions will fail if
  RFT is not properly setup.
</para>
</section>
  <!-- RFT -->

</section>
<!-- Installation Requirements -->
</section>
<section id="s-wsgram-admin-configuring"><title>Configuring </title>
<section id="s-wsgram-admin-configuring-typical"><title>Typical Configuration</title>

<section id="s-wsgram-admin-configsudo"><title>Configuring sudo</title>
<para>When the credentials of the service account and the job submitter are different
  (multi user mode), then GRAM will prepend a call to sudo to the local adapter
  callout command. <emphasis>Important:</emphasis> If sudo is not configured properly, the command
  and thus job will fail.</para>
<para>
  As <emphasis>root</emphasis>, here are the two lines to add to the
  /etc/sudoers file for each GLOBUS_LOCATION installation, where
  /opt/globus/GT4.0.0 should be replaced with the GLOBUS LOCATION for your
  installation:
<screen># Globus GRAM entries
   globus  ALL=(username1,username2) 
           NOPASSWD: /opt/globus/GT4.0.0/libexec/globus-gridmap-and-execute 
           -g /etc/grid-security/grid-mapfile
           /opt/globus/GT4.0.0/libexec/globus-job-manager-script.pl *
   globus  ALL=(username1,username2) 
           NOPASSWD: /opt/globus/GT4.0.0/libexec/globus-gridmap-and-execute 
           -g /etc/grid-security/grid-mapfile
           /opt/globus/GT4.0.0/libexec/globus-gram-local-proxy-tool *
</screen>

</para>
<para>
  The <computeroutput>globus-gridmap-and-execute</computeroutput> program is
  used to ensure that GRAM only runs programs under accounts that are in the
  grid-mapfile.  In the sudo configuration, it is the first program called.
  It looks up the account in the grid-mapfile and then runs the requested 
  command.  It is redundant if sudo is properly locked down.  This tool 
  could be replaced with your own authorization program.
</para>
</section>
  <!-- Configuring sudo -->

<section id="s-wsgram-admin-configuringscheduleradapters"><title>Configuring Scheduler Adapters</title>
<para>
  The WS GRAM scheduler adapters included in the release tarball
  are: <glossterm linkend="pbs">PBS</glossterm>, <glossterm linkend="condor">Condor</glossterm> and <glossterm linkend="lsf">LSF</glossterm>. To install, follow these steps (shown for pbs):

<screen>    % cd $GLOBUS_LOCATION\gt4.0.0-all-source-installer

    % make gt4-gram-pbs

    % make install

</screen>
</para>
<para>
  Using PBS as the example, make sure the scheduler commands are in your
  path (qsub, qstat, pbsnodes).
</para>
<para> For PBS, another setup step is required to configure the remote shell for
  rsh access: 

<screen>

    % cd $GLOBUS_LOCATION/setup/globus

    % ./setup-globus-job-manager-pbs --remote-shell=rsh

</screen>
</para>
<para>
  The last thing is to define the <link linkend="s-wsgram-Interface_Config_Frag-filesysmap">GRAM 
    and GridFTP file system mapping</link> for PBS.  A default
  mapping in this file is created to allow simple jobs to run.  However, the
  actual file system mappings for your compute resource should be entered to
  ensure:
    <itemizedlist>
       <listitem><para>files staging is performed correctly
            </para>
       </listitem>
       <listitem><para>
            jobs with erroneous file path directives are rejected</para>
       </listitem>
    </itemizedlist>
</para>
<para>
  Done! You have added the PBS scheduler adapters to your GT installation.
</para>
<para>
    Note for future GT builds with scheduler adapters: scheduler adapters can
    be enabled by adding --enable-wsgram-pbs to the configure line when
    building the entire toolkit.
<screen>
    % configure --prefix=$GLOBUS_LOCATION --enable-wsgram-pbs ...
    % make
    % make install
</screen>
</para>
</section>
  <!-- enabling scheduler adapters -->

</section>
<!-- Typical Configuration -->

<section id="s-wsgram-admin-configuring-nondefault"><title>Non-default Configuration</title>

<section id="s-wsgram-admin-userproxy"><title>Non-default Credentials</title>
<para>
  To run the container using just a user proxy, instead of host creds,
  edit the
  <computeroutput>$GLOBUS_LOCATION/etc/globus_wsrf_core/global_security_descriptor.xml</computeroutput>
  file, and either comment out the credentials section...
<screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;securityConfig xmlns="http://www.globus.org"&gt;
    &lt;!--
    &lt;credential&gt;
        &lt;key-file value="/etc/grid-security/containerkey.pem"/&gt;
        &lt;cert-file value="/etc/grid-security/containercert.pem"/&gt;
    &lt;credential&gt;
    --&gt;
    &lt;gridmap value="/etc/grid-security/grid-mapfile"/&gt;
&lt;securityConfig&gt;
</screen>
  or replace the credentials section with a proxy file location...
<screen>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;securityConfig xmlns="http://www.globus.org"&gt;
    &lt;proxy-file value="&lt;PATH TO PROXY FILE&gt;"/&gt;
    &lt;gridmap value="/etc/grid-security/grid-mapfile"/&gt;
&lt;securityConfig&gt;
</screen>
  Running in personal mode (user proxy), another GRAM configuration setting
  is required. For GRAM to authorize the RFT service when performing
  staging functions, it needs to know the subject DN for verification. Here are
  the steps:
<screen>
	% cd $GLOBUS_LOCATION/setup/globus
	% ./setup-gram-service-common --staging-subject=
         "/DC=org/DC=doegrids/OU=People/CN=Stuart Martin 564720"
      </screen>
You can get your subject DN by running this command:
<screen>
	% grid-cert-info -subject
</screen>
</para>
</section>
  <!-- Non-default Credentials -->

<section id="s-wsgram-admin-nondefaultgridftp"><title>Non-default GridFTP server </title>
<para>
  By default, the GridFTP server is assumed to run as root on localhost:2811.
  If this is not true for your site then change it by editing the GridFTP host
  and/or port in the <link linkend="s-wsgram-Interface_Config_Frag-filesysmap">GRAM and GridFTP file system mapping</link> config file: <computeroutput>$GLOBUS_LOCATION/etc/gram-service/globus_gram_fs_map_config.xml</computeroutput>.
</para>

</section>
  <!-- Non-default GridFTP server -->

<section id="s-wsgram-admin-nondefaultcontainerport"><title>Non-default container port</title>
<para>
  By default, the globus services will assume 8443 is the port the Globus
  container is using.  However the container can be run under a non-standard
  port, for example:
<screen>
	% globus-start-container -p 4321
</screen>
</para>
</section>
  <!-- Non-default container port -->

<section id="s-wsgram-admin-nondefaultgridmap"><title>Non-default gridmap</title>
<para>
  If you wish to specify a non-standard gridmap file in a multi-user
  installation, two basic configurations need to be changed:</para>

<itemizedlist>
    <listitem><para>$GLOBUS_LOCATION/etc/globus_wsrf_core/global_security_descriptor.xml
      <itemizedlist><listitem><simpara>As specified in the <ulink url="http://www.globus.org/toolkit/docs/4.0/security/authzframe/security_descriptor.html#s-authzframe-secdesc-configGridmap">gridmap config</ulink> instructions, add a &lt;gridmap value="..."/&gt;
                element to the file appropriately.</simpara></listitem>
	</itemizedlist>
    </para></listitem>

    <listitem><para>/etc/sudoers
        <itemizedlist>
            <listitem><para>Change the file path after all -g options<screen>-g /path/to/grid-mapfile</screen>.
            </para></listitem>
        </itemizedlist>
    </para></listitem>
</itemizedlist>

<para>
Example:

<emphasis>global_security_descriptor.xml</emphasis>
<screen>
    ...

    &lt;gridmap value="/opt/grid-mapfile"/&gt;

    ...
</screen>
<emphasis>sudoers</emphasis>
<screen>
   ...

   # Globus GRAM entries
   globus  ALL=(username1,username2) 
           NOPASSWD: /opt/globus/GT4.0.0/libexec/globus-gridmap-and-execute 
           -g /opt/grid-mapfile
           /opt/globus/GT4.0.0/libexec/globus-job-manager-script.pl *
   globus  ALL=(username1,username2) 
           NOPASSWD: /opt/globus/GT4.0.0/libexec/globus-gridmap-and-execute 
           -g /opt/grid-mapfile
           /opt/globus/GT4.0.0/libexec/globus-gram-local-proxy-tool *

    ...
</screen>
</para>
</section>
  <!-- Non-default gridmap file -->

<section id="s-wsgram-admin-nondefaultrft"><title>Non-default RFT deployment</title>
<para>
RFT is used by GRAM to stage files in and out of the job execution environment.
In the default configuration, RFT is hosted in the same container as GRAM and
is assumed to have the same service path and standard service names. This need
not be the case.  For example, the most likely alternative scenario is that RFT
would be hosted seperately in a container on a different machine.  In any case,
both the RFT and the Delegation Service endpoints need to be adjustable to allow
this flexibility.  The following options can be passed to the
<emphasis>setup-gram-service-common</emphasis> script to affect these settings:
</para>
<screen>
	--staging-protocol=&lt;protocol&gt;
	--staging-host=&lt;host&gt;
	--staging-port=&lt;port&gt;
	--staging-service-path=&lt;RFT and Delegation factory service path&gt;
	--staging-factory-name=&lt;RFT factory service name&gt;
	--staging-delegation-factory-name=&lt;name of Delegation factory service used by RFT&gt;
</screen>
<simpara>for example</simpara>
<screen>
    % setup-gram-service-common \
        --staging-protocol=http
        --staging-host=somemachine.fakedomain.net
        --staging-port=8444
        --staging-service-path=/tomcat/services/
        --staging-factory-name=MyReliableFileTransferFactoryService
        --staging-delegation-factory-name=MyDelegationFactoryServiceForRFT
</screen>
<simpara>will internally cause the GRAM service code to construct the following
EPR addresses:</simpara>
<screen>
http://somemachine.fakedomain.net:8444/tomcat/services/MyReliableFileTransferFactoryService

http://somemachine.fakedomain.net:8444/tomcat/services/MyDelegationFactoryServiceForRFT
</screen>
</section> 
  <!-- Non-default RFT deployment -->

</section>
<!-- Non-default Configuration -->
</section>

<section id="s-wsgram-admin-deploying"><title>Deploying </title>
  <para>WS GRAM is deployed as part of a standard toolkit installation. 
    Please refer to  the <ulink url="http://www.globus.org/toolkit/docs/4.0/admin/docbook/">GT 4.0 System Administrator's Guide</ulink> for details.</para>

<section id="s-wsgram-admin-deploying-tomcat"><title>Deploying in Tomcat</title>
<para>WS GRAM has been tested to work without any additional setup steps
when deployed into Tomcat.  Please see the
Java WS Core admin guide section on
  <ulink url="http://www.globus.org/toolkit/docs/4.0/common/javawscore/admin-index.html#javawscore-admin-tomcat-deploying">deploying GT4 services into Tomcat</ulink> for
instructions.  Also, for details on tested containers, see the
<ulink url="WS_GRAM_Release_Notes.html#s-wsgram-Release_Notes-testedplatforms">WS GRAM release notes</ulink>.</para>
<note><simpara>Currently only a single deployment is supported because of a
limitation in the execution of the Scheduler Event Generator.  One must set
GLOBUS_LOCATION before starting Tomcat.</simpara></note>

</section>

</section>

<section id="s-wsgram-admin-extensions"><title>Job Description Extensions Support</title>

<para>
The WS-GRAM job description schema includes a section for extending the job
description with custom elements.  To make sense of this in the resource
manager adapter Perl scripts, a Perl module named
Globus::GRAM::ExtensionsHandler is provided to turn these custom elements into
paramters that the adapter scripts can understand.  Since this feature was
added after the release of GT 4.0.0, an update package is available to upgrade
one's installation. See the <ulink url="http://www.globus.org/toolkit/downloads/development/">downloads</ulink> page for the latest links.
</para>

<para>
It should be noted that although non-GRAM XML elements only are allowed 
in the <computeroutput>&lt;extensions&gt;</computeroutput> element of the job
description, the extensions handler makes no distinction based on namespace.
Thus, <computeroutput>&lt;foo:myparam&gt;</computeroutput> and 
<computeroutput>&lt;bar:myparam&gt;</computeroutput> will both be treated as
just <computeroutput>&lt;myparam&gt;</computeroutput>.
</para>

<para>
Familiarity with the adapter scripts is assumed in the following sub-sections.
</para>

<section id="s-wsgram-admin-extensions-constructs"><title>Supported Extension Constructs</title>

<section id="s-wsgram-admin-extensions-constructs-simple"><title>Simple String Parameters</title>
<para>
Simple string extension elements are converted into single-element arrays with
the name of the unqualified tag name of the extension element as the array's
key name in the Perl job description hash. Simple string extension elements can
be considered a special case of the string array construct in the next section.
</para>

<para>
For example, adding the following element to the
<computeroutput>&lt;extensions&gt;</computeroutput> element of the job
description as follows:
</para>

<para>
<literallayout><computeroutput>
    &lt;extensions&gt;
        &lt;myparam&gt;yahoo!&lt;/myparam&gt;
    &lt;/extensions&gt;
</computeroutput></literallayout>
</para>

<para>
will cause the <computeroutput>$description->myparam()</computeroutput> to
return the following value:
</para>

<para>
<literallayout><computeroutput>
    'yahoo!'
</computeroutput></literallayout>
</para>
</section>

<section id="s-wsgram-admin-extensions-constructs-array"><title>String Array Parameters</title>
<para>
String arrays are a simple iteration of the simple string element construct.
If you specify more than one simple string element in the job description, these
will be assembled into a multi-element array with the unqualified tag name of
the extension elements as the array's key name in the Perl job description hash.
</para>

<para>
For example:
</para>

<para>
<literallayout><computeroutput>
    &lt;extensions&gt;
        &lt;myparams&gt;Hello&lt;/myparams&gt;
        &lt;myparams&gt;World!&lt;/myparams&gt;
    &lt;/extensions&gt;
</computeroutput></literallayout>
</para>

<para>
will cause the <computeroutput>$description->myparams()</computeroutput> to
return the following value:
</para>

<para>
<literallayout><computeroutput>
    [ 'Hello', 'World!' ]
</computeroutput></literallayout>
</para>
</section>

<section id="s-wsgram-admin-extensions-constructs-namevalue"><title>Name/Value Parameters</title>
<para>
Name/value extension elements can be thought of as string arrays with an XML
attribute 'name'.  This will cause the creation of a two-dimensional array with
the unqualified extension element tag name as the name of the array in the
Perl job description hash.
</para>

<para>
For example:
</para>

<para>
<literallayout><computeroutput>
    &lt;extensions&gt;
        &lt;myvars name="pi"&gt;3.14159&lt;/myvars&gt;
        &lt;myvars name="mole"&gt;6.022 x 10^23&lt;/myvars&gt;
    &lt;/extensions&gt;
</computeroutput></literallayout>
</para>

<para>
will cause the <computeroutput>$description->myvars()</computeroutput> to
return the following value:
</para>

<para>
<literallayout><computeroutput>
    [ [ 'pi', '3.14159'], ['mole', '6.022 x 10^23'] ]
</computeroutput></literallayout>
</para>
</section>

<section id="s-wsgram-admin-extensions-constructs-nodes"><title>PBS Node Selection Parameters</title>
<para>
In addition to the <computeroutput>globus_gram_job_manager</computeroutput>
update package, the
<computeroutput>globus_gram_job_manager_setup_pbs</computeroutput>
update package is required to take advantage of the PBS node selection
extensions.
</para>

<para>
Node selection constraints in PBS can be specified in two ways, generally using
a construct intended to eventually apply to all resource managers which support
node selection, or explicitly by sepcifiying a simple string element. The former
will be more portable, but the later will appeal to those familiar with
specifying node constraints for PBS jobs.
</para>

<para>
To specify PBS node selection constraints explicitly, one can simply constuct
a single, simple string extension element named
<computeroutput>nodes</computeroutput> with a value that conforms to the
<computeroutput>#PBS -l nodes=...</computeroutput> PBS job description
directive. The Globus::GRAM::ExtensionsHandler module will make this available
to the PBS adapter script by invoking
<computeroutput>$description->{nodes}</computeroutput>.  The updated PBS
adapter package checks for this value and will create a directive in the PBS
job description using this value.
</para>

<para>
To use the generic construct for specifying node selection constraints, use the
<computeroutput>resourceAllocationGroup</computeroutput> element:
</para>

<para>
<literallayout><computeroutput>
    &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
            &lt;!-- Optionally select hosts by type and number... --&gt;
            &lt;hostType&gt;...&lt;/hostType&gt;
            &lt;hostCount&gt;...&lt;/hostCount&gt;

            &lt;!-- *OR* by host names --&gt;

            &lt;hostName&gt;...&lt;/hostName&gt;
            &lt;hostName&gt;...&lt;/hostName&gt;
            . . .


            &lt;!-- With a total CPU count for this group... --&gt;
            &lt;cpuCount&gt;...&lt;/cpuCount&gt;

            &lt;!-- *OR* an explicit number of CPUs per node... --&gt;
            &lt;cpusPerNode&gt;...&lt;/cpusPerNode&gt;
            . . .


            &lt;!-- And a total process count for this group... --&gt;
            &lt;processCount&gt;...&lt;/processCount&gt;

            &lt;!-- *OR* an explicit number of processes per node... --&gt;
            &lt;processesPerNode&gt;...&lt;/processesPerNode&gt;
        &lt;/resourceAllocationGroup&gt;
    &lt;/extensions&gt;
</computeroutput></literallayout>
</para>

<para>
Extension elements specified according to the above pseudo-schema will be
converted to an appropriate <computeroutput>nodes</computeroutput> parameter
which will be treated as if an explicit <computeroutput>nodes</computeroutput>
extension element were specified.
Multiple <computeroutput>resourceAllocationGroup</computeroutput> elements
may be specified.  This will simply append the constraints to the
<computeroutput>nodes</computeroutput> paramater with a '+' separator.
Note that one cannot specify both hostType/hostCount and hostName elements.
Similarly, one cannot specify both processCount and processesPerNode elements.
</para>

<para>
Here are some examples of using
<computeroutput>resourceAllocationGroup</computeroutput>:
</para>

<para>
<literallayout><computeroutput>
    &lt;!-- #PBS -l nodes=1:ppn=10 --&gt;
    &lt;!-- 10 processes --&gt;
    &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
            &lt;cpuCount&gt;10&lt;/cpuCount&gt;
            &lt;processCount&gt;10&lt;/processCount&gt;
        &lt;/resourceAllocationGroup&gt;
    &lt;/extensions&gt;

    &lt;!-- #PBS -l nodes=activemural:ppn=10+5:ia64-compute:ppn=2 --&gt;
    &lt;!-- 1 process (process default) --&gt;
    &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
            &lt;hostType&gt;activemural&lt;/hostType&gt;
            &lt;cpuCount&gt;10&lt;/cpuCount&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;resourceAllocationGroup&gt;
            &lt;hostType&gt;ia64-compute&lt;/hostType&gt;
            &lt;hostCount&gt;5&lt;/hostCount&gt;
            &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
        &lt;/resourceAllocationGroup&gt;
    &lt;/extensions&gt;

    &lt;!-- #PBS -l nodes=vis001:ppn=5+vis002:ppn=5+comp014:ppn=2+comp015:ppn=2 --&gt;
    &lt;!-- 15 total processes --&gt;
    &lt;extensions&gt;
        &lt;resourceAllocationGroup&gt;
            &lt;hostName&gt;vis001&lt;/hostName&gt;
            &lt;hostName&gt;vis002&lt;/hostName&gt;
            &lt;cpuCount&gt;10&lt;/cpuCount&gt;
            &lt;processesPerHost&gt;5&lt;/processesPerHost&gt;
        &lt;/resourceAllocationGroup&gt;
        &lt;resourceAllocationGroup&gt;
            &lt;hostName&gt;comp014&lt;/hostName&gt;
            &lt;hostName&gt;comp015&lt;/hostName&gt;
            &lt;cpusPerHost&gt;2&lt;/cpusPerHost&gt;
            &lt;processCount&gt;5&lt;/processCount&gt;
        &lt;/resourceAllocationGroup&gt;
    &lt;/extensions&gt;
</computeroutput></literallayout>
</para>

</section>

</section>

<section id="s-wsgram-admin-extensions-customizing"><title>Customizing Extensions Support</title>
<para>
Two Perl modules will have to be edited to customize extensions support. The
first is <computeroutput>ExtensionsHandler.pm</computeroutput>. This is where
the WS-GRAM job description XML of the
<computeroutput>extensions</computeroutput> element is parsed and entries are
added or appended to the Perl job description hash. The second module that needs
to be edited is the particular resource manager adapter module that will use any
new hash entries to either alter it's behavior or create additional parameters
in the resource manager job description.
</para>

<section id="s-wsgram-admin-extensions-customizing-handler"><title>Customizing ExtensionsHandler.pm</title>
<para>
For starters, this module logs various things to the log file specified in the
<computeroutput>logfile</computeroutput> extension element. If you place this
element at the start of the extensions you are creating support for, then you
can look at the specified log file to get some idea of what the handler is
doing.  You can add new logging lines by using the
<computeroutput>$self->log()</computeroutput> function.  This simply takes a
string that gets appended to the log file with a prefix of
"<computeroutput>&lt;date string&gt; EXTENSIONS HANDLER:</computeroutput>".
</para>

<para>
There are three main subroutines that are used to handle parsing events and
process them accordingly:
<computeroutput>Char(), StartTag(),</computeroutput> and
<computeroutput>EndTag()</computeroutput>.
More handlers can be specified for other specific events when creating the
<computeroutput>XML::Parser</computeroutput> instance in
<computeroutput>new()</computeroutput> (see the
<ulink url="http://search.cpan.org/~coopercl/XML-Parser-2.31/Parser.pm">
XML::Parser</ulink> documentation for details). Descriptions of what the three
main subroutines do currently are layed out bellow.  Modify the subroutines as
neccesary to achieve your goal.
</para>

<para>
<computeroutput>Char()</computeroutput> doesn't do anything but collect CDATA
found between the current element start and end tags. You can access the CDATA
for the current element by using
<computeroutput>$self->{CDATA}</computeroutput>.
</para>

<para>
<computeroutput>StartTag()</computeroutput> is responsible for collecting the
attributes associated with the element.  It also increments the counter which
keeps track of the number of child elements to the current extension element,
and pushes the current element name onto the
<computeroutput>@scope</computeroutput> queue for later use.
</para>

<para>
<computeroutput>EndTag()</computeroutput> is used for taking the CDATA collected
by Char() and creating new Perl job description hash entries.  This is most
likely where you will need to do most of your work when adding support for new
extension elements. Two useful variables are
<computeroutput>$currentScope</computeroutput> and
<computeroutput>$parentScope</computeroutput>.  These indicate the current
element that is being parsed and the parent of the element being parsed
respectively.  This is useful for establishing a context from which to work
from.  The <computeroutput>@scope</computeroutput> queue is poped at the end of
this subroutine.
</para>
</section>

<section id="s-wsgram-admin-extensions-customizing-adapter"><title>Customizing the Adapter Module</title>
<para>
There is not much to say here.  Each adapter is different.  Spend some time
trying to understand what the adapter does and then make and test your changes.
Any new hash entries you created in
<computeroutput>ExtensionsHandler.pm</computeroutput> can be accessed by calling
<computeroutput>$description->entryname()</computeroutput>, where 'entryname' is
the name of the entry that was added.  See the construct documentation above
for more details.
</para>
</section>

</section>

</section>

<section id="s-wsgram-admin-testing"><title>Testing</title>
	<para>See the WS GRAM <ulink url="http://www.globus.org/toolkit/docs/4.0/execution/wsgram/user-index.html#s-wsgram-user-usagescenarios">User's Guide</ulink> for information about submitting a test job.</para>
</section>


<section id="s-wsgram-admin-security_considerations"><title>Security Considerations </title>
&WS_GRAM_Security_Considerations_Frag;
</section>

<section id="s-wsgram-admin-troubleshooting"><title>Troubleshooting</title>
&WS_GRAM_Troubleshooting_Frag;
</section>

<section id="s-wsgram-admin-usage"><title>Usage statistics collection by the Globus Alliance</title>
&WS_GRAM_Usage_Statistics_Frag;
</section>

<!--  LocalWords:  NOPASSWD
 -->
