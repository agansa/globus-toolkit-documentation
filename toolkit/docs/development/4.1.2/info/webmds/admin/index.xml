<?xml version='1.0' encoding='UTF-8'?>

<title>GT &shortversion; WS MDS WebMDS: System Administrator's Guide</title>
<titleabbrev>System Administrator's Guide</titleabbrev>

<section id="webmds-admin-introduction"><title>Introduction</title>
<para>WebMDS enables end users to view monitoring information via a standard
web browser interface, without installing any additional software on their
PC.  WebMDS is implemented as a servlet that uses a plugin interface to
gather monitoring information (or any other information in XML format) and
XSLT transforms, and present the data to the user in a readable form.
Web site administrators can customize their own WebMDS deployments by using
HTML form options, configuring different plugins to collect data and XSLT
transforms, and creating their own plugins and XSLT transforms.</para>
<para>This guide contains advanced configuration information for system administrators
  working with WS MDS WebMDS. It provides references to information on procedures
  typically performed by system administrators, including installation, configuring,
deploying, and testing the installation.</para>
<para>This information is in addition to the basic Globus Toolkit prerequisite,
    overview, installation, security configuration instructions in  <xref linkend="gtadmin"/>. 
Read through this guide before continuing!</para>
</section>


<section id="webmds-admin-installing"><title>Building and Installing</title>
<para>WebMDS is built and installed as part of the standard Globus Toolkit
installation.</para>
</section>

<section id="webmds-admin-configuring"><title>Configuring </title>
&WS_MDS_WebMDS_Interface_Config_Frag;
</section>

<section id="webmds-admin-deploying"><title>Deploying</title>
<para>Because WebMDS is implemented as a servlet, it must be deployed into a servlet
container, such as <ulink url="http://jakarta.apache.org/tomcat/">Tomcat</ulink>.
The following instructions assume that you've installed Tomcat version 5.0.28.
and set the <computeroutput>$CATALINA_HOME</computeroutput> environment
variable to the directory into which you've installed Tomcat.
</para>
<section><title>Standard deployment into Tomcat 5.0.28</title>
<para>The standard deployment consists of two steps:  creating a configuration file
that tells Tomcat where to find the WebMDS servlet and related files, and
restarting Tomcat so that it will read this new configuration file.  These
steps require write permission on files and directories in
<filename>$CATALINA_HOME</filename>; they do not require write permission
on anything in <computeroutput>$GLOBUS_LOCATION</computeroutput>.</para>

<para>To create the configuration file, run this command:</para>
<screen>
    $GLOBUS_LOCATION/lib/webmds/bin/webmds-create-context-file \
         $CATALINA_HOME/conf/Catalina/localhost
</screen>
<para>
This will create
<filename>$CATALINA_HOME/conf/Catalina/localhost/webmds.xml</filename>.
Note:  if this file already exists (e.g., if you've previously installed another
version of WebMDS), you'll need to use the <computeroutput>-f</computeroutput> option to
<computeroutput>webmds-create-context-file</computeroutput>.
</para>
<para>Next, restart Tomcat.  If Tomcat is already running, stop it:</para>
<screen>
    $CATALINA_HOME/bin/shutdown.sh
</screen>
<para>Then, start Tomcat:</para>
<screen>
    $CATALINA_HOME/bin/startup.sh
</screen>
</section>
<section><title>Deploying WebMDS and Globus in the same Tomcat Server</title>
<para>If you wish to run Globus and WebMDS in the same Tomcat instance (instead of,
for example, running Globus in the Globus standalone container and WebMDS in
Tomcat), then do the following:</para>
<orderedlist>
<listitem><simpara>Install Globus and deploy it into Tomcat, as described
    in <xref linkend="gtadmin"/>.</simpara></listitem><listitem><para>Run <command>webmds-create-context-file</command>:
<screen>
    $GLOBUS_LOCATION/lib/webmds/bin/webmds-create-context-file \
         $CATALINA_HOME/conf/Catalina/localhost
</screen>
(see the previous section for more details about <command>webmds-create-context-file</command>).
</para>
</listitem>
<listitem><para>The Globus and WebMDS deployments install identical copies
of certain files in different places.  The presence of these duplicates
causes WebMDS to fail when sending requests to secure servers.  To prevent
this problem, remove the duplicates:
<screen>
rm $GLOBUS_LOCATION/lib/webmds/WEB-INF/lib/puretls.jar
rm $GLOBUS_LOCATION/lib/webmds/WEB-INF/lib/cryptix*.jar
rm $GLOBUS_LOCATION/lib/webmds/WEB-INF/lib/jce-jdk*.jar
</screen>
</para>
</listitem>
<listitem><para>Finally, restart Tomcat.  If Tomcat is already running, stop it:</para>
<screen>
    $CATALINA_HOME/bin/shutdown.sh
</screen>
<para>Then, start Tomcat:</para>
<screen>
    $CATALINA_HOME/bin/startup.sh
</screen>
</listitem>
</orderedlist>
</section>
<section><title>Custom deployment</title>
<para>If you are already running a Tomcat server (or other server that supports
servlets) and your preferred mechanism for
installing servlets is something other than creating a configuration file
and restarting your web server, feel free to use that mechanism.  The servlet
root for WebMDS is <computeroutput>$GLOBUS_LOCATION/lib/webmds</computeroutput>.
</para><para>
For the rest of these instructions, the term <emphasis>Globus user</emphasis> will be
used to refer to the owner of the <computeroutput>$GLOBUS_LOCATION</computeroutput> directory,
and <emphasis>Tomcat user</emphasis> will be used to refer to the owner of the
<filename>$CATALINA_HOME</filename> directory.  If the Globus and Tomcat installations
were performed from the same user account, the Globus user and Tomcat user
will be the same.
</para>
<para>
Any time you change the servlet configuration (or any jar files used by the
servlet), you'll need to let tomcat know there was a change.  If you have
a preferred way of configuring tomcat, feel free to use it, with
<filename>$GLOBUS_LOCATION/lib/webmds</filename> as the servlet directory.
These steps need to be performed by the Tomcat user.
</para>
<para>
If you're using tomcat 5.0.28 and haven't done any custom configuration (such
as defining additional hosts) other than changing the tomcat port,
you can configure tomcat by doing the following:
</para>
<orderedlist>

<listitem><para>Create a context descriptor file called <filename>webmds.xml</filename>
in the location where tomcat will look for it:

<screen>
    $GLOBUS_LOCATION/lib/webmds/bin/webmds-create-context-file \
         $CATALINA_HOME/conf/Catalina/localhost
</screen>

Note:  if the file
<filename>$CATALINA_HOME/conf/Catalina/localhost/webmds.xml</filename>
already exists, you can use the <computeroutput>-f</computeroutput> flag to
<computeroutput>create-context-file</computeroutput> to overwrite it.
to the tomcat configuration directory.
</para></listitem>
<listitem><para>If tomcat is running, shut it down.
<screen>
    $CATALINA_HOME/bin/shutdown.sh
</screen></para></listitem>
<listitem><para>Start tomcat up.
<screen>
    $CATALINA_HOME/bin/startup.sh
</screen></para></listitem>
</orderedlist>
</section>
</section>

<section id="webmds-admin-testing"><title>Testing</title>
<para>The easiest way to test your installation is to use it to view your
    <glossterm>Index Service</glossterm>, by pointing your web browser at
<computeroutput>http://your-tomcat-host:your-tomcat-port/webmds</computeroutput> and clicking on the link labelled "A list of resources registered to
the local default index service".</para>
<para>For more in-depth tests, you can run the WebMDS unit tests, by doing
the following:</para>
<orderedlist>
<listitem><simpara>Install <ulink url="http://httpunit.sourceforge.net">httpunit</ulink>, version 1.6 or later.  Set the environment variable GLOBUS_HTTPUNIT_DIR to the directory into which httpunit has been installed.</simpara>
</listitem>
<listitem><para>Install the WebMDS test package; from the GT4 distribution directory, run
<screen>
make gt4-webmds-test
</screen>
</para>
</listitem>
<listitem>
<para>Run the core WebMDS test suite.  This tests the WebMDS servlet itself,
the File XML Source, and the more commonly-used xslt transforms.  There
are two modes in which this test suite can be run.
<itemizedlist>
<listitem>
<para>The core WebMDS tests can be run in a servlet container simulator.  This tests the WebMDS code but does not test whether or not WebMDS has been deployed correctly into Tomcat:
<screen>
ant -f $GLOBUS_LOCATION/etc/globus_wsrf_mds_webmds_test/build.xml test-installed
</screen>
</para>
<para>
The output should look something like this:
<screen>
Buildfile: <parameter>GLOBUS_LOCATION</parameter>/etc/globus_wsrf_mds_webmds_test/build.xml

test-installed:
    [junit] Running org.globus.mds.webmds.test.PackageTests
    [junit] Running org.globus.mds.webmds.test.SimpleServletTest tests with servlet simulator.
    [junit] No webmds.test.servletURL property specified; skipping org.globus.mds.webmds.test.SimpleServletTest http tests
    [junit] Running org.globus.mds.webmds.test.ServletXslTests tests with servlet simulator.
    [junit] No webmds.test.servletURL property specified; skipping org.globus.mds.webmds.test.ServletXslTests http tests
    [junit] Tests run: 8, Failures: 0, Errors: 0, Time elapsed: 4.516 sec

BUILD SUCCESSFUL
Total time: 8 seconds
</screen>
</para>
</listitem>
<listitem>
<para>The core WebMDS tests can be run against a running WebMDS server, to test
the local WebMDS deployment:
<screen>
ant \
  -f $GLOBUS_LOCATION/etc/globus_wsrf_mds_webmds_test/build.xml \
  "-Dwebmds.test.servletURL=http://<parameter>webmds_host</parameter>:<parameter>webmds_port</parameter>/webmds/webmds" \
  test-installed
</screen>
</para>
<para>
The output should look something like this:
<screen>
Buildfile: <parameter>GLOBUS_LOCATION</parameter>/etc/globus_wsrf_mds_webmds_test/build.xml

test-installed:
    [junit] Running org.globus.mds.webmds.test.PackageTests
    [junit] Running org.globus.mds.webmds.test.SimpleServletTest tests with servlet simulator.
    [junit] Running org.globus.mds.webmds.test.SimpleServletTest tests against server at http://<parameter>webmds_host</parameter>:<parameter>webmds_port</parameter>/webmds/webmds
    [junit] Running org.globus.mds.webmds.test.ServletXslTests tests with servlet simulator.
    [junit] Running org.globus.mds.webmds.test.ServletXslTests tests against server at http://<parameter>webmds_host</parameter>:<parameter>webmds_port</parameter>/webmds/webmds
    [junit] Tests run: 8, Failures: 0, Errors: 0, Time elapsed: 5.229 sec

BUILD SUCCESSFUL
Total time: 8 seconds
</screen>
</para>
</listitem>
</itemizedlist>
The tests have passed if the number of failures and number of errors are both 0.
Detailed test output can be found in the file <filename><parameter>$GLOBUS_LOCATION</parameter>/etc/globus_wsrf_mds_webmds_test/test-reports/TEST-org.globus.mds.webmds.test.PackageTests.xml</filename>.</para>
</listitem>

<listitem><para>Run the WebMDS resource property node source test suite, to test the ability of
WebMDS to query a running MDS4 Index Server.  This test suite requires that both
a secure Index server and an insecure Index server be running.  As with the core
    tests, the resource property tests may be run in two modes.
    
<itemizedlist>
<listitem>
<para>The tests can be run in a servlet container simulator.  This tests the
WebMDS code, and the interaction between the WebMDS code and running Index
servers, but does not test whether or not WebMDS has been deployed correctly
into tomcat:
<screen>
ant -f \
  $GLOBUS_LOCATION/etc/globus_wsrf_mds_webmds_resource_property_source_test/build.xml \
  "-Dwebmds.rpTest.insecureServicePrefix=http://<parameter>index_server_host</parameter>:<parameter>index_server_port</parameter>/wsrf/services" \
  "-Dwebmds.rpTest.secureServicePrefix=https://<parameter>index_server_host</parameter>:<parameter>index_server_port</parameter>/wsrf/services" \
  test-installed
</screen>
</para>
<para>
The output should look something like this:
<screen>
Buildfile: <parameter>GLOBUS_LOCATION</parameter>/etc/globus_wsrf_mds_webmds_resource_property_source_test/build.xml

test-installed:
    [junit] Running org.globus.mds.webmds.xmlSources.resourceProperties.test.PackageTests
    [junit] querying resource properties at 'http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService'
    [junit] querying resource properties at 'https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService'
    [junit] Tests will use Globus servers at https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService and http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService
    [junit] Running org.globus.mds.webmds.xmlSources.resourceProperties.test.ResourcePropertyServletTest tests with servlet simulator.
    [junit] Tests will use Globus servers at https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService and http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService
    [junit] No webmds.test.servletURL property specified; skipping org.globus.mds.webmds.xmlSources.resourceProperties.test.ResourcePropertyServletTest http tests
    [junit] Tests will use Globus servers at https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService and http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService
    [junit] Tests run: 5, Failures: 0, Errors: 0, Time elapsed: 6.626 sec

BUILD SUCCESSFUL
Total time: 10 seconds
</screen>
</para>
</listitem>
<listitem>
<para>
To run an end-to-end test that tests the communication between a deployed WebMDS server and running index servers, do the following:
<screen>
ant -f \
  $GLOBUS_LOCATION/etc/globus_wsrf_mds_webmds_resource_property_source_test/build.xml \
  "-Dwebmds.rpTest.insecureServicePrefix=http://<parameter>insecure_index_server_host</parameter>:<parameter>index_server_port</parameter>/wsrf/services" \
  "-Dwebmds.rpTest.secureServicePrefix=https://<parameter>secure_index_server_host</parameter>:<parameter>index_server_port</parameter>/wsrf/services" \
  "-Dwebmds.test.servletURL=http://<parameter>webmds_host</parameter>:<parameter>webmds_port</parameter>/webmds/webmds" \
  test-installed
</screen>
</para>
<para>
The output should look something like this:
<screen>
Buildfile: <parameter>GLOBUS_LOCATION</parameter>/etc/globus_wsrf_mds_webmds_resource_property_source_test/build.xml

test-installed:
    [junit] Running org.globus.mds.webmds.xmlSources.resourceProperties.test.PackageTests
    [junit] querying resource properties at 'http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService'
    [junit] querying resource properties at 'https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService'
    [junit] Tests will use Globus servers at https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService and http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService
    [junit] Running org.globus.mds.webmds.xmlSources.resourceProperties.test.ResourcePropertyServletTest tests with servlet simulator.
    [junit] Tests will use Globus servers at https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService and http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService
    [junit] Running org.globus.mds.webmds.xmlSources.resourceProperties.test.ResourcePropertyServletTest tests against server at http://<parameter>webmds_host</parameter>:<parameter>webmds_port</parameter>/webmds/webmds
    [junit] Tests will use Globus servers at https://<parameter>secure_index_server_host</parameter>:<parameter>secure_index_server_port</parameter>/wsrf/services/DefaultIndexService and http://<parameter>insecure_index_server_host</parameter>:<parameter>insecure_index_server_port</parameter>/wsrf/services/DefaultIndexService
    [junit] Tests run: 5, Failures: 0, Errors: 0, Time elapsed: 7.041 sec

BUILD SUCCESSFUL
Total time: 10 seconds
</screen>
</para>
</listitem>
</itemizedlist>
The tests have passed if the number of failures and number of errors are both 0.
Detailed test output can be found in the file <filename><parameter>$GLOBUS_LOCATION</parameter>/etc/globus_wsrf_mds_webmds_resource_property_source_test/test-reports/TEST-org.globus.mds.webmds.xmlSources.resourceProperties.test.PackageTests.xml</filename>.</para>
</listitem>
</orderedlist>
</section>

<section id="webmds-admin-security_considerations"><title>Security Considerations </title>
&WS_MDS_WebMDS_Security_Considerations_Frag;
</section>

<section id="webmds-admin-troubleshooting"><title>Troubleshooting</title>
<orderedlist>
<para>Error handling in WebMDS is currently done by throwing exceptions, which
are displayed by Tomcat as stack traces.</para>
<listitem>
<para>If you attempt to use WebMDS
to collect information from a service that is not running, you will see a 
stack trace that begins with:
<screen>
org.globus.mds.webmds.xmlSources.resourceProperties.ResourcePropertySourceException: ; nested exception is: 
	java.net.ConnectException: Connection refused
</screen>
</para>
</listitem>
<listitem>
<para>
When WebMDS sends resource property queries to a secure WSRF service instance
(such
as an MDS4 Index Server), the WebMDS server must trust the certificate authority
that issued the certificate used by the WSRF service instance.  If the WebMDS
server does not trust the CA used by the remote service, then WebMDS queries
will produce a stack trace that includes the following:
<screen>
faultString: org.globus.common.ChainedIOException: Authentication failed 
[Caused by: Failure unspecified at GSS-API level [Caused by: Unknown CA]]
</screen>
This can be solved by configuring the Tomcat server that hosts WebMDS to
trust the appropriate CA, by either
<itemizedlist>
<listitem><para>placing the CA certificate in
<filename>/etc/grid-security/certificates</filename>, or</para></listitem>
<listitem><para>placing the CA certificate somewhere else, and setting the
Tomcat process's <parameter>X509_CERT_DIR</parameter> system parameter to
the directory in which the CA certificate was installed.  One way to
do this is to set the <parameter>CATALINA_OPTS</parameter> environment variable
and then restart Tomcat:
<screen>
export CATALINA_OPTS=-DX509_CERT_DIR=<replaceable>/path/to/cert/dir</replaceable>
$CATALINA_HOME/bin/shutdown.sh
$CATALINA_HOME/bin/startup.sh
</screen>
</para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para>
If the JVM used by Tomcat is configured to use a blocking random-number source,
WebMDS connections to secure Index Servers (or other secure WSRF servers) can
hang.  This is the default configuration for many installations.  One
solution is to set the <parameter>CATALINA_OPTS</parameter> environment
variable to ensure that Tomcat's JVM will use a non-blocking random-number
source:
<screen>
export CATALINA_OPTS=-Djava.security.egd=/dev/urandom
$CATALINA_HOME/bin/shutdown.sh
$CATALINA_HOME/bin/startup.sh
</screen>
Note:  if you encounter this problem with WebMDS, you may also
encounter <link linkend="javawscore-admin-globusstart">a similar problem</link> with the Globus container on the same system.
</para>
</listitem>
</orderedlist>
</section>



