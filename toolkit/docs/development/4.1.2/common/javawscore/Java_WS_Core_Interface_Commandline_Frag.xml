<?xml version='1.0' encoding='UTF-8'?>

<refentry id="globus-start-container">
<refmeta>
<refentrytitle>globus-start-container</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-start-container</refname>
<refpurpose>Starts standalone container</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-start-container</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>Starts a standalone container. By default a secure container is started on port 8443 and is accessible via HTTPS. On successful startup a list of 
 services will be displayed on the console. By default the non secure (HTTP) container is started on port 8080.</para>

</refsect1><refsect1><title>Command syntax</title>

<screen>
globus-start-container [options]
</screen>

<table><title>Options</title>
<tgroup cols="2"><tbody>

<row>
 <entry><command>-help</command></entry>
 <entry><para>Displays help information about the command.</para></entry>
</row>

<row>
 <entry><command>-p &lt;port&gt;</command></entry>
 <entry><para>Sets the port number for the container.</para></entry>
</row>

<row>
 <entry><command>-i &lt;address&gt;</command></entry>
 <entry><para>Binds container to the specified network address.</para></entry>
</row>

<row>
 <entry><command>-quiet</command></entry>
 <entry><para>Does not show a list of services at startup.</para></entry>
</row>

<row>
 <entry><command>-debug</command></entry>
 <entry><para>Enables debug mode.</para></entry>
</row>

<row>
 <entry><command>-nosec</command></entry>
 <entry><para>Starts a non secure (HTTP) container. Please note that this option only disables transport security. Message security can still be used.</para></entry>
</row>

<row>
 <entry><command>-containerDesc &lt;file&gt;</command></entry>
 <entry><para>Specifies a container security descriptor file.</para></entry>
</row>

<row>
 <entry><command>-profile &lt;name&gt;</command></entry>
 <entry><para>Specifies a configuration profile name for the container.</para></entry>
</row>

</tbody></tgroup>
</table>

</refsect1></refentry>
<refentry id="globus-stop-container">
<refmeta>
<refentrytitle>globus-stop-container</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-stop-container</refname>
<refpurpose>Stops standalone container</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-stop-container</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Stops a standalone container. By default this command will attempt to stop a container running on <command>localhost:8443</command> and perform a <command>soft</command> shutdown. 
</para>
<para>
The <command>globus-stop-container</command> command invokes a <command>ShutdownService</command> running in the container. By default that service is configured to perform <command>self</command> authorization and therefore the <command>globus-stop-container</command> must be executed with the same credentials as the container it is running with. Alternatively, the service can be configured with a gridmap file to allow a subset of users (with their own credentials) to invoke the service (please see the service security deployment descriptor for details).
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>globus-stop-container [options] ['soft' | 'hard']</screen>
 &Java_WS_Core_Interface_Commandline_Options_Frag;
<table><title>Shutdown options</title>
<tgroup cols="2"><tbody>
  <row><entry><command>'soft'</command></entry>
  <entry>This option lets the threads die naturally.</entry>
</row>
  <row><entry><command>'hard'</command></entry>
  <entry>This option forces an immediate JVM shutdown. </entry>
</row>
</tbody></tgroup>
</table>

<para>Example:</para>
<screen>
$ globus-stop-container soft
</screen>
<para>Please see the <link linkend="javawscore-admin-globusstop">troubleshooting section</link> if you are having problems with <computeroutput>globus-stop-container</computeroutput>.</para>
</refsect1></refentry>


<refentry id="globus-start-container-detached">
<refmeta>
<refentrytitle>globus-start-container-detached</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-start-container-detached</refname>
<refpurpose>Starts standalone container detached from controlling TTY</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-start-container-detached</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

    <para>Starts a standalone container detached from the controlling TTY. This
        can be useful for long running containers or when started from init.d
        scripts. Container log goes to
        <filename>$GLOBUS_LOCATION/var/container.log</filename> and a PID
        file is written to
        <filename>$GLOBUS_LOCATION/var/container.pid</filename>. 
        <filename>globus-start-container-detached</filename> is just
        a wrapper around <filename>globus-start-container</filename> so see
        <link linkend="globus-start-container">globus-start-container</link>
        for more information and options.
    </para>
    <note><simpara>
        Note that this tool is only available after doing a full Globus
        install. It is not available in Java WS Core only installs.
    </simpara></note>
</refsect1>
</refentry>


<refentry id="globus-stop-container-detached">
<refmeta>
<refentrytitle>globus-stop-container-detached</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-stop-container-detached</refname>
<refpurpose>Stops standalone container detached from controlling TTY</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-stop-container-detached</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

    <para>Stops a standalone container detached from the controlling TTY.
        <filename>$GLOBUS_LOCATION/var/container.pid</filename> is used to
        find the PID of the running container and signals are sent to 
        stop the container.
    </para>
    <note><simpara>
        Note that this tool is only available after doing a full Globus
        install. It is not available in Java WS Core only installs.
    </simpara></note>
</refsect1>
</refentry>


<refentry id="wsrf-destroy" xreflabel="wsrf-destroy">
<refmeta>
<refentrytitle>wsrf-destroy</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-destroy</refname>
<refpurpose>Destroys a resource</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-destroy</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Destroys a resource. 
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-destroy [options]</screen>

&Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsrf-destroy -s http://localhost:8080/wsrf/services/CounterService \
   -k "{http://counter.com}CounterKey" 123
</screen>
</refsect1></refentry>
<refentry id="wsrf-set-termination-time" xreflabel="wsrf-set-termination-time">
<refmeta>
<refentrytitle>wsrf-set-termination-time</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-set-termination-time</refname>
<refpurpose>Sets termination time of a resource</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-set-termination-time</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>
<para>
Sets a termination time of a resource.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-set-termination-time [options] &lt;seconds&gt; | 'infinity' </screen>
&Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsrf-set-termination-time -s http://localhost:8080/wsrf/services/CounterService \
   -k "{http://counter.com}CounterKey" 123 30
</screen>

</refsect1></refentry>
<refentry id="wsrf-query" xreflabel="wsrf-query">
 <refmeta>
  <refentrytitle>wsrf-query</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-query</refname>
<refpurpose>Performs query on a resource property document</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-query</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>
<para>
Queries the resource property document of a resource. By default, a simple XPath query is assumed that returns the entire resource property document.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-query [options] [query expression] [dialect]</screen>

&Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Examples:</para>
<screen>
$ wsrf-query -s https://127.0.0.1:8443/wsrf/services/DefaultIndexService \
   "count(//*[local-name()='Entry'])"
</screen>
<para></para>
<screen>
$ wsrf-query -s https://127.0.0.1:8443/wsrf/services/DefaultIndexService \
   "number(//*[local-name()='GLUECE']/glue:ComputingElement/glue:State/@glue:FreeCPUs)=0"
</screen>
<para></para>
<screen>
$ wsrf-query -s http://localhost:8080/wsrf/services/ContainerRegistryService \
   "/*/*/*/*[local-name()='Address']"
</screen>

</refsect1></refentry>
<refentry id="wsrf-get-property" xreflabel="wsrf-get-property">
<refmeta>
<refentrytitle>wsrf-get-property</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-get-property</refname>
<refpurpose>Gets values of a single resource property</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-get-property</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>
<para>
Gets a single resource property from a resource.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-get-property [options] &lt;property&gt;</screen>
<para>
The <command>&lt;property&gt;</command> is a QName of the resource property in the string form: <command>{namespaceURI}localPart</command>.
</para>
 &Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsrf-get-property -s http://localhost:8080/wsrf/services/CounterService \
   -k "{http://counter.com}CounterKey" 123 \
  "{http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd}CurrentTime"
</screen>
</refsect1></refentry>
<refentry id="wsrf-get-properties" xreflabel="wsrf-get-properties">
<refmeta>
<refentrytitle>wsrf-get-properties</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-get-properties</refname>
<refpurpose>Gets values of multiple resource properties</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-get-properties</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Gets multiple resource properties from a resource.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-get-properties [options] &lt;property1&gt; [&lt;property2&gt;... &lt;propertyN&gt;]</screen>
<para>
Each <command>&lt;propertyN&gt;</command> is a QName of the resource property in the string form: <command>{namespaceURI}localPart</command>.
</para>
 &Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsrf-get-properties -s http://localhost:8080/wsrf/services/CounterService \
  -k "{http://counter.com}CounterKey" 123 \ 
  "{http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd}CurrentTime" \
  "{http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd}TerminationTime"
</screen>
</refsect1></refentry>
<refentry id="wsrf-insert-property" xreflabel="wsrf-insert-property">
<refmeta>
<refentrytitle>wsrf-insert-property</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-insert-property</refname>
<refpurpose>Inserts values into a resource property</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-insert-property</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Inserts a property into the resource property document of a resource.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-insert-property [options] &lt;propertyValueFile&gt;</screen>
<para>
The <command>&lt;propertyValueFile&gt;</command> is an XML file that contains the value of the resource property. The QName of the property is the outer most element.
</para>
 &Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:

Contents of <command>in.xml</command>:</para>
<screen>
 &lt;doc&gt;
   &lt;ns1:foo xmlns:ns1="http://widgets.com"&gt;
     Value1
   &lt;/ns1:foo&gt;
   &lt;ns1:foo xmlns:ns1="http://widgets.com"&gt;
     Value2
   &lt;/ns1:foo&gt;
 &lt;/doc&gt;
</screen>
<para></para>
<screen>
$ wsrf-insert-property -s http://localhost:8080/wsrf/services/WidgetService \
   -k "{http://www.globus.org/namespaces/2004/06/core}WidgetKey" 123 \
   in.xml
</screen>

</refsect1></refentry>
<refentry id="wsrf-update-property" xreflabel="wsrf-update-property">
<refmeta>
<refentrytitle>wsrf-update-property</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-update-property</refname>
<refpurpose>Updates value of a resource property</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-update-property</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Updates the property value in the resource property document of a resource.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-update-property [options] &lt;propertyValueFile&gt;</screen>
<para>
The <command>&lt;propertyValueFile&gt;</command> is an XML file that contains the value of the resource property. The QName of the property is the outermost element.
</para>
&Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:

Contents of <command>in.xml</command>:</para>
<screen>
 &lt;doc&gt;
   &lt;ns1:foo xmlns:ns1="http://widgets.com"&gt;
     Value
   &lt;/ns1:foo&gt;
 &lt;/doc&gt;
</screen>
<para></para>
<screen>
$ wsrf-update-property -s http://localhost:8080/wsrf/services/WidgetService \
   -k "{http://www.globus.org/namespaces/2004/06/core}WidgetKey" 123 \
   in.xml
</screen>

</refsect1></refentry>
<refentry id="wsrf-delete-property" xreflabel="wsrf-delete-property">
<refmeta>
<refentrytitle>wsrf-delete-property</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsrf-delete-property</refname>
<refpurpose>Deletes a resource property</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsrf-delete-property</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Deletes a resource property from the resource property document of a resource.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsrf-delete-property [options] &lt;property&gt;</screen>

<para>
The <command>&lt;property&gt;</command> is a QName of the resource property in the string form: <command>{namespaceURI}localPart</command>.
</para>
 &Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsrf-delete-property -s http://localhost:8080/wsrf/services/WidgetService \
   -k "{http://www.globus.org/namespaces/2004/06/core}WidgetKey" 123 \
   "{http://widgets.com}foo"
</screen>
</refsect1></refentry>
<refentry id="wsn-get-current-message" xreflabel="wsn-get-current-message">
<refmeta>
<refentrytitle>wsn-get-current-message</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsn-get-current-message</refname>
<refpurpose>Gets a current message associated with a topic</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsn-get-current-message</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Gets the current message associated with the specified topic.
</para>

</refsect1><refsect1><title>Command syntax</title>
<para>
 <screen>wsn-get-current-message [options] &lt;topic&gt;</screen>

The <command>&lt;topic&gt;</command> is a QName of the resource property in the string form: <command>{namespaceURI}localPart</command>.
</para>
&Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:
<screen>
$ wsn-get-current-message -s http://localhost:8080/wsrf/services/CounterService \
   -k "{http://counter.com}CounterKey" 123 \ 
   "{http://counter.com}Value"
</screen>
</para>
</refsect1></refentry>
<refentry id="wsn-pause-subscription" xreflabel="wsn-pause-subscription">
<refmeta>
<refentrytitle>wsn-pause-subscription</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsn-pause-subscription</refname>
<refpurpose>Pauses a subscription</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsn-pause-subscription</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Pauses a subscription (notifications on that subscription will not be sent out until it is resumed).
</para>

</refsect1><refsect1><title>Command syntax</title>
 <screen>wsn-pause-subscription [options]</screen>
 &Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsn-pause-subscription -s http://localhost:8080/wsrf/services/SubscriptionManagerService \
   -k "{http://www.globus.org/namespaces/2004/06/core}acc271c0-4df9-11d9-ab19-87da3bc7cf28"
</screen>
</refsect1></refentry>
<refentry id="wsn-resume-subscription" xreflabel="wsn-resume-subscription">
<refmeta>
<refentrytitle>wsn-resume-subscription</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsn-resume-subscription</refname>
<refpurpose>Resumes a subscription</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsn-resume-subscription</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Resumes a subscription (notifications on that subscription will be sent out again).
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsn-resume-subscription [options]</screen>
 &Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsn-resume-subscription -s http://localhost:8080/wsrf/services/SubscriptionManagerService \
   -k "{http://www.globus.org/namespaces/2004/06/core}acc271c0-4df9-11d9-ab19-87da3bc7cf28"
</screen>
</refsect1></refentry>
<refentry id="wsn-subscribe" xreflabel="wsn-subscribe">
 <refmeta>
<refentrytitle>wsn-subscribe</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>wsn-subscribe</refname>
<refpurpose>Subscribes to a topic</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>wsn-subscribe</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Subscribes to a topic.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>wsn-subscribe [options] &lt;topic&gt;</screen>

<para>
The <command>&lt;topic&gt;</command> is a QName of the resource property in the string form: <command>{namespaceURI}localPart</command>. 
</para>
 <para>The following are subscribe-specific options in addition to the common options:</para>
<table><title>Command-specific options</title>
<tgroup cols="2"><tbody>

<row>
 <entry><command>-r, --resDescFile &lt;file&gt;</command></entry>
 <entry><para>Specifies a file containing a resource security descriptor for the notification consumer resource.</para></entry>
</row>

<row>
 <entry><command>-b, --subEpr &lt;file&gt;</command></entry>
 <entry><para>Specifies a file to which the subscription resource EPR will be saved.</para></entry>
</row>

</tbody></tgroup>
</table>
&Java_WS_Core_Interface_Commandline_Options_Frag;
<para>Example:</para>
<screen>
$ wsn-subscribe -s http://localhost:8080/wsrf/services/CounterService \
   -k "{http://counter.com}CounterKey" 123 \ 
   "{http://counter.com}Value"
</screen>

</refsect1></refentry>
<refentry id="deployGar" xreflabel="globus-deploy-gar">
 <refmeta>
<refentrytitle>globus-deploy-gar</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-deploy-gar</refname>
<refpurpose>Deploys a GAR file (locally)</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-deploy-gar</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Deploys a GAR file (locally).
</para>

</refsect1><refsect1><title>Command syntax</title>

<screen>globus-deploy-gar &lt;gar.file&gt; [options]</screen>

<para>
The <command>&lt;gar.file&gt;</command> is the path to the GAR file
to be deployed. 
</para>

<table><title>Options</title>
<tgroup cols="2"><tbody>

<row valign="top">
 <entry><command>-help</command></entry>
 <entry><para>Displays help information about the command.</para></entry>
</row>

<row valign="top">
 <entry><command>-debug</command></entry>
 <entry><para>Enables debug mode.</para></entry>
</row>

<row valign="top">
 <entry><command>-verbose</command></entry>
 <entry><para>Enables verbose mode.</para></entry>
</row>

<row valign="top">
 <entry><command>-backup</command></entry>
 <entry><para>Creates backup of existing configuration files (since GT 4.0.1).</para></entry>
</row>

<row valign="top">
 <entry><command>-overwrite</command></entry>
 <entry><para>Overwrite existing deployment.</para></entry>
</row>

<row valign="top">
 <entry><command>-profile</command></entry>
 <entry><para>Specifies the profile name under which the configuration files in the GAR will be deployed. Please see "Configuration Profiles" under <xref linkend="javawscore-admin-configuring"/> for details.</para></entry>
</row>

<row valign="top">
 <entry><command>-D&lt;property&gt;=&lt;value&gt;</command></entry>
 <entry>
  <para>
   Passes arbitrary property-value pairs. See below for the list of <link linkend="properties">currently supported properties</link>. 
  </para>
 </entry>
</row>

</tbody></tgroup>
</table>

 <table id="properties"><title>Supported property-value pairs</title>
 <tgroup cols="2">
 <tbody>

 <row>
  <entry><command>-Dall.scripts=true</command></entry>
  <entry><para>Causes Windows and Unix launcher scripts to be generated.</para></entry>
 </row>

 <row>
  <entry><command>-DdoValidation=false</command></entry>
  <entry><para>Turns off automatic validation of service configuration files.</para></entry>
 </row>

 </tbody>
 </tgroup>
 </table>

<note>
   <simpara>
    Since GT 4.2, <command>globus-deploy-gar</command> command will NOT overwrite the existing deployment unless <computeroutput>-overwrite</computeroutput> option is specified. It is recommended to undeploy the existing deployment first. The container must be off to deploy a GAR file.
   </simpara>
</note>

<para>Example:</para>
<screen>
$ globus-deploy-gar /tmp/gars/globus_wsrf_core_samples_counter.gar
</screen>

<para>
The <command>globus-deploy-gar</command> invokes an Ant task. The above example is equivalent to running:
</para>
<screen>
$ ant -f $GLOBUS_LOCATION/share/globus_wsrf_common/build-packages.xml deployGar \
      -Dgar.name=/tmp/gars/globus_wsrf_core_samples_counter.gar
</screen>
<para>
The profile name can be passed using the <command>-Dprofile</command> Ant option. To enable back up of the existing configuration files add the <command>-DcreateBackup=true</command> Ant option. Make sure to use the <emphasis>absolute</emphasis> path name for the gar file when using Ant directly.
</para>

</refsect1></refentry>
<refentry id="undeployGar" xreflabel="globus-undeploy-gar">
<refmeta>
<refentrytitle>globus-undeploy-gar</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-undeploy-gar</refname>
<refpurpose>Undeploys a GAR file (locally)</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-undeploy-gar</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Undeploys a GAR file (locally).
</para>

</refsect1><refsect1><title>Command syntax</title>
<screen>
globus-undeploy-gar &lt;gar.id&gt; [options]
</screen>
<para>
The <command>&lt;gar.id&gt;</command> is the base name of the GAR file without the <command>.gar</command> extension to undeploy. For example if the GAR file is <command>"foo.gar"</command>, then the GAR id is <command>"foo"</command>. 
The directory names under <command>$GLOBUS_LOCATION/etc/globus_packages/</command> are the GAR ids of the undeployable items.
</para>

<table><title>Options</title>
<tgroup cols="2"><tbody>

<row valign="top">
 <entry><command>-help</command></entry>
 <entry><para>Displays help information about the command.</para></entry>
</row>

<row valign="top">
 <entry><command>-debug</command></entry>
 <entry><para>Enables debug mode.</para></entry>
</row>

<row valign="top">
 <entry><command>-verbose</command></entry>
 <entry><para>Enables verbose mode.</para></entry>
</row>

<row valign="top">
 <entry><command>-D&lt;property&gt;=&lt;value&gt;</command></entry>
 <entry>
  <para>
   Passes arbitrary property-value pairs.
  </para>
 </entry>
</row>

</tbody></tgroup>
</table>

<note>
   <simpara>
    The container must be off to undeploy a GAR file.
   </simpara>
</note>

<para>Example:</para>
<screen>
$ globus-undeploy-gar globus_wsrf_core_samples_counter
</screen>
<para>
The <command>globus-undeploy-gar</command> invokes an Ant task. The above example is equivalent to running:
</para>
<screen>
$ ant -f $GLOBUS_LOCATION/share/globus_wsrf_common/build-packages.xml undeployGar \
      -Dgar.id=globus_wsrf_core_samples_counter
</screen>
</refsect1>
</refentry>

<refentry id="globus-check-environment" xreflabel="globus-check-environment">
<refmeta>
<refentrytitle>globus-check-environment</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-check-environment</refname>
<refpurpose>Displays component version information and validates JVM version</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-check-environment</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>
    <para>Displays component version information and validates the JVM version. This tool is primarily used for debugging purposes.
    </para>
</refsect1>
</refentry>

<refentry id="globus-validate-descriptors" xreflabel="globus-validate-descriptors">
<refmeta>
<refentrytitle>globus-validate-descriptors</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-validate-descriptors</refname>
<refpurpose>Validate configuration files of all services</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-validate-descriptors</command>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Tool description</title>
<para>
 Validates the Web Services Deployment Descriptor (<computeroutput>.wsdd</computeroutput>) files, JNDI configuration files (<computeroutput>jndi-config.xml</computeroutput>), and security descriptors for all services.
</para>
</refsect1>

<refsect1>
<title>Command syntax</title>
<screen>
globus-validate-descriptors [options]
</screen>

<para>
</para>

<table><title>Options</title>
<tgroup cols="2"><tbody>

<row valign="top">
 <entry><command>-help</command></entry>
 <entry><para>Displays help information about the command.</para></entry>
</row>

<row valign="top">
 <entry><command>-debug</command></entry>
 <entry><para>Enables debug mode.</para></entry>
</row>

<row valign="top">
 <entry><command>-verbose</command></entry>
 <entry><para>Enables verbose mode.</para></entry>
</row>

<row valign="top">
 <entry><command>-D&lt;property&gt;=&lt;value&gt;</command></entry>
 <entry>
  <para>
   Passes arbitrary property-value pairs.
  </para>
 </entry>
</row>

</tbody></tgroup>
</table>

</refsect1>
</refentry>


<refentry id="globus-reload-container" xreflabel="globus-reload-container">
<refmeta>
<refentrytitle>globus-reload-container</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-reload-container</refname>
<refpurpose>Reinitializes standalone container</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-reload-container</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
The <command>globus-reload-container</command> command invokes the <command>reload()</command> operation on the <command>DeployService</command> running in the remote container. It tells the container to reinitialize all of its services, re-read its and service configuration files, etc. For example, the administrator can change the security descriptor of a service and then use the <command>globus-reload-container</command> command to force the container to load the updated configuration without restarting the container. 
</para>
<para>
By default the <command>DeployService</command> is configured to perform <command>self</command> authorization and therefore the <command>globus-reload-container</command> must be executed with the same credentials as the container it is running with. Alternatively, the service can be configured with a gridmap file to allow a subset of users (with their own credentials) to invoke the service (please see the service security deployment descriptor for details).
</para>

<note><para>This command only works with the standalone container. Please see the <link linkend="javawscore-developer-archdes">Java WS Core Dynamic Deploy Design Document</link> for more information.</para></note>

</refsect1><refsect1><title>Command syntax</title>

 <screen>globus-reload-container [options]</screen>
 &Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Example:</para>
<screen>
$ globus-reload-container
</screen>
</refsect1></refentry>

<refentry id="undeployRemoteGar" xreflabel="globus-remote-undeploy-gar">
<refmeta>
<refentrytitle>globus-remote-undeploy-gar</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-remote-undeploy-gar</refname>
<refpurpose>Undeploys a GAR file (remotely)</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-remote-undeploy-gar</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
The <command>globus-remote-undeploy-gar</command> command undeploys a GAR file remotely. It invokes the <command>undeploy()</command> operation on the <command>DeployService</command> running in the remote container. It works just like the <xref linkend="undeployGar"/> command but the GAR file is undeployed remotely.
</para>
<para>
By default the <command>DeployService</command> is configured to perform <command>self</command> authorization and therefore the <command>globus-remote-undeploy-gar</command> must be executed with the same credentials as the container it is running with. Alternatively, the service can be configured with a gridmap file to allow a subset of users (with their own credentials) to invoke the service (please see the service security deployment descriptor for details).
</para>

<note><para>This command only works with the standalone container. Please see the <link linkend="javawscore-developer-archdes">Java WS Core Dynamic Deploy Design Document</link> for more information.</para></note>

</refsect1><refsect1><title>Command syntax</title>

<screen>globus-remote-undeploy-gar [options] &lt;gar.id&gt;</screen>

<para>
The <command>&lt;gar.id&gt;</command> is the base name of the GAR file without the <command>.gar</command> extension to undeploy. For example if the GAR file is <command>"foo.gar"</command>, then the GAR id is <command>"foo"</command>. 
</para>

&Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Example:</para>
<screen>
$ globus-remote-undeploy-gar globus_wsrf_core_samples_counter
</screen>

<para>To see what GAR files can be undeployed on the remote container run the following query on the <command>DeployService</command>, for example:</para>
<screen>
$ wsrf-query -z hostSelf -s https://127.0.0.1:8443/wsrf/services/DeployService
</screen>

</refsect1>
</refentry>

<refentry id="deployRemoteGar" xreflabel="globus-remote-deploy-gar">
<refmeta>
<refentrytitle>globus-remote-deploy-gar</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-remote-deploy-gar</refname>
<refpurpose>Deploys a GAR file (remotely)</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-remote-deploy-gar</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
The <command>globus-remote-deploy-gar</command> command deploys a GAR file remotely. It first transfers the GAR file to the <command>DeployService</command> running in the remote container and then it deploys it using the <command>deploy()</command> operation of the service (the tool can also perform these two operations separately). 
</para>
<para>
By default the <command>DeployService</command> is configured to perform <command>self</command> authorization and therefore the <command>globus-remote-deploy-gar</command> must be executed with the same credentials as the container it is running with. Alternatively, the service can be configured with a gridmap file to allow a subset of users (with their own credentials) to invoke the service (please see the service security deployment descriptor for details).
</para>

<note><para>This command only works with the standalone container. Please see the <link linkend="javawscore-developer-archdes">Java WS Core Dynamic Deploy Design Document</link> for more information.</para></note>

</refsect1><refsect1><title>Command syntax</title>

 <screen>globus-remote-deploy-gar [options] &lt;gar&gt;</screen>

<para>
The <command>&lt;gar&gt;</command> can be either an URL or a file location. If a file location is passed to the tool, it will transfer the file to the service via SOAP with Attachments (the <command>upload()</command> function) using the <command>MTOM</command> format. If an URL is passed, the tool will call the <command>download()</command> function of the service, and let the service download the GAR file.
</para>

 <para>The following are command-specific options in addition to the common options:</para>
<table><title>Command-specific options</title>
<tgroup cols="2"><tbody>

<row>
 <entry><command>-n, --transfer</command></entry>
 <entry><para>Transfer GAR file only.</para></entry>
</row>

<row>
 <entry><command>-y, --deploy</command></entry>
 <entry><para>Deploy GAR file only (assumes the GAR is already transferred to the <command>DeployService</command>.</para></entry>
</row>

<row>
 <entry><command>-o, --overwrite</command></entry>
 <entry><para>Overwrite existing deployment.</para></entry>
</row>

<row>
 <entry><command>-b, --backup</command></entry>
 <entry><para>Creates backup of existing configuration files</para></entry>
</row>

</tbody></tgroup>
</table>

&Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Examples:</para>
<screen>
$ globus-remote-deploy-gar /tmp/myServie.gar
</screen>
<para></para>
<screen>
$ globus-remote-deploy-gar gsiftp://localhost/tmp/myServie.gar
</screen>
<para>To see what GAR files haven been transfered but not yet deployed on the remote container run the following query on the <command>DeployService</command>, for example:</para>
<screen>
$ wsrf-query -z hostSelf -s https://127.0.0.1:8443/wsrf/services/DeployService
</screen>
</refsect1></refentry>



<refentry id="ws-enumerate-start" xreflabel="ws-enumerate-start">
<refmeta>
<refentrytitle>ws-enumerate-start</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>ws-enumerate-start</refname>
<refpurpose>Starts an enumeration</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>ws-enumerate-start</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Creates a new enumeration context and prints it out to the console.
</para>
<note><para>The remote service must support the <command>enumerate</command> operation of the WS-Enumeration specification.</para></note>

</refsect1><refsect1><title>Command syntax</title>

 <screen>ws-enumerate-start [options]</screen>

 &Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Example:</para>
<screen>
$ ws-enumerate-start -s http://localhost:8080/wsrf/services/ContainerRegistryService > enum.context
</screen>
<para>The created enumeration context will be stored in the <filename>enum.context</filename> file which then can be passed to <xref linkend="ws-enumerate"/> and <xref linkend="ws-enumerate-end"/> command line clients.</para>
</refsect1></refentry>



<refentry id="ws-enumerate" xreflabel="ws-enumerate">
<refmeta>
<refentrytitle>ws-enumerate</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>ws-enumerate</refname>
<refpurpose>Retrieves enumeration data</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>ws-enumerate</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Retrieves the next set of enumeration data and prints it out to the console.
</para>
<note><para>The remote service must implement the WS-Enumeration specification.</para></note>

</refsect1><refsect1><title>Command syntax</title>

 <screen>ws-enumerate [options] &lt;enumContextFile&gt;</screen>
 <para>
 The <command>&lt;enumContextFile&gt;</command> is a file that contains the enumeration context.
 </para>
 <para>The following are command-specific options in addition to the common options:</para>
<table><title>Command-specific options</title>
<tgroup cols="2"><tbody>

<row>
 <entry><command>-i, --items &lt;int&gt;</command></entry>
 <entry><para>Specifies the total number of enumeration items to retrieve. The parameter value can be <command>'all'</command> to retrieve the all the enumeration data. By default, only one element is retrieved.</para></entry>
</row>

<row>
 <entry><command>-r, --maxCharacters &lt;int&gt;</command></entry>
 <entry><para>Specifies the maximum number of characters (in Unicode) of the enumeration data that the client can accept at a time. By default, there is no limit on the size of the elements.</para></entry>
</row>

<row>
 <entry><command>-n, --maxElements &lt;int&gt;</command></entry>
 <entry><para>Specifies the maximum number of enumeration items to fetch at a time. By default, one element is retrieved at a time.</para></entry>
</row>

<row>
 <entry><command>-o, --maxTime &lt;int&gt;</command></entry>
 <entry><para>Specifies the maximum amount of time (in milliseconds) in which the enumeration data must be assembled. By default, there is no time limit.</para></entry>
</row>

</tbody></tgroup>
</table>
 &Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Example:</para>
<screen>
$ ws-enumerate -i 10 -n 5 -s http://localhost:8080/wsrf/services/ContainerRegistryService enum.context
</screen>
<para>This command will display 10 elements of the enumeration data obtaining 5 elements at a time from the service.
</para>
</refsect1></refentry>



<refentry id="ws-enumerate-end" xreflabel="ws-enumerate-end">
<refmeta>
<refentrytitle>ws-enumerate-end</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>ws-enumerate-end</refname>
<refpurpose>Stops an enumeration</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>ws-enumerate-end</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
Releases an enumeration context.
</para>
<note><para>The remote service must implement the WS-Enumeration specification.</para></note>

</refsect1><refsect1><title>Command syntax</title>

 <screen>ws-enumerate-end [options] &lt;enumContextFile&gt;</screen>
 <para>
 The <command>&lt;enumContextFile&gt;</command> is a file that contains the enumeration context.
 </para>

 &Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Example:</para>
<screen>
$ ws-enumerate-end -s http://localhost:8080/wsrf/services/ContainerRegistryService enum.context
</screen>
</refsect1></refentry>



<refentry id="globus-xpath-query" xreflabel="globus-xpath-query">
<refmeta>
<refentrytitle>globus-xpath-query</refentrytitle>
<manvolnum>1</manvolnum>
</refmeta>
<refnamediv>
<refname>globus-xpath-query</refname>
<refpurpose>Performs XPath query on a resource property document</refpurpose>
</refnamediv>
<refsynopsisdiv><cmdsynopsis>
<command>globus-xpath-query</command>
</cmdsynopsis>
</refsynopsisdiv>
<refsect1><title>Tool description</title>

<para>
The <command>globus-xpath-query</command> uses a custom query dialect implementation called <computeroutput>TargetedXPath</computeroutput> to query the resource property document of a resource. The <computeroutput>TargetedXPath</computeroutput> dialect uses the XPath language to the query the resource property document. It allows for a set of namespace mappings to be passed along with the query. The mappings can dramatically simplify the query expression as namespace prefixes can be used within the query. For efficiency, the <computeroutput>TargetedXPath</computeroutput> dialect can also query a specific resource property instead of the entire resource property document.
</para>

</refsect1><refsect1><title>Command syntax</title>

 <screen>globus-xpath-query [options] [query expression] [rpQName]</screen>
 <para>
 The <command>query expression</command> is an XPath expression. The <command>rpQName</command> is a resource property QName. If a resource property is specified only that resource property within the resource property document will be queried. Otherwise, the entire resource property document will be queried. By default, a simple XPath query is assumed that returns the entire resource property document.
 </para>

<table><title>Command-specific options</title>
<tgroup cols="2"><tbody>

<row>
 <entry><command>-n, --nsMapFile &lt;file&gt;</command></entry>
 <entry><para>Specifies a file that contains namespace mappings. By default, the <filename>etc/globus_wsrf_core/namespace-mappings.xml</filename> file is used.</para></entry>
</row>

</tbody></tgroup>
</table>

 &Java_WS_Core_Interface_Commandline_Options_Frag;

<para>Examples:</para>
<screen>
$ globus-xpath-query -s http://localhost:8080/wsrf/services/ContainerRegistryService \
    &quot;//wssg:MemberServiceEPR/wsa:Address&quot;
</screen>
<para>The above will query the entire resource property document of the service.</para>
<screen>
$ globus-xpath-query -s http://localhost:8080/wsrf/services/ContainerRegistryService \
    &quot;//wssg:MemberServiceEPR/wsa:Address&quot; wssg:Entry
</screen>
<para>The above will query only the <computeroutput>wssg:Entry</computeroutput> resource property of the resource property document of the service.</para>

</refsect1></refentry>

