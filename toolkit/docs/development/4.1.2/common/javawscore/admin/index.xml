<?xml version='1.0' encoding='UTF-8'?>

<section xreflabel="Building and Installing Java WS Core" id="javawscore-admin-installing"><title>Building and Installing</title>
  <para>Java WS Core  is built and installed as part of a default <link linkend="gtadmin">GT &shortversion; installation</link>.
    No extra installation steps are required for this component.</para>
  <para>The following are optional instructions for more advanced types of installations.
    These are for those advanced users who want to build the latest code from CVS or are just interested in the Java WS Core.</para>
  
  <section id="javawscore-admin-buildfromsource"><title>Building from source</title>
    <orderedlist>
	    <listitem>
              <para>
Obtain the source code for Java WS Core:
</para>
              <formalpara>
                <title>From CVS</title>
                <para>
<orderedlist>
                    <listitem>
                      <para>
  To get the latest source from cvs execute:
 <screen> cvs -d :pserver:anonymous@cvs.globus.org:/home/globdev/CVS/globus-packages \
     checkout wsrf</screen>
 </para>
                    </listitem>
                    <listitem>
                      <para>
  Change into the <computeroutput>wsrf</computeroutput> directory.
 <screen> cd wsrf</screen>
 </para>
                    </listitem>
                  </orderedlist></para>
              </formalpara>
              <formalpara>
                <title>From Core-only source distribution</title>
                <para><orderedlist>
                    <listitem>
                      <para>
   Untar or unzip the distribution archive.
   <screen> tar xvfz ws-core-XXX-src.tar.gz</screen>
 </para>
                    </listitem>
                    <listitem>
                      <para>
  Change into the unpacked distribution directory.
   <screen> cd ws-core-XXX</screen>
 </para>
                    </listitem>
                  </orderedlist></para>
              </formalpara>
            </listitem>
	    <listitem>
            <para>Set the <computeroutput>GLOBUS_LOCATION</computeroutput> environment variable to the absolute path of the target directory of your installation. On Windows:</para>
<screen> set GLOBUS_LOCATION=c:\gt4</screen>
<para>On Unix/Linux:</para>
<screen> setenv GLOBUS_LOCATION /soft/gt4/</screen>
<para> or </para>
<screen> export GLOBUS_LOCATION=/soft/gt4/</screen>
<para>
If <computeroutput>GLOBUS_LOCATION</computeroutput> is not set, an <computeroutput>install</computeroutput> directory will be created under the current directory.
</para></listitem>
            <listitem>
              <para>Run:
 <screen> ant all</screen>
 </para>
              <para>
  Additional arguments can be specified on the <computeroutput>ant</computeroutput> command line to customize the build:
  <itemizedlist>
                  <listitem>
                    <simpara><computeroutput>-DwindowsOnly=false</computeroutput> - generate launch scripts for standard Globus tools such as <computeroutput>grid-proxy-init</computeroutput>, etc. (Unix/Linux only)</simpara>
                  </listitem>
                  <listitem>
                    <simpara><computeroutput>-Dall.scripts=true</computeroutput> - generate Windows and Unix launch scripts</simpara>
                  </listitem>
                  <listitem>
                    <simpara><computeroutput>-Denable.container.desc</computeroutput> - create and configure the container with a global security descriptor</simpara>
                  </listitem>
                </itemizedlist>
 </para>
            </listitem>
    </orderedlist>
  </section>

  <section id="javawscore-admin-installcoreonlybinary"><title>Installing Core-only binary distribution</title>
    <orderedlist>
	    <listitem><para>
		Untar or unzip the distribution archive. <screen> tar xvfz ws-core-XXX-bin.tar.gz</screen>
            </para></listitem>
            <listitem><para>Change into the unpacked distribution directory. <screen> cd ws-core-XXX</screen>
            </para></listitem>
            <listitem><para>
            Set the <computeroutput>GLOBUS_LOCATION</computeroutput> environment variable to the unpacked distribution directory.  On Windows:</para>
<screen> set GLOBUS_LOCATION=c:\gt4</screen>
<para>On Unix/Linux:</para>
<screen> setenv GLOBUS_LOCATION /soft/gt4/</screen>
<para> or </para>
<screen> export GLOBUS_LOCATION=/soft/gt4/</screen>
</listitem>
    </orderedlist>
  </section>
  
</section>

<section id="javawscore-admin-configuring" xreflabel="Configuring Java WS Core"><title>Configuring</title>
  &Java_WS_Core_Interface_Config_Frag;
</section>

<section id="javawscore-admin-deploying" xreflabel="Deploying Java WS Core"><title>Deploying</title>
  <para>
  The Globus services can be run either in the standalone Java WS Core container that is installed with GT, or deployed into Tomcat.
  </para>
  <section id="javawscore-admin-container-deploying" xreflabel="Deploying into the Java WS Core Container">
      <title>Deploying into the Java WS Core container</title>
    &Java_WS_Core_Deploy_Container_Frag;
  </section>

  <section id="javawscore-admin-tomcat-deploying" xreflabel="Deploying into Tomcat">
    <title>Deploying into Tomcat</title>
    &Java_WS_Core_Deploy_Tomcat_Frag;
 </section>

<section id="javawscore-admin-jboss-deploying" xreflabel="Deploying into JBoss">
    <title>Deploying into JBoss</title>
  &Java_WS_Core_Deploy_JBoss_Frag;
</section>

</section>
<section id="javawscore-admin-testing"><title>Testing</title>
  <para>To execute Java WS Core tests first ensure Ant is configured with JUnit (To install JUnit with Ant copy the junit.jar found in the JUnit distribution to the $ANT_HOME/lib directory).</para>
  <para>To execute the test do the following:</para>
<orderedlist>
          <listitem>
            <para>Start the standalone container with <computeroutput>-nosec</computeroutput> argument:
 <screen>
 $ cd $GLOBUS_LOCATION
 $ bin/globus-start-container -nosec</screen>
</para>
          </listitem>
          <listitem>
            <para>Run the interoperability tests:
 <screen>
 $ ant -f share/globus_wsrf_test/runtests.xml runServer \
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_interop.jar</screen>
</para>
          </listitem>
          <listitem>
            <para>Run the unit tests:
 <screen>
 $ ant -f share/globus_wsrf_test/runtests.xml runServer \
       -Dtests.jar=$GLOBUS_LOCATION/lib/wsrf_test_unit.jar -DbasicTestsOnly=true</screen>
</para>
          </listitem>
          <listitem>
            <para>If some tests failed examine the test results in the <computeroutput>$GLOBUS_LOCATION/share/globus_wsrf_test/tests/test-reports/</computeroutput> directory.</para>
          </listitem>

  </orderedlist>
  <para>
    Please see <link linkend="javawscore-developer-runningtests">the developer guide</link> for more information on running the tests and the testing infrastructure.
</para>
</section>

<section id="javawscore-admin-security_considerations"><title>Security Considerations </title>
&Java_WS_Core_Security_Considerations_Frag;
</section>

<section id="javawscore-admin-troubleshooting" xreflabel="Troubleshooting Java WS Core"><title>Troubleshooting</title>
  
  <section id="javawscore-admin-globusstop"><title><computeroutput>globus-stop-container</computeroutput> fails with an authorization error</title>
    <para>
By default <computeroutput>globus-stop-container</computeroutput> must be executed with the same credentials as the container it is running with. If the <emphasis>ShutdownService</emphasis> or the container is configured with separate private key and certificate files (usually <computeroutput>/etc/grid-security/containercert.pem</computeroutput> and <computeroutput>/etc/grid-security/containerkey.pem</computeroutput>) do the following to stop the container:
</para>
<screen>
 $ grid-proxy-init -cert /etc/grid-security/containercert.pem \
                   -key /etc/grid-security/containerkey.pem \
                   -out containerproxy.pem
 $ setenv X509_USER_PROXY containerproxy.pem
 $ globus-stop-container
 $ unsetenv X509_USER_PROXY
 $ rm containerproxy.pem
</screen>
<para>
  Alternatively, the <emphasis>ShutdownService</emphasis> can be configured with a separate gridmap file to allow a set of users to stop the container. Please see the <link linkend="security">WS Authentication &amp; Authorization</link> for details.
</para>
  </section>

  <section id="javawscore-admin-globusstart"><title><computeroutput>globus-start-container</computeroutput> hangs during startup</title>
    <para>
By default Sun 1.4.x+ JVMs are configured to use <computeroutput>/dev/random</computeroutput> device as an entropy source. Sometimes the machine can run out of entropy and applications (such as the container) using the <computeroutput>/dev/random</computeroutput> device will block until more entropy is available. One workaround for this issue is to configure the JVM to use <computeroutput>/dev/urandom</computeroutput> (non-blocking) device instead. For Sun JVMs a <computeroutput>java.security.egd</computeroutput> system property can be set to configure a different entropy source. To set the system property and pass it to <computeroutput>globus-start-container</computeroutput> script do the following:
</para>
<screen>
 export GLOBUS_OPTIONS=-Djava.security.egd=file:/dev/urandom
</screen>
<para>or</para>
<screen>
 setenv GLOBUS_OPTIONS -Djava.security.egd=file:/dev/urandom
</screen>
<para>
The same issue can also affect client programs. If you are running a client program with a GT generated script, you can set the <computeroutput>GLOBUS_OPTIONS</computeroutput> environment property as described above. However, if you are using a custom script or directly launching a program using the <computeroutput>java</computeroutput> command line, make sure to set the <computeroutput>java.security.egd</computeroutput> system property explicitly on the <computeroutput>java</computeroutput> command line. For example:
</para>
<screen>
 java -classpath $CLASSPATH -Djava.security.egd=file:/dev/urandom my.package.FooProgram
</screen>
<para>
<emphasis>Note:</emphasis> This does not apply to Windows machines.
</para>
  </section>

  <section><!--no ids if file used more than once id="javawscore-admin-tomcat-npe"--><title><computeroutput>ConcurrentModificationException</computeroutput> in Tomcat 5.0.x</title>

<para>
If the following exception is visible in the Tomcat logs at startup it might cause the <computeroutput>HTTPSValve</computeroutput> to fail:
</para>
<screen>java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:782)
	at java.util.HashMap$EntryIterator.next(HashMap.java:824)
	at java.util.HashMap.putAllForCreate(HashMap.java:424)
	at java.util.HashMap.clone(HashMap.java:656)
	at mx4j.server.DefaultMBeanRepository.clone(DefaultMBeanRepository.java:56)</screen>
<para>
The <computeroutput>HTTPSValve</computeroutput> might fail with the following exception:
</para>
<screen>java.lang.NullPointerException
	at org.apache.coyote.tomcat5.CoyoteRequest.setAttribute(CoyoteRequest.java:1472)
	at org.apache.coyote.tomcat5.CoyoteRequestFacade.setAttribute(CoyoteRequestFacade.java:351)
	at org.globus.tomcat.coyote.valves.HTTPSValve.expose(HTTPSValve.java:99)
</screen>
<para>
These exceptions will prevent the transport security to work properly in Tomcat.
</para><para>
This is a Tomcat bug. Keep restarting Tomcat until it starts without the <computeroutput>ConcurrentModificationException</computeroutput> or switch to a different version of Tomcat.
</para>
  </section>

<section id="s-javawscore-admin-socketexception">
  <title><computeroutput>java.net.SocketException: Invalid argument or cannot assign requested address</computeroutput></title>
  <para>
If you see the &quot;<computeroutput>java.net.SocketException: Invalid argument or cannot assign requested address</computeroutput>&quot; error in the container log or on the client side try setting the following property:
 </para>
<screen>
 $ export GLOBUS_OPTIONS=&quot;-Djava.net.preferIPv4Stack=true&quot;
</screen>
 <para></para>
</section>

  <section><title>GAR deploy/undeploy fails with &quot;container is running&quot; error</title>
  <para>A GAR file can only be deployed or undeployed locally while the container is off. However, GAR deployment/undeployment might still sometimes fail with this error even if the container is off. This usually happens if the container has crashed or was stopped improperly preventing the container from cleaning up its state files. To resolve this problem delete any files under the <computeroutput>$GLOBUS_LOCATION/var/state</computeroutput> directory and try to redeploy/reundeploy the GAR file again.
  </para>

  </section>

  <section id="javawscore-admin-troubleshooting-general"><title>General troubleshooting information</title>
&Java_WS_Core_Troubleshooting_Frag;
  </section>
  
</section>

<section><!--no ids if file used more than once id="javawscore-admin-usage"--><title>Usage statistics collection by the Globus Alliance</title>
&Java_WS_Core_Usage_Statistics_Frag;
</section>
