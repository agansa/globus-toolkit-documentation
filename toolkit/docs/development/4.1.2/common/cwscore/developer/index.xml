<title>GT 4.0 C WS Core : Developer's Guide</title>
<titleabbrev>Developer's Guide</titleabbrev>

<section id="s-cwscore-developer-introduction"><title>Introduction</title>
<para>The C WS-Core developer's guide provides information related to
writing and running web services and WSRF-enabled services in C.  It includes
tutorials walking the developer through creation of services, and clients to
interact with services.  It includes scenarios for possible configurations
that the developer may want.  It also provides references to APIs and their
documentation.</para>
</section>

<section id="s-cwscore-developer-beforeyoubegin">
<title>Before you begin</title>
  <section id="s-cwscore-developer-features"><title>Feature summary</title>
    &C_WS_Core_Feature_Summary_Frag;
  </section>
  
  <section id="s-cwscore-developer-platforms"><title>Tested platforms</title>
    &C_WS_Core_Platform_Summary_Frag;
      
  </section>
  
  <section id="s-cwscore-developer-compatibility"><title>Backward compatibility summary</title>
    &C_WS_Core_Compatibility_Summary_Frag;
    
    
  </section>
  
  <section id="s-cwscore-developer-dependencies"><title>Technology dependencies</title>
    &C_WS_Core_Dependencies_Summary_Frag;
    
    
  </section>
  
  <section id="s-cwscore-developer-security_considerations"><title>Security considerations </title>
    &C_WS_Core_Security_Considerations_Frag;
  </section>
  </section>

<section id="s-cwscore-developer-archdes"><title>Architecture and design overview</title>
<para>
<itemizedlist>
<listitem>
<ulink url="WSDLtoCBindings.pdf">Mapping WSDL to C Bindings</ulink> - describes how to use the C bindings generated from WSDL and XML schema.
</listitem>
<listitem><ulink url="C-GT4-WS-Design.pdf">Design of Web Services Architecture in C</ulink>
</listitem>
<listitem>
<ulink url="C-GT4-WSRF-Design.pdf">Design of WSRF in C</ulink>
</listitem>
</itemizedlist>
</para>
</section>

<section id="s-cwscore-developer-pubinterfaces"><title>Public interface</title>
<para>The semantics and syntax of the APIs and WSDL for the component, along with
  descriptions of domain-specific structured interface data, can be found in
  the <xref linkend="c-cwscore-Public_Interfaces">public interface guide</xref>.</para>
</section>

<section id="s-cwscore-developer-scenarios"><title>Usage scenarios </title>
<para>Here we provide some scenarios for using C WS-Core that aren't described
in the tutorials.
</para>

<section><title>Using Wildcards</title>
Both clients and services may need to create or parse instances of
<computeroutput>xsd_any</computeroutput> or 
<computeroutput>xsd_anyType</computeroutput>
types.  This is necessary when the XML schema defines a type that
includes the 
<computeroutput>xsd_any</computeroutput> or 
<computeroutput>xsd_anyType</computeroutput>
as a type for one of its elements, such as:
<screen>
  &lt;xsd:complexType name="TemporalType"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:any minOccurs="1" maxOccurs="1" processContents="lax" /&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="Temporal" type="tns:TemporalType"/>
</screen>
The content of an instance of
 <computeroutput>TemporalType</computeroutput>
is not restricted by the schema definition, and so must be handled
specially at runtime.  For serialization and deserialization
of wildcard elements, a special global variable of type 
<computeroutput>
globus_xsd_type_info_t
</computeroutput>
is associated with each type that can be set on the wildcard.
For example, if a user wanted an instance
of <computeroutput>TemporalType</computeroutput> to contain
an instance of an <computeroutput>xsd:dateTime</computeroutput>,
the <computeroutput>any</computeroutput>
field must be filled in properly.  The following bit of C code does this:
<screen>
time_t current;
TemporalType temp;
xsd_QName * element;
xsd_dateTime * time; /* this is just a struct tm */

...

result = TemporalType_init_contents(&amp;temp);
/* check result */

temp.any.any_info = &amp;xsd_dateTime_info;

result = xsd_dateTime_init(&amp;time);
/* check result */

current = time(NULL);

/* get the current time */
result = xsd_dateTime_copy_contents(
    time,
    (xsd_dateTime *)localtime(&amp;current));
/* check result */

temp.any.value = (void *)time;

result  = xsd_QName_init(&amp;element);
/* check result */

element->Namespace = globus_libc_strdup("http://temporal.com");
element->local = globus_libc_strdup("Time");

temp.any.element = element;

/* now we can serialize it */

result = TemporalType_serialize(
    &amp;Temporal_qname,
    temp,
    handle,
    0);
/* check result */
</screen>

This serializes the <computeroutput>TemporalType</computeroutput> to the
contain the current timestamp.  The resulting serialized elements would
look like this:
<screen>
&lt;time:Temporal xmlns:time="http://temporal.com"&gt;
&lt;time:Time&gt;Mon Apr 17 10:14:22 CDT 2005&lt;/time:Time&gt;
&lt;/time:Temporal&gt;
</screen>

If we want to serialize it to a string
of the current day of the week, we would do this:
<screen>
time_t current;
TemporalType temp;
xsd_QName * element;
xsd_string * day; /* this is just a pointer to char * */

...

result = TemporalType_init_contents(&amp;temp);
/* check result */

temp.any.any_info = &amp;xsd_string_info;

result = xsd_string_init_cstr(&amp;day, "Monday");
/* check result */

temp.any.value = (void *)day;

result  = xsd_QName_init(&amp;element);
/* check result */

element->Namespace = globus_libc_strdup("http://temporal.com");
element->local = globus_libc_strdup("Day");

temp.any.element = element;

/* now we can serialize it */

result = TemporalType_serialize(
    &amp;Temporal_qname,
    temp,
    handle,
    0);
/* check result */
</screen>
This allows us to serialize the temporal time element as the day of the week.
The resulting serialized elements for this code would look like this:
<screen>
&lt;time:Temporal xmlns:time="http://temporal.com"&gt;
&lt;time:Day&gt;Monday&lt;/time:Day&gt;
&lt;/time:Temporal&gt;
</screen>
So this allows us to inject types into wildcard elements at runtime, and
demonstrates how to serialize those wildcards.  

<para>
For deserialization of wildcard types, a registry is used to lookup
the actual type of the element based on QName or the xsi:type attribute.
The registry contains key/value pairs of QName to globus_xsd_type_info_t
structures.  These structures contain the appropriate information about
deserializing the type.
</para>
</section>

<section><title>Using Asynchronous client stubs</title>
A client may wish to perform many invocations of resource property requests
to different services (or the same service) at once, without waiting for
the response from one request before starting a second request.  The 
asynchronous client stubs generated for each operation allow the client
to do this.  The example code below shows the implementation of the callback
that gets called once the response from a resource property has been
received for the CounterService.
<screen>

typedef struct
{
    globus_cond_t cond;
    globus_mutex_t mutex;
} counter_monitor;

void
get_rp_counter_value_callback(
    CounterService_client_handle_t      handle,
    void *                              user_args,
    globus_result_t                     result,
    const wsrp_GetResourcePropertyResponseType *
                                        GetResourcePropertyResponse,
    CounterPortType_GetResourceProperty_fault_t
                                        fault_type,
    const xsd_any *                     fault)
{
    counter_monitor_t * monitor = (user_args);
    xsd_int * rp_value;

    if(GetResourcePropertyResponse->any.elements[0].any_info !=
       (&amp;Value_rp_info))
    {
        /* error - expected Value as the first (and only) resource
         * property
         */
    }

    rp_value = (xsd_int *)GetResourcePropertyResponse->any.elements[0].value;

    globus_mutex_lock(&amp;monitor->mutex);
    monitor->value = *rp_value;
    monitor->done = 1;
    globus_cond_signal(&amp;monitor->cond);
    globus_mutex_unlock(&amp;monitor->mutex);
}

...

counter_monitor_t * monitor;

monitor = globus_malloc(sizeof(counter_monitor_t));
/* check OOM */

globus_cond_init(&amp;monitor->cond, NULL);
globus_mutex_init(&amp;monitor->mutex, NULL);
monitor->done = 0;
monitor->value = 0;

result = CounterPortType_GetResourceProperty_epr_register(
    client_handle,
    createCounterResponse->EndpointReference,
    &amp;Value_rp_qname,
    get_rp_counter_value_callback,
    prop_monitor);
if(result != GLOBUS_SUCCESS)
{
   ...
}

/* do other processing */

globus_mutex_lock(&amp;monitor->mutex);
while(!monitor->done)
{
    globus_cond_wait(&amp;monitor->cond, &amp;monitor->mutex);

    /* do other processing */
}
globus_mutex_unlock(&amp;monitor->mutex);

</screen>
This allows us to do other processing while the GetResourceProperty operation
is invoked, and the response is returned.  For something as simple as
the CounterService, the wait for the callback to be called will most likely
be short (unless there is network delay).  For more complex services, the
delay may be longer, and the client may want to perform other processing
instead of just waiting.
</section>
</section>

<section id="s-cwscore-developer-tutorials"><title>Tutorials</title>

<section id="s-cwscore-developer-tutorials-Client"><title>Writing Clients for the BlogService</title>
&C_WS_Core_Tutorial_Client_Blogger;
</section>
<section id="s-cwscore-developer-tutorials-Service"><title>Implementing a Blog Service</title>
&C_WS_Core_Tutorial_Service_Blogger;
</section>
</section>


<section id="s-cwscore-developer-debugging"><title>Debugging</title>
<para>Besides the standard debugging tools avialable on your platform
for C programs, the C WS-Core has a number of environment variables that
can be set to debug or trace program execution of the service container.  
The useful environment variables that can be set are:
<itemizedlist>
<listitem><computeroutput>GLOBUS_SERVICE_ENGINE_DEBUG</computeroutput> - 
useful for tracing execution of the service engine.  The possible values 
this variable can have are:
<itemizedlist>
<listitem>DEBUG</listitem> - show debug messages about execution of the engine.
<listitem>INFO</listitem> - show information regarding service invocations.
<listitem>TRACE</listitem> - show entry and exit points of functions for the
service engine.
<listitem>ERROR</listitem> - show error occurring during service invocation.
<listitem>ALL</listitem> - all the above levels joined together.
</itemizedlist>
</listitem>
</itemizedlist>
</para>
</section>

<section id="s-cwscore-developer-troubleshooting"><title>Troubleshooting</title>
<para>This is a new component.  
If you're having trouble, please let us know!</para>
</section>

<section id="s-cwscore-developer-relateddocs"><title>Related Documentation</title>
<para>None at present.</para>
</section>
