From: "R Gaffaney \(via ANL\)" <gaffaney@mcs.anl.gov>
Date: August 2, 2004 9:51:52 AM MDT
To: <gt3-developers-internal@globus.org>
Cc: "Lee Liming" <liming@mcs.anl.gov>, <childers@mcs.anl.gov>
Subject: [gt3-developers-internal] Code Quality Tools and Guidelines

Greetings,
 
Many of you already make use of Code Quality tools. In the quest to improve the quality of Globus Toolkit Distributions It is likely that developers will be asked to use these tools to demonstrate Code Quality in a more formal way. The good news is that management recognizes that there are costs in dollars and time to acquire, learn and apply such tools.
 
The "Guidelines" part of the subject line is important, as Joe Bester pointed out, Tools have been thrown at developers in the past without clear directions or expectations. We need to rectify that. 
 
The questions are: which tools; when should they be used; and what are the expectations and guidelines for their use. Now is your opportunity to weigh in on this issue!  I spoke to many developers regarding their experiences with tools and have used that feedback in making some near term recommendations. The recommendations shouldn't be a surprise - they are mostly based on tools we presently use and have found effective. For the longer term we may want to unify Tools usage in a product that spans Java and C/C++ and most of the supported Toolkit platforms, including Windows. There is at least one Suite that appears to meet these requirements. 
 
"Tools" is a very general term for programs that do different things. Here are the classes of tools that I am aware of:
	• 	Compiler - The Compiler can be considered a Code Quality Tool in its generation of warnings. 
	• 	Source Code Checkers - Analyzes Source Code, (e.g. Lint). 
	• 	Profiler - Identifies performance bottlenecks. 
	• 	Memory Leak Detection - Identifies blocks of memory that are not freed. 
	• 	Bounds Checker - Detects invalid memory access such as touching deallocated memory or overrunning an array. 
	• 	Resource Issues - Detects the use of uninitialized resources or failure to release them. 
	• 	Thread Analyzer - Detects thread problems such as deadlocks and race conditions. 
	• 	Bug Pattern - Detects Java code patterns that may be errors (e.g. FindBugs). 
	• 	Code Complexity - Detects code that is overly complex.
Note that many "Test Suites" have modules that perform more than one of these functions. For the purposes of these tools we have four basic platforms: Linux C, Linux Java, Windows Java and Windows C. Some software runs on multiple platforms. Tools tend to be either "static" in that they run on source code or byte code without special compilation steps, or they "instrument" the code to implement their runtime data gathering capabilities. Valgrind is different in that it runs normally compiled code within a virtual machine to allow data gathering.
 
Based on conversations with developers, a review of the marketplace and my own experiences I would make the following suggestions - feel free to disagree:
	• 	Warnings -  When the C-based code is built under windows there are a significant number of warnings: unreferenced variables, signed/unsigned mismatch, possible loss of data due to type conversion, incompatible const qualifiers, pointer mismatch, etc. Warnings aren't useful when one gets used to ignoring them. Once developers agree on appropriate warning levels for gcc and windows, all code should be required without warnings. In those rare cases where avoiding a warning is not possible a #pragma should be used with an appropriate comment to disable that warning. 
	• 	JProbe should be run for Java-based code on both Windows and Linux Java Platforms. The Memory Debugger and Threadalyzer modules should be run. The Lab has one Linux and one Windows licenses for JProbe. These are node-locked licenses so they will be installed on machines and made available for remote access by developers. Analysis should be run be run by developers whenever significant changes are made, but must be done in advance of Toolkit Releases. 
	• 	Clover should be used for Code Coverage analysis of Unit Tests. Developers and Coordinators need to agree on a percent coverage requirement. Globus has a complimentary licenses to Clover by virtue of its Open Source status. We can install this as necessary for the developers to use it. Alternately we could use the JProbe coverage tool. 
	• 	Valgrind should be run on Linux C Code by developers whenever significant changes are made, but must be run in advance of Toolkit Releases. Valgrind is open source distribution and has a comprehensive suite of tools. The Memcheck, Massif and Helgrind analysis modules should be used. 
	• 	gcov should be run to determine Unit Test Code Coverage by developers when new code is written, buy must be run in advance of Toolkit Releases. Developers and Coordinators need to agree on a percent coverage requirement. 
	• 	DevPartner (or possibly PurifyPlus) should be acquired and used for Windows code. These tools come highly recommended by developers at Condor and pyGlobus and by yours truly who made extensive use of DevPartner in a previous life. Error Detection, Memory Analysis and Code Coverage modules must be run in advance of Releases. 
	• 	When requirements have been established a Tools Home Page should be created containing information on requirements, links to the tools and documentation and Globus specific directions for use. For efficiency, one developer who already knows a particular tool or is willing to blaze the trail should assume the responsibility of bringing others up to speed on that tool.
PurifyPlus is a very comprehensive package marketed by IBM that handles C, C++ and Java Applications and supports Linux, Unix and Windows platforms. It is possible that nearly all Code Quality analysis could be done using this single tool. PurifyPlus should be evaluated by DSL for C and Java Applications to determine if it should be used for Toolkit analysis.
 
Developers should be encouraged to use other tools as well according to specific needs. For example, there are excellent Profiling tools useful for analysis of Components where performance is critical. FindBugs is a tool recommended as useful for Java code by Jarek and others. Lint is a good early check for new code. Code Complexity analysis would be useful early in the development cycle of a module where architecture choices are being made.
 
There were other tools that folks I spoke with liked or had interest in, notably Insure++ and PurifyPlus. Some might prefer these over those recommended above.
 
There is additional information, comments and links below for those that are interested.
 
Thanks for reading. I look forward to comments.
 
Bob
 
 
*****************************************************
Notes on Tools:
 
JProbe Suite
A commercial package for Java Applications produced by Quest Software (www.quest.com/jprobe). It runs on Windows and Linux platforms and includes a Profiler, Memory Debugger, Thread Analyzer and Coverage module. The Lab has one Linux License and one Windows License, which need to be upgraded to the latest version. Free versions of the Profiler are available as are trial versions of the full package.
 
Insure++
A commercial package for C/C++ Applications produced by Parasoft (www.parasoft.com). It runs on Windows, Linux and many Unix platforms. It has a comprehensive suite of tools for memory and resource checking and a coverage module. Insure++ requires a special compilation step to produce instrumented code. The Lab has an Insure++ site license and it is available on the servers. Joe Link, Mike Link, Raj, Joe Bester and others used this package extensively. However, it was found that the latest release of Insure++ took a major step backward. Joe Link, Mike and Raj have since switched to Valgrind.
  
Valgrind
An Open Source package for C/C++ Applications (valgrind.kde.org) It runs on Linux platforms and has tools for Memory and Thread analysis. Instead of instrumenting the code it instead runs the applications in a Virtual Machine. Developers at DSL report that it is a very effective tool.
 
PurifyPlus
A commercial package for Java and C/C++ Applications produced by Rational and marketed by IBM (http://www-306.ibm.com/software/awdtools/purifyplus/sysreq/index.html)
It runs on Windows, Linux and many Unix platforms. It has a very comprehensive suite of tools . As far as I know the Lab does not own a license to PurifyPlus. Schuler was using an evaluation copy. PurifyPlus should definately be evaluated for use with the Toolkit
 
FindBugs
An Open Source package for Java Applications. It is called a "Bug Pattern Detector for Java" on the website (http://findbugs.sourceforge.net/). It runs on bytecode and requires no special build step. Jarek and others have used it and found it useful.
 
Clover
A commercial product for analyzing Java JUnit Test Coverage. It is produced by Cenqua (http://www.cenqua.com/clover/). It does require an special build step but produces excellent reports. Jarek, Ravi and others have used it. The Lab has a License for Clover.
 
DevPartneer
A commercial package for Windows C/C++ Code produced by Compuware (http://www.compuware.com/products/devpartner/studio.htm). Highly recommended by Todd Tannenbaum at Condor and Keith Jackson at pyGlobus.
 
gcov
An Open Source package associated with gcc for Linux Unit Test analysis. (http://gcc.gnu.org/onlinedocs/gcc-3.0/gcc_8.html)
 
McCabe QA
A commercial product for analysis of Code Complexity (http://www.mccabe.com/iq_qa.htm)
 
CMT Java
A commercial product for analysis of Code Complexity.  It is produced by Verifysoft (http://www.verifysoft.com/en_cmtjava.html) and can be used to analyze Java and C++ code. It works on Source Code and is therefore platform independent. It provides many interesting metrics and should be evaluated by DSL. It is a tool that would be used earlier in the development phase of modules as opposed to prior to Releases.
 
Others
There are many others I did not look at in any detail: ISA, another Code Complexity tool: (http://www.softwareautomation.com/index_e.htm);  eFence, a "malloc debugger"  http://www.die.net/doc/linux/man/man3/efence.3.html);  QProfile (http://www.die.net/doc/linux/man/man3/efence.3.html) and many more.

 

 
 
